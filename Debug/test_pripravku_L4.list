
test_pripravku_L4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000133d0  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000aec  08013590  08013590  00023590  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801407c  0801407c  00030218  2**0
                  CONTENTS
  4 .ARM          00000008  0801407c  0801407c  0002407c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014084  08014084  00030218  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014084  08014084  00024084  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08014088  08014088  00024088  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000218  20000000  0801408c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000106ac  20000218  080142a4  00030218  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200108c4  080142a4  000308c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030218  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023b9b  00000000  00000000  00030248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004255  00000000  00000000  00053de3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001cb8  00000000  00000000  00058038  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001af8  00000000  00000000  00059cf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000304f2  00000000  00000000  0005b7e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000201cf  00000000  00000000  0008bcda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00121a16  00000000  00000000  000abea9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001cd8bf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008fa8  00000000  00000000  001cd914  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000218 	.word	0x20000218
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08013578 	.word	0x08013578

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	2000021c 	.word	0x2000021c
 80001fc:	08013578 	.word	0x08013578

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b9a4 	b.w	8001018 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f83c 	bl	8000d54 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_d2lz>:
 8000ce8:	b538      	push	{r3, r4, r5, lr}
 8000cea:	2200      	movs	r2, #0
 8000cec:	2300      	movs	r3, #0
 8000cee:	4604      	mov	r4, r0
 8000cf0:	460d      	mov	r5, r1
 8000cf2:	f7ff ff0b 	bl	8000b0c <__aeabi_dcmplt>
 8000cf6:	b928      	cbnz	r0, 8000d04 <__aeabi_d2lz+0x1c>
 8000cf8:	4620      	mov	r0, r4
 8000cfa:	4629      	mov	r1, r5
 8000cfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d00:	f000 b80a 	b.w	8000d18 <__aeabi_d2ulz>
 8000d04:	4620      	mov	r0, r4
 8000d06:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d0a:	f000 f805 	bl	8000d18 <__aeabi_d2ulz>
 8000d0e:	4240      	negs	r0, r0
 8000d10:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d14:	bd38      	pop	{r3, r4, r5, pc}
 8000d16:	bf00      	nop

08000d18 <__aeabi_d2ulz>:
 8000d18:	b5d0      	push	{r4, r6, r7, lr}
 8000d1a:	4b0c      	ldr	r3, [pc, #48]	; (8000d4c <__aeabi_d2ulz+0x34>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	4606      	mov	r6, r0
 8000d20:	460f      	mov	r7, r1
 8000d22:	f7ff fc81 	bl	8000628 <__aeabi_dmul>
 8000d26:	f7ff ff57 	bl	8000bd8 <__aeabi_d2uiz>
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	f7ff fc02 	bl	8000534 <__aeabi_ui2d>
 8000d30:	4b07      	ldr	r3, [pc, #28]	; (8000d50 <__aeabi_d2ulz+0x38>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	f7ff fc78 	bl	8000628 <__aeabi_dmul>
 8000d38:	4602      	mov	r2, r0
 8000d3a:	460b      	mov	r3, r1
 8000d3c:	4630      	mov	r0, r6
 8000d3e:	4639      	mov	r1, r7
 8000d40:	f7ff faba 	bl	80002b8 <__aeabi_dsub>
 8000d44:	f7ff ff48 	bl	8000bd8 <__aeabi_d2uiz>
 8000d48:	4621      	mov	r1, r4
 8000d4a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d4c:	3df00000 	.word	0x3df00000
 8000d50:	41f00000 	.word	0x41f00000

08000d54 <__udivmoddi4>:
 8000d54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d58:	9d08      	ldr	r5, [sp, #32]
 8000d5a:	4604      	mov	r4, r0
 8000d5c:	468c      	mov	ip, r1
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	f040 8083 	bne.w	8000e6a <__udivmoddi4+0x116>
 8000d64:	428a      	cmp	r2, r1
 8000d66:	4617      	mov	r7, r2
 8000d68:	d947      	bls.n	8000dfa <__udivmoddi4+0xa6>
 8000d6a:	fab2 f282 	clz	r2, r2
 8000d6e:	b142      	cbz	r2, 8000d82 <__udivmoddi4+0x2e>
 8000d70:	f1c2 0020 	rsb	r0, r2, #32
 8000d74:	fa24 f000 	lsr.w	r0, r4, r0
 8000d78:	4091      	lsls	r1, r2
 8000d7a:	4097      	lsls	r7, r2
 8000d7c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d80:	4094      	lsls	r4, r2
 8000d82:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d86:	0c23      	lsrs	r3, r4, #16
 8000d88:	fbbc f6f8 	udiv	r6, ip, r8
 8000d8c:	fa1f fe87 	uxth.w	lr, r7
 8000d90:	fb08 c116 	mls	r1, r8, r6, ip
 8000d94:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d98:	fb06 f10e 	mul.w	r1, r6, lr
 8000d9c:	4299      	cmp	r1, r3
 8000d9e:	d909      	bls.n	8000db4 <__udivmoddi4+0x60>
 8000da0:	18fb      	adds	r3, r7, r3
 8000da2:	f106 30ff 	add.w	r0, r6, #4294967295
 8000da6:	f080 8119 	bcs.w	8000fdc <__udivmoddi4+0x288>
 8000daa:	4299      	cmp	r1, r3
 8000dac:	f240 8116 	bls.w	8000fdc <__udivmoddi4+0x288>
 8000db0:	3e02      	subs	r6, #2
 8000db2:	443b      	add	r3, r7
 8000db4:	1a5b      	subs	r3, r3, r1
 8000db6:	b2a4      	uxth	r4, r4
 8000db8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dbc:	fb08 3310 	mls	r3, r8, r0, r3
 8000dc0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dc4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dc8:	45a6      	cmp	lr, r4
 8000dca:	d909      	bls.n	8000de0 <__udivmoddi4+0x8c>
 8000dcc:	193c      	adds	r4, r7, r4
 8000dce:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dd2:	f080 8105 	bcs.w	8000fe0 <__udivmoddi4+0x28c>
 8000dd6:	45a6      	cmp	lr, r4
 8000dd8:	f240 8102 	bls.w	8000fe0 <__udivmoddi4+0x28c>
 8000ddc:	3802      	subs	r0, #2
 8000dde:	443c      	add	r4, r7
 8000de0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000de4:	eba4 040e 	sub.w	r4, r4, lr
 8000de8:	2600      	movs	r6, #0
 8000dea:	b11d      	cbz	r5, 8000df4 <__udivmoddi4+0xa0>
 8000dec:	40d4      	lsrs	r4, r2
 8000dee:	2300      	movs	r3, #0
 8000df0:	e9c5 4300 	strd	r4, r3, [r5]
 8000df4:	4631      	mov	r1, r6
 8000df6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dfa:	b902      	cbnz	r2, 8000dfe <__udivmoddi4+0xaa>
 8000dfc:	deff      	udf	#255	; 0xff
 8000dfe:	fab2 f282 	clz	r2, r2
 8000e02:	2a00      	cmp	r2, #0
 8000e04:	d150      	bne.n	8000ea8 <__udivmoddi4+0x154>
 8000e06:	1bcb      	subs	r3, r1, r7
 8000e08:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e0c:	fa1f f887 	uxth.w	r8, r7
 8000e10:	2601      	movs	r6, #1
 8000e12:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e16:	0c21      	lsrs	r1, r4, #16
 8000e18:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e1c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e20:	fb08 f30c 	mul.w	r3, r8, ip
 8000e24:	428b      	cmp	r3, r1
 8000e26:	d907      	bls.n	8000e38 <__udivmoddi4+0xe4>
 8000e28:	1879      	adds	r1, r7, r1
 8000e2a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e2e:	d202      	bcs.n	8000e36 <__udivmoddi4+0xe2>
 8000e30:	428b      	cmp	r3, r1
 8000e32:	f200 80e9 	bhi.w	8001008 <__udivmoddi4+0x2b4>
 8000e36:	4684      	mov	ip, r0
 8000e38:	1ac9      	subs	r1, r1, r3
 8000e3a:	b2a3      	uxth	r3, r4
 8000e3c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e40:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e44:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e48:	fb08 f800 	mul.w	r8, r8, r0
 8000e4c:	45a0      	cmp	r8, r4
 8000e4e:	d907      	bls.n	8000e60 <__udivmoddi4+0x10c>
 8000e50:	193c      	adds	r4, r7, r4
 8000e52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e56:	d202      	bcs.n	8000e5e <__udivmoddi4+0x10a>
 8000e58:	45a0      	cmp	r8, r4
 8000e5a:	f200 80d9 	bhi.w	8001010 <__udivmoddi4+0x2bc>
 8000e5e:	4618      	mov	r0, r3
 8000e60:	eba4 0408 	sub.w	r4, r4, r8
 8000e64:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e68:	e7bf      	b.n	8000dea <__udivmoddi4+0x96>
 8000e6a:	428b      	cmp	r3, r1
 8000e6c:	d909      	bls.n	8000e82 <__udivmoddi4+0x12e>
 8000e6e:	2d00      	cmp	r5, #0
 8000e70:	f000 80b1 	beq.w	8000fd6 <__udivmoddi4+0x282>
 8000e74:	2600      	movs	r6, #0
 8000e76:	e9c5 0100 	strd	r0, r1, [r5]
 8000e7a:	4630      	mov	r0, r6
 8000e7c:	4631      	mov	r1, r6
 8000e7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e82:	fab3 f683 	clz	r6, r3
 8000e86:	2e00      	cmp	r6, #0
 8000e88:	d14a      	bne.n	8000f20 <__udivmoddi4+0x1cc>
 8000e8a:	428b      	cmp	r3, r1
 8000e8c:	d302      	bcc.n	8000e94 <__udivmoddi4+0x140>
 8000e8e:	4282      	cmp	r2, r0
 8000e90:	f200 80b8 	bhi.w	8001004 <__udivmoddi4+0x2b0>
 8000e94:	1a84      	subs	r4, r0, r2
 8000e96:	eb61 0103 	sbc.w	r1, r1, r3
 8000e9a:	2001      	movs	r0, #1
 8000e9c:	468c      	mov	ip, r1
 8000e9e:	2d00      	cmp	r5, #0
 8000ea0:	d0a8      	beq.n	8000df4 <__udivmoddi4+0xa0>
 8000ea2:	e9c5 4c00 	strd	r4, ip, [r5]
 8000ea6:	e7a5      	b.n	8000df4 <__udivmoddi4+0xa0>
 8000ea8:	f1c2 0320 	rsb	r3, r2, #32
 8000eac:	fa20 f603 	lsr.w	r6, r0, r3
 8000eb0:	4097      	lsls	r7, r2
 8000eb2:	fa01 f002 	lsl.w	r0, r1, r2
 8000eb6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000eba:	40d9      	lsrs	r1, r3
 8000ebc:	4330      	orrs	r0, r6
 8000ebe:	0c03      	lsrs	r3, r0, #16
 8000ec0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ec4:	fa1f f887 	uxth.w	r8, r7
 8000ec8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000ecc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ed0:	fb06 f108 	mul.w	r1, r6, r8
 8000ed4:	4299      	cmp	r1, r3
 8000ed6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eda:	d909      	bls.n	8000ef0 <__udivmoddi4+0x19c>
 8000edc:	18fb      	adds	r3, r7, r3
 8000ede:	f106 3cff 	add.w	ip, r6, #4294967295
 8000ee2:	f080 808d 	bcs.w	8001000 <__udivmoddi4+0x2ac>
 8000ee6:	4299      	cmp	r1, r3
 8000ee8:	f240 808a 	bls.w	8001000 <__udivmoddi4+0x2ac>
 8000eec:	3e02      	subs	r6, #2
 8000eee:	443b      	add	r3, r7
 8000ef0:	1a5b      	subs	r3, r3, r1
 8000ef2:	b281      	uxth	r1, r0
 8000ef4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ef8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000efc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f00:	fb00 f308 	mul.w	r3, r0, r8
 8000f04:	428b      	cmp	r3, r1
 8000f06:	d907      	bls.n	8000f18 <__udivmoddi4+0x1c4>
 8000f08:	1879      	adds	r1, r7, r1
 8000f0a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f0e:	d273      	bcs.n	8000ff8 <__udivmoddi4+0x2a4>
 8000f10:	428b      	cmp	r3, r1
 8000f12:	d971      	bls.n	8000ff8 <__udivmoddi4+0x2a4>
 8000f14:	3802      	subs	r0, #2
 8000f16:	4439      	add	r1, r7
 8000f18:	1acb      	subs	r3, r1, r3
 8000f1a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f1e:	e778      	b.n	8000e12 <__udivmoddi4+0xbe>
 8000f20:	f1c6 0c20 	rsb	ip, r6, #32
 8000f24:	fa03 f406 	lsl.w	r4, r3, r6
 8000f28:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f2c:	431c      	orrs	r4, r3
 8000f2e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f32:	fa01 f306 	lsl.w	r3, r1, r6
 8000f36:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f3a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f3e:	431f      	orrs	r7, r3
 8000f40:	0c3b      	lsrs	r3, r7, #16
 8000f42:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f46:	fa1f f884 	uxth.w	r8, r4
 8000f4a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f4e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f52:	fb09 fa08 	mul.w	sl, r9, r8
 8000f56:	458a      	cmp	sl, r1
 8000f58:	fa02 f206 	lsl.w	r2, r2, r6
 8000f5c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f60:	d908      	bls.n	8000f74 <__udivmoddi4+0x220>
 8000f62:	1861      	adds	r1, r4, r1
 8000f64:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f68:	d248      	bcs.n	8000ffc <__udivmoddi4+0x2a8>
 8000f6a:	458a      	cmp	sl, r1
 8000f6c:	d946      	bls.n	8000ffc <__udivmoddi4+0x2a8>
 8000f6e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f72:	4421      	add	r1, r4
 8000f74:	eba1 010a 	sub.w	r1, r1, sl
 8000f78:	b2bf      	uxth	r7, r7
 8000f7a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f7e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f82:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f86:	fb00 f808 	mul.w	r8, r0, r8
 8000f8a:	45b8      	cmp	r8, r7
 8000f8c:	d907      	bls.n	8000f9e <__udivmoddi4+0x24a>
 8000f8e:	19e7      	adds	r7, r4, r7
 8000f90:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f94:	d22e      	bcs.n	8000ff4 <__udivmoddi4+0x2a0>
 8000f96:	45b8      	cmp	r8, r7
 8000f98:	d92c      	bls.n	8000ff4 <__udivmoddi4+0x2a0>
 8000f9a:	3802      	subs	r0, #2
 8000f9c:	4427      	add	r7, r4
 8000f9e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000fa2:	eba7 0708 	sub.w	r7, r7, r8
 8000fa6:	fba0 8902 	umull	r8, r9, r0, r2
 8000faa:	454f      	cmp	r7, r9
 8000fac:	46c6      	mov	lr, r8
 8000fae:	4649      	mov	r1, r9
 8000fb0:	d31a      	bcc.n	8000fe8 <__udivmoddi4+0x294>
 8000fb2:	d017      	beq.n	8000fe4 <__udivmoddi4+0x290>
 8000fb4:	b15d      	cbz	r5, 8000fce <__udivmoddi4+0x27a>
 8000fb6:	ebb3 020e 	subs.w	r2, r3, lr
 8000fba:	eb67 0701 	sbc.w	r7, r7, r1
 8000fbe:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fc2:	40f2      	lsrs	r2, r6
 8000fc4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fc8:	40f7      	lsrs	r7, r6
 8000fca:	e9c5 2700 	strd	r2, r7, [r5]
 8000fce:	2600      	movs	r6, #0
 8000fd0:	4631      	mov	r1, r6
 8000fd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fd6:	462e      	mov	r6, r5
 8000fd8:	4628      	mov	r0, r5
 8000fda:	e70b      	b.n	8000df4 <__udivmoddi4+0xa0>
 8000fdc:	4606      	mov	r6, r0
 8000fde:	e6e9      	b.n	8000db4 <__udivmoddi4+0x60>
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	e6fd      	b.n	8000de0 <__udivmoddi4+0x8c>
 8000fe4:	4543      	cmp	r3, r8
 8000fe6:	d2e5      	bcs.n	8000fb4 <__udivmoddi4+0x260>
 8000fe8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fec:	eb69 0104 	sbc.w	r1, r9, r4
 8000ff0:	3801      	subs	r0, #1
 8000ff2:	e7df      	b.n	8000fb4 <__udivmoddi4+0x260>
 8000ff4:	4608      	mov	r0, r1
 8000ff6:	e7d2      	b.n	8000f9e <__udivmoddi4+0x24a>
 8000ff8:	4660      	mov	r0, ip
 8000ffa:	e78d      	b.n	8000f18 <__udivmoddi4+0x1c4>
 8000ffc:	4681      	mov	r9, r0
 8000ffe:	e7b9      	b.n	8000f74 <__udivmoddi4+0x220>
 8001000:	4666      	mov	r6, ip
 8001002:	e775      	b.n	8000ef0 <__udivmoddi4+0x19c>
 8001004:	4630      	mov	r0, r6
 8001006:	e74a      	b.n	8000e9e <__udivmoddi4+0x14a>
 8001008:	f1ac 0c02 	sub.w	ip, ip, #2
 800100c:	4439      	add	r1, r7
 800100e:	e713      	b.n	8000e38 <__udivmoddi4+0xe4>
 8001010:	3802      	subs	r0, #2
 8001012:	443c      	add	r4, r7
 8001014:	e724      	b.n	8000e60 <__udivmoddi4+0x10c>
 8001016:	bf00      	nop

08001018 <__aeabi_idiv0>:
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop

0800101c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001022:	2300      	movs	r3, #0
 8001024:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001026:	2003      	movs	r0, #3
 8001028:	f001 fe58 	bl	8002cdc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800102c:	2000      	movs	r0, #0
 800102e:	f000 f80d 	bl	800104c <HAL_InitTick>
 8001032:	4603      	mov	r3, r0
 8001034:	2b00      	cmp	r3, #0
 8001036:	d002      	beq.n	800103e <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001038:	2301      	movs	r3, #1
 800103a:	71fb      	strb	r3, [r7, #7]
 800103c:	e001      	b.n	8001042 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800103e:	f00d f89d 	bl	800e17c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001042:	79fb      	ldrb	r3, [r7, #7]
}
 8001044:	4618      	mov	r0, r3
 8001046:	3708      	adds	r7, #8
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}

0800104c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b084      	sub	sp, #16
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001054:	2300      	movs	r3, #0
 8001056:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001058:	4b16      	ldr	r3, [pc, #88]	; (80010b4 <HAL_InitTick+0x68>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	2b00      	cmp	r3, #0
 800105e:	d022      	beq.n	80010a6 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001060:	4b15      	ldr	r3, [pc, #84]	; (80010b8 <HAL_InitTick+0x6c>)
 8001062:	681a      	ldr	r2, [r3, #0]
 8001064:	4b13      	ldr	r3, [pc, #76]	; (80010b4 <HAL_InitTick+0x68>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800106c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001070:	fbb2 f3f3 	udiv	r3, r2, r3
 8001074:	4618      	mov	r0, r3
 8001076:	f001 fe66 	bl	8002d46 <HAL_SYSTICK_Config>
 800107a:	4603      	mov	r3, r0
 800107c:	2b00      	cmp	r3, #0
 800107e:	d10f      	bne.n	80010a0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	2b0f      	cmp	r3, #15
 8001084:	d809      	bhi.n	800109a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001086:	2200      	movs	r2, #0
 8001088:	6879      	ldr	r1, [r7, #4]
 800108a:	f04f 30ff 	mov.w	r0, #4294967295
 800108e:	f001 fe30 	bl	8002cf2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001092:	4a0a      	ldr	r2, [pc, #40]	; (80010bc <HAL_InitTick+0x70>)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	6013      	str	r3, [r2, #0]
 8001098:	e007      	b.n	80010aa <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800109a:	2301      	movs	r3, #1
 800109c:	73fb      	strb	r3, [r7, #15]
 800109e:	e004      	b.n	80010aa <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80010a0:	2301      	movs	r3, #1
 80010a2:	73fb      	strb	r3, [r7, #15]
 80010a4:	e001      	b.n	80010aa <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80010a6:	2301      	movs	r3, #1
 80010a8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80010aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	3710      	adds	r7, #16
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	20000004 	.word	0x20000004
 80010b8:	20000040 	.word	0x20000040
 80010bc:	20000000 	.word	0x20000000

080010c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010c4:	4b05      	ldr	r3, [pc, #20]	; (80010dc <HAL_IncTick+0x1c>)
 80010c6:	681a      	ldr	r2, [r3, #0]
 80010c8:	4b05      	ldr	r3, [pc, #20]	; (80010e0 <HAL_IncTick+0x20>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4413      	add	r3, r2
 80010ce:	4a03      	ldr	r2, [pc, #12]	; (80010dc <HAL_IncTick+0x1c>)
 80010d0:	6013      	str	r3, [r2, #0]
}
 80010d2:	bf00      	nop
 80010d4:	46bd      	mov	sp, r7
 80010d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010da:	4770      	bx	lr
 80010dc:	20010380 	.word	0x20010380
 80010e0:	20000004 	.word	0x20000004

080010e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0
  return uwTick;
 80010e8:	4b03      	ldr	r3, [pc, #12]	; (80010f8 <HAL_GetTick+0x14>)
 80010ea:	681b      	ldr	r3, [r3, #0]
}
 80010ec:	4618      	mov	r0, r3
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr
 80010f6:	bf00      	nop
 80010f8:	20010380 	.word	0x20010380

080010fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b084      	sub	sp, #16
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001104:	f7ff ffee 	bl	80010e4 <HAL_GetTick>
 8001108:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001114:	d004      	beq.n	8001120 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001116:	4b09      	ldr	r3, [pc, #36]	; (800113c <HAL_Delay+0x40>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	68fa      	ldr	r2, [r7, #12]
 800111c:	4413      	add	r3, r2
 800111e:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001120:	bf00      	nop
 8001122:	f7ff ffdf 	bl	80010e4 <HAL_GetTick>
 8001126:	4602      	mov	r2, r0
 8001128:	68bb      	ldr	r3, [r7, #8]
 800112a:	1ad3      	subs	r3, r2, r3
 800112c:	68fa      	ldr	r2, [r7, #12]
 800112e:	429a      	cmp	r2, r3
 8001130:	d8f7      	bhi.n	8001122 <HAL_Delay+0x26>
  {
  }
}
 8001132:	bf00      	nop
 8001134:	bf00      	nop
 8001136:	3710      	adds	r7, #16
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}
 800113c:	20000004 	.word	0x20000004

08001140 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001140:	b480      	push	{r7}
 8001142:	b083      	sub	sp, #12
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
 8001148:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	689b      	ldr	r3, [r3, #8]
 800114e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	431a      	orrs	r2, r3
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	609a      	str	r2, [r3, #8]
}
 800115a:	bf00      	nop
 800115c:	370c      	adds	r7, #12
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr

08001166 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001166:	b480      	push	{r7}
 8001168:	b083      	sub	sp, #12
 800116a:	af00      	add	r7, sp, #0
 800116c:	6078      	str	r0, [r7, #4]
 800116e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	689b      	ldr	r3, [r3, #8]
 8001174:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	431a      	orrs	r2, r3
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	609a      	str	r2, [r3, #8]
}
 8001180:	bf00      	nop
 8001182:	370c      	adds	r7, #12
 8001184:	46bd      	mov	sp, r7
 8001186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118a:	4770      	bx	lr

0800118c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800118c:	b480      	push	{r7}
 800118e:	b083      	sub	sp, #12
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	689b      	ldr	r3, [r3, #8]
 8001198:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800119c:	4618      	mov	r0, r3
 800119e:	370c      	adds	r7, #12
 80011a0:	46bd      	mov	sp, r7
 80011a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a6:	4770      	bx	lr

080011a8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80011a8:	b490      	push	{r4, r7}
 80011aa:	b084      	sub	sp, #16
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	60f8      	str	r0, [r7, #12]
 80011b0:	60b9      	str	r1, [r7, #8]
 80011b2:	607a      	str	r2, [r7, #4]
 80011b4:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	3360      	adds	r3, #96	; 0x60
 80011ba:	461a      	mov	r2, r3
 80011bc:	68bb      	ldr	r3, [r7, #8]
 80011be:	009b      	lsls	r3, r3, #2
 80011c0:	4413      	add	r3, r2
 80011c2:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80011c4:	6822      	ldr	r2, [r4, #0]
 80011c6:	4b08      	ldr	r3, [pc, #32]	; (80011e8 <LL_ADC_SetOffset+0x40>)
 80011c8:	4013      	ands	r3, r2
 80011ca:	687a      	ldr	r2, [r7, #4]
 80011cc:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80011d0:	683a      	ldr	r2, [r7, #0]
 80011d2:	430a      	orrs	r2, r1
 80011d4:	4313      	orrs	r3, r2
 80011d6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80011da:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80011dc:	bf00      	nop
 80011de:	3710      	adds	r7, #16
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bc90      	pop	{r4, r7}
 80011e4:	4770      	bx	lr
 80011e6:	bf00      	nop
 80011e8:	03fff000 	.word	0x03fff000

080011ec <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80011ec:	b490      	push	{r4, r7}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
 80011f4:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	3360      	adds	r3, #96	; 0x60
 80011fa:	461a      	mov	r2, r3
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	009b      	lsls	r3, r3, #2
 8001200:	4413      	add	r3, r2
 8001202:	461c      	mov	r4, r3

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001204:	6823      	ldr	r3, [r4, #0]
 8001206:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800120a:	4618      	mov	r0, r3
 800120c:	3708      	adds	r7, #8
 800120e:	46bd      	mov	sp, r7
 8001210:	bc90      	pop	{r4, r7}
 8001212:	4770      	bx	lr

08001214 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001214:	b490      	push	{r4, r7}
 8001216:	b084      	sub	sp, #16
 8001218:	af00      	add	r7, sp, #0
 800121a:	60f8      	str	r0, [r7, #12]
 800121c:	60b9      	str	r1, [r7, #8]
 800121e:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	3360      	adds	r3, #96	; 0x60
 8001224:	461a      	mov	r2, r3
 8001226:	68bb      	ldr	r3, [r7, #8]
 8001228:	009b      	lsls	r3, r3, #2
 800122a:	4413      	add	r3, r2
 800122c:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800122e:	6823      	ldr	r3, [r4, #0]
 8001230:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	4313      	orrs	r3, r2
 8001238:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800123a:	bf00      	nop
 800123c:	3710      	adds	r7, #16
 800123e:	46bd      	mov	sp, r7
 8001240:	bc90      	pop	{r4, r7}
 8001242:	4770      	bx	lr

08001244 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001244:	b480      	push	{r7}
 8001246:	b083      	sub	sp, #12
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
 800124c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	695b      	ldr	r3, [r3, #20]
 8001252:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	431a      	orrs	r2, r3
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	615a      	str	r2, [r3, #20]
}
 800125e:	bf00      	nop
 8001260:	370c      	adds	r7, #12
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr

0800126a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800126a:	b480      	push	{r7}
 800126c:	b083      	sub	sp, #12
 800126e:	af00      	add	r7, sp, #0
 8001270:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	68db      	ldr	r3, [r3, #12]
 8001276:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800127a:	2b00      	cmp	r3, #0
 800127c:	d101      	bne.n	8001282 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800127e:	2301      	movs	r3, #1
 8001280:	e000      	b.n	8001284 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001282:	2300      	movs	r3, #0
}
 8001284:	4618      	mov	r0, r3
 8001286:	370c      	adds	r7, #12
 8001288:	46bd      	mov	sp, r7
 800128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128e:	4770      	bx	lr

08001290 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001290:	b490      	push	{r4, r7}
 8001292:	b084      	sub	sp, #16
 8001294:	af00      	add	r7, sp, #0
 8001296:	60f8      	str	r0, [r7, #12]
 8001298:	60b9      	str	r1, [r7, #8]
 800129a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	3330      	adds	r3, #48	; 0x30
 80012a0:	461a      	mov	r2, r3
 80012a2:	68bb      	ldr	r3, [r7, #8]
 80012a4:	0a1b      	lsrs	r3, r3, #8
 80012a6:	009b      	lsls	r3, r3, #2
 80012a8:	f003 030c 	and.w	r3, r3, #12
 80012ac:	4413      	add	r3, r2
 80012ae:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80012b0:	6822      	ldr	r2, [r4, #0]
 80012b2:	68bb      	ldr	r3, [r7, #8]
 80012b4:	f003 031f 	and.w	r3, r3, #31
 80012b8:	211f      	movs	r1, #31
 80012ba:	fa01 f303 	lsl.w	r3, r1, r3
 80012be:	43db      	mvns	r3, r3
 80012c0:	401a      	ands	r2, r3
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	0e9b      	lsrs	r3, r3, #26
 80012c6:	f003 011f 	and.w	r1, r3, #31
 80012ca:	68bb      	ldr	r3, [r7, #8]
 80012cc:	f003 031f 	and.w	r3, r3, #31
 80012d0:	fa01 f303 	lsl.w	r3, r1, r3
 80012d4:	4313      	orrs	r3, r2
 80012d6:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80012d8:	bf00      	nop
 80012da:	3710      	adds	r7, #16
 80012dc:	46bd      	mov	sp, r7
 80012de:	bc90      	pop	{r4, r7}
 80012e0:	4770      	bx	lr

080012e2 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80012e2:	b480      	push	{r7}
 80012e4:	b083      	sub	sp, #12
 80012e6:	af00      	add	r7, sp, #0
 80012e8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ee:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d101      	bne.n	80012fa <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80012f6:	2301      	movs	r3, #1
 80012f8:	e000      	b.n	80012fc <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80012fa:	2300      	movs	r3, #0
}
 80012fc:	4618      	mov	r0, r3
 80012fe:	370c      	adds	r7, #12
 8001300:	46bd      	mov	sp, r7
 8001302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001306:	4770      	bx	lr

08001308 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001308:	b490      	push	{r4, r7}
 800130a:	b084      	sub	sp, #16
 800130c:	af00      	add	r7, sp, #0
 800130e:	60f8      	str	r0, [r7, #12]
 8001310:	60b9      	str	r1, [r7, #8]
 8001312:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	3314      	adds	r3, #20
 8001318:	461a      	mov	r2, r3
 800131a:	68bb      	ldr	r3, [r7, #8]
 800131c:	0e5b      	lsrs	r3, r3, #25
 800131e:	009b      	lsls	r3, r3, #2
 8001320:	f003 0304 	and.w	r3, r3, #4
 8001324:	4413      	add	r3, r2
 8001326:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8001328:	6822      	ldr	r2, [r4, #0]
 800132a:	68bb      	ldr	r3, [r7, #8]
 800132c:	0d1b      	lsrs	r3, r3, #20
 800132e:	f003 031f 	and.w	r3, r3, #31
 8001332:	2107      	movs	r1, #7
 8001334:	fa01 f303 	lsl.w	r3, r1, r3
 8001338:	43db      	mvns	r3, r3
 800133a:	401a      	ands	r2, r3
 800133c:	68bb      	ldr	r3, [r7, #8]
 800133e:	0d1b      	lsrs	r3, r3, #20
 8001340:	f003 031f 	and.w	r3, r3, #31
 8001344:	6879      	ldr	r1, [r7, #4]
 8001346:	fa01 f303 	lsl.w	r3, r1, r3
 800134a:	4313      	orrs	r3, r2
 800134c:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800134e:	bf00      	nop
 8001350:	3710      	adds	r7, #16
 8001352:	46bd      	mov	sp, r7
 8001354:	bc90      	pop	{r4, r7}
 8001356:	4770      	bx	lr

08001358 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001358:	b480      	push	{r7}
 800135a:	b085      	sub	sp, #20
 800135c:	af00      	add	r7, sp, #0
 800135e:	60f8      	str	r0, [r7, #12]
 8001360:	60b9      	str	r1, [r7, #8]
 8001362:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800136a:	68bb      	ldr	r3, [r7, #8]
 800136c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001370:	43db      	mvns	r3, r3
 8001372:	401a      	ands	r2, r3
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	f003 0318 	and.w	r3, r3, #24
 800137a:	4908      	ldr	r1, [pc, #32]	; (800139c <LL_ADC_SetChannelSingleDiff+0x44>)
 800137c:	40d9      	lsrs	r1, r3
 800137e:	68bb      	ldr	r3, [r7, #8]
 8001380:	400b      	ands	r3, r1
 8001382:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001386:	431a      	orrs	r2, r3
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800138e:	bf00      	nop
 8001390:	3714      	adds	r7, #20
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr
 800139a:	bf00      	nop
 800139c:	0007ffff 	.word	0x0007ffff

080013a0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b083      	sub	sp, #12
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	689b      	ldr	r3, [r3, #8]
 80013ac:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80013b0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80013b4:	687a      	ldr	r2, [r7, #4]
 80013b6:	6093      	str	r3, [r2, #8]
}
 80013b8:	bf00      	nop
 80013ba:	370c      	adds	r7, #12
 80013bc:	46bd      	mov	sp, r7
 80013be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c2:	4770      	bx	lr

080013c4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b083      	sub	sp, #12
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	689b      	ldr	r3, [r3, #8]
 80013d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80013d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80013d8:	d101      	bne.n	80013de <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80013da:	2301      	movs	r3, #1
 80013dc:	e000      	b.n	80013e0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80013de:	2300      	movs	r3, #0
}
 80013e0:	4618      	mov	r0, r3
 80013e2:	370c      	adds	r7, #12
 80013e4:	46bd      	mov	sp, r7
 80013e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ea:	4770      	bx	lr

080013ec <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b083      	sub	sp, #12
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	689b      	ldr	r3, [r3, #8]
 80013f8:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80013fc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001400:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001408:	bf00      	nop
 800140a:	370c      	adds	r7, #12
 800140c:	46bd      	mov	sp, r7
 800140e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001412:	4770      	bx	lr

08001414 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001414:	b480      	push	{r7}
 8001416:	b083      	sub	sp, #12
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	689b      	ldr	r3, [r3, #8]
 8001420:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001424:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001428:	d101      	bne.n	800142e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800142a:	2301      	movs	r3, #1
 800142c:	e000      	b.n	8001430 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800142e:	2300      	movs	r3, #0
}
 8001430:	4618      	mov	r0, r3
 8001432:	370c      	adds	r7, #12
 8001434:	46bd      	mov	sp, r7
 8001436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143a:	4770      	bx	lr

0800143c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800143c:	b480      	push	{r7}
 800143e:	b083      	sub	sp, #12
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	689b      	ldr	r3, [r3, #8]
 8001448:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800144c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001450:	f043 0201 	orr.w	r2, r3, #1
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001458:	bf00      	nop
 800145a:	370c      	adds	r7, #12
 800145c:	46bd      	mov	sp, r7
 800145e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001462:	4770      	bx	lr

08001464 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001464:	b480      	push	{r7}
 8001466:	b083      	sub	sp, #12
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	689b      	ldr	r3, [r3, #8]
 8001470:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001474:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001478:	f043 0202 	orr.w	r2, r3, #2
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001480:	bf00      	nop
 8001482:	370c      	adds	r7, #12
 8001484:	46bd      	mov	sp, r7
 8001486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148a:	4770      	bx	lr

0800148c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800148c:	b480      	push	{r7}
 800148e:	b083      	sub	sp, #12
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	689b      	ldr	r3, [r3, #8]
 8001498:	f003 0301 	and.w	r3, r3, #1
 800149c:	2b01      	cmp	r3, #1
 800149e:	d101      	bne.n	80014a4 <LL_ADC_IsEnabled+0x18>
 80014a0:	2301      	movs	r3, #1
 80014a2:	e000      	b.n	80014a6 <LL_ADC_IsEnabled+0x1a>
 80014a4:	2300      	movs	r3, #0
}
 80014a6:	4618      	mov	r0, r3
 80014a8:	370c      	adds	r7, #12
 80014aa:	46bd      	mov	sp, r7
 80014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b0:	4770      	bx	lr

080014b2 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80014b2:	b480      	push	{r7}
 80014b4:	b083      	sub	sp, #12
 80014b6:	af00      	add	r7, sp, #0
 80014b8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	689b      	ldr	r3, [r3, #8]
 80014be:	f003 0302 	and.w	r3, r3, #2
 80014c2:	2b02      	cmp	r3, #2
 80014c4:	d101      	bne.n	80014ca <LL_ADC_IsDisableOngoing+0x18>
 80014c6:	2301      	movs	r3, #1
 80014c8:	e000      	b.n	80014cc <LL_ADC_IsDisableOngoing+0x1a>
 80014ca:	2300      	movs	r3, #0
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	370c      	adds	r7, #12
 80014d0:	46bd      	mov	sp, r7
 80014d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d6:	4770      	bx	lr

080014d8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80014d8:	b480      	push	{r7}
 80014da:	b083      	sub	sp, #12
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	689b      	ldr	r3, [r3, #8]
 80014e4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80014e8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80014ec:	f043 0204 	orr.w	r2, r3, #4
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80014f4:	bf00      	nop
 80014f6:	370c      	adds	r7, #12
 80014f8:	46bd      	mov	sp, r7
 80014fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fe:	4770      	bx	lr

08001500 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8001500:	b480      	push	{r7}
 8001502:	b083      	sub	sp, #12
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	689b      	ldr	r3, [r3, #8]
 800150c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001510:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001514:	f043 0210 	orr.w	r2, r3, #16
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 800151c:	bf00      	nop
 800151e:	370c      	adds	r7, #12
 8001520:	46bd      	mov	sp, r7
 8001522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001526:	4770      	bx	lr

08001528 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001528:	b480      	push	{r7}
 800152a:	b083      	sub	sp, #12
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	689b      	ldr	r3, [r3, #8]
 8001534:	f003 0304 	and.w	r3, r3, #4
 8001538:	2b04      	cmp	r3, #4
 800153a:	d101      	bne.n	8001540 <LL_ADC_REG_IsConversionOngoing+0x18>
 800153c:	2301      	movs	r3, #1
 800153e:	e000      	b.n	8001542 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001540:	2300      	movs	r3, #0
}
 8001542:	4618      	mov	r0, r3
 8001544:	370c      	adds	r7, #12
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr

0800154e <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 800154e:	b480      	push	{r7}
 8001550:	b083      	sub	sp, #12
 8001552:	af00      	add	r7, sp, #0
 8001554:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	689b      	ldr	r3, [r3, #8]
 800155a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800155e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001562:	f043 0220 	orr.w	r2, r3, #32
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 800156a:	bf00      	nop
 800156c:	370c      	adds	r7, #12
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr

08001576 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001576:	b480      	push	{r7}
 8001578:	b083      	sub	sp, #12
 800157a:	af00      	add	r7, sp, #0
 800157c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	689b      	ldr	r3, [r3, #8]
 8001582:	f003 0308 	and.w	r3, r3, #8
 8001586:	2b08      	cmp	r3, #8
 8001588:	d101      	bne.n	800158e <LL_ADC_INJ_IsConversionOngoing+0x18>
 800158a:	2301      	movs	r3, #1
 800158c:	e000      	b.n	8001590 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800158e:	2300      	movs	r3, #0
}
 8001590:	4618      	mov	r0, r3
 8001592:	370c      	adds	r7, #12
 8001594:	46bd      	mov	sp, r7
 8001596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159a:	4770      	bx	lr

0800159c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b088      	sub	sp, #32
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015a4:	2300      	movs	r3, #0
 80015a6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80015a8:	2300      	movs	r3, #0
 80015aa:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d101      	bne.n	80015b6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80015b2:	2301      	movs	r3, #1
 80015b4:	e12d      	b.n	8001812 <HAL_ADC_Init+0x276>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	691b      	ldr	r3, [r3, #16]
 80015ba:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d109      	bne.n	80015d8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80015c4:	6878      	ldr	r0, [r7, #4]
 80015c6:	f00c fdfd 	bl	800e1c4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	2200      	movs	r2, #0
 80015ce:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	2200      	movs	r2, #0
 80015d4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4618      	mov	r0, r3
 80015de:	f7ff fef1 	bl	80013c4 <LL_ADC_IsDeepPowerDownEnabled>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d004      	beq.n	80015f2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4618      	mov	r0, r3
 80015ee:	f7ff fed7 	bl	80013a0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4618      	mov	r0, r3
 80015f8:	f7ff ff0c 	bl	8001414 <LL_ADC_IsInternalRegulatorEnabled>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d113      	bne.n	800162a <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4618      	mov	r0, r3
 8001608:	f7ff fef0 	bl	80013ec <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 800160c:	4b83      	ldr	r3, [pc, #524]	; (800181c <HAL_ADC_Init+0x280>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	099b      	lsrs	r3, r3, #6
 8001612:	4a83      	ldr	r2, [pc, #524]	; (8001820 <HAL_ADC_Init+0x284>)
 8001614:	fba2 2303 	umull	r2, r3, r2, r3
 8001618:	099b      	lsrs	r3, r3, #6
 800161a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800161c:	e002      	b.n	8001624 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 800161e:	68bb      	ldr	r3, [r7, #8]
 8001620:	3b01      	subs	r3, #1
 8001622:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001624:	68bb      	ldr	r3, [r7, #8]
 8001626:	2b00      	cmp	r3, #0
 8001628:	d1f9      	bne.n	800161e <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4618      	mov	r0, r3
 8001630:	f7ff fef0 	bl	8001414 <LL_ADC_IsInternalRegulatorEnabled>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d10d      	bne.n	8001656 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800163e:	f043 0210 	orr.w	r2, r3, #16
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800164a:	f043 0201 	orr.w	r2, r3, #1
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001652:	2301      	movs	r3, #1
 8001654:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4618      	mov	r0, r3
 800165c:	f7ff ff64 	bl	8001528 <LL_ADC_REG_IsConversionOngoing>
 8001660:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001666:	f003 0310 	and.w	r3, r3, #16
 800166a:	2b00      	cmp	r3, #0
 800166c:	f040 80c8 	bne.w	8001800 <HAL_ADC_Init+0x264>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001670:	697b      	ldr	r3, [r7, #20]
 8001672:	2b00      	cmp	r3, #0
 8001674:	f040 80c4 	bne.w	8001800 <HAL_ADC_Init+0x264>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800167c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001680:	f043 0202 	orr.w	r2, r3, #2
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4618      	mov	r0, r3
 800168e:	f7ff fefd 	bl	800148c <LL_ADC_IsEnabled>
 8001692:	4603      	mov	r3, r0
 8001694:	2b00      	cmp	r3, #0
 8001696:	d10b      	bne.n	80016b0 <HAL_ADC_Init+0x114>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001698:	4862      	ldr	r0, [pc, #392]	; (8001824 <HAL_ADC_Init+0x288>)
 800169a:	f7ff fef7 	bl	800148c <LL_ADC_IsEnabled>
 800169e:	4603      	mov	r3, r0
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d105      	bne.n	80016b0 <HAL_ADC_Init+0x114>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	4619      	mov	r1, r3
 80016aa:	485f      	ldr	r0, [pc, #380]	; (8001828 <HAL_ADC_Init+0x28c>)
 80016ac:	f7ff fd48 	bl	8001140 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	7e5b      	ldrb	r3, [r3, #25]
 80016b4:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80016ba:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80016c0:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80016c6:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016ce:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80016d0:	4313      	orrs	r3, r2
 80016d2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016da:	2b01      	cmp	r3, #1
 80016dc:	d106      	bne.n	80016ec <HAL_ADC_Init+0x150>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016e2:	3b01      	subs	r3, #1
 80016e4:	045b      	lsls	r3, r3, #17
 80016e6:	69ba      	ldr	r2, [r7, #24]
 80016e8:	4313      	orrs	r3, r2
 80016ea:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d009      	beq.n	8001708 <HAL_ADC_Init+0x16c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016f8:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001700:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001702:	69ba      	ldr	r2, [r7, #24]
 8001704:	4313      	orrs	r3, r2
 8001706:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	68da      	ldr	r2, [r3, #12]
 800170e:	4b47      	ldr	r3, [pc, #284]	; (800182c <HAL_ADC_Init+0x290>)
 8001710:	4013      	ands	r3, r2
 8001712:	687a      	ldr	r2, [r7, #4]
 8001714:	6812      	ldr	r2, [r2, #0]
 8001716:	69b9      	ldr	r1, [r7, #24]
 8001718:	430b      	orrs	r3, r1
 800171a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4618      	mov	r0, r3
 8001722:	f7ff ff01 	bl	8001528 <LL_ADC_REG_IsConversionOngoing>
 8001726:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4618      	mov	r0, r3
 800172e:	f7ff ff22 	bl	8001576 <LL_ADC_INJ_IsConversionOngoing>
 8001732:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001734:	693b      	ldr	r3, [r7, #16]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d140      	bne.n	80017bc <HAL_ADC_Init+0x220>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	2b00      	cmp	r3, #0
 800173e:	d13d      	bne.n	80017bc <HAL_ADC_Init+0x220>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	7e1b      	ldrb	r3, [r3, #24]
 8001748:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800174a:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001752:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001754:	4313      	orrs	r3, r2
 8001756:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	68db      	ldr	r3, [r3, #12]
 800175e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001762:	f023 0306 	bic.w	r3, r3, #6
 8001766:	687a      	ldr	r2, [r7, #4]
 8001768:	6812      	ldr	r2, [r2, #0]
 800176a:	69b9      	ldr	r1, [r7, #24]
 800176c:	430b      	orrs	r3, r1
 800176e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001776:	2b01      	cmp	r3, #1
 8001778:	d118      	bne.n	80017ac <HAL_ADC_Init+0x210>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	691b      	ldr	r3, [r3, #16]
 8001780:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001784:	f023 0304 	bic.w	r3, r3, #4
 8001788:	687a      	ldr	r2, [r7, #4]
 800178a:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800178c:	687a      	ldr	r2, [r7, #4]
 800178e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001790:	4311      	orrs	r1, r2
 8001792:	687a      	ldr	r2, [r7, #4]
 8001794:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001796:	4311      	orrs	r1, r2
 8001798:	687a      	ldr	r2, [r7, #4]
 800179a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800179c:	430a      	orrs	r2, r1
 800179e:	431a      	orrs	r2, r3
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f042 0201 	orr.w	r2, r2, #1
 80017a8:	611a      	str	r2, [r3, #16]
 80017aa:	e007      	b.n	80017bc <HAL_ADC_Init+0x220>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	691a      	ldr	r2, [r3, #16]
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f022 0201 	bic.w	r2, r2, #1
 80017ba:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	691b      	ldr	r3, [r3, #16]
 80017c0:	2b01      	cmp	r3, #1
 80017c2:	d10c      	bne.n	80017de <HAL_ADC_Init+0x242>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ca:	f023 010f 	bic.w	r1, r3, #15
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	69db      	ldr	r3, [r3, #28]
 80017d2:	1e5a      	subs	r2, r3, #1
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	430a      	orrs	r2, r1
 80017da:	631a      	str	r2, [r3, #48]	; 0x30
 80017dc:	e007      	b.n	80017ee <HAL_ADC_Init+0x252>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f022 020f 	bic.w	r2, r2, #15
 80017ec:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017f2:	f023 0303 	bic.w	r3, r3, #3
 80017f6:	f043 0201 	orr.w	r2, r3, #1
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	659a      	str	r2, [r3, #88]	; 0x58
 80017fe:	e007      	b.n	8001810 <HAL_ADC_Init+0x274>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001804:	f043 0210 	orr.w	r2, r3, #16
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800180c:	2301      	movs	r3, #1
 800180e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001810:	7ffb      	ldrb	r3, [r7, #31]
}
 8001812:	4618      	mov	r0, r3
 8001814:	3720      	adds	r7, #32
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	20000040 	.word	0x20000040
 8001820:	053e2d63 	.word	0x053e2d63
 8001824:	50040000 	.word	0x50040000
 8001828:	50040300 	.word	0x50040300
 800182c:	fff0c007 	.word	0xfff0c007

08001830 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b084      	sub	sp, #16
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4618      	mov	r0, r3
 800183e:	f7ff fe73 	bl	8001528 <LL_ADC_REG_IsConversionOngoing>
 8001842:	4603      	mov	r3, r0
 8001844:	2b00      	cmp	r3, #0
 8001846:	d14f      	bne.n	80018e8 <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800184e:	2b01      	cmp	r3, #1
 8001850:	d101      	bne.n	8001856 <HAL_ADC_Start+0x26>
 8001852:	2302      	movs	r3, #2
 8001854:	e04b      	b.n	80018ee <HAL_ADC_Start+0xbe>
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	2201      	movs	r2, #1
 800185a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800185e:	6878      	ldr	r0, [r7, #4]
 8001860:	f000 fff4 	bl	800284c <ADC_Enable>
 8001864:	4603      	mov	r3, r0
 8001866:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001868:	7bfb      	ldrb	r3, [r7, #15]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d137      	bne.n	80018de <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001872:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001876:	f023 0301 	bic.w	r3, r3, #1
 800187a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	659a      	str	r2, [r3, #88]	; 0x58
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001886:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800188a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800188e:	d106      	bne.n	800189e <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001894:	f023 0206 	bic.w	r2, r3, #6
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	65da      	str	r2, [r3, #92]	; 0x5c
 800189c:	e002      	b.n	80018a4 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	2200      	movs	r2, #0
 80018a2:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	221c      	movs	r2, #28
 80018aa:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	2200      	movs	r2, #0
 80018b0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	68db      	ldr	r3, [r3, #12]
 80018ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d007      	beq.n	80018d2 <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018c6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80018ca:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4618      	mov	r0, r3
 80018d8:	f7ff fdfe 	bl	80014d8 <LL_ADC_REG_StartConversion>
 80018dc:	e006      	b.n	80018ec <HAL_ADC_Start+0xbc>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	2200      	movs	r2, #0
 80018e2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 80018e6:	e001      	b.n	80018ec <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80018e8:	2302      	movs	r3, #2
 80018ea:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 80018ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	3710      	adds	r7, #16
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}

080018f6 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80018f6:	b580      	push	{r7, lr}
 80018f8:	b084      	sub	sp, #16
 80018fa:	af00      	add	r7, sp, #0
 80018fc:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001904:	2b01      	cmp	r3, #1
 8001906:	d101      	bne.n	800190c <HAL_ADC_Stop+0x16>
 8001908:	2302      	movs	r3, #2
 800190a:	e023      	b.n	8001954 <HAL_ADC_Stop+0x5e>
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2201      	movs	r2, #1
 8001910:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8001914:	2103      	movs	r1, #3
 8001916:	6878      	ldr	r0, [r7, #4]
 8001918:	f000 fee4 	bl	80026e4 <ADC_ConversionStop>
 800191c:	4603      	mov	r3, r0
 800191e:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8001920:	7bfb      	ldrb	r3, [r7, #15]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d111      	bne.n	800194a <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8001926:	6878      	ldr	r0, [r7, #4]
 8001928:	f000 ffea 	bl	8002900 <ADC_Disable>
 800192c:	4603      	mov	r3, r0
 800192e:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8001930:	7bfb      	ldrb	r3, [r7, #15]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d109      	bne.n	800194a <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800193a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800193e:	f023 0301 	bic.w	r3, r3, #1
 8001942:	f043 0201 	orr.w	r2, r3, #1
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2200      	movs	r2, #0
 800194e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8001952:	7bfb      	ldrb	r3, [r7, #15]
}
 8001954:	4618      	mov	r0, r3
 8001956:	3710      	adds	r7, #16
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}

0800195c <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b086      	sub	sp, #24
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
 8001964:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	695b      	ldr	r3, [r3, #20]
 800196a:	2b08      	cmp	r3, #8
 800196c:	d102      	bne.n	8001974 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 800196e:	2308      	movs	r3, #8
 8001970:	617b      	str	r3, [r7, #20]
 8001972:	e010      	b.n	8001996 <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	68db      	ldr	r3, [r3, #12]
 800197a:	f003 0301 	and.w	r3, r3, #1
 800197e:	2b00      	cmp	r3, #0
 8001980:	d007      	beq.n	8001992 <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001986:	f043 0220 	orr.w	r2, r3, #32
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 800198e:	2301      	movs	r3, #1
 8001990:	e068      	b.n	8001a64 <HAL_ADC_PollForConversion+0x108>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 8001992:	2304      	movs	r3, #4
 8001994:	617b      	str	r3, [r7, #20]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001996:	f7ff fba5 	bl	80010e4 <HAL_GetTick>
 800199a:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800199c:	e01a      	b.n	80019d4 <HAL_ADC_PollForConversion+0x78>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019a4:	d016      	beq.n	80019d4 <HAL_ADC_PollForConversion+0x78>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80019a6:	f7ff fb9d 	bl	80010e4 <HAL_GetTick>
 80019aa:	4602      	mov	r2, r0
 80019ac:	693b      	ldr	r3, [r7, #16]
 80019ae:	1ad3      	subs	r3, r2, r3
 80019b0:	683a      	ldr	r2, [r7, #0]
 80019b2:	429a      	cmp	r2, r3
 80019b4:	d302      	bcc.n	80019bc <HAL_ADC_PollForConversion+0x60>
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d10b      	bne.n	80019d4 <HAL_ADC_PollForConversion+0x78>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019c0:	f043 0204 	orr.w	r2, r3, #4
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	659a      	str	r2, [r3, #88]	; 0x58

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2200      	movs	r2, #0
 80019cc:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        return HAL_TIMEOUT;
 80019d0:	2303      	movs	r3, #3
 80019d2:	e047      	b.n	8001a64 <HAL_ADC_PollForConversion+0x108>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	681a      	ldr	r2, [r3, #0]
 80019da:	697b      	ldr	r3, [r7, #20]
 80019dc:	4013      	ands	r3, r2
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d0dd      	beq.n	800199e <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019e6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4618      	mov	r0, r3
 80019f4:	f7ff fc39 	bl	800126a <LL_ADC_REG_IsTriggerSourceSWStart>
 80019f8:	4603      	mov	r3, r0
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d01c      	beq.n	8001a38 <HAL_ADC_PollForConversion+0xdc>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	7e5b      	ldrb	r3, [r3, #25]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d118      	bne.n	8001a38 <HAL_ADC_PollForConversion+0xdc>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f003 0308 	and.w	r3, r3, #8
 8001a10:	2b08      	cmp	r3, #8
 8001a12:	d111      	bne.n	8001a38 <HAL_ADC_PollForConversion+0xdc>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a18:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	659a      	str	r2, [r3, #88]	; 0x58

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a24:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d105      	bne.n	8001a38 <HAL_ADC_PollForConversion+0xdc>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a30:	f043 0201 	orr.w	r2, r3, #1
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	659a      	str	r2, [r3, #88]	; 0x58
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	68db      	ldr	r3, [r3, #12]
 8001a3e:	60fb      	str	r3, [r7, #12]
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	2b08      	cmp	r3, #8
 8001a44:	d104      	bne.n	8001a50 <HAL_ADC_PollForConversion+0xf4>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	2208      	movs	r2, #8
 8001a4c:	601a      	str	r2, [r3, #0]
 8001a4e:	e008      	b.n	8001a62 <HAL_ADC_PollForConversion+0x106>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d103      	bne.n	8001a62 <HAL_ADC_PollForConversion+0x106>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	220c      	movs	r2, #12
 8001a60:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8001a62:	2300      	movs	r3, #0
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	3718      	adds	r7, #24
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}

08001a6c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b086      	sub	sp, #24
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	60f8      	str	r0, [r7, #12]
 8001a74:	60b9      	str	r1, [r7, #8]
 8001a76:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f7ff fd53 	bl	8001528 <LL_ADC_REG_IsConversionOngoing>
 8001a82:	4603      	mov	r3, r0
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d167      	bne.n	8001b58 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001a8e:	2b01      	cmp	r3, #1
 8001a90:	d101      	bne.n	8001a96 <HAL_ADC_Start_DMA+0x2a>
 8001a92:	2302      	movs	r3, #2
 8001a94:	e063      	b.n	8001b5e <HAL_ADC_Start_DMA+0xf2>
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	2201      	movs	r2, #1
 8001a9a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001a9e:	68f8      	ldr	r0, [r7, #12]
 8001aa0:	f000 fed4 	bl	800284c <ADC_Enable>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001aa8:	7dfb      	ldrb	r3, [r7, #23]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d14f      	bne.n	8001b4e <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ab2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001ab6:	f023 0301 	bic.w	r3, r3, #1
 8001aba:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	659a      	str	r2, [r3, #88]	; 0x58
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ac6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d006      	beq.n	8001adc <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ad2:	f023 0206 	bic.w	r2, r3, #6
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	65da      	str	r2, [r3, #92]	; 0x5c
 8001ada:	e002      	b.n	8001ae2 <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	2200      	movs	r2, #0
 8001ae0:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ae6:	4a20      	ldr	r2, [pc, #128]	; (8001b68 <HAL_ADC_Start_DMA+0xfc>)
 8001ae8:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001aee:	4a1f      	ldr	r2, [pc, #124]	; (8001b6c <HAL_ADC_Start_DMA+0x100>)
 8001af0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001af6:	4a1e      	ldr	r2, [pc, #120]	; (8001b70 <HAL_ADC_Start_DMA+0x104>)
 8001af8:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	221c      	movs	r2, #28
 8001b00:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	2200      	movs	r2, #0
 8001b06:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	685a      	ldr	r2, [r3, #4]
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f042 0210 	orr.w	r2, r2, #16
 8001b18:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	68da      	ldr	r2, [r3, #12]
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f042 0201 	orr.w	r2, r2, #1
 8001b28:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	3340      	adds	r3, #64	; 0x40
 8001b34:	4619      	mov	r1, r3
 8001b36:	68ba      	ldr	r2, [r7, #8]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	f001 f9b9 	bl	8002eb0 <HAL_DMA_Start_IT>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4618      	mov	r0, r3
 8001b48:	f7ff fcc6 	bl	80014d8 <LL_ADC_REG_StartConversion>
 8001b4c:	e006      	b.n	8001b5c <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	2200      	movs	r2, #0
 8001b52:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8001b56:	e001      	b.n	8001b5c <HAL_ADC_Start_DMA+0xf0>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001b58:	2302      	movs	r3, #2
 8001b5a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001b5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	3718      	adds	r7, #24
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	080029b1 	.word	0x080029b1
 8001b6c:	08002a89 	.word	0x08002a89
 8001b70:	08002aa5 	.word	0x08002aa5

08001b74 <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b084      	sub	sp, #16
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001b82:	2b01      	cmp	r3, #1
 8001b84:	d101      	bne.n	8001b8a <HAL_ADC_Stop_DMA+0x16>
 8001b86:	2302      	movs	r3, #2
 8001b88:	e051      	b.n	8001c2e <HAL_ADC_Stop_DMA+0xba>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8001b92:	2103      	movs	r1, #3
 8001b94:	6878      	ldr	r0, [r7, #4]
 8001b96:	f000 fda5 	bl	80026e4 <ADC_ConversionStop>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8001b9e:	7bfb      	ldrb	r3, [r7, #15]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d13f      	bne.n	8001c24 <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	68da      	ldr	r2, [r3, #12]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f022 0201 	bic.w	r2, r2, #1
 8001bb2:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001bb8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001bbc:	b2db      	uxtb	r3, r3
 8001bbe:	2b02      	cmp	r3, #2
 8001bc0:	d10f      	bne.n	8001be2 <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f001 f9ed 	bl	8002fa6 <HAL_DMA_Abort>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8001bd0:	7bfb      	ldrb	r3, [r7, #15]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d005      	beq.n	8001be2 <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bda:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	659a      	str	r2, [r3, #88]	; 0x58
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	685a      	ldr	r2, [r3, #4]
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f022 0210 	bic.w	r2, r2, #16
 8001bf0:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 8001bf2:	7bfb      	ldrb	r3, [r7, #15]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d105      	bne.n	8001c04 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8001bf8:	6878      	ldr	r0, [r7, #4]
 8001bfa:	f000 fe81 	bl	8002900 <ADC_Disable>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	73fb      	strb	r3, [r7, #15]
 8001c02:	e002      	b.n	8001c0a <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 8001c04:	6878      	ldr	r0, [r7, #4]
 8001c06:	f000 fe7b 	bl	8002900 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8001c0a:	7bfb      	ldrb	r3, [r7, #15]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d109      	bne.n	8001c24 <HAL_ADC_Stop_DMA+0xb0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c14:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001c18:	f023 0301 	bic.w	r3, r3, #1
 8001c1c:	f043 0201 	orr.w	r2, r3, #1
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2200      	movs	r2, #0
 8001c28:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8001c2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	3710      	adds	r7, #16
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}

08001c36 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001c36:	b480      	push	{r7}
 8001c38:	b083      	sub	sp, #12
 8001c3a:	af00      	add	r7, sp, #0
 8001c3c:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001c44:	4618      	mov	r0, r3
 8001c46:	370c      	adds	r7, #12
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4e:	4770      	bx	lr

08001c50 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b088      	sub	sp, #32
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8001c58:	2300      	movs	r3, #0
 8001c5a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8001c6c:	69bb      	ldr	r3, [r7, #24]
 8001c6e:	f003 0302 	and.w	r3, r3, #2
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d017      	beq.n	8001ca6 <HAL_ADC_IRQHandler+0x56>
 8001c76:	697b      	ldr	r3, [r7, #20]
 8001c78:	f003 0302 	and.w	r3, r3, #2
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d012      	beq.n	8001ca6 <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c84:	f003 0310 	and.w	r3, r3, #16
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d105      	bne.n	8001c98 <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c90:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	659a      	str	r2, [r3, #88]	; 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8001c98:	6878      	ldr	r0, [r7, #4]
 8001c9a:	f000 ff45 	bl	8002b28 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	2202      	movs	r2, #2
 8001ca4:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001ca6:	69bb      	ldr	r3, [r7, #24]
 8001ca8:	f003 0304 	and.w	r3, r3, #4
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d004      	beq.n	8001cba <HAL_ADC_IRQHandler+0x6a>
 8001cb0:	697b      	ldr	r3, [r7, #20]
 8001cb2:	f003 0304 	and.w	r3, r3, #4
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d109      	bne.n	8001cce <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001cba:	69bb      	ldr	r3, [r7, #24]
 8001cbc:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d05e      	beq.n	8001d82 <HAL_ADC_IRQHandler+0x132>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	f003 0308 	and.w	r3, r3, #8
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d059      	beq.n	8001d82 <HAL_ADC_IRQHandler+0x132>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cd2:	f003 0310 	and.w	r3, r3, #16
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d105      	bne.n	8001ce6 <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cde:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4618      	mov	r0, r3
 8001cec:	f7ff fabd 	bl	800126a <LL_ADC_REG_IsTriggerSourceSWStart>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d03e      	beq.n	8001d74 <HAL_ADC_IRQHandler+0x124>
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
      }
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	68db      	ldr	r3, [r3, #12]
 8001cfc:	613b      	str	r3, [r7, #16]
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8001cfe:	693b      	ldr	r3, [r7, #16]
 8001d00:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d135      	bne.n	8001d74 <HAL_ADC_IRQHandler+0x124>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f003 0308 	and.w	r3, r3, #8
 8001d12:	2b08      	cmp	r3, #8
 8001d14:	d12e      	bne.n	8001d74 <HAL_ADC_IRQHandler+0x124>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f7ff fc04 	bl	8001528 <LL_ADC_REG_IsConversionOngoing>
 8001d20:	4603      	mov	r3, r0
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d11a      	bne.n	8001d5c <HAL_ADC_IRQHandler+0x10c>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	685a      	ldr	r2, [r3, #4]
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f022 020c 	bic.w	r2, r2, #12
 8001d34:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d3a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	659a      	str	r2, [r3, #88]	; 0x58

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d46:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d112      	bne.n	8001d74 <HAL_ADC_IRQHandler+0x124>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d52:	f043 0201 	orr.w	r2, r3, #1
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	659a      	str	r2, [r3, #88]	; 0x58
 8001d5a:	e00b      	b.n	8001d74 <HAL_ADC_IRQHandler+0x124>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d60:	f043 0210 	orr.w	r2, r3, #16
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d6c:	f043 0201 	orr.w	r2, r3, #1
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	65da      	str	r2, [r3, #92]	; 0x5c
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001d74:	6878      	ldr	r0, [r7, #4]
 8001d76:	f000 f91f 	bl	8001fb8 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	220c      	movs	r2, #12
 8001d80:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001d82:	69bb      	ldr	r3, [r7, #24]
 8001d84:	f003 0320 	and.w	r3, r3, #32
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d004      	beq.n	8001d96 <HAL_ADC_IRQHandler+0x146>
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	f003 0320 	and.w	r3, r3, #32
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d109      	bne.n	8001daa <HAL_ADC_IRQHandler+0x15a>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001d96:	69bb      	ldr	r3, [r7, #24]
 8001d98:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d072      	beq.n	8001e86 <HAL_ADC_IRQHandler+0x236>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d06d      	beq.n	8001e86 <HAL_ADC_IRQHandler+0x236>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dae:	f003 0310 	and.w	r3, r3, #16
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d105      	bne.n	8001dc2 <HAL_ADC_IRQHandler+0x172>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dba:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f7ff fa8b 	bl	80012e2 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8001dcc:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f7ff fa49 	bl	800126a <LL_ADC_REG_IsTriggerSourceSWStart>
 8001dd8:	60b8      	str	r0, [r7, #8]
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
    }
#else
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	68db      	ldr	r3, [r3, #12]
 8001de0:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d10c      	bne.n	8001e02 <HAL_ADC_IRQHandler+0x1b2>
        ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 8001de8:	693b      	ldr	r3, [r7, #16]
 8001dea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d142      	bne.n	8001e78 <HAL_ADC_IRQHandler+0x228>
        ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 8001df2:	68bb      	ldr	r3, [r7, #8]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d03f      	beq.n	8001e78 <HAL_ADC_IRQHandler+0x228>
         ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
          (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL))))
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d13a      	bne.n	8001e78 <HAL_ADC_IRQHandler+0x228>
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e0c:	2b40      	cmp	r3, #64	; 0x40
 8001e0e:	d133      	bne.n	8001e78 <HAL_ADC_IRQHandler+0x228>
        /* when the last context has been fully processed, JSQR is reset      */
        /* by the hardware. Even if no injected conversion is planned to come */
        /* (queue empty, triggers are ignored), it can start again            */
        /* immediately after setting a new context (JADSTART is still set).   */
        /* Therefore, state of HAL ADC injected group is kept to busy.        */
        if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8001e10:	693b      	ldr	r3, [r7, #16]
 8001e12:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d12e      	bne.n	8001e78 <HAL_ADC_IRQHandler+0x228>
        {
          /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
          /* JADSTART==0 (no conversion on going)                             */
          if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f7ff fba9 	bl	8001576 <LL_ADC_INJ_IsConversionOngoing>
 8001e24:	4603      	mov	r3, r0
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d11a      	bne.n	8001e60 <HAL_ADC_IRQHandler+0x210>
          {
            /* Disable ADC end of sequence conversion interrupt  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	685a      	ldr	r2, [r3, #4]
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001e38:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e3e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	659a      	str	r2, [r3, #88]	; 0x58

            if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d112      	bne.n	8001e78 <HAL_ADC_IRQHandler+0x228>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e56:	f043 0201 	orr.w	r2, r3, #1
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	659a      	str	r2, [r3, #88]	; 0x58
 8001e5e:	e00b      	b.n	8001e78 <HAL_ADC_IRQHandler+0x228>
            }
          }
          else
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e64:	f043 0210 	orr.w	r2, r3, #16
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e70:	f043 0201 	orr.w	r2, r3, #1
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	65da      	str	r2, [r3, #92]	; 0x5c
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001e78:	6878      	ldr	r0, [r7, #4]
 8001e7a:	f000 fe2d 	bl	8002ad8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	2260      	movs	r2, #96	; 0x60
 8001e84:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8001e86:	69bb      	ldr	r3, [r7, #24]
 8001e88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d011      	beq.n	8001eb4 <HAL_ADC_IRQHandler+0x264>
 8001e90:	697b      	ldr	r3, [r7, #20]
 8001e92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d00c      	beq.n	8001eb4 <HAL_ADC_IRQHandler+0x264>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e9e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001ea6:	6878      	ldr	r0, [r7, #4]
 8001ea8:	f000 f89a 	bl	8001fe0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	2280      	movs	r2, #128	; 0x80
 8001eb2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8001eb4:	69bb      	ldr	r3, [r7, #24]
 8001eb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d012      	beq.n	8001ee4 <HAL_ADC_IRQHandler+0x294>
 8001ebe:	697b      	ldr	r3, [r7, #20]
 8001ec0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d00d      	beq.n	8001ee4 <HAL_ADC_IRQHandler+0x294>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ecc:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8001ed4:	6878      	ldr	r0, [r7, #4]
 8001ed6:	f000 fe13 	bl	8002b00 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ee2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8001ee4:	69bb      	ldr	r3, [r7, #24]
 8001ee6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d012      	beq.n	8001f14 <HAL_ADC_IRQHandler+0x2c4>
 8001eee:	697b      	ldr	r3, [r7, #20]
 8001ef0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d00d      	beq.n	8001f14 <HAL_ADC_IRQHandler+0x2c4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001efc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8001f04:	6878      	ldr	r0, [r7, #4]
 8001f06:	f000 fe05 	bl	8002b14 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f12:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8001f14:	69bb      	ldr	r3, [r7, #24]
 8001f16:	f003 0310 	and.w	r3, r3, #16
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d02a      	beq.n	8001f74 <HAL_ADC_IRQHandler+0x324>
 8001f1e:	697b      	ldr	r3, [r7, #20]
 8001f20:	f003 0310 	and.w	r3, r3, #16
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d025      	beq.n	8001f74 <HAL_ADC_IRQHandler+0x324>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d102      	bne.n	8001f36 <HAL_ADC_IRQHandler+0x2e6>
    {
      overrun_error = 1UL;
 8001f30:	2301      	movs	r3, #1
 8001f32:	61fb      	str	r3, [r7, #28]
 8001f34:	e008      	b.n	8001f48 <HAL_ADC_IRQHandler+0x2f8>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	68db      	ldr	r3, [r3, #12]
 8001f3c:	f003 0301 	and.w	r3, r3, #1
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d001      	beq.n	8001f48 <HAL_ADC_IRQHandler+0x2f8>
        {
          overrun_error = 1UL;
 8001f44:	2301      	movs	r3, #1
 8001f46:	61fb      	str	r3, [r7, #28]
        }
      }
    }

    if (overrun_error == 1UL)
 8001f48:	69fb      	ldr	r3, [r7, #28]
 8001f4a:	2b01      	cmp	r3, #1
 8001f4c:	d10e      	bne.n	8001f6c <HAL_ADC_IRQHandler+0x31c>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f52:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f5e:	f043 0202 	orr.w	r2, r3, #2
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	65da      	str	r2, [r3, #92]	; 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001f66:	6878      	ldr	r0, [r7, #4]
 8001f68:	f000 f844 	bl	8001ff4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	2210      	movs	r2, #16
 8001f72:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8001f74:	69bb      	ldr	r3, [r7, #24]
 8001f76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d018      	beq.n	8001fb0 <HAL_ADC_IRQHandler+0x360>
 8001f7e:	697b      	ldr	r3, [r7, #20]
 8001f80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d013      	beq.n	8001fb0 <HAL_ADC_IRQHandler+0x360>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f8c:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f98:	f043 0208 	orr.w	r2, r3, #8
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001fa8:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8001faa:	6878      	ldr	r0, [r7, #4]
 8001fac:	f000 fd9e 	bl	8002aec <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8001fb0:	bf00      	nop
 8001fb2:	3720      	adds	r7, #32
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}

08001fb8 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b083      	sub	sp, #12
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001fc0:	bf00      	nop
 8001fc2:	370c      	adds	r7, #12
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fca:	4770      	bx	lr

08001fcc <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b083      	sub	sp, #12
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001fd4:	bf00      	nop
 8001fd6:	370c      	adds	r7, #12
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fde:	4770      	bx	lr

08001fe0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b083      	sub	sp, #12
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001fe8:	bf00      	nop
 8001fea:	370c      	adds	r7, #12
 8001fec:	46bd      	mov	sp, r7
 8001fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff2:	4770      	bx	lr

08001ff4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b083      	sub	sp, #12
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001ffc:	bf00      	nop
 8001ffe:	370c      	adds	r7, #12
 8002000:	46bd      	mov	sp, r7
 8002002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002006:	4770      	bx	lr

08002008 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b0a6      	sub	sp, #152	; 0x98
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
 8002010:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002012:	2300      	movs	r3, #0
 8002014:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002018:	2300      	movs	r3, #0
 800201a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002022:	2b01      	cmp	r3, #1
 8002024:	d101      	bne.n	800202a <HAL_ADC_ConfigChannel+0x22>
 8002026:	2302      	movs	r3, #2
 8002028:	e352      	b.n	80026d0 <HAL_ADC_ConfigChannel+0x6c8>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2201      	movs	r2, #1
 800202e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4618      	mov	r0, r3
 8002038:	f7ff fa76 	bl	8001528 <LL_ADC_REG_IsConversionOngoing>
 800203c:	4603      	mov	r3, r0
 800203e:	2b00      	cmp	r3, #0
 8002040:	f040 8337 	bne.w	80026b2 <HAL_ADC_ConfigChannel+0x6aa>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	2b05      	cmp	r3, #5
 800204a:	d824      	bhi.n	8002096 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	3b02      	subs	r3, #2
 8002052:	2b03      	cmp	r3, #3
 8002054:	d81b      	bhi.n	800208e <HAL_ADC_ConfigChannel+0x86>
 8002056:	a201      	add	r2, pc, #4	; (adr r2, 800205c <HAL_ADC_ConfigChannel+0x54>)
 8002058:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800205c:	0800206d 	.word	0x0800206d
 8002060:	08002075 	.word	0x08002075
 8002064:	0800207d 	.word	0x0800207d
 8002068:	08002085 	.word	0x08002085
      {
        case 2U: sConfig->Rank = ADC_REGULAR_RANK_2; break;
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	220c      	movs	r2, #12
 8002070:	605a      	str	r2, [r3, #4]
 8002072:	e011      	b.n	8002098 <HAL_ADC_ConfigChannel+0x90>
        case 3U: sConfig->Rank = ADC_REGULAR_RANK_3; break;
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	2212      	movs	r2, #18
 8002078:	605a      	str	r2, [r3, #4]
 800207a:	e00d      	b.n	8002098 <HAL_ADC_ConfigChannel+0x90>
        case 4U: sConfig->Rank = ADC_REGULAR_RANK_4; break;
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	2218      	movs	r2, #24
 8002080:	605a      	str	r2, [r3, #4]
 8002082:	e009      	b.n	8002098 <HAL_ADC_ConfigChannel+0x90>
        case 5U: sConfig->Rank = ADC_REGULAR_RANK_5; break;
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	f44f 7280 	mov.w	r2, #256	; 0x100
 800208a:	605a      	str	r2, [r3, #4]
 800208c:	e004      	b.n	8002098 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default: sConfig->Rank = ADC_REGULAR_RANK_1; break;
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	2206      	movs	r2, #6
 8002092:	605a      	str	r2, [r3, #4]
 8002094:	e000      	b.n	8002098 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8002096:	bf00      	nop
    #endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6818      	ldr	r0, [r3, #0]
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	6859      	ldr	r1, [r3, #4]
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	461a      	mov	r2, r3
 80020a6:	f7ff f8f3 	bl	8001290 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4618      	mov	r0, r3
 80020b0:	f7ff fa3a 	bl	8001528 <LL_ADC_REG_IsConversionOngoing>
 80020b4:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4618      	mov	r0, r3
 80020be:	f7ff fa5a 	bl	8001576 <LL_ADC_INJ_IsConversionOngoing>
 80020c2:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80020c6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	f040 8163 	bne.w	8002396 <HAL_ADC_ConfigChannel+0x38e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80020d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	f040 815e 	bne.w	8002396 <HAL_ADC_ConfigChannel+0x38e>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	689b      	ldr	r3, [r3, #8]
 80020de:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80020e2:	d10f      	bne.n	8002104 <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6818      	ldr	r0, [r3, #0]
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	2200      	movs	r2, #0
 80020ee:	4619      	mov	r1, r3
 80020f0:	f7ff f90a 	bl	8001308 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80020fc:	4618      	mov	r0, r3
 80020fe:	f7ff f8a1 	bl	8001244 <LL_ADC_SetSamplingTimeCommonConfig>
 8002102:	e00e      	b.n	8002122 <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6818      	ldr	r0, [r3, #0]
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	6819      	ldr	r1, [r3, #0]
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	689b      	ldr	r3, [r3, #8]
 8002110:	461a      	mov	r2, r3
 8002112:	f7ff f8f9 	bl	8001308 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	2100      	movs	r1, #0
 800211c:	4618      	mov	r0, r3
 800211e:	f7ff f891 	bl	8001244 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	695a      	ldr	r2, [r3, #20]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	68db      	ldr	r3, [r3, #12]
 800212c:	08db      	lsrs	r3, r3, #3
 800212e:	f003 0303 	and.w	r3, r3, #3
 8002132:	005b      	lsls	r3, r3, #1
 8002134:	fa02 f303 	lsl.w	r3, r2, r3
 8002138:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	691b      	ldr	r3, [r3, #16]
 8002140:	2b04      	cmp	r3, #4
 8002142:	d00a      	beq.n	800215a <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6818      	ldr	r0, [r3, #0]
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	6919      	ldr	r1, [r3, #16]
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	681a      	ldr	r2, [r3, #0]
 8002150:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002154:	f7ff f828 	bl	80011a8 <LL_ADC_SetOffset>
 8002158:	e11d      	b.n	8002396 <HAL_ADC_ConfigChannel+0x38e>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	2100      	movs	r1, #0
 8002160:	4618      	mov	r0, r3
 8002162:	f7ff f843 	bl	80011ec <LL_ADC_GetOffsetChannel>
 8002166:	4603      	mov	r3, r0
 8002168:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800216c:	2b00      	cmp	r3, #0
 800216e:	d10a      	bne.n	8002186 <HAL_ADC_ConfigChannel+0x17e>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	2100      	movs	r1, #0
 8002176:	4618      	mov	r0, r3
 8002178:	f7ff f838 	bl	80011ec <LL_ADC_GetOffsetChannel>
 800217c:	4603      	mov	r3, r0
 800217e:	0e9b      	lsrs	r3, r3, #26
 8002180:	f003 021f 	and.w	r2, r3, #31
 8002184:	e012      	b.n	80021ac <HAL_ADC_ConfigChannel+0x1a4>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	2100      	movs	r1, #0
 800218c:	4618      	mov	r0, r3
 800218e:	f7ff f82d 	bl	80011ec <LL_ADC_GetOffsetChannel>
 8002192:	4603      	mov	r3, r0
 8002194:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002198:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800219c:	fa93 f3a3 	rbit	r3, r3
 80021a0:	67fb      	str	r3, [r7, #124]	; 0x7c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80021a2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80021a4:	fab3 f383 	clz	r3, r3
 80021a8:	b2db      	uxtb	r3, r3
 80021aa:	461a      	mov	r2, r3
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d105      	bne.n	80021c4 <HAL_ADC_ConfigChannel+0x1bc>
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	0e9b      	lsrs	r3, r3, #26
 80021be:	f003 031f 	and.w	r3, r3, #31
 80021c2:	e00a      	b.n	80021da <HAL_ADC_ConfigChannel+0x1d2>
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	67bb      	str	r3, [r7, #120]	; 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80021cc:	fa93 f3a3 	rbit	r3, r3
 80021d0:	677b      	str	r3, [r7, #116]	; 0x74
  return result;
 80021d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80021d4:	fab3 f383 	clz	r3, r3
 80021d8:	b2db      	uxtb	r3, r3
 80021da:	429a      	cmp	r2, r3
 80021dc:	d106      	bne.n	80021ec <HAL_ADC_ConfigChannel+0x1e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	2200      	movs	r2, #0
 80021e4:	2100      	movs	r1, #0
 80021e6:	4618      	mov	r0, r3
 80021e8:	f7ff f814 	bl	8001214 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	2101      	movs	r1, #1
 80021f2:	4618      	mov	r0, r3
 80021f4:	f7fe fffa 	bl	80011ec <LL_ADC_GetOffsetChannel>
 80021f8:	4603      	mov	r3, r0
 80021fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d10a      	bne.n	8002218 <HAL_ADC_ConfigChannel+0x210>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	2101      	movs	r1, #1
 8002208:	4618      	mov	r0, r3
 800220a:	f7fe ffef 	bl	80011ec <LL_ADC_GetOffsetChannel>
 800220e:	4603      	mov	r3, r0
 8002210:	0e9b      	lsrs	r3, r3, #26
 8002212:	f003 021f 	and.w	r2, r3, #31
 8002216:	e010      	b.n	800223a <HAL_ADC_ConfigChannel+0x232>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	2101      	movs	r1, #1
 800221e:	4618      	mov	r0, r3
 8002220:	f7fe ffe4 	bl	80011ec <LL_ADC_GetOffsetChannel>
 8002224:	4603      	mov	r3, r0
 8002226:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002228:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800222a:	fa93 f3a3 	rbit	r3, r3
 800222e:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002230:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002232:	fab3 f383 	clz	r3, r3
 8002236:	b2db      	uxtb	r3, r3
 8002238:	461a      	mov	r2, r3
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002242:	2b00      	cmp	r3, #0
 8002244:	d105      	bne.n	8002252 <HAL_ADC_ConfigChannel+0x24a>
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	0e9b      	lsrs	r3, r3, #26
 800224c:	f003 031f 	and.w	r3, r3, #31
 8002250:	e00a      	b.n	8002268 <HAL_ADC_ConfigChannel+0x260>
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002258:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800225a:	fa93 f3a3 	rbit	r3, r3
 800225e:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002260:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002262:	fab3 f383 	clz	r3, r3
 8002266:	b2db      	uxtb	r3, r3
 8002268:	429a      	cmp	r2, r3
 800226a:	d106      	bne.n	800227a <HAL_ADC_ConfigChannel+0x272>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	2200      	movs	r2, #0
 8002272:	2101      	movs	r1, #1
 8002274:	4618      	mov	r0, r3
 8002276:	f7fe ffcd 	bl	8001214 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	2102      	movs	r1, #2
 8002280:	4618      	mov	r0, r3
 8002282:	f7fe ffb3 	bl	80011ec <LL_ADC_GetOffsetChannel>
 8002286:	4603      	mov	r3, r0
 8002288:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800228c:	2b00      	cmp	r3, #0
 800228e:	d10a      	bne.n	80022a6 <HAL_ADC_ConfigChannel+0x29e>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	2102      	movs	r1, #2
 8002296:	4618      	mov	r0, r3
 8002298:	f7fe ffa8 	bl	80011ec <LL_ADC_GetOffsetChannel>
 800229c:	4603      	mov	r3, r0
 800229e:	0e9b      	lsrs	r3, r3, #26
 80022a0:	f003 021f 	and.w	r2, r3, #31
 80022a4:	e010      	b.n	80022c8 <HAL_ADC_ConfigChannel+0x2c0>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	2102      	movs	r1, #2
 80022ac:	4618      	mov	r0, r3
 80022ae:	f7fe ff9d 	bl	80011ec <LL_ADC_GetOffsetChannel>
 80022b2:	4603      	mov	r3, r0
 80022b4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80022b8:	fa93 f3a3 	rbit	r3, r3
 80022bc:	65fb      	str	r3, [r7, #92]	; 0x5c
  return result;
 80022be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80022c0:	fab3 f383 	clz	r3, r3
 80022c4:	b2db      	uxtb	r3, r3
 80022c6:	461a      	mov	r2, r3
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d105      	bne.n	80022e0 <HAL_ADC_ConfigChannel+0x2d8>
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	0e9b      	lsrs	r3, r3, #26
 80022da:	f003 031f 	and.w	r3, r3, #31
 80022de:	e00a      	b.n	80022f6 <HAL_ADC_ConfigChannel+0x2ee>
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022e6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80022e8:	fa93 f3a3 	rbit	r3, r3
 80022ec:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80022ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80022f0:	fab3 f383 	clz	r3, r3
 80022f4:	b2db      	uxtb	r3, r3
 80022f6:	429a      	cmp	r2, r3
 80022f8:	d106      	bne.n	8002308 <HAL_ADC_ConfigChannel+0x300>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	2200      	movs	r2, #0
 8002300:	2102      	movs	r1, #2
 8002302:	4618      	mov	r0, r3
 8002304:	f7fe ff86 	bl	8001214 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	2103      	movs	r1, #3
 800230e:	4618      	mov	r0, r3
 8002310:	f7fe ff6c 	bl	80011ec <LL_ADC_GetOffsetChannel>
 8002314:	4603      	mov	r3, r0
 8002316:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800231a:	2b00      	cmp	r3, #0
 800231c:	d10a      	bne.n	8002334 <HAL_ADC_ConfigChannel+0x32c>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	2103      	movs	r1, #3
 8002324:	4618      	mov	r0, r3
 8002326:	f7fe ff61 	bl	80011ec <LL_ADC_GetOffsetChannel>
 800232a:	4603      	mov	r3, r0
 800232c:	0e9b      	lsrs	r3, r3, #26
 800232e:	f003 021f 	and.w	r2, r3, #31
 8002332:	e010      	b.n	8002356 <HAL_ADC_ConfigChannel+0x34e>
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	2103      	movs	r1, #3
 800233a:	4618      	mov	r0, r3
 800233c:	f7fe ff56 	bl	80011ec <LL_ADC_GetOffsetChannel>
 8002340:	4603      	mov	r3, r0
 8002342:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002344:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002346:	fa93 f3a3 	rbit	r3, r3
 800234a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800234c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800234e:	fab3 f383 	clz	r3, r3
 8002352:	b2db      	uxtb	r3, r3
 8002354:	461a      	mov	r2, r3
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800235e:	2b00      	cmp	r3, #0
 8002360:	d105      	bne.n	800236e <HAL_ADC_ConfigChannel+0x366>
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	0e9b      	lsrs	r3, r3, #26
 8002368:	f003 031f 	and.w	r3, r3, #31
 800236c:	e00a      	b.n	8002384 <HAL_ADC_ConfigChannel+0x37c>
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002374:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002376:	fa93 f3a3 	rbit	r3, r3
 800237a:	647b      	str	r3, [r7, #68]	; 0x44
  return result;
 800237c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800237e:	fab3 f383 	clz	r3, r3
 8002382:	b2db      	uxtb	r3, r3
 8002384:	429a      	cmp	r2, r3
 8002386:	d106      	bne.n	8002396 <HAL_ADC_ConfigChannel+0x38e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	2200      	movs	r2, #0
 800238e:	2103      	movs	r1, #3
 8002390:	4618      	mov	r0, r3
 8002392:	f7fe ff3f 	bl	8001214 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4618      	mov	r0, r3
 800239c:	f7ff f876 	bl	800148c <LL_ADC_IsEnabled>
 80023a0:	4603      	mov	r3, r0
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	f040 810c 	bne.w	80025c0 <HAL_ADC_ConfigChannel+0x5b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6818      	ldr	r0, [r3, #0]
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	6819      	ldr	r1, [r3, #0]
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	68db      	ldr	r3, [r3, #12]
 80023b4:	461a      	mov	r2, r3
 80023b6:	f7fe ffcf 	bl	8001358 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	68db      	ldr	r3, [r3, #12]
 80023be:	4aa8      	ldr	r2, [pc, #672]	; (8002660 <HAL_ADC_ConfigChannel+0x658>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	f040 80fd 	bne.w	80025c0 <HAL_ADC_ConfigChannel+0x5b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d10b      	bne.n	80023ee <HAL_ADC_ConfigChannel+0x3e6>
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	0e9b      	lsrs	r3, r3, #26
 80023dc:	3301      	adds	r3, #1
 80023de:	f003 031f 	and.w	r3, r3, #31
 80023e2:	2b09      	cmp	r3, #9
 80023e4:	bf94      	ite	ls
 80023e6:	2301      	movls	r3, #1
 80023e8:	2300      	movhi	r3, #0
 80023ea:	b2db      	uxtb	r3, r3
 80023ec:	e012      	b.n	8002414 <HAL_ADC_ConfigChannel+0x40c>
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80023f6:	fa93 f3a3 	rbit	r3, r3
 80023fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80023fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023fe:	fab3 f383 	clz	r3, r3
 8002402:	b2db      	uxtb	r3, r3
 8002404:	3301      	adds	r3, #1
 8002406:	f003 031f 	and.w	r3, r3, #31
 800240a:	2b09      	cmp	r3, #9
 800240c:	bf94      	ite	ls
 800240e:	2301      	movls	r3, #1
 8002410:	2300      	movhi	r3, #0
 8002412:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002414:	2b00      	cmp	r3, #0
 8002416:	d064      	beq.n	80024e2 <HAL_ADC_ConfigChannel+0x4da>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002420:	2b00      	cmp	r3, #0
 8002422:	d107      	bne.n	8002434 <HAL_ADC_ConfigChannel+0x42c>
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	0e9b      	lsrs	r3, r3, #26
 800242a:	3301      	adds	r3, #1
 800242c:	069b      	lsls	r3, r3, #26
 800242e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002432:	e00e      	b.n	8002452 <HAL_ADC_ConfigChannel+0x44a>
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800243a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800243c:	fa93 f3a3 	rbit	r3, r3
 8002440:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002442:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002444:	fab3 f383 	clz	r3, r3
 8002448:	b2db      	uxtb	r3, r3
 800244a:	3301      	adds	r3, #1
 800244c:	069b      	lsls	r3, r3, #26
 800244e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800245a:	2b00      	cmp	r3, #0
 800245c:	d109      	bne.n	8002472 <HAL_ADC_ConfigChannel+0x46a>
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	0e9b      	lsrs	r3, r3, #26
 8002464:	3301      	adds	r3, #1
 8002466:	f003 031f 	and.w	r3, r3, #31
 800246a:	2101      	movs	r1, #1
 800246c:	fa01 f303 	lsl.w	r3, r1, r3
 8002470:	e010      	b.n	8002494 <HAL_ADC_ConfigChannel+0x48c>
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800247a:	fa93 f3a3 	rbit	r3, r3
 800247e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002482:	fab3 f383 	clz	r3, r3
 8002486:	b2db      	uxtb	r3, r3
 8002488:	3301      	adds	r3, #1
 800248a:	f003 031f 	and.w	r3, r3, #31
 800248e:	2101      	movs	r1, #1
 8002490:	fa01 f303 	lsl.w	r3, r1, r3
 8002494:	ea42 0103 	orr.w	r1, r2, r3
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d10a      	bne.n	80024ba <HAL_ADC_ConfigChannel+0x4b2>
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	0e9b      	lsrs	r3, r3, #26
 80024aa:	3301      	adds	r3, #1
 80024ac:	f003 021f 	and.w	r2, r3, #31
 80024b0:	4613      	mov	r3, r2
 80024b2:	005b      	lsls	r3, r3, #1
 80024b4:	4413      	add	r3, r2
 80024b6:	051b      	lsls	r3, r3, #20
 80024b8:	e011      	b.n	80024de <HAL_ADC_ConfigChannel+0x4d6>
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024c2:	fa93 f3a3 	rbit	r3, r3
 80024c6:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80024c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ca:	fab3 f383 	clz	r3, r3
 80024ce:	b2db      	uxtb	r3, r3
 80024d0:	3301      	adds	r3, #1
 80024d2:	f003 021f 	and.w	r2, r3, #31
 80024d6:	4613      	mov	r3, r2
 80024d8:	005b      	lsls	r3, r3, #1
 80024da:	4413      	add	r3, r2
 80024dc:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80024de:	430b      	orrs	r3, r1
 80024e0:	e069      	b.n	80025b6 <HAL_ADC_ConfigChannel+0x5ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d107      	bne.n	80024fe <HAL_ADC_ConfigChannel+0x4f6>
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	0e9b      	lsrs	r3, r3, #26
 80024f4:	3301      	adds	r3, #1
 80024f6:	069b      	lsls	r3, r3, #26
 80024f8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80024fc:	e00e      	b.n	800251c <HAL_ADC_ConfigChannel+0x514>
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002504:	6a3b      	ldr	r3, [r7, #32]
 8002506:	fa93 f3a3 	rbit	r3, r3
 800250a:	61fb      	str	r3, [r7, #28]
  return result;
 800250c:	69fb      	ldr	r3, [r7, #28]
 800250e:	fab3 f383 	clz	r3, r3
 8002512:	b2db      	uxtb	r3, r3
 8002514:	3301      	adds	r3, #1
 8002516:	069b      	lsls	r3, r3, #26
 8002518:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002524:	2b00      	cmp	r3, #0
 8002526:	d109      	bne.n	800253c <HAL_ADC_ConfigChannel+0x534>
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	0e9b      	lsrs	r3, r3, #26
 800252e:	3301      	adds	r3, #1
 8002530:	f003 031f 	and.w	r3, r3, #31
 8002534:	2101      	movs	r1, #1
 8002536:	fa01 f303 	lsl.w	r3, r1, r3
 800253a:	e010      	b.n	800255e <HAL_ADC_ConfigChannel+0x556>
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002542:	69bb      	ldr	r3, [r7, #24]
 8002544:	fa93 f3a3 	rbit	r3, r3
 8002548:	617b      	str	r3, [r7, #20]
  return result;
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	fab3 f383 	clz	r3, r3
 8002550:	b2db      	uxtb	r3, r3
 8002552:	3301      	adds	r3, #1
 8002554:	f003 031f 	and.w	r3, r3, #31
 8002558:	2101      	movs	r1, #1
 800255a:	fa01 f303 	lsl.w	r3, r1, r3
 800255e:	ea42 0103 	orr.w	r1, r2, r3
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800256a:	2b00      	cmp	r3, #0
 800256c:	d10d      	bne.n	800258a <HAL_ADC_ConfigChannel+0x582>
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	0e9b      	lsrs	r3, r3, #26
 8002574:	3301      	adds	r3, #1
 8002576:	f003 021f 	and.w	r2, r3, #31
 800257a:	4613      	mov	r3, r2
 800257c:	005b      	lsls	r3, r3, #1
 800257e:	4413      	add	r3, r2
 8002580:	3b1e      	subs	r3, #30
 8002582:	051b      	lsls	r3, r3, #20
 8002584:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002588:	e014      	b.n	80025b4 <HAL_ADC_ConfigChannel+0x5ac>
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002590:	693b      	ldr	r3, [r7, #16]
 8002592:	fa93 f3a3 	rbit	r3, r3
 8002596:	60fb      	str	r3, [r7, #12]
  return result;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	fab3 f383 	clz	r3, r3
 800259e:	b2db      	uxtb	r3, r3
 80025a0:	3301      	adds	r3, #1
 80025a2:	f003 021f 	and.w	r2, r3, #31
 80025a6:	4613      	mov	r3, r2
 80025a8:	005b      	lsls	r3, r3, #1
 80025aa:	4413      	add	r3, r2
 80025ac:	3b1e      	subs	r3, #30
 80025ae:	051b      	lsls	r3, r3, #20
 80025b0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80025b4:	430b      	orrs	r3, r1
 80025b6:	683a      	ldr	r2, [r7, #0]
 80025b8:	6892      	ldr	r2, [r2, #8]
 80025ba:	4619      	mov	r1, r3
 80025bc:	f7fe fea4 	bl	8001308 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	681a      	ldr	r2, [r3, #0]
 80025c4:	4b27      	ldr	r3, [pc, #156]	; (8002664 <HAL_ADC_ConfigChannel+0x65c>)
 80025c6:	4013      	ands	r3, r2
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d07b      	beq.n	80026c4 <HAL_ADC_ConfigChannel+0x6bc>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80025cc:	4826      	ldr	r0, [pc, #152]	; (8002668 <HAL_ADC_ConfigChannel+0x660>)
 80025ce:	f7fe fddd 	bl	800118c <LL_ADC_GetCommonPathInternalCh>
 80025d2:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4a24      	ldr	r2, [pc, #144]	; (800266c <HAL_ADC_ConfigChannel+0x664>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	d126      	bne.n	800262e <HAL_ADC_ConfigChannel+0x626>
 80025e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80025e4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d120      	bne.n	800262e <HAL_ADC_ConfigChannel+0x626>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a1f      	ldr	r2, [pc, #124]	; (8002670 <HAL_ADC_ConfigChannel+0x668>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d166      	bne.n	80026c4 <HAL_ADC_ConfigChannel+0x6bc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80025f6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80025fa:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80025fe:	4619      	mov	r1, r3
 8002600:	4819      	ldr	r0, [pc, #100]	; (8002668 <HAL_ADC_ConfigChannel+0x660>)
 8002602:	f7fe fdb0 	bl	8001166 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002606:	4b1b      	ldr	r3, [pc, #108]	; (8002674 <HAL_ADC_ConfigChannel+0x66c>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	099b      	lsrs	r3, r3, #6
 800260c:	4a1a      	ldr	r2, [pc, #104]	; (8002678 <HAL_ADC_ConfigChannel+0x670>)
 800260e:	fba2 2303 	umull	r2, r3, r2, r3
 8002612:	099a      	lsrs	r2, r3, #6
 8002614:	4613      	mov	r3, r2
 8002616:	005b      	lsls	r3, r3, #1
 8002618:	4413      	add	r3, r2
 800261a:	009b      	lsls	r3, r3, #2
 800261c:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800261e:	e002      	b.n	8002626 <HAL_ADC_ConfigChannel+0x61e>
          {
            wait_loop_index--;
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	3b01      	subs	r3, #1
 8002624:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002626:	68bb      	ldr	r3, [r7, #8]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d1f9      	bne.n	8002620 <HAL_ADC_ConfigChannel+0x618>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800262c:	e04a      	b.n	80026c4 <HAL_ADC_ConfigChannel+0x6bc>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4a12      	ldr	r2, [pc, #72]	; (800267c <HAL_ADC_ConfigChannel+0x674>)
 8002634:	4293      	cmp	r3, r2
 8002636:	d123      	bne.n	8002680 <HAL_ADC_ConfigChannel+0x678>
 8002638:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800263c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002640:	2b00      	cmp	r3, #0
 8002642:	d11d      	bne.n	8002680 <HAL_ADC_ConfigChannel+0x678>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a09      	ldr	r2, [pc, #36]	; (8002670 <HAL_ADC_ConfigChannel+0x668>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d13a      	bne.n	80026c4 <HAL_ADC_ConfigChannel+0x6bc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800264e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002652:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002656:	4619      	mov	r1, r3
 8002658:	4803      	ldr	r0, [pc, #12]	; (8002668 <HAL_ADC_ConfigChannel+0x660>)
 800265a:	f7fe fd84 	bl	8001166 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800265e:	e031      	b.n	80026c4 <HAL_ADC_ConfigChannel+0x6bc>
 8002660:	407f0000 	.word	0x407f0000
 8002664:	80080000 	.word	0x80080000
 8002668:	50040300 	.word	0x50040300
 800266c:	c7520000 	.word	0xc7520000
 8002670:	50040000 	.word	0x50040000
 8002674:	20000040 	.word	0x20000040
 8002678:	053e2d63 	.word	0x053e2d63
 800267c:	cb840000 	.word	0xcb840000
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a14      	ldr	r2, [pc, #80]	; (80026d8 <HAL_ADC_ConfigChannel+0x6d0>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d11c      	bne.n	80026c4 <HAL_ADC_ConfigChannel+0x6bc>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800268a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800268e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002692:	2b00      	cmp	r3, #0
 8002694:	d116      	bne.n	80026c4 <HAL_ADC_ConfigChannel+0x6bc>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a10      	ldr	r2, [pc, #64]	; (80026dc <HAL_ADC_ConfigChannel+0x6d4>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d111      	bne.n	80026c4 <HAL_ADC_ConfigChannel+0x6bc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80026a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80026a4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80026a8:	4619      	mov	r1, r3
 80026aa:	480d      	ldr	r0, [pc, #52]	; (80026e0 <HAL_ADC_ConfigChannel+0x6d8>)
 80026ac:	f7fe fd5b 	bl	8001166 <LL_ADC_SetCommonPathInternalCh>
 80026b0:	e008      	b.n	80026c4 <HAL_ADC_ConfigChannel+0x6bc>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026b6:	f043 0220 	orr.w	r2, r3, #32
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2200      	movs	r2, #0
 80026c8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 80026cc:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	3798      	adds	r7, #152	; 0x98
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bd80      	pop	{r7, pc}
 80026d8:	80000001 	.word	0x80000001
 80026dc:	50040000 	.word	0x50040000
 80026e0:	50040300 	.word	0x50040300

080026e4 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b088      	sub	sp, #32
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
 80026ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 80026ee:	2300      	movs	r3, #0
 80026f0:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4618      	mov	r0, r3
 80026fc:	f7fe ff14 	bl	8001528 <LL_ADC_REG_IsConversionOngoing>
 8002700:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4618      	mov	r0, r3
 8002708:	f7fe ff35 	bl	8001576 <LL_ADC_INJ_IsConversionOngoing>
 800270c:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d103      	bne.n	800271c <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	2b00      	cmp	r3, #0
 8002718:	f000 8091 	beq.w	800283e <ADC_ConversionStop+0x15a>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	68db      	ldr	r3, [r3, #12]
 8002722:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002726:	2b00      	cmp	r3, #0
 8002728:	d02a      	beq.n	8002780 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	7e5b      	ldrb	r3, [r3, #25]
 800272e:	2b01      	cmp	r3, #1
 8002730:	d126      	bne.n	8002780 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	7e1b      	ldrb	r3, [r3, #24]
 8002736:	2b01      	cmp	r3, #1
 8002738:	d122      	bne.n	8002780 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 800273a:	2301      	movs	r3, #1
 800273c:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800273e:	e014      	b.n	800276a <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8002740:	69fb      	ldr	r3, [r7, #28]
 8002742:	4a41      	ldr	r2, [pc, #260]	; (8002848 <ADC_ConversionStop+0x164>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d90d      	bls.n	8002764 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800274c:	f043 0210 	orr.w	r2, r3, #16
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002758:	f043 0201 	orr.w	r2, r3, #1
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8002760:	2301      	movs	r3, #1
 8002762:	e06d      	b.n	8002840 <ADC_ConversionStop+0x15c>
        }
        Conversion_Timeout_CPU_cycles ++;
 8002764:	69fb      	ldr	r3, [r7, #28]
 8002766:	3301      	adds	r3, #1
 8002768:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002774:	2b40      	cmp	r3, #64	; 0x40
 8002776:	d1e3      	bne.n	8002740 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	2240      	movs	r2, #64	; 0x40
 800277e:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8002780:	69bb      	ldr	r3, [r7, #24]
 8002782:	2b02      	cmp	r3, #2
 8002784:	d014      	beq.n	80027b0 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4618      	mov	r0, r3
 800278c:	f7fe fecc 	bl	8001528 <LL_ADC_REG_IsConversionOngoing>
 8002790:	4603      	mov	r3, r0
 8002792:	2b00      	cmp	r3, #0
 8002794:	d00c      	beq.n	80027b0 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4618      	mov	r0, r3
 800279c:	f7fe fe89 	bl	80014b2 <LL_ADC_IsDisableOngoing>
 80027a0:	4603      	mov	r3, r0
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d104      	bne.n	80027b0 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4618      	mov	r0, r3
 80027ac:	f7fe fea8 	bl	8001500 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 80027b0:	69bb      	ldr	r3, [r7, #24]
 80027b2:	2b01      	cmp	r3, #1
 80027b4:	d014      	beq.n	80027e0 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4618      	mov	r0, r3
 80027bc:	f7fe fedb 	bl	8001576 <LL_ADC_INJ_IsConversionOngoing>
 80027c0:	4603      	mov	r3, r0
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d00c      	beq.n	80027e0 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4618      	mov	r0, r3
 80027cc:	f7fe fe71 	bl	80014b2 <LL_ADC_IsDisableOngoing>
 80027d0:	4603      	mov	r3, r0
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d104      	bne.n	80027e0 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4618      	mov	r0, r3
 80027dc:	f7fe feb7 	bl	800154e <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 80027e0:	69bb      	ldr	r3, [r7, #24]
 80027e2:	2b02      	cmp	r3, #2
 80027e4:	d005      	beq.n	80027f2 <ADC_ConversionStop+0x10e>
 80027e6:	69bb      	ldr	r3, [r7, #24]
 80027e8:	2b03      	cmp	r3, #3
 80027ea:	d105      	bne.n	80027f8 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80027ec:	230c      	movs	r3, #12
 80027ee:	617b      	str	r3, [r7, #20]
        break;
 80027f0:	e005      	b.n	80027fe <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80027f2:	2308      	movs	r3, #8
 80027f4:	617b      	str	r3, [r7, #20]
        break;
 80027f6:	e002      	b.n	80027fe <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80027f8:	2304      	movs	r3, #4
 80027fa:	617b      	str	r3, [r7, #20]
        break;
 80027fc:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80027fe:	f7fe fc71 	bl	80010e4 <HAL_GetTick>
 8002802:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002804:	e014      	b.n	8002830 <ADC_ConversionStop+0x14c>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002806:	f7fe fc6d 	bl	80010e4 <HAL_GetTick>
 800280a:	4602      	mov	r2, r0
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	1ad3      	subs	r3, r2, r3
 8002810:	2b05      	cmp	r3, #5
 8002812:	d90d      	bls.n	8002830 <ADC_ConversionStop+0x14c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002818:	f043 0210 	orr.w	r2, r3, #16
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002824:	f043 0201 	orr.w	r2, r3, #1
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	65da      	str	r2, [r3, #92]	; 0x5c

        return HAL_ERROR;
 800282c:	2301      	movs	r3, #1
 800282e:	e007      	b.n	8002840 <ADC_ConversionStop+0x15c>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	689a      	ldr	r2, [r3, #8]
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	4013      	ands	r3, r2
 800283a:	2b00      	cmp	r3, #0
 800283c:	d1e3      	bne.n	8002806 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 800283e:	2300      	movs	r3, #0
}
 8002840:	4618      	mov	r0, r3
 8002842:	3720      	adds	r7, #32
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}
 8002848:	a33fffff 	.word	0xa33fffff

0800284c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b084      	sub	sp, #16
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4618      	mov	r0, r3
 800285a:	f7fe fe17 	bl	800148c <LL_ADC_IsEnabled>
 800285e:	4603      	mov	r3, r0
 8002860:	2b00      	cmp	r3, #0
 8002862:	d146      	bne.n	80028f2 <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	689a      	ldr	r2, [r3, #8]
 800286a:	4b24      	ldr	r3, [pc, #144]	; (80028fc <ADC_Enable+0xb0>)
 800286c:	4013      	ands	r3, r2
 800286e:	2b00      	cmp	r3, #0
 8002870:	d00d      	beq.n	800288e <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002876:	f043 0210 	orr.w	r2, r3, #16
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002882:	f043 0201 	orr.w	r2, r3, #1
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800288a:	2301      	movs	r3, #1
 800288c:	e032      	b.n	80028f4 <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4618      	mov	r0, r3
 8002894:	f7fe fdd2 	bl	800143c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002898:	f7fe fc24 	bl	80010e4 <HAL_GetTick>
 800289c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800289e:	e021      	b.n	80028e4 <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4618      	mov	r0, r3
 80028a6:	f7fe fdf1 	bl	800148c <LL_ADC_IsEnabled>
 80028aa:	4603      	mov	r3, r0
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d104      	bne.n	80028ba <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4618      	mov	r0, r3
 80028b6:	f7fe fdc1 	bl	800143c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80028ba:	f7fe fc13 	bl	80010e4 <HAL_GetTick>
 80028be:	4602      	mov	r2, r0
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	1ad3      	subs	r3, r2, r3
 80028c4:	2b02      	cmp	r3, #2
 80028c6:	d90d      	bls.n	80028e4 <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028cc:	f043 0210 	orr.w	r2, r3, #16
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028d8:	f043 0201 	orr.w	r2, r3, #1
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	65da      	str	r2, [r3, #92]	; 0x5c

        return HAL_ERROR;
 80028e0:	2301      	movs	r3, #1
 80028e2:	e007      	b.n	80028f4 <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f003 0301 	and.w	r3, r3, #1
 80028ee:	2b01      	cmp	r3, #1
 80028f0:	d1d6      	bne.n	80028a0 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80028f2:	2300      	movs	r3, #0
}
 80028f4:	4618      	mov	r0, r3
 80028f6:	3710      	adds	r7, #16
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bd80      	pop	{r7, pc}
 80028fc:	8000003f 	.word	0x8000003f

08002900 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b084      	sub	sp, #16
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4618      	mov	r0, r3
 800290e:	f7fe fdd0 	bl	80014b2 <LL_ADC_IsDisableOngoing>
 8002912:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4618      	mov	r0, r3
 800291a:	f7fe fdb7 	bl	800148c <LL_ADC_IsEnabled>
 800291e:	4603      	mov	r3, r0
 8002920:	2b00      	cmp	r3, #0
 8002922:	d040      	beq.n	80029a6 <ADC_Disable+0xa6>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d13d      	bne.n	80029a6 <ADC_Disable+0xa6>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	689b      	ldr	r3, [r3, #8]
 8002930:	f003 030d 	and.w	r3, r3, #13
 8002934:	2b01      	cmp	r3, #1
 8002936:	d10c      	bne.n	8002952 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4618      	mov	r0, r3
 800293e:	f7fe fd91 	bl	8001464 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	2203      	movs	r2, #3
 8002948:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800294a:	f7fe fbcb 	bl	80010e4 <HAL_GetTick>
 800294e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002950:	e022      	b.n	8002998 <ADC_Disable+0x98>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002956:	f043 0210 	orr.w	r2, r3, #16
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002962:	f043 0201 	orr.w	r2, r3, #1
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 800296a:	2301      	movs	r3, #1
 800296c:	e01c      	b.n	80029a8 <ADC_Disable+0xa8>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800296e:	f7fe fbb9 	bl	80010e4 <HAL_GetTick>
 8002972:	4602      	mov	r2, r0
 8002974:	68bb      	ldr	r3, [r7, #8]
 8002976:	1ad3      	subs	r3, r2, r3
 8002978:	2b02      	cmp	r3, #2
 800297a:	d90d      	bls.n	8002998 <ADC_Disable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002980:	f043 0210 	orr.w	r2, r3, #16
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800298c:	f043 0201 	orr.w	r2, r3, #1
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	65da      	str	r2, [r3, #92]	; 0x5c

        return HAL_ERROR;
 8002994:	2301      	movs	r3, #1
 8002996:	e007      	b.n	80029a8 <ADC_Disable+0xa8>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	689b      	ldr	r3, [r3, #8]
 800299e:	f003 0301 	and.w	r3, r3, #1
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d1e3      	bne.n	800296e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80029a6:	2300      	movs	r3, #0
}
 80029a8:	4618      	mov	r0, r3
 80029aa:	3710      	adds	r7, #16
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bd80      	pop	{r7, pc}

080029b0 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b084      	sub	sp, #16
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029bc:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029c2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d14b      	bne.n	8002a62 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029ce:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	659a      	str	r2, [r3, #88]	; 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f003 0308 	and.w	r3, r3, #8
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d021      	beq.n	8002a28 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4618      	mov	r0, r3
 80029ea:	f7fe fc3e 	bl	800126a <LL_ADC_REG_IsTriggerSourceSWStart>
 80029ee:	4603      	mov	r3, r0
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d032      	beq.n	8002a5a <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	68db      	ldr	r3, [r3, #12]
 80029fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d12b      	bne.n	8002a5a <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a06:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	659a      	str	r2, [r3, #88]	; 0x58
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a12:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d11f      	bne.n	8002a5a <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a1e:	f043 0201 	orr.w	r2, r3, #1
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	659a      	str	r2, [r3, #88]	; 0x58
 8002a26:	e018      	b.n	8002a5a <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	68db      	ldr	r3, [r3, #12]
 8002a2e:	f003 0302 	and.w	r3, r3, #2
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d111      	bne.n	8002a5a <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a3a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	659a      	str	r2, [r3, #88]	; 0x58
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a46:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d105      	bne.n	8002a5a <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a52:	f043 0201 	orr.w	r2, r3, #1
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	659a      	str	r2, [r3, #88]	; 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002a5a:	68f8      	ldr	r0, [r7, #12]
 8002a5c:	f7ff faac 	bl	8001fb8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002a60:	e00e      	b.n	8002a80 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a66:	f003 0310 	and.w	r3, r3, #16
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d003      	beq.n	8002a76 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002a6e:	68f8      	ldr	r0, [r7, #12]
 8002a70:	f7ff fac0 	bl	8001ff4 <HAL_ADC_ErrorCallback>
}
 8002a74:	e004      	b.n	8002a80 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a7c:	6878      	ldr	r0, [r7, #4]
 8002a7e:	4798      	blx	r3
}
 8002a80:	bf00      	nop
 8002a82:	3710      	adds	r7, #16
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bd80      	pop	{r7, pc}

08002a88 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b084      	sub	sp, #16
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a94:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002a96:	68f8      	ldr	r0, [r7, #12]
 8002a98:	f7ff fa98 	bl	8001fcc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002a9c:	bf00      	nop
 8002a9e:	3710      	adds	r7, #16
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bd80      	pop	{r7, pc}

08002aa4 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b084      	sub	sp, #16
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ab0:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ab6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ac2:	f043 0204 	orr.w	r2, r3, #4
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002aca:	68f8      	ldr	r0, [r7, #12]
 8002acc:	f7ff fa92 	bl	8001ff4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002ad0:	bf00      	nop
 8002ad2:	3710      	adds	r7, #16
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}

08002ad8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b083      	sub	sp, #12
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8002ae0:	bf00      	nop
 8002ae2:	370c      	adds	r7, #12
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aea:	4770      	bx	lr

08002aec <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b083      	sub	sp, #12
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8002af4:	bf00      	nop
 8002af6:	370c      	adds	r7, #12
 8002af8:	46bd      	mov	sp, r7
 8002afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afe:	4770      	bx	lr

08002b00 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8002b00:	b480      	push	{r7}
 8002b02:	b083      	sub	sp, #12
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8002b08:	bf00      	nop
 8002b0a:	370c      	adds	r7, #12
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b12:	4770      	bx	lr

08002b14 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8002b14:	b480      	push	{r7}
 8002b16:	b083      	sub	sp, #12
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8002b1c:	bf00      	nop
 8002b1e:	370c      	adds	r7, #12
 8002b20:	46bd      	mov	sp, r7
 8002b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b26:	4770      	bx	lr

08002b28 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b083      	sub	sp, #12
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8002b30:	bf00      	nop
 8002b32:	370c      	adds	r7, #12
 8002b34:	46bd      	mov	sp, r7
 8002b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3a:	4770      	bx	lr

08002b3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b085      	sub	sp, #20
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	f003 0307 	and.w	r3, r3, #7
 8002b4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b4c:	4b0c      	ldr	r3, [pc, #48]	; (8002b80 <__NVIC_SetPriorityGrouping+0x44>)
 8002b4e:	68db      	ldr	r3, [r3, #12]
 8002b50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b52:	68ba      	ldr	r2, [r7, #8]
 8002b54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b58:	4013      	ands	r3, r2
 8002b5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b64:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002b68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b6e:	4a04      	ldr	r2, [pc, #16]	; (8002b80 <__NVIC_SetPriorityGrouping+0x44>)
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	60d3      	str	r3, [r2, #12]
}
 8002b74:	bf00      	nop
 8002b76:	3714      	adds	r7, #20
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7e:	4770      	bx	lr
 8002b80:	e000ed00 	.word	0xe000ed00

08002b84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b84:	b480      	push	{r7}
 8002b86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b88:	4b04      	ldr	r3, [pc, #16]	; (8002b9c <__NVIC_GetPriorityGrouping+0x18>)
 8002b8a:	68db      	ldr	r3, [r3, #12]
 8002b8c:	0a1b      	lsrs	r3, r3, #8
 8002b8e:	f003 0307 	and.w	r3, r3, #7
}
 8002b92:	4618      	mov	r0, r3
 8002b94:	46bd      	mov	sp, r7
 8002b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9a:	4770      	bx	lr
 8002b9c:	e000ed00 	.word	0xe000ed00

08002ba0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b083      	sub	sp, #12
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002baa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	db0b      	blt.n	8002bca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002bb2:	79fb      	ldrb	r3, [r7, #7]
 8002bb4:	f003 021f 	and.w	r2, r3, #31
 8002bb8:	4907      	ldr	r1, [pc, #28]	; (8002bd8 <__NVIC_EnableIRQ+0x38>)
 8002bba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bbe:	095b      	lsrs	r3, r3, #5
 8002bc0:	2001      	movs	r0, #1
 8002bc2:	fa00 f202 	lsl.w	r2, r0, r2
 8002bc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002bca:	bf00      	nop
 8002bcc:	370c      	adds	r7, #12
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd4:	4770      	bx	lr
 8002bd6:	bf00      	nop
 8002bd8:	e000e100 	.word	0xe000e100

08002bdc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	b083      	sub	sp, #12
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	4603      	mov	r3, r0
 8002be4:	6039      	str	r1, [r7, #0]
 8002be6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002be8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	db0a      	blt.n	8002c06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	b2da      	uxtb	r2, r3
 8002bf4:	490c      	ldr	r1, [pc, #48]	; (8002c28 <__NVIC_SetPriority+0x4c>)
 8002bf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bfa:	0112      	lsls	r2, r2, #4
 8002bfc:	b2d2      	uxtb	r2, r2
 8002bfe:	440b      	add	r3, r1
 8002c00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c04:	e00a      	b.n	8002c1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	b2da      	uxtb	r2, r3
 8002c0a:	4908      	ldr	r1, [pc, #32]	; (8002c2c <__NVIC_SetPriority+0x50>)
 8002c0c:	79fb      	ldrb	r3, [r7, #7]
 8002c0e:	f003 030f 	and.w	r3, r3, #15
 8002c12:	3b04      	subs	r3, #4
 8002c14:	0112      	lsls	r2, r2, #4
 8002c16:	b2d2      	uxtb	r2, r2
 8002c18:	440b      	add	r3, r1
 8002c1a:	761a      	strb	r2, [r3, #24]
}
 8002c1c:	bf00      	nop
 8002c1e:	370c      	adds	r7, #12
 8002c20:	46bd      	mov	sp, r7
 8002c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c26:	4770      	bx	lr
 8002c28:	e000e100 	.word	0xe000e100
 8002c2c:	e000ed00 	.word	0xe000ed00

08002c30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c30:	b480      	push	{r7}
 8002c32:	b089      	sub	sp, #36	; 0x24
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	60f8      	str	r0, [r7, #12]
 8002c38:	60b9      	str	r1, [r7, #8]
 8002c3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	f003 0307 	and.w	r3, r3, #7
 8002c42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c44:	69fb      	ldr	r3, [r7, #28]
 8002c46:	f1c3 0307 	rsb	r3, r3, #7
 8002c4a:	2b04      	cmp	r3, #4
 8002c4c:	bf28      	it	cs
 8002c4e:	2304      	movcs	r3, #4
 8002c50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c52:	69fb      	ldr	r3, [r7, #28]
 8002c54:	3304      	adds	r3, #4
 8002c56:	2b06      	cmp	r3, #6
 8002c58:	d902      	bls.n	8002c60 <NVIC_EncodePriority+0x30>
 8002c5a:	69fb      	ldr	r3, [r7, #28]
 8002c5c:	3b03      	subs	r3, #3
 8002c5e:	e000      	b.n	8002c62 <NVIC_EncodePriority+0x32>
 8002c60:	2300      	movs	r3, #0
 8002c62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c64:	f04f 32ff 	mov.w	r2, #4294967295
 8002c68:	69bb      	ldr	r3, [r7, #24]
 8002c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c6e:	43da      	mvns	r2, r3
 8002c70:	68bb      	ldr	r3, [r7, #8]
 8002c72:	401a      	ands	r2, r3
 8002c74:	697b      	ldr	r3, [r7, #20]
 8002c76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c78:	f04f 31ff 	mov.w	r1, #4294967295
 8002c7c:	697b      	ldr	r3, [r7, #20]
 8002c7e:	fa01 f303 	lsl.w	r3, r1, r3
 8002c82:	43d9      	mvns	r1, r3
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c88:	4313      	orrs	r3, r2
         );
}
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	3724      	adds	r7, #36	; 0x24
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c94:	4770      	bx	lr
	...

08002c98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b082      	sub	sp, #8
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	3b01      	subs	r3, #1
 8002ca4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ca8:	d301      	bcc.n	8002cae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002caa:	2301      	movs	r3, #1
 8002cac:	e00f      	b.n	8002cce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002cae:	4a0a      	ldr	r2, [pc, #40]	; (8002cd8 <SysTick_Config+0x40>)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	3b01      	subs	r3, #1
 8002cb4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002cb6:	210f      	movs	r1, #15
 8002cb8:	f04f 30ff 	mov.w	r0, #4294967295
 8002cbc:	f7ff ff8e 	bl	8002bdc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002cc0:	4b05      	ldr	r3, [pc, #20]	; (8002cd8 <SysTick_Config+0x40>)
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002cc6:	4b04      	ldr	r3, [pc, #16]	; (8002cd8 <SysTick_Config+0x40>)
 8002cc8:	2207      	movs	r2, #7
 8002cca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ccc:	2300      	movs	r3, #0
}
 8002cce:	4618      	mov	r0, r3
 8002cd0:	3708      	adds	r7, #8
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd80      	pop	{r7, pc}
 8002cd6:	bf00      	nop
 8002cd8:	e000e010 	.word	0xe000e010

08002cdc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b082      	sub	sp, #8
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ce4:	6878      	ldr	r0, [r7, #4]
 8002ce6:	f7ff ff29 	bl	8002b3c <__NVIC_SetPriorityGrouping>
}
 8002cea:	bf00      	nop
 8002cec:	3708      	adds	r7, #8
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}

08002cf2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002cf2:	b580      	push	{r7, lr}
 8002cf4:	b086      	sub	sp, #24
 8002cf6:	af00      	add	r7, sp, #0
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	60b9      	str	r1, [r7, #8]
 8002cfc:	607a      	str	r2, [r7, #4]
 8002cfe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002d00:	2300      	movs	r3, #0
 8002d02:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002d04:	f7ff ff3e 	bl	8002b84 <__NVIC_GetPriorityGrouping>
 8002d08:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d0a:	687a      	ldr	r2, [r7, #4]
 8002d0c:	68b9      	ldr	r1, [r7, #8]
 8002d0e:	6978      	ldr	r0, [r7, #20]
 8002d10:	f7ff ff8e 	bl	8002c30 <NVIC_EncodePriority>
 8002d14:	4602      	mov	r2, r0
 8002d16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d1a:	4611      	mov	r1, r2
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	f7ff ff5d 	bl	8002bdc <__NVIC_SetPriority>
}
 8002d22:	bf00      	nop
 8002d24:	3718      	adds	r7, #24
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}

08002d2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d2a:	b580      	push	{r7, lr}
 8002d2c:	b082      	sub	sp, #8
 8002d2e:	af00      	add	r7, sp, #0
 8002d30:	4603      	mov	r3, r0
 8002d32:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f7ff ff31 	bl	8002ba0 <__NVIC_EnableIRQ>
}
 8002d3e:	bf00      	nop
 8002d40:	3708      	adds	r7, #8
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}

08002d46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d46:	b580      	push	{r7, lr}
 8002d48:	b082      	sub	sp, #8
 8002d4a:	af00      	add	r7, sp, #0
 8002d4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d4e:	6878      	ldr	r0, [r7, #4]
 8002d50:	f7ff ffa2 	bl	8002c98 <SysTick_Config>
 8002d54:	4603      	mov	r3, r0
}
 8002d56:	4618      	mov	r0, r3
 8002d58:	3708      	adds	r7, #8
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}
	...

08002d60 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b084      	sub	sp, #16
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d101      	bne.n	8002d72 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e08d      	b.n	8002e8e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	461a      	mov	r2, r3
 8002d78:	4b47      	ldr	r3, [pc, #284]	; (8002e98 <HAL_DMA_Init+0x138>)
 8002d7a:	429a      	cmp	r2, r3
 8002d7c:	d80f      	bhi.n	8002d9e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	461a      	mov	r2, r3
 8002d84:	4b45      	ldr	r3, [pc, #276]	; (8002e9c <HAL_DMA_Init+0x13c>)
 8002d86:	4413      	add	r3, r2
 8002d88:	4a45      	ldr	r2, [pc, #276]	; (8002ea0 <HAL_DMA_Init+0x140>)
 8002d8a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d8e:	091b      	lsrs	r3, r3, #4
 8002d90:	009a      	lsls	r2, r3, #2
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	4a42      	ldr	r2, [pc, #264]	; (8002ea4 <HAL_DMA_Init+0x144>)
 8002d9a:	641a      	str	r2, [r3, #64]	; 0x40
 8002d9c:	e00e      	b.n	8002dbc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	461a      	mov	r2, r3
 8002da4:	4b40      	ldr	r3, [pc, #256]	; (8002ea8 <HAL_DMA_Init+0x148>)
 8002da6:	4413      	add	r3, r2
 8002da8:	4a3d      	ldr	r2, [pc, #244]	; (8002ea0 <HAL_DMA_Init+0x140>)
 8002daa:	fba2 2303 	umull	r2, r3, r2, r3
 8002dae:	091b      	lsrs	r3, r3, #4
 8002db0:	009a      	lsls	r2, r3, #2
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	4a3c      	ldr	r2, [pc, #240]	; (8002eac <HAL_DMA_Init+0x14c>)
 8002dba:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2202      	movs	r2, #2
 8002dc0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002dd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dd6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002de0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	691b      	ldr	r3, [r3, #16]
 8002de6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002dec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	699b      	ldr	r3, [r3, #24]
 8002df2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002df8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6a1b      	ldr	r3, [r3, #32]
 8002dfe:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002e00:	68fa      	ldr	r2, [r7, #12]
 8002e02:	4313      	orrs	r3, r2
 8002e04:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	68fa      	ldr	r2, [r7, #12]
 8002e0c:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002e0e:	6878      	ldr	r0, [r7, #4]
 8002e10:	f000 fa12 	bl	8003238 <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002e1c:	d102      	bne.n	8002e24 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2200      	movs	r2, #0
 8002e22:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	685a      	ldr	r2, [r3, #4]
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e2c:	b2d2      	uxtb	r2, r2
 8002e2e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e34:	687a      	ldr	r2, [r7, #4]
 8002e36:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002e38:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d010      	beq.n	8002e64 <HAL_DMA_Init+0x104>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	2b04      	cmp	r3, #4
 8002e48:	d80c      	bhi.n	8002e64 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002e4a:	6878      	ldr	r0, [r7, #4]
 8002e4c:	f000 fa32 	bl	80032b4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e54:	2200      	movs	r2, #0
 8002e56:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e5c:	687a      	ldr	r2, [r7, #4]
 8002e5e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002e60:	605a      	str	r2, [r3, #4]
 8002e62:	e008      	b.n	8002e76 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2200      	movs	r2, #0
 8002e68:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2200      	movs	r2, #0
 8002e74:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2200      	movs	r2, #0
 8002e7a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2201      	movs	r2, #1
 8002e80:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2200      	movs	r2, #0
 8002e88:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002e8c:	2300      	movs	r3, #0
}
 8002e8e:	4618      	mov	r0, r3
 8002e90:	3710      	adds	r7, #16
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}
 8002e96:	bf00      	nop
 8002e98:	40020407 	.word	0x40020407
 8002e9c:	bffdfff8 	.word	0xbffdfff8
 8002ea0:	cccccccd 	.word	0xcccccccd
 8002ea4:	40020000 	.word	0x40020000
 8002ea8:	bffdfbf8 	.word	0xbffdfbf8
 8002eac:	40020400 	.word	0x40020400

08002eb0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b086      	sub	sp, #24
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	60f8      	str	r0, [r7, #12]
 8002eb8:	60b9      	str	r1, [r7, #8]
 8002eba:	607a      	str	r2, [r7, #4]
 8002ebc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002ec8:	2b01      	cmp	r3, #1
 8002eca:	d101      	bne.n	8002ed0 <HAL_DMA_Start_IT+0x20>
 8002ecc:	2302      	movs	r3, #2
 8002ece:	e066      	b.n	8002f9e <HAL_DMA_Start_IT+0xee>
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002ede:	b2db      	uxtb	r3, r3
 8002ee0:	2b01      	cmp	r3, #1
 8002ee2:	d155      	bne.n	8002f90 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	2202      	movs	r2, #2
 8002ee8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	2200      	movs	r2, #0
 8002ef0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	681a      	ldr	r2, [r3, #0]
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f022 0201 	bic.w	r2, r2, #1
 8002f00:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	687a      	ldr	r2, [r7, #4]
 8002f06:	68b9      	ldr	r1, [r7, #8]
 8002f08:	68f8      	ldr	r0, [r7, #12]
 8002f0a:	f000 f957 	bl	80031bc <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d008      	beq.n	8002f28 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	681a      	ldr	r2, [r3, #0]
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f042 020e 	orr.w	r2, r2, #14
 8002f24:	601a      	str	r2, [r3, #0]
 8002f26:	e00f      	b.n	8002f48 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	681a      	ldr	r2, [r3, #0]
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f022 0204 	bic.w	r2, r2, #4
 8002f36:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	681a      	ldr	r2, [r3, #0]
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f042 020a 	orr.w	r2, r2, #10
 8002f46:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d007      	beq.n	8002f66 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f5a:	681a      	ldr	r2, [r3, #0]
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f60:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f64:	601a      	str	r2, [r3, #0]
    }

    if(hdma->DMAmuxRequestGen != 0U)
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d007      	beq.n	8002f7e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f72:	681a      	ldr	r2, [r3, #0]
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f78:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f7c:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	681a      	ldr	r2, [r3, #0]
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f042 0201 	orr.w	r2, r2, #1
 8002f8c:	601a      	str	r2, [r3, #0]
 8002f8e:	e005      	b.n	8002f9c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	2200      	movs	r2, #0
 8002f94:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002f98:	2302      	movs	r3, #2
 8002f9a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002f9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	3718      	adds	r7, #24
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}

08002fa6 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002fa6:	b480      	push	{r7}
 8002fa8:	b085      	sub	sp, #20
 8002faa:	af00      	add	r7, sp, #0
 8002fac:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002fb8:	b2db      	uxtb	r3, r3
 8002fba:	2b02      	cmp	r3, #2
 8002fbc:	d008      	beq.n	8002fd0 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2204      	movs	r2, #4
 8002fc2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	e040      	b.n	8003052 <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	681a      	ldr	r2, [r3, #0]
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f022 020e 	bic.w	r2, r2, #14
 8002fde:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fe4:	681a      	ldr	r2, [r3, #0]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fea:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002fee:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	681a      	ldr	r2, [r3, #0]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f022 0201 	bic.w	r2, r2, #1
 8002ffe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003004:	f003 021c 	and.w	r2, r3, #28
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800300c:	2101      	movs	r1, #1
 800300e:	fa01 f202 	lsl.w	r2, r1, r2
 8003012:	605a      	str	r2, [r3, #4]

#if defined(DMAMUX1)
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003018:	687a      	ldr	r2, [r7, #4]
 800301a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800301c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003022:	2b00      	cmp	r3, #0
 8003024:	d00c      	beq.n	8003040 <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800302a:	681a      	ldr	r2, [r3, #0]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003030:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003034:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800303a:	687a      	ldr	r2, [r7, #4]
 800303c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800303e:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2201      	movs	r2, #1
 8003044:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2200      	movs	r2, #0
 800304c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8003050:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8003052:	4618      	mov	r0, r3
 8003054:	3714      	adds	r7, #20
 8003056:	46bd      	mov	sp, r7
 8003058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305c:	4770      	bx	lr

0800305e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800305e:	b580      	push	{r7, lr}
 8003060:	b084      	sub	sp, #16
 8003062:	af00      	add	r7, sp, #0
 8003064:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800307a:	f003 031c 	and.w	r3, r3, #28
 800307e:	2204      	movs	r2, #4
 8003080:	409a      	lsls	r2, r3
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	4013      	ands	r3, r2
 8003086:	2b00      	cmp	r3, #0
 8003088:	d026      	beq.n	80030d8 <HAL_DMA_IRQHandler+0x7a>
 800308a:	68bb      	ldr	r3, [r7, #8]
 800308c:	f003 0304 	and.w	r3, r3, #4
 8003090:	2b00      	cmp	r3, #0
 8003092:	d021      	beq.n	80030d8 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f003 0320 	and.w	r3, r3, #32
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d107      	bne.n	80030b2 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	681a      	ldr	r2, [r3, #0]
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f022 0204 	bic.w	r2, r2, #4
 80030b0:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030b6:	f003 021c 	and.w	r2, r3, #28
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030be:	2104      	movs	r1, #4
 80030c0:	fa01 f202 	lsl.w	r2, r1, r2
 80030c4:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d071      	beq.n	80031b2 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030d2:	6878      	ldr	r0, [r7, #4]
 80030d4:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 80030d6:	e06c      	b.n	80031b2 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030dc:	f003 031c 	and.w	r3, r3, #28
 80030e0:	2202      	movs	r2, #2
 80030e2:	409a      	lsls	r2, r3
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	4013      	ands	r3, r2
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d02e      	beq.n	800314a <HAL_DMA_IRQHandler+0xec>
 80030ec:	68bb      	ldr	r3, [r7, #8]
 80030ee:	f003 0302 	and.w	r3, r3, #2
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d029      	beq.n	800314a <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f003 0320 	and.w	r3, r3, #32
 8003100:	2b00      	cmp	r3, #0
 8003102:	d10b      	bne.n	800311c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	681a      	ldr	r2, [r3, #0]
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f022 020a 	bic.w	r2, r2, #10
 8003112:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2201      	movs	r2, #1
 8003118:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003120:	f003 021c 	and.w	r2, r3, #28
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003128:	2102      	movs	r1, #2
 800312a:	fa01 f202 	lsl.w	r2, r1, r2
 800312e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2200      	movs	r2, #0
 8003134:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800313c:	2b00      	cmp	r3, #0
 800313e:	d038      	beq.n	80031b2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003144:	6878      	ldr	r0, [r7, #4]
 8003146:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003148:	e033      	b.n	80031b2 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800314e:	f003 031c 	and.w	r3, r3, #28
 8003152:	2208      	movs	r2, #8
 8003154:	409a      	lsls	r2, r3
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	4013      	ands	r3, r2
 800315a:	2b00      	cmp	r3, #0
 800315c:	d02a      	beq.n	80031b4 <HAL_DMA_IRQHandler+0x156>
 800315e:	68bb      	ldr	r3, [r7, #8]
 8003160:	f003 0308 	and.w	r3, r3, #8
 8003164:	2b00      	cmp	r3, #0
 8003166:	d025      	beq.n	80031b4 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	681a      	ldr	r2, [r3, #0]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f022 020e 	bic.w	r2, r2, #14
 8003176:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800317c:	f003 021c 	and.w	r2, r3, #28
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003184:	2101      	movs	r1, #1
 8003186:	fa01 f202 	lsl.w	r2, r1, r2
 800318a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2201      	movs	r2, #1
 8003190:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2201      	movs	r2, #1
 8003196:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2200      	movs	r2, #0
 800319e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d004      	beq.n	80031b4 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031ae:	6878      	ldr	r0, [r7, #4]
 80031b0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80031b2:	bf00      	nop
 80031b4:	bf00      	nop
}
 80031b6:	3710      	adds	r7, #16
 80031b8:	46bd      	mov	sp, r7
 80031ba:	bd80      	pop	{r7, pc}

080031bc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80031bc:	b480      	push	{r7}
 80031be:	b085      	sub	sp, #20
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	60f8      	str	r0, [r7, #12]
 80031c4:	60b9      	str	r1, [r7, #8]
 80031c6:	607a      	str	r2, [r7, #4]
 80031c8:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031ce:	68fa      	ldr	r2, [r7, #12]
 80031d0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80031d2:	605a      	str	r2, [r3, #4]

  if(hdma->DMAmuxRequestGen != 0U)
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d004      	beq.n	80031e6 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031e0:	68fa      	ldr	r2, [r7, #12]
 80031e2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80031e4:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031ea:	f003 021c 	and.w	r2, r3, #28
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f2:	2101      	movs	r1, #1
 80031f4:	fa01 f202 	lsl.w	r2, r1, r2
 80031f8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	683a      	ldr	r2, [r7, #0]
 8003200:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	689b      	ldr	r3, [r3, #8]
 8003206:	2b10      	cmp	r3, #16
 8003208:	d108      	bne.n	800321c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	687a      	ldr	r2, [r7, #4]
 8003210:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	68ba      	ldr	r2, [r7, #8]
 8003218:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800321a:	e007      	b.n	800322c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	68ba      	ldr	r2, [r7, #8]
 8003222:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	687a      	ldr	r2, [r7, #4]
 800322a:	60da      	str	r2, [r3, #12]
}
 800322c:	bf00      	nop
 800322e:	3714      	adds	r7, #20
 8003230:	46bd      	mov	sp, r7
 8003232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003236:	4770      	bx	lr

08003238 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003238:	b480      	push	{r7}
 800323a:	b085      	sub	sp, #20
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	461a      	mov	r2, r3
 8003246:	4b17      	ldr	r3, [pc, #92]	; (80032a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003248:	429a      	cmp	r2, r3
 800324a:	d80a      	bhi.n	8003262 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003250:	089b      	lsrs	r3, r3, #2
 8003252:	009b      	lsls	r3, r3, #2
 8003254:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003258:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 800325c:	687a      	ldr	r2, [r7, #4]
 800325e:	6493      	str	r3, [r2, #72]	; 0x48
 8003260:	e007      	b.n	8003272 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003266:	089b      	lsrs	r3, r3, #2
 8003268:	009a      	lsls	r2, r3, #2
 800326a:	4b0f      	ldr	r3, [pc, #60]	; (80032a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800326c:	4413      	add	r3, r2
 800326e:	687a      	ldr	r2, [r7, #4]
 8003270:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	b2db      	uxtb	r3, r3
 8003278:	3b08      	subs	r3, #8
 800327a:	4a0c      	ldr	r2, [pc, #48]	; (80032ac <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800327c:	fba2 2303 	umull	r2, r3, r2, r3
 8003280:	091b      	lsrs	r3, r3, #4
 8003282:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	4a0a      	ldr	r2, [pc, #40]	; (80032b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003288:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	f003 031f 	and.w	r3, r3, #31
 8003290:	2201      	movs	r2, #1
 8003292:	409a      	lsls	r2, r3
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003298:	bf00      	nop
 800329a:	3714      	adds	r7, #20
 800329c:	46bd      	mov	sp, r7
 800329e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a2:	4770      	bx	lr
 80032a4:	40020407 	.word	0x40020407
 80032a8:	4002081c 	.word	0x4002081c
 80032ac:	cccccccd 	.word	0xcccccccd
 80032b0:	40020880 	.word	0x40020880

080032b4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80032b4:	b480      	push	{r7}
 80032b6:	b085      	sub	sp, #20
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	b2db      	uxtb	r3, r3
 80032c2:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80032c4:	68fa      	ldr	r2, [r7, #12]
 80032c6:	4b0b      	ldr	r3, [pc, #44]	; (80032f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80032c8:	4413      	add	r3, r2
 80032ca:	009b      	lsls	r3, r3, #2
 80032cc:	461a      	mov	r2, r3
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	4a08      	ldr	r2, [pc, #32]	; (80032f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80032d6:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	3b01      	subs	r3, #1
 80032dc:	f003 0303 	and.w	r3, r3, #3
 80032e0:	2201      	movs	r2, #1
 80032e2:	409a      	lsls	r2, r3
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80032e8:	bf00      	nop
 80032ea:	3714      	adds	r7, #20
 80032ec:	46bd      	mov	sp, r7
 80032ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f2:	4770      	bx	lr
 80032f4:	1000823f 	.word	0x1000823f
 80032f8:	40020940 	.word	0x40020940

080032fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80032fc:	b480      	push	{r7}
 80032fe:	b087      	sub	sp, #28
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
 8003304:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003306:	2300      	movs	r3, #0
 8003308:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800330a:	e166      	b.n	80035da <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	681a      	ldr	r2, [r3, #0]
 8003310:	2101      	movs	r1, #1
 8003312:	697b      	ldr	r3, [r7, #20]
 8003314:	fa01 f303 	lsl.w	r3, r1, r3
 8003318:	4013      	ands	r3, r2
 800331a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	2b00      	cmp	r3, #0
 8003320:	f000 8158 	beq.w	80035d4 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	2b01      	cmp	r3, #1
 800332a:	d00b      	beq.n	8003344 <HAL_GPIO_Init+0x48>
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	2b02      	cmp	r3, #2
 8003332:	d007      	beq.n	8003344 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003338:	2b11      	cmp	r3, #17
 800333a:	d003      	beq.n	8003344 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	2b12      	cmp	r3, #18
 8003342:	d130      	bne.n	80033a6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	689b      	ldr	r3, [r3, #8]
 8003348:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800334a:	697b      	ldr	r3, [r7, #20]
 800334c:	005b      	lsls	r3, r3, #1
 800334e:	2203      	movs	r2, #3
 8003350:	fa02 f303 	lsl.w	r3, r2, r3
 8003354:	43db      	mvns	r3, r3
 8003356:	693a      	ldr	r2, [r7, #16]
 8003358:	4013      	ands	r3, r2
 800335a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	68da      	ldr	r2, [r3, #12]
 8003360:	697b      	ldr	r3, [r7, #20]
 8003362:	005b      	lsls	r3, r3, #1
 8003364:	fa02 f303 	lsl.w	r3, r2, r3
 8003368:	693a      	ldr	r2, [r7, #16]
 800336a:	4313      	orrs	r3, r2
 800336c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	693a      	ldr	r2, [r7, #16]
 8003372:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800337a:	2201      	movs	r2, #1
 800337c:	697b      	ldr	r3, [r7, #20]
 800337e:	fa02 f303 	lsl.w	r3, r2, r3
 8003382:	43db      	mvns	r3, r3
 8003384:	693a      	ldr	r2, [r7, #16]
 8003386:	4013      	ands	r3, r2
 8003388:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	091b      	lsrs	r3, r3, #4
 8003390:	f003 0201 	and.w	r2, r3, #1
 8003394:	697b      	ldr	r3, [r7, #20]
 8003396:	fa02 f303 	lsl.w	r3, r2, r3
 800339a:	693a      	ldr	r2, [r7, #16]
 800339c:	4313      	orrs	r3, r2
 800339e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	693a      	ldr	r2, [r7, #16]
 80033a4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	68db      	ldr	r3, [r3, #12]
 80033aa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80033ac:	697b      	ldr	r3, [r7, #20]
 80033ae:	005b      	lsls	r3, r3, #1
 80033b0:	2203      	movs	r2, #3
 80033b2:	fa02 f303 	lsl.w	r3, r2, r3
 80033b6:	43db      	mvns	r3, r3
 80033b8:	693a      	ldr	r2, [r7, #16]
 80033ba:	4013      	ands	r3, r2
 80033bc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	689a      	ldr	r2, [r3, #8]
 80033c2:	697b      	ldr	r3, [r7, #20]
 80033c4:	005b      	lsls	r3, r3, #1
 80033c6:	fa02 f303 	lsl.w	r3, r2, r3
 80033ca:	693a      	ldr	r2, [r7, #16]
 80033cc:	4313      	orrs	r3, r2
 80033ce:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	693a      	ldr	r2, [r7, #16]
 80033d4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	2b02      	cmp	r3, #2
 80033dc:	d003      	beq.n	80033e6 <HAL_GPIO_Init+0xea>
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	2b12      	cmp	r3, #18
 80033e4:	d123      	bne.n	800342e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80033e6:	697b      	ldr	r3, [r7, #20]
 80033e8:	08da      	lsrs	r2, r3, #3
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	3208      	adds	r2, #8
 80033ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033f2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80033f4:	697b      	ldr	r3, [r7, #20]
 80033f6:	f003 0307 	and.w	r3, r3, #7
 80033fa:	009b      	lsls	r3, r3, #2
 80033fc:	220f      	movs	r2, #15
 80033fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003402:	43db      	mvns	r3, r3
 8003404:	693a      	ldr	r2, [r7, #16]
 8003406:	4013      	ands	r3, r2
 8003408:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	691a      	ldr	r2, [r3, #16]
 800340e:	697b      	ldr	r3, [r7, #20]
 8003410:	f003 0307 	and.w	r3, r3, #7
 8003414:	009b      	lsls	r3, r3, #2
 8003416:	fa02 f303 	lsl.w	r3, r2, r3
 800341a:	693a      	ldr	r2, [r7, #16]
 800341c:	4313      	orrs	r3, r2
 800341e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	08da      	lsrs	r2, r3, #3
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	3208      	adds	r2, #8
 8003428:	6939      	ldr	r1, [r7, #16]
 800342a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	005b      	lsls	r3, r3, #1
 8003438:	2203      	movs	r2, #3
 800343a:	fa02 f303 	lsl.w	r3, r2, r3
 800343e:	43db      	mvns	r3, r3
 8003440:	693a      	ldr	r2, [r7, #16]
 8003442:	4013      	ands	r3, r2
 8003444:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	f003 0203 	and.w	r2, r3, #3
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	005b      	lsls	r3, r3, #1
 8003452:	fa02 f303 	lsl.w	r3, r2, r3
 8003456:	693a      	ldr	r2, [r7, #16]
 8003458:	4313      	orrs	r3, r2
 800345a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	693a      	ldr	r2, [r7, #16]
 8003460:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800346a:	2b00      	cmp	r3, #0
 800346c:	f000 80b2 	beq.w	80035d4 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003470:	4b61      	ldr	r3, [pc, #388]	; (80035f8 <HAL_GPIO_Init+0x2fc>)
 8003472:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003474:	4a60      	ldr	r2, [pc, #384]	; (80035f8 <HAL_GPIO_Init+0x2fc>)
 8003476:	f043 0301 	orr.w	r3, r3, #1
 800347a:	6613      	str	r3, [r2, #96]	; 0x60
 800347c:	4b5e      	ldr	r3, [pc, #376]	; (80035f8 <HAL_GPIO_Init+0x2fc>)
 800347e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003480:	f003 0301 	and.w	r3, r3, #1
 8003484:	60bb      	str	r3, [r7, #8]
 8003486:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003488:	4a5c      	ldr	r2, [pc, #368]	; (80035fc <HAL_GPIO_Init+0x300>)
 800348a:	697b      	ldr	r3, [r7, #20]
 800348c:	089b      	lsrs	r3, r3, #2
 800348e:	3302      	adds	r3, #2
 8003490:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003494:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003496:	697b      	ldr	r3, [r7, #20]
 8003498:	f003 0303 	and.w	r3, r3, #3
 800349c:	009b      	lsls	r3, r3, #2
 800349e:	220f      	movs	r2, #15
 80034a0:	fa02 f303 	lsl.w	r3, r2, r3
 80034a4:	43db      	mvns	r3, r3
 80034a6:	693a      	ldr	r2, [r7, #16]
 80034a8:	4013      	ands	r3, r2
 80034aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80034b2:	d02b      	beq.n	800350c <HAL_GPIO_Init+0x210>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	4a52      	ldr	r2, [pc, #328]	; (8003600 <HAL_GPIO_Init+0x304>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d025      	beq.n	8003508 <HAL_GPIO_Init+0x20c>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	4a51      	ldr	r2, [pc, #324]	; (8003604 <HAL_GPIO_Init+0x308>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d01f      	beq.n	8003504 <HAL_GPIO_Init+0x208>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	4a50      	ldr	r2, [pc, #320]	; (8003608 <HAL_GPIO_Init+0x30c>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d019      	beq.n	8003500 <HAL_GPIO_Init+0x204>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	4a4f      	ldr	r2, [pc, #316]	; (800360c <HAL_GPIO_Init+0x310>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d013      	beq.n	80034fc <HAL_GPIO_Init+0x200>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	4a4e      	ldr	r2, [pc, #312]	; (8003610 <HAL_GPIO_Init+0x314>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d00d      	beq.n	80034f8 <HAL_GPIO_Init+0x1fc>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	4a4d      	ldr	r2, [pc, #308]	; (8003614 <HAL_GPIO_Init+0x318>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d007      	beq.n	80034f4 <HAL_GPIO_Init+0x1f8>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	4a4c      	ldr	r2, [pc, #304]	; (8003618 <HAL_GPIO_Init+0x31c>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d101      	bne.n	80034f0 <HAL_GPIO_Init+0x1f4>
 80034ec:	2307      	movs	r3, #7
 80034ee:	e00e      	b.n	800350e <HAL_GPIO_Init+0x212>
 80034f0:	2308      	movs	r3, #8
 80034f2:	e00c      	b.n	800350e <HAL_GPIO_Init+0x212>
 80034f4:	2306      	movs	r3, #6
 80034f6:	e00a      	b.n	800350e <HAL_GPIO_Init+0x212>
 80034f8:	2305      	movs	r3, #5
 80034fa:	e008      	b.n	800350e <HAL_GPIO_Init+0x212>
 80034fc:	2304      	movs	r3, #4
 80034fe:	e006      	b.n	800350e <HAL_GPIO_Init+0x212>
 8003500:	2303      	movs	r3, #3
 8003502:	e004      	b.n	800350e <HAL_GPIO_Init+0x212>
 8003504:	2302      	movs	r3, #2
 8003506:	e002      	b.n	800350e <HAL_GPIO_Init+0x212>
 8003508:	2301      	movs	r3, #1
 800350a:	e000      	b.n	800350e <HAL_GPIO_Init+0x212>
 800350c:	2300      	movs	r3, #0
 800350e:	697a      	ldr	r2, [r7, #20]
 8003510:	f002 0203 	and.w	r2, r2, #3
 8003514:	0092      	lsls	r2, r2, #2
 8003516:	4093      	lsls	r3, r2
 8003518:	693a      	ldr	r2, [r7, #16]
 800351a:	4313      	orrs	r3, r2
 800351c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800351e:	4937      	ldr	r1, [pc, #220]	; (80035fc <HAL_GPIO_Init+0x300>)
 8003520:	697b      	ldr	r3, [r7, #20]
 8003522:	089b      	lsrs	r3, r3, #2
 8003524:	3302      	adds	r3, #2
 8003526:	693a      	ldr	r2, [r7, #16]
 8003528:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800352c:	4b3b      	ldr	r3, [pc, #236]	; (800361c <HAL_GPIO_Init+0x320>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	43db      	mvns	r3, r3
 8003536:	693a      	ldr	r2, [r7, #16]
 8003538:	4013      	ands	r3, r2
 800353a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003544:	2b00      	cmp	r3, #0
 8003546:	d003      	beq.n	8003550 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8003548:	693a      	ldr	r2, [r7, #16]
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	4313      	orrs	r3, r2
 800354e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003550:	4a32      	ldr	r2, [pc, #200]	; (800361c <HAL_GPIO_Init+0x320>)
 8003552:	693b      	ldr	r3, [r7, #16]
 8003554:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8003556:	4b31      	ldr	r3, [pc, #196]	; (800361c <HAL_GPIO_Init+0x320>)
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	43db      	mvns	r3, r3
 8003560:	693a      	ldr	r2, [r7, #16]
 8003562:	4013      	ands	r3, r2
 8003564:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800356e:	2b00      	cmp	r3, #0
 8003570:	d003      	beq.n	800357a <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8003572:	693a      	ldr	r2, [r7, #16]
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	4313      	orrs	r3, r2
 8003578:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800357a:	4a28      	ldr	r2, [pc, #160]	; (800361c <HAL_GPIO_Init+0x320>)
 800357c:	693b      	ldr	r3, [r7, #16]
 800357e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003580:	4b26      	ldr	r3, [pc, #152]	; (800361c <HAL_GPIO_Init+0x320>)
 8003582:	689b      	ldr	r3, [r3, #8]
 8003584:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	43db      	mvns	r3, r3
 800358a:	693a      	ldr	r2, [r7, #16]
 800358c:	4013      	ands	r3, r2
 800358e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003598:	2b00      	cmp	r3, #0
 800359a:	d003      	beq.n	80035a4 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 800359c:	693a      	ldr	r2, [r7, #16]
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	4313      	orrs	r3, r2
 80035a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80035a4:	4a1d      	ldr	r2, [pc, #116]	; (800361c <HAL_GPIO_Init+0x320>)
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80035aa:	4b1c      	ldr	r3, [pc, #112]	; (800361c <HAL_GPIO_Init+0x320>)
 80035ac:	68db      	ldr	r3, [r3, #12]
 80035ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	43db      	mvns	r3, r3
 80035b4:	693a      	ldr	r2, [r7, #16]
 80035b6:	4013      	ands	r3, r2
 80035b8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d003      	beq.n	80035ce <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80035c6:	693a      	ldr	r2, [r7, #16]
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	4313      	orrs	r3, r2
 80035cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80035ce:	4a13      	ldr	r2, [pc, #76]	; (800361c <HAL_GPIO_Init+0x320>)
 80035d0:	693b      	ldr	r3, [r7, #16]
 80035d2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80035d4:	697b      	ldr	r3, [r7, #20]
 80035d6:	3301      	adds	r3, #1
 80035d8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	681a      	ldr	r2, [r3, #0]
 80035de:	697b      	ldr	r3, [r7, #20]
 80035e0:	fa22 f303 	lsr.w	r3, r2, r3
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	f47f ae91 	bne.w	800330c <HAL_GPIO_Init+0x10>
  }
}
 80035ea:	bf00      	nop
 80035ec:	bf00      	nop
 80035ee:	371c      	adds	r7, #28
 80035f0:	46bd      	mov	sp, r7
 80035f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f6:	4770      	bx	lr
 80035f8:	40021000 	.word	0x40021000
 80035fc:	40010000 	.word	0x40010000
 8003600:	48000400 	.word	0x48000400
 8003604:	48000800 	.word	0x48000800
 8003608:	48000c00 	.word	0x48000c00
 800360c:	48001000 	.word	0x48001000
 8003610:	48001400 	.word	0x48001400
 8003614:	48001800 	.word	0x48001800
 8003618:	48001c00 	.word	0x48001c00
 800361c:	40010400 	.word	0x40010400

08003620 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003620:	b480      	push	{r7}
 8003622:	b085      	sub	sp, #20
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
 8003628:	460b      	mov	r3, r1
 800362a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	691a      	ldr	r2, [r3, #16]
 8003630:	887b      	ldrh	r3, [r7, #2]
 8003632:	4013      	ands	r3, r2
 8003634:	2b00      	cmp	r3, #0
 8003636:	d002      	beq.n	800363e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003638:	2301      	movs	r3, #1
 800363a:	73fb      	strb	r3, [r7, #15]
 800363c:	e001      	b.n	8003642 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800363e:	2300      	movs	r3, #0
 8003640:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003642:	7bfb      	ldrb	r3, [r7, #15]
}
 8003644:	4618      	mov	r0, r3
 8003646:	3714      	adds	r7, #20
 8003648:	46bd      	mov	sp, r7
 800364a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364e:	4770      	bx	lr

08003650 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003650:	b480      	push	{r7}
 8003652:	b083      	sub	sp, #12
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
 8003658:	460b      	mov	r3, r1
 800365a:	807b      	strh	r3, [r7, #2]
 800365c:	4613      	mov	r3, r2
 800365e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003660:	787b      	ldrb	r3, [r7, #1]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d003      	beq.n	800366e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003666:	887a      	ldrh	r2, [r7, #2]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800366c:	e002      	b.n	8003674 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800366e:	887a      	ldrh	r2, [r7, #2]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003674:	bf00      	nop
 8003676:	370c      	adds	r7, #12
 8003678:	46bd      	mov	sp, r7
 800367a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367e:	4770      	bx	lr

08003680 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003680:	b480      	push	{r7}
 8003682:	b083      	sub	sp, #12
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
 8003688:	460b      	mov	r3, r1
 800368a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	695a      	ldr	r2, [r3, #20]
 8003690:	887b      	ldrh	r3, [r7, #2]
 8003692:	4013      	ands	r3, r2
 8003694:	2b00      	cmp	r3, #0
 8003696:	d003      	beq.n	80036a0 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003698:	887a      	ldrh	r2, [r7, #2]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	629a      	str	r2, [r3, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 800369e:	e002      	b.n	80036a6 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80036a0:	887a      	ldrh	r2, [r7, #2]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	619a      	str	r2, [r3, #24]
}
 80036a6:	bf00      	nop
 80036a8:	370c      	adds	r7, #12
 80036aa:	46bd      	mov	sp, r7
 80036ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b0:	4770      	bx	lr
	...

080036b4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b082      	sub	sp, #8
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	4603      	mov	r3, r0
 80036bc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80036be:	4b08      	ldr	r3, [pc, #32]	; (80036e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80036c0:	695a      	ldr	r2, [r3, #20]
 80036c2:	88fb      	ldrh	r3, [r7, #6]
 80036c4:	4013      	ands	r3, r2
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d006      	beq.n	80036d8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80036ca:	4a05      	ldr	r2, [pc, #20]	; (80036e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80036cc:	88fb      	ldrh	r3, [r7, #6]
 80036ce:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80036d0:	88fb      	ldrh	r3, [r7, #6]
 80036d2:	4618      	mov	r0, r3
 80036d4:	f009 fe24 	bl	800d320 <HAL_GPIO_EXTI_Callback>
  }
}
 80036d8:	bf00      	nop
 80036da:	3708      	adds	r7, #8
 80036dc:	46bd      	mov	sp, r7
 80036de:	bd80      	pop	{r7, pc}
 80036e0:	40010400 	.word	0x40010400

080036e4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b082      	sub	sp, #8
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d101      	bne.n	80036f6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80036f2:	2301      	movs	r3, #1
 80036f4:	e081      	b.n	80037fa <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036fc:	b2db      	uxtb	r3, r3
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d106      	bne.n	8003710 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2200      	movs	r2, #0
 8003706:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800370a:	6878      	ldr	r0, [r7, #4]
 800370c:	f00a fdea 	bl	800e2e4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2224      	movs	r2, #36	; 0x24
 8003714:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	681a      	ldr	r2, [r3, #0]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f022 0201 	bic.w	r2, r2, #1
 8003726:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	685a      	ldr	r2, [r3, #4]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003734:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	689a      	ldr	r2, [r3, #8]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003744:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	68db      	ldr	r3, [r3, #12]
 800374a:	2b01      	cmp	r3, #1
 800374c:	d107      	bne.n	800375e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	689a      	ldr	r2, [r3, #8]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800375a:	609a      	str	r2, [r3, #8]
 800375c:	e006      	b.n	800376c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	689a      	ldr	r2, [r3, #8]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800376a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	68db      	ldr	r3, [r3, #12]
 8003770:	2b02      	cmp	r3, #2
 8003772:	d104      	bne.n	800377e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800377c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	687a      	ldr	r2, [r7, #4]
 8003786:	6812      	ldr	r2, [r2, #0]
 8003788:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800378c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003790:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	68da      	ldr	r2, [r3, #12]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80037a0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	691a      	ldr	r2, [r3, #16]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	695b      	ldr	r3, [r3, #20]
 80037aa:	ea42 0103 	orr.w	r1, r2, r3
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	699b      	ldr	r3, [r3, #24]
 80037b2:	021a      	lsls	r2, r3, #8
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	430a      	orrs	r2, r1
 80037ba:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	69d9      	ldr	r1, [r3, #28]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6a1a      	ldr	r2, [r3, #32]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	430a      	orrs	r2, r1
 80037ca:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	681a      	ldr	r2, [r3, #0]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f042 0201 	orr.w	r2, r2, #1
 80037da:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2200      	movs	r2, #0
 80037e0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2220      	movs	r2, #32
 80037e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2200      	movs	r2, #0
 80037ee:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2200      	movs	r2, #0
 80037f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80037f8:	2300      	movs	r3, #0
}
 80037fa:	4618      	mov	r0, r3
 80037fc:	3708      	adds	r7, #8
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd80      	pop	{r7, pc}
	...

08003804 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b088      	sub	sp, #32
 8003808:	af02      	add	r7, sp, #8
 800380a:	60f8      	str	r0, [r7, #12]
 800380c:	4608      	mov	r0, r1
 800380e:	4611      	mov	r1, r2
 8003810:	461a      	mov	r2, r3
 8003812:	4603      	mov	r3, r0
 8003814:	817b      	strh	r3, [r7, #10]
 8003816:	460b      	mov	r3, r1
 8003818:	813b      	strh	r3, [r7, #8]
 800381a:	4613      	mov	r3, r2
 800381c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003824:	b2db      	uxtb	r3, r3
 8003826:	2b20      	cmp	r3, #32
 8003828:	f040 80f9 	bne.w	8003a1e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800382c:	6a3b      	ldr	r3, [r7, #32]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d002      	beq.n	8003838 <HAL_I2C_Mem_Write+0x34>
 8003832:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003834:	2b00      	cmp	r3, #0
 8003836:	d105      	bne.n	8003844 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800383e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003840:	2301      	movs	r3, #1
 8003842:	e0ed      	b.n	8003a20 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800384a:	2b01      	cmp	r3, #1
 800384c:	d101      	bne.n	8003852 <HAL_I2C_Mem_Write+0x4e>
 800384e:	2302      	movs	r3, #2
 8003850:	e0e6      	b.n	8003a20 <HAL_I2C_Mem_Write+0x21c>
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	2201      	movs	r2, #1
 8003856:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800385a:	f7fd fc43 	bl	80010e4 <HAL_GetTick>
 800385e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003860:	697b      	ldr	r3, [r7, #20]
 8003862:	9300      	str	r3, [sp, #0]
 8003864:	2319      	movs	r3, #25
 8003866:	2201      	movs	r2, #1
 8003868:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800386c:	68f8      	ldr	r0, [r7, #12]
 800386e:	f000 fac3 	bl	8003df8 <I2C_WaitOnFlagUntilTimeout>
 8003872:	4603      	mov	r3, r0
 8003874:	2b00      	cmp	r3, #0
 8003876:	d001      	beq.n	800387c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003878:	2301      	movs	r3, #1
 800387a:	e0d1      	b.n	8003a20 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	2221      	movs	r2, #33	; 0x21
 8003880:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	2240      	movs	r2, #64	; 0x40
 8003888:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	2200      	movs	r2, #0
 8003890:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	6a3a      	ldr	r2, [r7, #32]
 8003896:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800389c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	2200      	movs	r2, #0
 80038a2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80038a4:	88f8      	ldrh	r0, [r7, #6]
 80038a6:	893a      	ldrh	r2, [r7, #8]
 80038a8:	8979      	ldrh	r1, [r7, #10]
 80038aa:	697b      	ldr	r3, [r7, #20]
 80038ac:	9301      	str	r3, [sp, #4]
 80038ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038b0:	9300      	str	r3, [sp, #0]
 80038b2:	4603      	mov	r3, r0
 80038b4:	68f8      	ldr	r0, [r7, #12]
 80038b6:	f000 f9d3 	bl	8003c60 <I2C_RequestMemoryWrite>
 80038ba:	4603      	mov	r3, r0
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d005      	beq.n	80038cc <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	2200      	movs	r2, #0
 80038c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80038c8:	2301      	movs	r3, #1
 80038ca:	e0a9      	b.n	8003a20 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038d0:	b29b      	uxth	r3, r3
 80038d2:	2bff      	cmp	r3, #255	; 0xff
 80038d4:	d90e      	bls.n	80038f4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	22ff      	movs	r2, #255	; 0xff
 80038da:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038e0:	b2da      	uxtb	r2, r3
 80038e2:	8979      	ldrh	r1, [r7, #10]
 80038e4:	2300      	movs	r3, #0
 80038e6:	9300      	str	r3, [sp, #0]
 80038e8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80038ec:	68f8      	ldr	r0, [r7, #12]
 80038ee:	f000 fba5 	bl	800403c <I2C_TransferConfig>
 80038f2:	e00f      	b.n	8003914 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038f8:	b29a      	uxth	r2, r3
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003902:	b2da      	uxtb	r2, r3
 8003904:	8979      	ldrh	r1, [r7, #10]
 8003906:	2300      	movs	r3, #0
 8003908:	9300      	str	r3, [sp, #0]
 800390a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800390e:	68f8      	ldr	r0, [r7, #12]
 8003910:	f000 fb94 	bl	800403c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003914:	697a      	ldr	r2, [r7, #20]
 8003916:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003918:	68f8      	ldr	r0, [r7, #12]
 800391a:	f000 faad 	bl	8003e78 <I2C_WaitOnTXISFlagUntilTimeout>
 800391e:	4603      	mov	r3, r0
 8003920:	2b00      	cmp	r3, #0
 8003922:	d001      	beq.n	8003928 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003924:	2301      	movs	r3, #1
 8003926:	e07b      	b.n	8003a20 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800392c:	781a      	ldrb	r2, [r3, #0]
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003938:	1c5a      	adds	r2, r3, #1
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003942:	b29b      	uxth	r3, r3
 8003944:	3b01      	subs	r3, #1
 8003946:	b29a      	uxth	r2, r3
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003950:	3b01      	subs	r3, #1
 8003952:	b29a      	uxth	r2, r3
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800395c:	b29b      	uxth	r3, r3
 800395e:	2b00      	cmp	r3, #0
 8003960:	d034      	beq.n	80039cc <HAL_I2C_Mem_Write+0x1c8>
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003966:	2b00      	cmp	r3, #0
 8003968:	d130      	bne.n	80039cc <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	9300      	str	r3, [sp, #0]
 800396e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003970:	2200      	movs	r2, #0
 8003972:	2180      	movs	r1, #128	; 0x80
 8003974:	68f8      	ldr	r0, [r7, #12]
 8003976:	f000 fa3f 	bl	8003df8 <I2C_WaitOnFlagUntilTimeout>
 800397a:	4603      	mov	r3, r0
 800397c:	2b00      	cmp	r3, #0
 800397e:	d001      	beq.n	8003984 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003980:	2301      	movs	r3, #1
 8003982:	e04d      	b.n	8003a20 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003988:	b29b      	uxth	r3, r3
 800398a:	2bff      	cmp	r3, #255	; 0xff
 800398c:	d90e      	bls.n	80039ac <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	22ff      	movs	r2, #255	; 0xff
 8003992:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003998:	b2da      	uxtb	r2, r3
 800399a:	8979      	ldrh	r1, [r7, #10]
 800399c:	2300      	movs	r3, #0
 800399e:	9300      	str	r3, [sp, #0]
 80039a0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80039a4:	68f8      	ldr	r0, [r7, #12]
 80039a6:	f000 fb49 	bl	800403c <I2C_TransferConfig>
 80039aa:	e00f      	b.n	80039cc <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039b0:	b29a      	uxth	r2, r3
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039ba:	b2da      	uxtb	r2, r3
 80039bc:	8979      	ldrh	r1, [r7, #10]
 80039be:	2300      	movs	r3, #0
 80039c0:	9300      	str	r3, [sp, #0]
 80039c2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80039c6:	68f8      	ldr	r0, [r7, #12]
 80039c8:	f000 fb38 	bl	800403c <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039d0:	b29b      	uxth	r3, r3
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d19e      	bne.n	8003914 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80039d6:	697a      	ldr	r2, [r7, #20]
 80039d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80039da:	68f8      	ldr	r0, [r7, #12]
 80039dc:	f000 fa8c 	bl	8003ef8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80039e0:	4603      	mov	r3, r0
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d001      	beq.n	80039ea <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80039e6:	2301      	movs	r3, #1
 80039e8:	e01a      	b.n	8003a20 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	2220      	movs	r2, #32
 80039f0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	6859      	ldr	r1, [r3, #4]
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681a      	ldr	r2, [r3, #0]
 80039fc:	4b0a      	ldr	r3, [pc, #40]	; (8003a28 <HAL_I2C_Mem_Write+0x224>)
 80039fe:	400b      	ands	r3, r1
 8003a00:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	2220      	movs	r2, #32
 8003a06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	2200      	movs	r2, #0
 8003a16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	e000      	b.n	8003a20 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003a1e:	2302      	movs	r3, #2
  }
}
 8003a20:	4618      	mov	r0, r3
 8003a22:	3718      	adds	r7, #24
 8003a24:	46bd      	mov	sp, r7
 8003a26:	bd80      	pop	{r7, pc}
 8003a28:	fe00e800 	.word	0xfe00e800

08003a2c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b088      	sub	sp, #32
 8003a30:	af02      	add	r7, sp, #8
 8003a32:	60f8      	str	r0, [r7, #12]
 8003a34:	4608      	mov	r0, r1
 8003a36:	4611      	mov	r1, r2
 8003a38:	461a      	mov	r2, r3
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	817b      	strh	r3, [r7, #10]
 8003a3e:	460b      	mov	r3, r1
 8003a40:	813b      	strh	r3, [r7, #8]
 8003a42:	4613      	mov	r3, r2
 8003a44:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a4c:	b2db      	uxtb	r3, r3
 8003a4e:	2b20      	cmp	r3, #32
 8003a50:	f040 80fd 	bne.w	8003c4e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a54:	6a3b      	ldr	r3, [r7, #32]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d002      	beq.n	8003a60 <HAL_I2C_Mem_Read+0x34>
 8003a5a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d105      	bne.n	8003a6c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a66:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003a68:	2301      	movs	r3, #1
 8003a6a:	e0f1      	b.n	8003c50 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003a72:	2b01      	cmp	r3, #1
 8003a74:	d101      	bne.n	8003a7a <HAL_I2C_Mem_Read+0x4e>
 8003a76:	2302      	movs	r3, #2
 8003a78:	e0ea      	b.n	8003c50 <HAL_I2C_Mem_Read+0x224>
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	2201      	movs	r2, #1
 8003a7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003a82:	f7fd fb2f 	bl	80010e4 <HAL_GetTick>
 8003a86:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003a88:	697b      	ldr	r3, [r7, #20]
 8003a8a:	9300      	str	r3, [sp, #0]
 8003a8c:	2319      	movs	r3, #25
 8003a8e:	2201      	movs	r2, #1
 8003a90:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003a94:	68f8      	ldr	r0, [r7, #12]
 8003a96:	f000 f9af 	bl	8003df8 <I2C_WaitOnFlagUntilTimeout>
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d001      	beq.n	8003aa4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	e0d5      	b.n	8003c50 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	2222      	movs	r2, #34	; 0x22
 8003aa8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	2240      	movs	r2, #64	; 0x40
 8003ab0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	6a3a      	ldr	r2, [r7, #32]
 8003abe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003ac4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003acc:	88f8      	ldrh	r0, [r7, #6]
 8003ace:	893a      	ldrh	r2, [r7, #8]
 8003ad0:	8979      	ldrh	r1, [r7, #10]
 8003ad2:	697b      	ldr	r3, [r7, #20]
 8003ad4:	9301      	str	r3, [sp, #4]
 8003ad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ad8:	9300      	str	r3, [sp, #0]
 8003ada:	4603      	mov	r3, r0
 8003adc:	68f8      	ldr	r0, [r7, #12]
 8003ade:	f000 f913 	bl	8003d08 <I2C_RequestMemoryRead>
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d005      	beq.n	8003af4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	2200      	movs	r2, #0
 8003aec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003af0:	2301      	movs	r3, #1
 8003af2:	e0ad      	b.n	8003c50 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003af8:	b29b      	uxth	r3, r3
 8003afa:	2bff      	cmp	r3, #255	; 0xff
 8003afc:	d90e      	bls.n	8003b1c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	22ff      	movs	r2, #255	; 0xff
 8003b02:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b08:	b2da      	uxtb	r2, r3
 8003b0a:	8979      	ldrh	r1, [r7, #10]
 8003b0c:	4b52      	ldr	r3, [pc, #328]	; (8003c58 <HAL_I2C_Mem_Read+0x22c>)
 8003b0e:	9300      	str	r3, [sp, #0]
 8003b10:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003b14:	68f8      	ldr	r0, [r7, #12]
 8003b16:	f000 fa91 	bl	800403c <I2C_TransferConfig>
 8003b1a:	e00f      	b.n	8003b3c <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b20:	b29a      	uxth	r2, r3
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b2a:	b2da      	uxtb	r2, r3
 8003b2c:	8979      	ldrh	r1, [r7, #10]
 8003b2e:	4b4a      	ldr	r3, [pc, #296]	; (8003c58 <HAL_I2C_Mem_Read+0x22c>)
 8003b30:	9300      	str	r3, [sp, #0]
 8003b32:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003b36:	68f8      	ldr	r0, [r7, #12]
 8003b38:	f000 fa80 	bl	800403c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003b3c:	697b      	ldr	r3, [r7, #20]
 8003b3e:	9300      	str	r3, [sp, #0]
 8003b40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b42:	2200      	movs	r2, #0
 8003b44:	2104      	movs	r1, #4
 8003b46:	68f8      	ldr	r0, [r7, #12]
 8003b48:	f000 f956 	bl	8003df8 <I2C_WaitOnFlagUntilTimeout>
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d001      	beq.n	8003b56 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003b52:	2301      	movs	r3, #1
 8003b54:	e07c      	b.n	8003c50 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b60:	b2d2      	uxtb	r2, r2
 8003b62:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b68:	1c5a      	adds	r2, r3, #1
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b72:	3b01      	subs	r3, #1
 8003b74:	b29a      	uxth	r2, r3
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b7e:	b29b      	uxth	r3, r3
 8003b80:	3b01      	subs	r3, #1
 8003b82:	b29a      	uxth	r2, r3
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b8c:	b29b      	uxth	r3, r3
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d034      	beq.n	8003bfc <HAL_I2C_Mem_Read+0x1d0>
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d130      	bne.n	8003bfc <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003b9a:	697b      	ldr	r3, [r7, #20]
 8003b9c:	9300      	str	r3, [sp, #0]
 8003b9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	2180      	movs	r1, #128	; 0x80
 8003ba4:	68f8      	ldr	r0, [r7, #12]
 8003ba6:	f000 f927 	bl	8003df8 <I2C_WaitOnFlagUntilTimeout>
 8003baa:	4603      	mov	r3, r0
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d001      	beq.n	8003bb4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	e04d      	b.n	8003c50 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bb8:	b29b      	uxth	r3, r3
 8003bba:	2bff      	cmp	r3, #255	; 0xff
 8003bbc:	d90e      	bls.n	8003bdc <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	22ff      	movs	r2, #255	; 0xff
 8003bc2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bc8:	b2da      	uxtb	r2, r3
 8003bca:	8979      	ldrh	r1, [r7, #10]
 8003bcc:	2300      	movs	r3, #0
 8003bce:	9300      	str	r3, [sp, #0]
 8003bd0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003bd4:	68f8      	ldr	r0, [r7, #12]
 8003bd6:	f000 fa31 	bl	800403c <I2C_TransferConfig>
 8003bda:	e00f      	b.n	8003bfc <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003be0:	b29a      	uxth	r2, r3
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bea:	b2da      	uxtb	r2, r3
 8003bec:	8979      	ldrh	r1, [r7, #10]
 8003bee:	2300      	movs	r3, #0
 8003bf0:	9300      	str	r3, [sp, #0]
 8003bf2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003bf6:	68f8      	ldr	r0, [r7, #12]
 8003bf8:	f000 fa20 	bl	800403c <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c00:	b29b      	uxth	r3, r3
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d19a      	bne.n	8003b3c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c06:	697a      	ldr	r2, [r7, #20]
 8003c08:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003c0a:	68f8      	ldr	r0, [r7, #12]
 8003c0c:	f000 f974 	bl	8003ef8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003c10:	4603      	mov	r3, r0
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d001      	beq.n	8003c1a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8003c16:	2301      	movs	r3, #1
 8003c18:	e01a      	b.n	8003c50 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	2220      	movs	r2, #32
 8003c20:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	6859      	ldr	r1, [r3, #4]
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681a      	ldr	r2, [r3, #0]
 8003c2c:	4b0b      	ldr	r3, [pc, #44]	; (8003c5c <HAL_I2C_Mem_Read+0x230>)
 8003c2e:	400b      	ands	r3, r1
 8003c30:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	2220      	movs	r2, #32
 8003c36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	2200      	movs	r2, #0
 8003c46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	e000      	b.n	8003c50 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003c4e:	2302      	movs	r3, #2
  }
}
 8003c50:	4618      	mov	r0, r3
 8003c52:	3718      	adds	r7, #24
 8003c54:	46bd      	mov	sp, r7
 8003c56:	bd80      	pop	{r7, pc}
 8003c58:	80002400 	.word	0x80002400
 8003c5c:	fe00e800 	.word	0xfe00e800

08003c60 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b086      	sub	sp, #24
 8003c64:	af02      	add	r7, sp, #8
 8003c66:	60f8      	str	r0, [r7, #12]
 8003c68:	4608      	mov	r0, r1
 8003c6a:	4611      	mov	r1, r2
 8003c6c:	461a      	mov	r2, r3
 8003c6e:	4603      	mov	r3, r0
 8003c70:	817b      	strh	r3, [r7, #10]
 8003c72:	460b      	mov	r3, r1
 8003c74:	813b      	strh	r3, [r7, #8]
 8003c76:	4613      	mov	r3, r2
 8003c78:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003c7a:	88fb      	ldrh	r3, [r7, #6]
 8003c7c:	b2da      	uxtb	r2, r3
 8003c7e:	8979      	ldrh	r1, [r7, #10]
 8003c80:	4b20      	ldr	r3, [pc, #128]	; (8003d04 <I2C_RequestMemoryWrite+0xa4>)
 8003c82:	9300      	str	r3, [sp, #0]
 8003c84:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003c88:	68f8      	ldr	r0, [r7, #12]
 8003c8a:	f000 f9d7 	bl	800403c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c8e:	69fa      	ldr	r2, [r7, #28]
 8003c90:	69b9      	ldr	r1, [r7, #24]
 8003c92:	68f8      	ldr	r0, [r7, #12]
 8003c94:	f000 f8f0 	bl	8003e78 <I2C_WaitOnTXISFlagUntilTimeout>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d001      	beq.n	8003ca2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	e02c      	b.n	8003cfc <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003ca2:	88fb      	ldrh	r3, [r7, #6]
 8003ca4:	2b01      	cmp	r3, #1
 8003ca6:	d105      	bne.n	8003cb4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003ca8:	893b      	ldrh	r3, [r7, #8]
 8003caa:	b2da      	uxtb	r2, r3
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	629a      	str	r2, [r3, #40]	; 0x28
 8003cb2:	e015      	b.n	8003ce0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003cb4:	893b      	ldrh	r3, [r7, #8]
 8003cb6:	0a1b      	lsrs	r3, r3, #8
 8003cb8:	b29b      	uxth	r3, r3
 8003cba:	b2da      	uxtb	r2, r3
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003cc2:	69fa      	ldr	r2, [r7, #28]
 8003cc4:	69b9      	ldr	r1, [r7, #24]
 8003cc6:	68f8      	ldr	r0, [r7, #12]
 8003cc8:	f000 f8d6 	bl	8003e78 <I2C_WaitOnTXISFlagUntilTimeout>
 8003ccc:	4603      	mov	r3, r0
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d001      	beq.n	8003cd6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	e012      	b.n	8003cfc <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003cd6:	893b      	ldrh	r3, [r7, #8]
 8003cd8:	b2da      	uxtb	r2, r3
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003ce0:	69fb      	ldr	r3, [r7, #28]
 8003ce2:	9300      	str	r3, [sp, #0]
 8003ce4:	69bb      	ldr	r3, [r7, #24]
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	2180      	movs	r1, #128	; 0x80
 8003cea:	68f8      	ldr	r0, [r7, #12]
 8003cec:	f000 f884 	bl	8003df8 <I2C_WaitOnFlagUntilTimeout>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d001      	beq.n	8003cfa <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	e000      	b.n	8003cfc <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003cfa:	2300      	movs	r3, #0
}
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	3710      	adds	r7, #16
 8003d00:	46bd      	mov	sp, r7
 8003d02:	bd80      	pop	{r7, pc}
 8003d04:	80002000 	.word	0x80002000

08003d08 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b086      	sub	sp, #24
 8003d0c:	af02      	add	r7, sp, #8
 8003d0e:	60f8      	str	r0, [r7, #12]
 8003d10:	4608      	mov	r0, r1
 8003d12:	4611      	mov	r1, r2
 8003d14:	461a      	mov	r2, r3
 8003d16:	4603      	mov	r3, r0
 8003d18:	817b      	strh	r3, [r7, #10]
 8003d1a:	460b      	mov	r3, r1
 8003d1c:	813b      	strh	r3, [r7, #8]
 8003d1e:	4613      	mov	r3, r2
 8003d20:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003d22:	88fb      	ldrh	r3, [r7, #6]
 8003d24:	b2da      	uxtb	r2, r3
 8003d26:	8979      	ldrh	r1, [r7, #10]
 8003d28:	4b20      	ldr	r3, [pc, #128]	; (8003dac <I2C_RequestMemoryRead+0xa4>)
 8003d2a:	9300      	str	r3, [sp, #0]
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	68f8      	ldr	r0, [r7, #12]
 8003d30:	f000 f984 	bl	800403c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d34:	69fa      	ldr	r2, [r7, #28]
 8003d36:	69b9      	ldr	r1, [r7, #24]
 8003d38:	68f8      	ldr	r0, [r7, #12]
 8003d3a:	f000 f89d 	bl	8003e78 <I2C_WaitOnTXISFlagUntilTimeout>
 8003d3e:	4603      	mov	r3, r0
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d001      	beq.n	8003d48 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003d44:	2301      	movs	r3, #1
 8003d46:	e02c      	b.n	8003da2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003d48:	88fb      	ldrh	r3, [r7, #6]
 8003d4a:	2b01      	cmp	r3, #1
 8003d4c:	d105      	bne.n	8003d5a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003d4e:	893b      	ldrh	r3, [r7, #8]
 8003d50:	b2da      	uxtb	r2, r3
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	629a      	str	r2, [r3, #40]	; 0x28
 8003d58:	e015      	b.n	8003d86 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003d5a:	893b      	ldrh	r3, [r7, #8]
 8003d5c:	0a1b      	lsrs	r3, r3, #8
 8003d5e:	b29b      	uxth	r3, r3
 8003d60:	b2da      	uxtb	r2, r3
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d68:	69fa      	ldr	r2, [r7, #28]
 8003d6a:	69b9      	ldr	r1, [r7, #24]
 8003d6c:	68f8      	ldr	r0, [r7, #12]
 8003d6e:	f000 f883 	bl	8003e78 <I2C_WaitOnTXISFlagUntilTimeout>
 8003d72:	4603      	mov	r3, r0
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d001      	beq.n	8003d7c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003d78:	2301      	movs	r3, #1
 8003d7a:	e012      	b.n	8003da2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003d7c:	893b      	ldrh	r3, [r7, #8]
 8003d7e:	b2da      	uxtb	r2, r3
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003d86:	69fb      	ldr	r3, [r7, #28]
 8003d88:	9300      	str	r3, [sp, #0]
 8003d8a:	69bb      	ldr	r3, [r7, #24]
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	2140      	movs	r1, #64	; 0x40
 8003d90:	68f8      	ldr	r0, [r7, #12]
 8003d92:	f000 f831 	bl	8003df8 <I2C_WaitOnFlagUntilTimeout>
 8003d96:	4603      	mov	r3, r0
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d001      	beq.n	8003da0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	e000      	b.n	8003da2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003da0:	2300      	movs	r3, #0
}
 8003da2:	4618      	mov	r0, r3
 8003da4:	3710      	adds	r7, #16
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bd80      	pop	{r7, pc}
 8003daa:	bf00      	nop
 8003dac:	80002000 	.word	0x80002000

08003db0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003db0:	b480      	push	{r7}
 8003db2:	b083      	sub	sp, #12
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	699b      	ldr	r3, [r3, #24]
 8003dbe:	f003 0302 	and.w	r3, r3, #2
 8003dc2:	2b02      	cmp	r3, #2
 8003dc4:	d103      	bne.n	8003dce <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	2200      	movs	r2, #0
 8003dcc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	699b      	ldr	r3, [r3, #24]
 8003dd4:	f003 0301 	and.w	r3, r3, #1
 8003dd8:	2b01      	cmp	r3, #1
 8003dda:	d007      	beq.n	8003dec <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	699a      	ldr	r2, [r3, #24]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f042 0201 	orr.w	r2, r2, #1
 8003dea:	619a      	str	r2, [r3, #24]
  }
}
 8003dec:	bf00      	nop
 8003dee:	370c      	adds	r7, #12
 8003df0:	46bd      	mov	sp, r7
 8003df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df6:	4770      	bx	lr

08003df8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b084      	sub	sp, #16
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	60f8      	str	r0, [r7, #12]
 8003e00:	60b9      	str	r1, [r7, #8]
 8003e02:	603b      	str	r3, [r7, #0]
 8003e04:	4613      	mov	r3, r2
 8003e06:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e08:	e022      	b.n	8003e50 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e10:	d01e      	beq.n	8003e50 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e12:	f7fd f967 	bl	80010e4 <HAL_GetTick>
 8003e16:	4602      	mov	r2, r0
 8003e18:	69bb      	ldr	r3, [r7, #24]
 8003e1a:	1ad3      	subs	r3, r2, r3
 8003e1c:	683a      	ldr	r2, [r7, #0]
 8003e1e:	429a      	cmp	r2, r3
 8003e20:	d302      	bcc.n	8003e28 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d113      	bne.n	8003e50 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e2c:	f043 0220 	orr.w	r2, r3, #32
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	2220      	movs	r2, #32
 8003e38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	2200      	movs	r2, #0
 8003e48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	e00f      	b.n	8003e70 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	699a      	ldr	r2, [r3, #24]
 8003e56:	68bb      	ldr	r3, [r7, #8]
 8003e58:	4013      	ands	r3, r2
 8003e5a:	68ba      	ldr	r2, [r7, #8]
 8003e5c:	429a      	cmp	r2, r3
 8003e5e:	bf0c      	ite	eq
 8003e60:	2301      	moveq	r3, #1
 8003e62:	2300      	movne	r3, #0
 8003e64:	b2db      	uxtb	r3, r3
 8003e66:	461a      	mov	r2, r3
 8003e68:	79fb      	ldrb	r3, [r7, #7]
 8003e6a:	429a      	cmp	r2, r3
 8003e6c:	d0cd      	beq.n	8003e0a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003e6e:	2300      	movs	r3, #0
}
 8003e70:	4618      	mov	r0, r3
 8003e72:	3710      	adds	r7, #16
 8003e74:	46bd      	mov	sp, r7
 8003e76:	bd80      	pop	{r7, pc}

08003e78 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b084      	sub	sp, #16
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	60f8      	str	r0, [r7, #12]
 8003e80:	60b9      	str	r1, [r7, #8]
 8003e82:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003e84:	e02c      	b.n	8003ee0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e86:	687a      	ldr	r2, [r7, #4]
 8003e88:	68b9      	ldr	r1, [r7, #8]
 8003e8a:	68f8      	ldr	r0, [r7, #12]
 8003e8c:	f000 f870 	bl	8003f70 <I2C_IsAcknowledgeFailed>
 8003e90:	4603      	mov	r3, r0
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d001      	beq.n	8003e9a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003e96:	2301      	movs	r3, #1
 8003e98:	e02a      	b.n	8003ef0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e9a:	68bb      	ldr	r3, [r7, #8]
 8003e9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ea0:	d01e      	beq.n	8003ee0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ea2:	f7fd f91f 	bl	80010e4 <HAL_GetTick>
 8003ea6:	4602      	mov	r2, r0
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	1ad3      	subs	r3, r2, r3
 8003eac:	68ba      	ldr	r2, [r7, #8]
 8003eae:	429a      	cmp	r2, r3
 8003eb0:	d302      	bcc.n	8003eb8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003eb2:	68bb      	ldr	r3, [r7, #8]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d113      	bne.n	8003ee0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ebc:	f043 0220 	orr.w	r2, r3, #32
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	2220      	movs	r2, #32
 8003ec8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003edc:	2301      	movs	r3, #1
 8003ede:	e007      	b.n	8003ef0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	699b      	ldr	r3, [r3, #24]
 8003ee6:	f003 0302 	and.w	r3, r3, #2
 8003eea:	2b02      	cmp	r3, #2
 8003eec:	d1cb      	bne.n	8003e86 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003eee:	2300      	movs	r3, #0
}
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	3710      	adds	r7, #16
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	bd80      	pop	{r7, pc}

08003ef8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b084      	sub	sp, #16
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	60f8      	str	r0, [r7, #12]
 8003f00:	60b9      	str	r1, [r7, #8]
 8003f02:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003f04:	e028      	b.n	8003f58 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f06:	687a      	ldr	r2, [r7, #4]
 8003f08:	68b9      	ldr	r1, [r7, #8]
 8003f0a:	68f8      	ldr	r0, [r7, #12]
 8003f0c:	f000 f830 	bl	8003f70 <I2C_IsAcknowledgeFailed>
 8003f10:	4603      	mov	r3, r0
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d001      	beq.n	8003f1a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003f16:	2301      	movs	r3, #1
 8003f18:	e026      	b.n	8003f68 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f1a:	f7fd f8e3 	bl	80010e4 <HAL_GetTick>
 8003f1e:	4602      	mov	r2, r0
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	1ad3      	subs	r3, r2, r3
 8003f24:	68ba      	ldr	r2, [r7, #8]
 8003f26:	429a      	cmp	r2, r3
 8003f28:	d302      	bcc.n	8003f30 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003f2a:	68bb      	ldr	r3, [r7, #8]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d113      	bne.n	8003f58 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f34:	f043 0220 	orr.w	r2, r3, #32
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	2220      	movs	r2, #32
 8003f40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	2200      	movs	r2, #0
 8003f48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003f54:	2301      	movs	r3, #1
 8003f56:	e007      	b.n	8003f68 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	699b      	ldr	r3, [r3, #24]
 8003f5e:	f003 0320 	and.w	r3, r3, #32
 8003f62:	2b20      	cmp	r3, #32
 8003f64:	d1cf      	bne.n	8003f06 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003f66:	2300      	movs	r3, #0
}
 8003f68:	4618      	mov	r0, r3
 8003f6a:	3710      	adds	r7, #16
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bd80      	pop	{r7, pc}

08003f70 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b084      	sub	sp, #16
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	60f8      	str	r0, [r7, #12]
 8003f78:	60b9      	str	r1, [r7, #8]
 8003f7a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	699b      	ldr	r3, [r3, #24]
 8003f82:	f003 0310 	and.w	r3, r3, #16
 8003f86:	2b10      	cmp	r3, #16
 8003f88:	d151      	bne.n	800402e <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003f8a:	e022      	b.n	8003fd2 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003f8c:	68bb      	ldr	r3, [r7, #8]
 8003f8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f92:	d01e      	beq.n	8003fd2 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f94:	f7fd f8a6 	bl	80010e4 <HAL_GetTick>
 8003f98:	4602      	mov	r2, r0
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	1ad3      	subs	r3, r2, r3
 8003f9e:	68ba      	ldr	r2, [r7, #8]
 8003fa0:	429a      	cmp	r2, r3
 8003fa2:	d302      	bcc.n	8003faa <I2C_IsAcknowledgeFailed+0x3a>
 8003fa4:	68bb      	ldr	r3, [r7, #8]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d113      	bne.n	8003fd2 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fae:	f043 0220 	orr.w	r2, r3, #32
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	2220      	movs	r2, #32
 8003fba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003fce:	2301      	movs	r3, #1
 8003fd0:	e02e      	b.n	8004030 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	699b      	ldr	r3, [r3, #24]
 8003fd8:	f003 0320 	and.w	r3, r3, #32
 8003fdc:	2b20      	cmp	r3, #32
 8003fde:	d1d5      	bne.n	8003f8c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	2210      	movs	r2, #16
 8003fe6:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	2220      	movs	r2, #32
 8003fee:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003ff0:	68f8      	ldr	r0, [r7, #12]
 8003ff2:	f7ff fedd 	bl	8003db0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	6859      	ldr	r1, [r3, #4]
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681a      	ldr	r2, [r3, #0]
 8004000:	4b0d      	ldr	r3, [pc, #52]	; (8004038 <I2C_IsAcknowledgeFailed+0xc8>)
 8004002:	400b      	ands	r3, r1
 8004004:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800400a:	f043 0204 	orr.w	r2, r3, #4
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	2220      	movs	r2, #32
 8004016:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	2200      	movs	r2, #0
 800401e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	2200      	movs	r2, #0
 8004026:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800402a:	2301      	movs	r3, #1
 800402c:	e000      	b.n	8004030 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800402e:	2300      	movs	r3, #0
}
 8004030:	4618      	mov	r0, r3
 8004032:	3710      	adds	r7, #16
 8004034:	46bd      	mov	sp, r7
 8004036:	bd80      	pop	{r7, pc}
 8004038:	fe00e800 	.word	0xfe00e800

0800403c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 800403c:	b480      	push	{r7}
 800403e:	b085      	sub	sp, #20
 8004040:	af00      	add	r7, sp, #0
 8004042:	60f8      	str	r0, [r7, #12]
 8004044:	607b      	str	r3, [r7, #4]
 8004046:	460b      	mov	r3, r1
 8004048:	817b      	strh	r3, [r7, #10]
 800404a:	4613      	mov	r3, r2
 800404c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	685a      	ldr	r2, [r3, #4]
 8004054:	69bb      	ldr	r3, [r7, #24]
 8004056:	0d5b      	lsrs	r3, r3, #21
 8004058:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800405c:	4b0d      	ldr	r3, [pc, #52]	; (8004094 <I2C_TransferConfig+0x58>)
 800405e:	430b      	orrs	r3, r1
 8004060:	43db      	mvns	r3, r3
 8004062:	ea02 0103 	and.w	r1, r2, r3
 8004066:	897b      	ldrh	r3, [r7, #10]
 8004068:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800406c:	7a7b      	ldrb	r3, [r7, #9]
 800406e:	041b      	lsls	r3, r3, #16
 8004070:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004074:	431a      	orrs	r2, r3
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	431a      	orrs	r2, r3
 800407a:	69bb      	ldr	r3, [r7, #24]
 800407c:	431a      	orrs	r2, r3
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	430a      	orrs	r2, r1
 8004084:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8004086:	bf00      	nop
 8004088:	3714      	adds	r7, #20
 800408a:	46bd      	mov	sp, r7
 800408c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004090:	4770      	bx	lr
 8004092:	bf00      	nop
 8004094:	03ff63ff 	.word	0x03ff63ff

08004098 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004098:	b480      	push	{r7}
 800409a:	b083      	sub	sp, #12
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
 80040a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040a8:	b2db      	uxtb	r3, r3
 80040aa:	2b20      	cmp	r3, #32
 80040ac:	d138      	bne.n	8004120 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80040b4:	2b01      	cmp	r3, #1
 80040b6:	d101      	bne.n	80040bc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80040b8:	2302      	movs	r3, #2
 80040ba:	e032      	b.n	8004122 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2201      	movs	r2, #1
 80040c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2224      	movs	r2, #36	; 0x24
 80040c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	681a      	ldr	r2, [r3, #0]
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f022 0201 	bic.w	r2, r2, #1
 80040da:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	681a      	ldr	r2, [r3, #0]
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80040ea:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	6819      	ldr	r1, [r3, #0]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	683a      	ldr	r2, [r7, #0]
 80040f8:	430a      	orrs	r2, r1
 80040fa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	681a      	ldr	r2, [r3, #0]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f042 0201 	orr.w	r2, r2, #1
 800410a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2220      	movs	r2, #32
 8004110:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2200      	movs	r2, #0
 8004118:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800411c:	2300      	movs	r3, #0
 800411e:	e000      	b.n	8004122 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004120:	2302      	movs	r3, #2
  }
}
 8004122:	4618      	mov	r0, r3
 8004124:	370c      	adds	r7, #12
 8004126:	46bd      	mov	sp, r7
 8004128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412c:	4770      	bx	lr

0800412e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800412e:	b480      	push	{r7}
 8004130:	b085      	sub	sp, #20
 8004132:	af00      	add	r7, sp, #0
 8004134:	6078      	str	r0, [r7, #4]
 8004136:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800413e:	b2db      	uxtb	r3, r3
 8004140:	2b20      	cmp	r3, #32
 8004142:	d139      	bne.n	80041b8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800414a:	2b01      	cmp	r3, #1
 800414c:	d101      	bne.n	8004152 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800414e:	2302      	movs	r3, #2
 8004150:	e033      	b.n	80041ba <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2201      	movs	r2, #1
 8004156:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2224      	movs	r2, #36	; 0x24
 800415e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	681a      	ldr	r2, [r3, #0]
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f022 0201 	bic.w	r2, r2, #1
 8004170:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004180:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	021b      	lsls	r3, r3, #8
 8004186:	68fa      	ldr	r2, [r7, #12]
 8004188:	4313      	orrs	r3, r2
 800418a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	68fa      	ldr	r2, [r7, #12]
 8004192:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	681a      	ldr	r2, [r3, #0]
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f042 0201 	orr.w	r2, r2, #1
 80041a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2220      	movs	r2, #32
 80041a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2200      	movs	r2, #0
 80041b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80041b4:	2300      	movs	r3, #0
 80041b6:	e000      	b.n	80041ba <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80041b8:	2302      	movs	r3, #2
  }
}
 80041ba:	4618      	mov	r0, r3
 80041bc:	3714      	adds	r7, #20
 80041be:	46bd      	mov	sp, r7
 80041c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c4:	4770      	bx	lr
	...

080041c8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80041c8:	b480      	push	{r7}
 80041ca:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80041cc:	4b0d      	ldr	r3, [pc, #52]	; (8004204 <HAL_PWREx_GetVoltageRange+0x3c>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80041d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041d8:	d102      	bne.n	80041e0 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80041da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80041de:	e00b      	b.n	80041f8 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80041e0:	4b08      	ldr	r3, [pc, #32]	; (8004204 <HAL_PWREx_GetVoltageRange+0x3c>)
 80041e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80041e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041ee:	d102      	bne.n	80041f6 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80041f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80041f4:	e000      	b.n	80041f8 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 80041f6:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 80041f8:	4618      	mov	r0, r3
 80041fa:	46bd      	mov	sp, r7
 80041fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004200:	4770      	bx	lr
 8004202:	bf00      	nop
 8004204:	40007000 	.word	0x40007000

08004208 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004208:	b480      	push	{r7}
 800420a:	b085      	sub	sp, #20
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d141      	bne.n	800429a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004216:	4b4b      	ldr	r3, [pc, #300]	; (8004344 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800421e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004222:	d131      	bne.n	8004288 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004224:	4b47      	ldr	r3, [pc, #284]	; (8004344 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004226:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800422a:	4a46      	ldr	r2, [pc, #280]	; (8004344 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800422c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004230:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004234:	4b43      	ldr	r3, [pc, #268]	; (8004344 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800423c:	4a41      	ldr	r2, [pc, #260]	; (8004344 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800423e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004242:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8004244:	4b40      	ldr	r3, [pc, #256]	; (8004348 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	2232      	movs	r2, #50	; 0x32
 800424a:	fb02 f303 	mul.w	r3, r2, r3
 800424e:	4a3f      	ldr	r2, [pc, #252]	; (800434c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004250:	fba2 2303 	umull	r2, r3, r2, r3
 8004254:	0c9b      	lsrs	r3, r3, #18
 8004256:	3301      	adds	r3, #1
 8004258:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800425a:	e002      	b.n	8004262 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	3b01      	subs	r3, #1
 8004260:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004262:	4b38      	ldr	r3, [pc, #224]	; (8004344 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004264:	695b      	ldr	r3, [r3, #20]
 8004266:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800426a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800426e:	d102      	bne.n	8004276 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d1f2      	bne.n	800425c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004276:	4b33      	ldr	r3, [pc, #204]	; (8004344 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004278:	695b      	ldr	r3, [r3, #20]
 800427a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800427e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004282:	d158      	bne.n	8004336 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004284:	2303      	movs	r3, #3
 8004286:	e057      	b.n	8004338 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004288:	4b2e      	ldr	r3, [pc, #184]	; (8004344 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800428a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800428e:	4a2d      	ldr	r2, [pc, #180]	; (8004344 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004290:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004294:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004298:	e04d      	b.n	8004336 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042a0:	d141      	bne.n	8004326 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80042a2:	4b28      	ldr	r3, [pc, #160]	; (8004344 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80042aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042ae:	d131      	bne.n	8004314 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80042b0:	4b24      	ldr	r3, [pc, #144]	; (8004344 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80042b6:	4a23      	ldr	r2, [pc, #140]	; (8004344 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042bc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80042c0:	4b20      	ldr	r3, [pc, #128]	; (8004344 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80042c8:	4a1e      	ldr	r2, [pc, #120]	; (8004344 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80042ce:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80042d0:	4b1d      	ldr	r3, [pc, #116]	; (8004348 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	2232      	movs	r2, #50	; 0x32
 80042d6:	fb02 f303 	mul.w	r3, r2, r3
 80042da:	4a1c      	ldr	r2, [pc, #112]	; (800434c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80042dc:	fba2 2303 	umull	r2, r3, r2, r3
 80042e0:	0c9b      	lsrs	r3, r3, #18
 80042e2:	3301      	adds	r3, #1
 80042e4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80042e6:	e002      	b.n	80042ee <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	3b01      	subs	r3, #1
 80042ec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80042ee:	4b15      	ldr	r3, [pc, #84]	; (8004344 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042f0:	695b      	ldr	r3, [r3, #20]
 80042f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042fa:	d102      	bne.n	8004302 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d1f2      	bne.n	80042e8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004302:	4b10      	ldr	r3, [pc, #64]	; (8004344 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004304:	695b      	ldr	r3, [r3, #20]
 8004306:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800430a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800430e:	d112      	bne.n	8004336 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004310:	2303      	movs	r3, #3
 8004312:	e011      	b.n	8004338 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004314:	4b0b      	ldr	r3, [pc, #44]	; (8004344 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004316:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800431a:	4a0a      	ldr	r2, [pc, #40]	; (8004344 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800431c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004320:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004324:	e007      	b.n	8004336 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004326:	4b07      	ldr	r3, [pc, #28]	; (8004344 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800432e:	4a05      	ldr	r2, [pc, #20]	; (8004344 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004330:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004334:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004336:	2300      	movs	r3, #0
}
 8004338:	4618      	mov	r0, r3
 800433a:	3714      	adds	r7, #20
 800433c:	46bd      	mov	sp, r7
 800433e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004342:	4770      	bx	lr
 8004344:	40007000 	.word	0x40007000
 8004348:	20000040 	.word	0x20000040
 800434c:	431bde83 	.word	0x431bde83

08004350 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b088      	sub	sp, #32
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d102      	bne.n	8004364 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800435e:	2301      	movs	r3, #1
 8004360:	f000 bc16 	b.w	8004b90 <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004364:	4ba0      	ldr	r3, [pc, #640]	; (80045e8 <HAL_RCC_OscConfig+0x298>)
 8004366:	689b      	ldr	r3, [r3, #8]
 8004368:	f003 030c 	and.w	r3, r3, #12
 800436c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800436e:	4b9e      	ldr	r3, [pc, #632]	; (80045e8 <HAL_RCC_OscConfig+0x298>)
 8004370:	68db      	ldr	r3, [r3, #12]
 8004372:	f003 0303 	and.w	r3, r3, #3
 8004376:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f003 0310 	and.w	r3, r3, #16
 8004380:	2b00      	cmp	r3, #0
 8004382:	f000 80e4 	beq.w	800454e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004386:	69bb      	ldr	r3, [r7, #24]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d007      	beq.n	800439c <HAL_RCC_OscConfig+0x4c>
 800438c:	69bb      	ldr	r3, [r7, #24]
 800438e:	2b0c      	cmp	r3, #12
 8004390:	f040 808b 	bne.w	80044aa <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004394:	697b      	ldr	r3, [r7, #20]
 8004396:	2b01      	cmp	r3, #1
 8004398:	f040 8087 	bne.w	80044aa <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800439c:	4b92      	ldr	r3, [pc, #584]	; (80045e8 <HAL_RCC_OscConfig+0x298>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f003 0302 	and.w	r3, r3, #2
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d005      	beq.n	80043b4 <HAL_RCC_OscConfig+0x64>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	699b      	ldr	r3, [r3, #24]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d101      	bne.n	80043b4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80043b0:	2301      	movs	r3, #1
 80043b2:	e3ed      	b.n	8004b90 <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6a1a      	ldr	r2, [r3, #32]
 80043b8:	4b8b      	ldr	r3, [pc, #556]	; (80045e8 <HAL_RCC_OscConfig+0x298>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f003 0308 	and.w	r3, r3, #8
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d004      	beq.n	80043ce <HAL_RCC_OscConfig+0x7e>
 80043c4:	4b88      	ldr	r3, [pc, #544]	; (80045e8 <HAL_RCC_OscConfig+0x298>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80043cc:	e005      	b.n	80043da <HAL_RCC_OscConfig+0x8a>
 80043ce:	4b86      	ldr	r3, [pc, #536]	; (80045e8 <HAL_RCC_OscConfig+0x298>)
 80043d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043d4:	091b      	lsrs	r3, r3, #4
 80043d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80043da:	4293      	cmp	r3, r2
 80043dc:	d223      	bcs.n	8004426 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6a1b      	ldr	r3, [r3, #32]
 80043e2:	4618      	mov	r0, r3
 80043e4:	f000 fdca 	bl	8004f7c <RCC_SetFlashLatencyFromMSIRange>
 80043e8:	4603      	mov	r3, r0
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d001      	beq.n	80043f2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80043ee:	2301      	movs	r3, #1
 80043f0:	e3ce      	b.n	8004b90 <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80043f2:	4b7d      	ldr	r3, [pc, #500]	; (80045e8 <HAL_RCC_OscConfig+0x298>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4a7c      	ldr	r2, [pc, #496]	; (80045e8 <HAL_RCC_OscConfig+0x298>)
 80043f8:	f043 0308 	orr.w	r3, r3, #8
 80043fc:	6013      	str	r3, [r2, #0]
 80043fe:	4b7a      	ldr	r3, [pc, #488]	; (80045e8 <HAL_RCC_OscConfig+0x298>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6a1b      	ldr	r3, [r3, #32]
 800440a:	4977      	ldr	r1, [pc, #476]	; (80045e8 <HAL_RCC_OscConfig+0x298>)
 800440c:	4313      	orrs	r3, r2
 800440e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004410:	4b75      	ldr	r3, [pc, #468]	; (80045e8 <HAL_RCC_OscConfig+0x298>)
 8004412:	685b      	ldr	r3, [r3, #4]
 8004414:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	69db      	ldr	r3, [r3, #28]
 800441c:	021b      	lsls	r3, r3, #8
 800441e:	4972      	ldr	r1, [pc, #456]	; (80045e8 <HAL_RCC_OscConfig+0x298>)
 8004420:	4313      	orrs	r3, r2
 8004422:	604b      	str	r3, [r1, #4]
 8004424:	e025      	b.n	8004472 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004426:	4b70      	ldr	r3, [pc, #448]	; (80045e8 <HAL_RCC_OscConfig+0x298>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4a6f      	ldr	r2, [pc, #444]	; (80045e8 <HAL_RCC_OscConfig+0x298>)
 800442c:	f043 0308 	orr.w	r3, r3, #8
 8004430:	6013      	str	r3, [r2, #0]
 8004432:	4b6d      	ldr	r3, [pc, #436]	; (80045e8 <HAL_RCC_OscConfig+0x298>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6a1b      	ldr	r3, [r3, #32]
 800443e:	496a      	ldr	r1, [pc, #424]	; (80045e8 <HAL_RCC_OscConfig+0x298>)
 8004440:	4313      	orrs	r3, r2
 8004442:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004444:	4b68      	ldr	r3, [pc, #416]	; (80045e8 <HAL_RCC_OscConfig+0x298>)
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	69db      	ldr	r3, [r3, #28]
 8004450:	021b      	lsls	r3, r3, #8
 8004452:	4965      	ldr	r1, [pc, #404]	; (80045e8 <HAL_RCC_OscConfig+0x298>)
 8004454:	4313      	orrs	r3, r2
 8004456:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004458:	69bb      	ldr	r3, [r7, #24]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d109      	bne.n	8004472 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6a1b      	ldr	r3, [r3, #32]
 8004462:	4618      	mov	r0, r3
 8004464:	f000 fd8a 	bl	8004f7c <RCC_SetFlashLatencyFromMSIRange>
 8004468:	4603      	mov	r3, r0
 800446a:	2b00      	cmp	r3, #0
 800446c:	d001      	beq.n	8004472 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800446e:	2301      	movs	r3, #1
 8004470:	e38e      	b.n	8004b90 <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004472:	f000 fcbf 	bl	8004df4 <HAL_RCC_GetSysClockFreq>
 8004476:	4602      	mov	r2, r0
 8004478:	4b5b      	ldr	r3, [pc, #364]	; (80045e8 <HAL_RCC_OscConfig+0x298>)
 800447a:	689b      	ldr	r3, [r3, #8]
 800447c:	091b      	lsrs	r3, r3, #4
 800447e:	f003 030f 	and.w	r3, r3, #15
 8004482:	495a      	ldr	r1, [pc, #360]	; (80045ec <HAL_RCC_OscConfig+0x29c>)
 8004484:	5ccb      	ldrb	r3, [r1, r3]
 8004486:	f003 031f 	and.w	r3, r3, #31
 800448a:	fa22 f303 	lsr.w	r3, r2, r3
 800448e:	4a58      	ldr	r2, [pc, #352]	; (80045f0 <HAL_RCC_OscConfig+0x2a0>)
 8004490:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004492:	4b58      	ldr	r3, [pc, #352]	; (80045f4 <HAL_RCC_OscConfig+0x2a4>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4618      	mov	r0, r3
 8004498:	f7fc fdd8 	bl	800104c <HAL_InitTick>
 800449c:	4603      	mov	r3, r0
 800449e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80044a0:	7bfb      	ldrb	r3, [r7, #15]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d052      	beq.n	800454c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80044a6:	7bfb      	ldrb	r3, [r7, #15]
 80044a8:	e372      	b.n	8004b90 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	699b      	ldr	r3, [r3, #24]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d032      	beq.n	8004518 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80044b2:	4b4d      	ldr	r3, [pc, #308]	; (80045e8 <HAL_RCC_OscConfig+0x298>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4a4c      	ldr	r2, [pc, #304]	; (80045e8 <HAL_RCC_OscConfig+0x298>)
 80044b8:	f043 0301 	orr.w	r3, r3, #1
 80044bc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80044be:	f7fc fe11 	bl	80010e4 <HAL_GetTick>
 80044c2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80044c4:	e008      	b.n	80044d8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80044c6:	f7fc fe0d 	bl	80010e4 <HAL_GetTick>
 80044ca:	4602      	mov	r2, r0
 80044cc:	693b      	ldr	r3, [r7, #16]
 80044ce:	1ad3      	subs	r3, r2, r3
 80044d0:	2b02      	cmp	r3, #2
 80044d2:	d901      	bls.n	80044d8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80044d4:	2303      	movs	r3, #3
 80044d6:	e35b      	b.n	8004b90 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80044d8:	4b43      	ldr	r3, [pc, #268]	; (80045e8 <HAL_RCC_OscConfig+0x298>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f003 0302 	and.w	r3, r3, #2
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d0f0      	beq.n	80044c6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80044e4:	4b40      	ldr	r3, [pc, #256]	; (80045e8 <HAL_RCC_OscConfig+0x298>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4a3f      	ldr	r2, [pc, #252]	; (80045e8 <HAL_RCC_OscConfig+0x298>)
 80044ea:	f043 0308 	orr.w	r3, r3, #8
 80044ee:	6013      	str	r3, [r2, #0]
 80044f0:	4b3d      	ldr	r3, [pc, #244]	; (80045e8 <HAL_RCC_OscConfig+0x298>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6a1b      	ldr	r3, [r3, #32]
 80044fc:	493a      	ldr	r1, [pc, #232]	; (80045e8 <HAL_RCC_OscConfig+0x298>)
 80044fe:	4313      	orrs	r3, r2
 8004500:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004502:	4b39      	ldr	r3, [pc, #228]	; (80045e8 <HAL_RCC_OscConfig+0x298>)
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	69db      	ldr	r3, [r3, #28]
 800450e:	021b      	lsls	r3, r3, #8
 8004510:	4935      	ldr	r1, [pc, #212]	; (80045e8 <HAL_RCC_OscConfig+0x298>)
 8004512:	4313      	orrs	r3, r2
 8004514:	604b      	str	r3, [r1, #4]
 8004516:	e01a      	b.n	800454e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004518:	4b33      	ldr	r3, [pc, #204]	; (80045e8 <HAL_RCC_OscConfig+0x298>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4a32      	ldr	r2, [pc, #200]	; (80045e8 <HAL_RCC_OscConfig+0x298>)
 800451e:	f023 0301 	bic.w	r3, r3, #1
 8004522:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004524:	f7fc fdde 	bl	80010e4 <HAL_GetTick>
 8004528:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800452a:	e008      	b.n	800453e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800452c:	f7fc fdda 	bl	80010e4 <HAL_GetTick>
 8004530:	4602      	mov	r2, r0
 8004532:	693b      	ldr	r3, [r7, #16]
 8004534:	1ad3      	subs	r3, r2, r3
 8004536:	2b02      	cmp	r3, #2
 8004538:	d901      	bls.n	800453e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800453a:	2303      	movs	r3, #3
 800453c:	e328      	b.n	8004b90 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800453e:	4b2a      	ldr	r3, [pc, #168]	; (80045e8 <HAL_RCC_OscConfig+0x298>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f003 0302 	and.w	r3, r3, #2
 8004546:	2b00      	cmp	r3, #0
 8004548:	d1f0      	bne.n	800452c <HAL_RCC_OscConfig+0x1dc>
 800454a:	e000      	b.n	800454e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800454c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f003 0301 	and.w	r3, r3, #1
 8004556:	2b00      	cmp	r3, #0
 8004558:	d073      	beq.n	8004642 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800455a:	69bb      	ldr	r3, [r7, #24]
 800455c:	2b08      	cmp	r3, #8
 800455e:	d005      	beq.n	800456c <HAL_RCC_OscConfig+0x21c>
 8004560:	69bb      	ldr	r3, [r7, #24]
 8004562:	2b0c      	cmp	r3, #12
 8004564:	d10e      	bne.n	8004584 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004566:	697b      	ldr	r3, [r7, #20]
 8004568:	2b03      	cmp	r3, #3
 800456a:	d10b      	bne.n	8004584 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800456c:	4b1e      	ldr	r3, [pc, #120]	; (80045e8 <HAL_RCC_OscConfig+0x298>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004574:	2b00      	cmp	r3, #0
 8004576:	d063      	beq.n	8004640 <HAL_RCC_OscConfig+0x2f0>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d15f      	bne.n	8004640 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004580:	2301      	movs	r3, #1
 8004582:	e305      	b.n	8004b90 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800458c:	d106      	bne.n	800459c <HAL_RCC_OscConfig+0x24c>
 800458e:	4b16      	ldr	r3, [pc, #88]	; (80045e8 <HAL_RCC_OscConfig+0x298>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4a15      	ldr	r2, [pc, #84]	; (80045e8 <HAL_RCC_OscConfig+0x298>)
 8004594:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004598:	6013      	str	r3, [r2, #0]
 800459a:	e01d      	b.n	80045d8 <HAL_RCC_OscConfig+0x288>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80045a4:	d10c      	bne.n	80045c0 <HAL_RCC_OscConfig+0x270>
 80045a6:	4b10      	ldr	r3, [pc, #64]	; (80045e8 <HAL_RCC_OscConfig+0x298>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	4a0f      	ldr	r2, [pc, #60]	; (80045e8 <HAL_RCC_OscConfig+0x298>)
 80045ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80045b0:	6013      	str	r3, [r2, #0]
 80045b2:	4b0d      	ldr	r3, [pc, #52]	; (80045e8 <HAL_RCC_OscConfig+0x298>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4a0c      	ldr	r2, [pc, #48]	; (80045e8 <HAL_RCC_OscConfig+0x298>)
 80045b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045bc:	6013      	str	r3, [r2, #0]
 80045be:	e00b      	b.n	80045d8 <HAL_RCC_OscConfig+0x288>
 80045c0:	4b09      	ldr	r3, [pc, #36]	; (80045e8 <HAL_RCC_OscConfig+0x298>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4a08      	ldr	r2, [pc, #32]	; (80045e8 <HAL_RCC_OscConfig+0x298>)
 80045c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045ca:	6013      	str	r3, [r2, #0]
 80045cc:	4b06      	ldr	r3, [pc, #24]	; (80045e8 <HAL_RCC_OscConfig+0x298>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4a05      	ldr	r2, [pc, #20]	; (80045e8 <HAL_RCC_OscConfig+0x298>)
 80045d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80045d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d01b      	beq.n	8004618 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045e0:	f7fc fd80 	bl	80010e4 <HAL_GetTick>
 80045e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80045e6:	e010      	b.n	800460a <HAL_RCC_OscConfig+0x2ba>
 80045e8:	40021000 	.word	0x40021000
 80045ec:	08013b80 	.word	0x08013b80
 80045f0:	20000040 	.word	0x20000040
 80045f4:	20000000 	.word	0x20000000
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045f8:	f7fc fd74 	bl	80010e4 <HAL_GetTick>
 80045fc:	4602      	mov	r2, r0
 80045fe:	693b      	ldr	r3, [r7, #16]
 8004600:	1ad3      	subs	r3, r2, r3
 8004602:	2b64      	cmp	r3, #100	; 0x64
 8004604:	d901      	bls.n	800460a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004606:	2303      	movs	r3, #3
 8004608:	e2c2      	b.n	8004b90 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800460a:	4baf      	ldr	r3, [pc, #700]	; (80048c8 <HAL_RCC_OscConfig+0x578>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004612:	2b00      	cmp	r3, #0
 8004614:	d0f0      	beq.n	80045f8 <HAL_RCC_OscConfig+0x2a8>
 8004616:	e014      	b.n	8004642 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004618:	f7fc fd64 	bl	80010e4 <HAL_GetTick>
 800461c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800461e:	e008      	b.n	8004632 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004620:	f7fc fd60 	bl	80010e4 <HAL_GetTick>
 8004624:	4602      	mov	r2, r0
 8004626:	693b      	ldr	r3, [r7, #16]
 8004628:	1ad3      	subs	r3, r2, r3
 800462a:	2b64      	cmp	r3, #100	; 0x64
 800462c:	d901      	bls.n	8004632 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800462e:	2303      	movs	r3, #3
 8004630:	e2ae      	b.n	8004b90 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004632:	4ba5      	ldr	r3, [pc, #660]	; (80048c8 <HAL_RCC_OscConfig+0x578>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800463a:	2b00      	cmp	r3, #0
 800463c:	d1f0      	bne.n	8004620 <HAL_RCC_OscConfig+0x2d0>
 800463e:	e000      	b.n	8004642 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004640:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f003 0302 	and.w	r3, r3, #2
 800464a:	2b00      	cmp	r3, #0
 800464c:	d060      	beq.n	8004710 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800464e:	69bb      	ldr	r3, [r7, #24]
 8004650:	2b04      	cmp	r3, #4
 8004652:	d005      	beq.n	8004660 <HAL_RCC_OscConfig+0x310>
 8004654:	69bb      	ldr	r3, [r7, #24]
 8004656:	2b0c      	cmp	r3, #12
 8004658:	d119      	bne.n	800468e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800465a:	697b      	ldr	r3, [r7, #20]
 800465c:	2b02      	cmp	r3, #2
 800465e:	d116      	bne.n	800468e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004660:	4b99      	ldr	r3, [pc, #612]	; (80048c8 <HAL_RCC_OscConfig+0x578>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004668:	2b00      	cmp	r3, #0
 800466a:	d005      	beq.n	8004678 <HAL_RCC_OscConfig+0x328>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	68db      	ldr	r3, [r3, #12]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d101      	bne.n	8004678 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004674:	2301      	movs	r3, #1
 8004676:	e28b      	b.n	8004b90 <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004678:	4b93      	ldr	r3, [pc, #588]	; (80048c8 <HAL_RCC_OscConfig+0x578>)
 800467a:	685b      	ldr	r3, [r3, #4]
 800467c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	691b      	ldr	r3, [r3, #16]
 8004684:	061b      	lsls	r3, r3, #24
 8004686:	4990      	ldr	r1, [pc, #576]	; (80048c8 <HAL_RCC_OscConfig+0x578>)
 8004688:	4313      	orrs	r3, r2
 800468a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800468c:	e040      	b.n	8004710 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	68db      	ldr	r3, [r3, #12]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d023      	beq.n	80046de <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004696:	4b8c      	ldr	r3, [pc, #560]	; (80048c8 <HAL_RCC_OscConfig+0x578>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4a8b      	ldr	r2, [pc, #556]	; (80048c8 <HAL_RCC_OscConfig+0x578>)
 800469c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046a2:	f7fc fd1f 	bl	80010e4 <HAL_GetTick>
 80046a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80046a8:	e008      	b.n	80046bc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80046aa:	f7fc fd1b 	bl	80010e4 <HAL_GetTick>
 80046ae:	4602      	mov	r2, r0
 80046b0:	693b      	ldr	r3, [r7, #16]
 80046b2:	1ad3      	subs	r3, r2, r3
 80046b4:	2b02      	cmp	r3, #2
 80046b6:	d901      	bls.n	80046bc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80046b8:	2303      	movs	r3, #3
 80046ba:	e269      	b.n	8004b90 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80046bc:	4b82      	ldr	r3, [pc, #520]	; (80048c8 <HAL_RCC_OscConfig+0x578>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d0f0      	beq.n	80046aa <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046c8:	4b7f      	ldr	r3, [pc, #508]	; (80048c8 <HAL_RCC_OscConfig+0x578>)
 80046ca:	685b      	ldr	r3, [r3, #4]
 80046cc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	691b      	ldr	r3, [r3, #16]
 80046d4:	061b      	lsls	r3, r3, #24
 80046d6:	497c      	ldr	r1, [pc, #496]	; (80048c8 <HAL_RCC_OscConfig+0x578>)
 80046d8:	4313      	orrs	r3, r2
 80046da:	604b      	str	r3, [r1, #4]
 80046dc:	e018      	b.n	8004710 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80046de:	4b7a      	ldr	r3, [pc, #488]	; (80048c8 <HAL_RCC_OscConfig+0x578>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4a79      	ldr	r2, [pc, #484]	; (80048c8 <HAL_RCC_OscConfig+0x578>)
 80046e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80046e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046ea:	f7fc fcfb 	bl	80010e4 <HAL_GetTick>
 80046ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80046f0:	e008      	b.n	8004704 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80046f2:	f7fc fcf7 	bl	80010e4 <HAL_GetTick>
 80046f6:	4602      	mov	r2, r0
 80046f8:	693b      	ldr	r3, [r7, #16]
 80046fa:	1ad3      	subs	r3, r2, r3
 80046fc:	2b02      	cmp	r3, #2
 80046fe:	d901      	bls.n	8004704 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004700:	2303      	movs	r3, #3
 8004702:	e245      	b.n	8004b90 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004704:	4b70      	ldr	r3, [pc, #448]	; (80048c8 <HAL_RCC_OscConfig+0x578>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800470c:	2b00      	cmp	r3, #0
 800470e:	d1f0      	bne.n	80046f2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f003 0308 	and.w	r3, r3, #8
 8004718:	2b00      	cmp	r3, #0
 800471a:	d03c      	beq.n	8004796 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	695b      	ldr	r3, [r3, #20]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d01c      	beq.n	800475e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004724:	4b68      	ldr	r3, [pc, #416]	; (80048c8 <HAL_RCC_OscConfig+0x578>)
 8004726:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800472a:	4a67      	ldr	r2, [pc, #412]	; (80048c8 <HAL_RCC_OscConfig+0x578>)
 800472c:	f043 0301 	orr.w	r3, r3, #1
 8004730:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004734:	f7fc fcd6 	bl	80010e4 <HAL_GetTick>
 8004738:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800473a:	e008      	b.n	800474e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800473c:	f7fc fcd2 	bl	80010e4 <HAL_GetTick>
 8004740:	4602      	mov	r2, r0
 8004742:	693b      	ldr	r3, [r7, #16]
 8004744:	1ad3      	subs	r3, r2, r3
 8004746:	2b02      	cmp	r3, #2
 8004748:	d901      	bls.n	800474e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800474a:	2303      	movs	r3, #3
 800474c:	e220      	b.n	8004b90 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800474e:	4b5e      	ldr	r3, [pc, #376]	; (80048c8 <HAL_RCC_OscConfig+0x578>)
 8004750:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004754:	f003 0302 	and.w	r3, r3, #2
 8004758:	2b00      	cmp	r3, #0
 800475a:	d0ef      	beq.n	800473c <HAL_RCC_OscConfig+0x3ec>
 800475c:	e01b      	b.n	8004796 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800475e:	4b5a      	ldr	r3, [pc, #360]	; (80048c8 <HAL_RCC_OscConfig+0x578>)
 8004760:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004764:	4a58      	ldr	r2, [pc, #352]	; (80048c8 <HAL_RCC_OscConfig+0x578>)
 8004766:	f023 0301 	bic.w	r3, r3, #1
 800476a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800476e:	f7fc fcb9 	bl	80010e4 <HAL_GetTick>
 8004772:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004774:	e008      	b.n	8004788 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004776:	f7fc fcb5 	bl	80010e4 <HAL_GetTick>
 800477a:	4602      	mov	r2, r0
 800477c:	693b      	ldr	r3, [r7, #16]
 800477e:	1ad3      	subs	r3, r2, r3
 8004780:	2b02      	cmp	r3, #2
 8004782:	d901      	bls.n	8004788 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004784:	2303      	movs	r3, #3
 8004786:	e203      	b.n	8004b90 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004788:	4b4f      	ldr	r3, [pc, #316]	; (80048c8 <HAL_RCC_OscConfig+0x578>)
 800478a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800478e:	f003 0302 	and.w	r3, r3, #2
 8004792:	2b00      	cmp	r3, #0
 8004794:	d1ef      	bne.n	8004776 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f003 0304 	and.w	r3, r3, #4
 800479e:	2b00      	cmp	r3, #0
 80047a0:	f000 80a6 	beq.w	80048f0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80047a4:	2300      	movs	r3, #0
 80047a6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80047a8:	4b47      	ldr	r3, [pc, #284]	; (80048c8 <HAL_RCC_OscConfig+0x578>)
 80047aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d10d      	bne.n	80047d0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047b4:	4b44      	ldr	r3, [pc, #272]	; (80048c8 <HAL_RCC_OscConfig+0x578>)
 80047b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047b8:	4a43      	ldr	r2, [pc, #268]	; (80048c8 <HAL_RCC_OscConfig+0x578>)
 80047ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047be:	6593      	str	r3, [r2, #88]	; 0x58
 80047c0:	4b41      	ldr	r3, [pc, #260]	; (80048c8 <HAL_RCC_OscConfig+0x578>)
 80047c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047c8:	60bb      	str	r3, [r7, #8]
 80047ca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80047cc:	2301      	movs	r3, #1
 80047ce:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80047d0:	4b3e      	ldr	r3, [pc, #248]	; (80048cc <HAL_RCC_OscConfig+0x57c>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d118      	bne.n	800480e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80047dc:	4b3b      	ldr	r3, [pc, #236]	; (80048cc <HAL_RCC_OscConfig+0x57c>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4a3a      	ldr	r2, [pc, #232]	; (80048cc <HAL_RCC_OscConfig+0x57c>)
 80047e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047e6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80047e8:	f7fc fc7c 	bl	80010e4 <HAL_GetTick>
 80047ec:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80047ee:	e008      	b.n	8004802 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047f0:	f7fc fc78 	bl	80010e4 <HAL_GetTick>
 80047f4:	4602      	mov	r2, r0
 80047f6:	693b      	ldr	r3, [r7, #16]
 80047f8:	1ad3      	subs	r3, r2, r3
 80047fa:	2b02      	cmp	r3, #2
 80047fc:	d901      	bls.n	8004802 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80047fe:	2303      	movs	r3, #3
 8004800:	e1c6      	b.n	8004b90 <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004802:	4b32      	ldr	r3, [pc, #200]	; (80048cc <HAL_RCC_OscConfig+0x57c>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800480a:	2b00      	cmp	r3, #0
 800480c:	d0f0      	beq.n	80047f0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	689b      	ldr	r3, [r3, #8]
 8004812:	2b01      	cmp	r3, #1
 8004814:	d108      	bne.n	8004828 <HAL_RCC_OscConfig+0x4d8>
 8004816:	4b2c      	ldr	r3, [pc, #176]	; (80048c8 <HAL_RCC_OscConfig+0x578>)
 8004818:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800481c:	4a2a      	ldr	r2, [pc, #168]	; (80048c8 <HAL_RCC_OscConfig+0x578>)
 800481e:	f043 0301 	orr.w	r3, r3, #1
 8004822:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004826:	e024      	b.n	8004872 <HAL_RCC_OscConfig+0x522>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	689b      	ldr	r3, [r3, #8]
 800482c:	2b05      	cmp	r3, #5
 800482e:	d110      	bne.n	8004852 <HAL_RCC_OscConfig+0x502>
 8004830:	4b25      	ldr	r3, [pc, #148]	; (80048c8 <HAL_RCC_OscConfig+0x578>)
 8004832:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004836:	4a24      	ldr	r2, [pc, #144]	; (80048c8 <HAL_RCC_OscConfig+0x578>)
 8004838:	f043 0304 	orr.w	r3, r3, #4
 800483c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004840:	4b21      	ldr	r3, [pc, #132]	; (80048c8 <HAL_RCC_OscConfig+0x578>)
 8004842:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004846:	4a20      	ldr	r2, [pc, #128]	; (80048c8 <HAL_RCC_OscConfig+0x578>)
 8004848:	f043 0301 	orr.w	r3, r3, #1
 800484c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004850:	e00f      	b.n	8004872 <HAL_RCC_OscConfig+0x522>
 8004852:	4b1d      	ldr	r3, [pc, #116]	; (80048c8 <HAL_RCC_OscConfig+0x578>)
 8004854:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004858:	4a1b      	ldr	r2, [pc, #108]	; (80048c8 <HAL_RCC_OscConfig+0x578>)
 800485a:	f023 0301 	bic.w	r3, r3, #1
 800485e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004862:	4b19      	ldr	r3, [pc, #100]	; (80048c8 <HAL_RCC_OscConfig+0x578>)
 8004864:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004868:	4a17      	ldr	r2, [pc, #92]	; (80048c8 <HAL_RCC_OscConfig+0x578>)
 800486a:	f023 0304 	bic.w	r3, r3, #4
 800486e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	689b      	ldr	r3, [r3, #8]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d016      	beq.n	80048a8 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800487a:	f7fc fc33 	bl	80010e4 <HAL_GetTick>
 800487e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004880:	e00a      	b.n	8004898 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004882:	f7fc fc2f 	bl	80010e4 <HAL_GetTick>
 8004886:	4602      	mov	r2, r0
 8004888:	693b      	ldr	r3, [r7, #16]
 800488a:	1ad3      	subs	r3, r2, r3
 800488c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004890:	4293      	cmp	r3, r2
 8004892:	d901      	bls.n	8004898 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8004894:	2303      	movs	r3, #3
 8004896:	e17b      	b.n	8004b90 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004898:	4b0b      	ldr	r3, [pc, #44]	; (80048c8 <HAL_RCC_OscConfig+0x578>)
 800489a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800489e:	f003 0302 	and.w	r3, r3, #2
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d0ed      	beq.n	8004882 <HAL_RCC_OscConfig+0x532>
 80048a6:	e01a      	b.n	80048de <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048a8:	f7fc fc1c 	bl	80010e4 <HAL_GetTick>
 80048ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80048ae:	e00f      	b.n	80048d0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048b0:	f7fc fc18 	bl	80010e4 <HAL_GetTick>
 80048b4:	4602      	mov	r2, r0
 80048b6:	693b      	ldr	r3, [r7, #16]
 80048b8:	1ad3      	subs	r3, r2, r3
 80048ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80048be:	4293      	cmp	r3, r2
 80048c0:	d906      	bls.n	80048d0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80048c2:	2303      	movs	r3, #3
 80048c4:	e164      	b.n	8004b90 <HAL_RCC_OscConfig+0x840>
 80048c6:	bf00      	nop
 80048c8:	40021000 	.word	0x40021000
 80048cc:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80048d0:	4ba8      	ldr	r3, [pc, #672]	; (8004b74 <HAL_RCC_OscConfig+0x824>)
 80048d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048d6:	f003 0302 	and.w	r3, r3, #2
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d1e8      	bne.n	80048b0 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80048de:	7ffb      	ldrb	r3, [r7, #31]
 80048e0:	2b01      	cmp	r3, #1
 80048e2:	d105      	bne.n	80048f0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048e4:	4ba3      	ldr	r3, [pc, #652]	; (8004b74 <HAL_RCC_OscConfig+0x824>)
 80048e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048e8:	4aa2      	ldr	r2, [pc, #648]	; (8004b74 <HAL_RCC_OscConfig+0x824>)
 80048ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048ee:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f003 0320 	and.w	r3, r3, #32
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d03c      	beq.n	8004976 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004900:	2b00      	cmp	r3, #0
 8004902:	d01c      	beq.n	800493e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004904:	4b9b      	ldr	r3, [pc, #620]	; (8004b74 <HAL_RCC_OscConfig+0x824>)
 8004906:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800490a:	4a9a      	ldr	r2, [pc, #616]	; (8004b74 <HAL_RCC_OscConfig+0x824>)
 800490c:	f043 0301 	orr.w	r3, r3, #1
 8004910:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004914:	f7fc fbe6 	bl	80010e4 <HAL_GetTick>
 8004918:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800491a:	e008      	b.n	800492e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800491c:	f7fc fbe2 	bl	80010e4 <HAL_GetTick>
 8004920:	4602      	mov	r2, r0
 8004922:	693b      	ldr	r3, [r7, #16]
 8004924:	1ad3      	subs	r3, r2, r3
 8004926:	2b02      	cmp	r3, #2
 8004928:	d901      	bls.n	800492e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800492a:	2303      	movs	r3, #3
 800492c:	e130      	b.n	8004b90 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800492e:	4b91      	ldr	r3, [pc, #580]	; (8004b74 <HAL_RCC_OscConfig+0x824>)
 8004930:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004934:	f003 0302 	and.w	r3, r3, #2
 8004938:	2b00      	cmp	r3, #0
 800493a:	d0ef      	beq.n	800491c <HAL_RCC_OscConfig+0x5cc>
 800493c:	e01b      	b.n	8004976 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800493e:	4b8d      	ldr	r3, [pc, #564]	; (8004b74 <HAL_RCC_OscConfig+0x824>)
 8004940:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004944:	4a8b      	ldr	r2, [pc, #556]	; (8004b74 <HAL_RCC_OscConfig+0x824>)
 8004946:	f023 0301 	bic.w	r3, r3, #1
 800494a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800494e:	f7fc fbc9 	bl	80010e4 <HAL_GetTick>
 8004952:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004954:	e008      	b.n	8004968 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004956:	f7fc fbc5 	bl	80010e4 <HAL_GetTick>
 800495a:	4602      	mov	r2, r0
 800495c:	693b      	ldr	r3, [r7, #16]
 800495e:	1ad3      	subs	r3, r2, r3
 8004960:	2b02      	cmp	r3, #2
 8004962:	d901      	bls.n	8004968 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004964:	2303      	movs	r3, #3
 8004966:	e113      	b.n	8004b90 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004968:	4b82      	ldr	r3, [pc, #520]	; (8004b74 <HAL_RCC_OscConfig+0x824>)
 800496a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800496e:	f003 0302 	and.w	r3, r3, #2
 8004972:	2b00      	cmp	r3, #0
 8004974:	d1ef      	bne.n	8004956 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800497a:	2b00      	cmp	r3, #0
 800497c:	f000 8107 	beq.w	8004b8e <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004984:	2b02      	cmp	r3, #2
 8004986:	f040 80cb 	bne.w	8004b20 <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800498a:	4b7a      	ldr	r3, [pc, #488]	; (8004b74 <HAL_RCC_OscConfig+0x824>)
 800498c:	68db      	ldr	r3, [r3, #12]
 800498e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004990:	697b      	ldr	r3, [r7, #20]
 8004992:	f003 0203 	and.w	r2, r3, #3
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800499a:	429a      	cmp	r2, r3
 800499c:	d12c      	bne.n	80049f8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800499e:	697b      	ldr	r3, [r7, #20]
 80049a0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049a8:	3b01      	subs	r3, #1
 80049aa:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80049ac:	429a      	cmp	r2, r3
 80049ae:	d123      	bne.n	80049f8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80049b0:	697b      	ldr	r3, [r7, #20]
 80049b2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049ba:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80049bc:	429a      	cmp	r2, r3
 80049be:	d11b      	bne.n	80049f8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80049c0:	697b      	ldr	r3, [r7, #20]
 80049c2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049ca:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80049cc:	429a      	cmp	r2, r3
 80049ce:	d113      	bne.n	80049f8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80049d0:	697b      	ldr	r3, [r7, #20]
 80049d2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049da:	085b      	lsrs	r3, r3, #1
 80049dc:	3b01      	subs	r3, #1
 80049de:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80049e0:	429a      	cmp	r2, r3
 80049e2:	d109      	bne.n	80049f8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80049e4:	697b      	ldr	r3, [r7, #20]
 80049e6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ee:	085b      	lsrs	r3, r3, #1
 80049f0:	3b01      	subs	r3, #1
 80049f2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80049f4:	429a      	cmp	r2, r3
 80049f6:	d06d      	beq.n	8004ad4 <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80049f8:	69bb      	ldr	r3, [r7, #24]
 80049fa:	2b0c      	cmp	r3, #12
 80049fc:	d068      	beq.n	8004ad0 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80049fe:	4b5d      	ldr	r3, [pc, #372]	; (8004b74 <HAL_RCC_OscConfig+0x824>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d105      	bne.n	8004a16 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004a0a:	4b5a      	ldr	r3, [pc, #360]	; (8004b74 <HAL_RCC_OscConfig+0x824>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d001      	beq.n	8004a1a <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8004a16:	2301      	movs	r3, #1
 8004a18:	e0ba      	b.n	8004b90 <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004a1a:	4b56      	ldr	r3, [pc, #344]	; (8004b74 <HAL_RCC_OscConfig+0x824>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	4a55      	ldr	r2, [pc, #340]	; (8004b74 <HAL_RCC_OscConfig+0x824>)
 8004a20:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004a24:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004a26:	f7fc fb5d 	bl	80010e4 <HAL_GetTick>
 8004a2a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a2c:	e008      	b.n	8004a40 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a2e:	f7fc fb59 	bl	80010e4 <HAL_GetTick>
 8004a32:	4602      	mov	r2, r0
 8004a34:	693b      	ldr	r3, [r7, #16]
 8004a36:	1ad3      	subs	r3, r2, r3
 8004a38:	2b02      	cmp	r3, #2
 8004a3a:	d901      	bls.n	8004a40 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8004a3c:	2303      	movs	r3, #3
 8004a3e:	e0a7      	b.n	8004b90 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a40:	4b4c      	ldr	r3, [pc, #304]	; (8004b74 <HAL_RCC_OscConfig+0x824>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d1f0      	bne.n	8004a2e <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004a4c:	4b49      	ldr	r3, [pc, #292]	; (8004b74 <HAL_RCC_OscConfig+0x824>)
 8004a4e:	68da      	ldr	r2, [r3, #12]
 8004a50:	4b49      	ldr	r3, [pc, #292]	; (8004b78 <HAL_RCC_OscConfig+0x828>)
 8004a52:	4013      	ands	r3, r2
 8004a54:	687a      	ldr	r2, [r7, #4]
 8004a56:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004a58:	687a      	ldr	r2, [r7, #4]
 8004a5a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004a5c:	3a01      	subs	r2, #1
 8004a5e:	0112      	lsls	r2, r2, #4
 8004a60:	4311      	orrs	r1, r2
 8004a62:	687a      	ldr	r2, [r7, #4]
 8004a64:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004a66:	0212      	lsls	r2, r2, #8
 8004a68:	4311      	orrs	r1, r2
 8004a6a:	687a      	ldr	r2, [r7, #4]
 8004a6c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004a6e:	0852      	lsrs	r2, r2, #1
 8004a70:	3a01      	subs	r2, #1
 8004a72:	0552      	lsls	r2, r2, #21
 8004a74:	4311      	orrs	r1, r2
 8004a76:	687a      	ldr	r2, [r7, #4]
 8004a78:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004a7a:	0852      	lsrs	r2, r2, #1
 8004a7c:	3a01      	subs	r2, #1
 8004a7e:	0652      	lsls	r2, r2, #25
 8004a80:	4311      	orrs	r1, r2
 8004a82:	687a      	ldr	r2, [r7, #4]
 8004a84:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004a86:	06d2      	lsls	r2, r2, #27
 8004a88:	430a      	orrs	r2, r1
 8004a8a:	493a      	ldr	r1, [pc, #232]	; (8004b74 <HAL_RCC_OscConfig+0x824>)
 8004a8c:	4313      	orrs	r3, r2
 8004a8e:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004a90:	4b38      	ldr	r3, [pc, #224]	; (8004b74 <HAL_RCC_OscConfig+0x824>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4a37      	ldr	r2, [pc, #220]	; (8004b74 <HAL_RCC_OscConfig+0x824>)
 8004a96:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004a9a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004a9c:	4b35      	ldr	r3, [pc, #212]	; (8004b74 <HAL_RCC_OscConfig+0x824>)
 8004a9e:	68db      	ldr	r3, [r3, #12]
 8004aa0:	4a34      	ldr	r2, [pc, #208]	; (8004b74 <HAL_RCC_OscConfig+0x824>)
 8004aa2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004aa6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004aa8:	f7fc fb1c 	bl	80010e4 <HAL_GetTick>
 8004aac:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004aae:	e008      	b.n	8004ac2 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ab0:	f7fc fb18 	bl	80010e4 <HAL_GetTick>
 8004ab4:	4602      	mov	r2, r0
 8004ab6:	693b      	ldr	r3, [r7, #16]
 8004ab8:	1ad3      	subs	r3, r2, r3
 8004aba:	2b02      	cmp	r3, #2
 8004abc:	d901      	bls.n	8004ac2 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8004abe:	2303      	movs	r3, #3
 8004ac0:	e066      	b.n	8004b90 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ac2:	4b2c      	ldr	r3, [pc, #176]	; (8004b74 <HAL_RCC_OscConfig+0x824>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d0f0      	beq.n	8004ab0 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004ace:	e05e      	b.n	8004b8e <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004ad0:	2301      	movs	r3, #1
 8004ad2:	e05d      	b.n	8004b90 <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ad4:	4b27      	ldr	r3, [pc, #156]	; (8004b74 <HAL_RCC_OscConfig+0x824>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d156      	bne.n	8004b8e <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004ae0:	4b24      	ldr	r3, [pc, #144]	; (8004b74 <HAL_RCC_OscConfig+0x824>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4a23      	ldr	r2, [pc, #140]	; (8004b74 <HAL_RCC_OscConfig+0x824>)
 8004ae6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004aea:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004aec:	4b21      	ldr	r3, [pc, #132]	; (8004b74 <HAL_RCC_OscConfig+0x824>)
 8004aee:	68db      	ldr	r3, [r3, #12]
 8004af0:	4a20      	ldr	r2, [pc, #128]	; (8004b74 <HAL_RCC_OscConfig+0x824>)
 8004af2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004af6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004af8:	f7fc faf4 	bl	80010e4 <HAL_GetTick>
 8004afc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004afe:	e008      	b.n	8004b12 <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b00:	f7fc faf0 	bl	80010e4 <HAL_GetTick>
 8004b04:	4602      	mov	r2, r0
 8004b06:	693b      	ldr	r3, [r7, #16]
 8004b08:	1ad3      	subs	r3, r2, r3
 8004b0a:	2b02      	cmp	r3, #2
 8004b0c:	d901      	bls.n	8004b12 <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 8004b0e:	2303      	movs	r3, #3
 8004b10:	e03e      	b.n	8004b90 <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b12:	4b18      	ldr	r3, [pc, #96]	; (8004b74 <HAL_RCC_OscConfig+0x824>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d0f0      	beq.n	8004b00 <HAL_RCC_OscConfig+0x7b0>
 8004b1e:	e036      	b.n	8004b8e <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004b20:	69bb      	ldr	r3, [r7, #24]
 8004b22:	2b0c      	cmp	r3, #12
 8004b24:	d031      	beq.n	8004b8a <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b26:	4b13      	ldr	r3, [pc, #76]	; (8004b74 <HAL_RCC_OscConfig+0x824>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	4a12      	ldr	r2, [pc, #72]	; (8004b74 <HAL_RCC_OscConfig+0x824>)
 8004b2c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004b30:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8004b32:	4b10      	ldr	r3, [pc, #64]	; (8004b74 <HAL_RCC_OscConfig+0x824>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d105      	bne.n	8004b4a <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004b3e:	4b0d      	ldr	r3, [pc, #52]	; (8004b74 <HAL_RCC_OscConfig+0x824>)
 8004b40:	68db      	ldr	r3, [r3, #12]
 8004b42:	4a0c      	ldr	r2, [pc, #48]	; (8004b74 <HAL_RCC_OscConfig+0x824>)
 8004b44:	f023 0303 	bic.w	r3, r3, #3
 8004b48:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004b4a:	4b0a      	ldr	r3, [pc, #40]	; (8004b74 <HAL_RCC_OscConfig+0x824>)
 8004b4c:	68db      	ldr	r3, [r3, #12]
 8004b4e:	4a09      	ldr	r2, [pc, #36]	; (8004b74 <HAL_RCC_OscConfig+0x824>)
 8004b50:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004b54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b58:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b5a:	f7fc fac3 	bl	80010e4 <HAL_GetTick>
 8004b5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b60:	e00c      	b.n	8004b7c <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b62:	f7fc fabf 	bl	80010e4 <HAL_GetTick>
 8004b66:	4602      	mov	r2, r0
 8004b68:	693b      	ldr	r3, [r7, #16]
 8004b6a:	1ad3      	subs	r3, r2, r3
 8004b6c:	2b02      	cmp	r3, #2
 8004b6e:	d905      	bls.n	8004b7c <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 8004b70:	2303      	movs	r3, #3
 8004b72:	e00d      	b.n	8004b90 <HAL_RCC_OscConfig+0x840>
 8004b74:	40021000 	.word	0x40021000
 8004b78:	019d800c 	.word	0x019d800c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b7c:	4b06      	ldr	r3, [pc, #24]	; (8004b98 <HAL_RCC_OscConfig+0x848>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d1ec      	bne.n	8004b62 <HAL_RCC_OscConfig+0x812>
 8004b88:	e001      	b.n	8004b8e <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	e000      	b.n	8004b90 <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 8004b8e:	2300      	movs	r3, #0
}
 8004b90:	4618      	mov	r0, r3
 8004b92:	3720      	adds	r7, #32
 8004b94:	46bd      	mov	sp, r7
 8004b96:	bd80      	pop	{r7, pc}
 8004b98:	40021000 	.word	0x40021000

08004b9c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b086      	sub	sp, #24
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
 8004ba4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d101      	bne.n	8004bb4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004bb0:	2301      	movs	r3, #1
 8004bb2:	e10f      	b.n	8004dd4 <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004bb4:	4b89      	ldr	r3, [pc, #548]	; (8004ddc <HAL_RCC_ClockConfig+0x240>)
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f003 030f 	and.w	r3, r3, #15
 8004bbc:	683a      	ldr	r2, [r7, #0]
 8004bbe:	429a      	cmp	r2, r3
 8004bc0:	d910      	bls.n	8004be4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bc2:	4b86      	ldr	r3, [pc, #536]	; (8004ddc <HAL_RCC_ClockConfig+0x240>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f023 020f 	bic.w	r2, r3, #15
 8004bca:	4984      	ldr	r1, [pc, #528]	; (8004ddc <HAL_RCC_ClockConfig+0x240>)
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bd2:	4b82      	ldr	r3, [pc, #520]	; (8004ddc <HAL_RCC_ClockConfig+0x240>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f003 030f 	and.w	r3, r3, #15
 8004bda:	683a      	ldr	r2, [r7, #0]
 8004bdc:	429a      	cmp	r2, r3
 8004bde:	d001      	beq.n	8004be4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004be0:	2301      	movs	r3, #1
 8004be2:	e0f7      	b.n	8004dd4 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f003 0301 	and.w	r3, r3, #1
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	f000 8089 	beq.w	8004d04 <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	685b      	ldr	r3, [r3, #4]
 8004bf6:	2b03      	cmp	r3, #3
 8004bf8:	d133      	bne.n	8004c62 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004bfa:	4b79      	ldr	r3, [pc, #484]	; (8004de0 <HAL_RCC_ClockConfig+0x244>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d101      	bne.n	8004c0a <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 8004c06:	2301      	movs	r3, #1
 8004c08:	e0e4      	b.n	8004dd4 <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8004c0a:	f000 fa11 	bl	8005030 <RCC_GetSysClockFreqFromPLLSource>
 8004c0e:	4603      	mov	r3, r0
 8004c10:	4a74      	ldr	r2, [pc, #464]	; (8004de4 <HAL_RCC_ClockConfig+0x248>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d955      	bls.n	8004cc2 <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004c16:	4b72      	ldr	r3, [pc, #456]	; (8004de0 <HAL_RCC_ClockConfig+0x244>)
 8004c18:	689b      	ldr	r3, [r3, #8]
 8004c1a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d10a      	bne.n	8004c38 <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004c22:	4b6f      	ldr	r3, [pc, #444]	; (8004de0 <HAL_RCC_ClockConfig+0x244>)
 8004c24:	689b      	ldr	r3, [r3, #8]
 8004c26:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004c2a:	4a6d      	ldr	r2, [pc, #436]	; (8004de0 <HAL_RCC_ClockConfig+0x244>)
 8004c2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c30:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004c32:	2380      	movs	r3, #128	; 0x80
 8004c34:	617b      	str	r3, [r7, #20]
 8004c36:	e044      	b.n	8004cc2 <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f003 0302 	and.w	r3, r3, #2
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d03e      	beq.n	8004cc2 <HAL_RCC_ClockConfig+0x126>
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	689b      	ldr	r3, [r3, #8]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d13a      	bne.n	8004cc2 <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004c4c:	4b64      	ldr	r3, [pc, #400]	; (8004de0 <HAL_RCC_ClockConfig+0x244>)
 8004c4e:	689b      	ldr	r3, [r3, #8]
 8004c50:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004c54:	4a62      	ldr	r2, [pc, #392]	; (8004de0 <HAL_RCC_ClockConfig+0x244>)
 8004c56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c5a:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004c5c:	2380      	movs	r3, #128	; 0x80
 8004c5e:	617b      	str	r3, [r7, #20]
 8004c60:	e02f      	b.n	8004cc2 <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	2b02      	cmp	r3, #2
 8004c68:	d107      	bne.n	8004c7a <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004c6a:	4b5d      	ldr	r3, [pc, #372]	; (8004de0 <HAL_RCC_ClockConfig+0x244>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d115      	bne.n	8004ca2 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8004c76:	2301      	movs	r3, #1
 8004c78:	e0ac      	b.n	8004dd4 <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	685b      	ldr	r3, [r3, #4]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d107      	bne.n	8004c92 <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004c82:	4b57      	ldr	r3, [pc, #348]	; (8004de0 <HAL_RCC_ClockConfig+0x244>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f003 0302 	and.w	r3, r3, #2
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d109      	bne.n	8004ca2 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8004c8e:	2301      	movs	r3, #1
 8004c90:	e0a0      	b.n	8004dd4 <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004c92:	4b53      	ldr	r3, [pc, #332]	; (8004de0 <HAL_RCC_ClockConfig+0x244>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d101      	bne.n	8004ca2 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	e098      	b.n	8004dd4 <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8004ca2:	f000 f8a7 	bl	8004df4 <HAL_RCC_GetSysClockFreq>
 8004ca6:	4603      	mov	r3, r0
 8004ca8:	4a4e      	ldr	r2, [pc, #312]	; (8004de4 <HAL_RCC_ClockConfig+0x248>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d909      	bls.n	8004cc2 <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004cae:	4b4c      	ldr	r3, [pc, #304]	; (8004de0 <HAL_RCC_ClockConfig+0x244>)
 8004cb0:	689b      	ldr	r3, [r3, #8]
 8004cb2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004cb6:	4a4a      	ldr	r2, [pc, #296]	; (8004de0 <HAL_RCC_ClockConfig+0x244>)
 8004cb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cbc:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004cbe:	2380      	movs	r3, #128	; 0x80
 8004cc0:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004cc2:	4b47      	ldr	r3, [pc, #284]	; (8004de0 <HAL_RCC_ClockConfig+0x244>)
 8004cc4:	689b      	ldr	r3, [r3, #8]
 8004cc6:	f023 0203 	bic.w	r2, r3, #3
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	685b      	ldr	r3, [r3, #4]
 8004cce:	4944      	ldr	r1, [pc, #272]	; (8004de0 <HAL_RCC_ClockConfig+0x244>)
 8004cd0:	4313      	orrs	r3, r2
 8004cd2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004cd4:	f7fc fa06 	bl	80010e4 <HAL_GetTick>
 8004cd8:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cda:	e00a      	b.n	8004cf2 <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004cdc:	f7fc fa02 	bl	80010e4 <HAL_GetTick>
 8004ce0:	4602      	mov	r2, r0
 8004ce2:	693b      	ldr	r3, [r7, #16]
 8004ce4:	1ad3      	subs	r3, r2, r3
 8004ce6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d901      	bls.n	8004cf2 <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 8004cee:	2303      	movs	r3, #3
 8004cf0:	e070      	b.n	8004dd4 <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cf2:	4b3b      	ldr	r3, [pc, #236]	; (8004de0 <HAL_RCC_ClockConfig+0x244>)
 8004cf4:	689b      	ldr	r3, [r3, #8]
 8004cf6:	f003 020c 	and.w	r2, r3, #12
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	685b      	ldr	r3, [r3, #4]
 8004cfe:	009b      	lsls	r3, r3, #2
 8004d00:	429a      	cmp	r2, r3
 8004d02:	d1eb      	bne.n	8004cdc <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f003 0302 	and.w	r3, r3, #2
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d009      	beq.n	8004d24 <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d10:	4b33      	ldr	r3, [pc, #204]	; (8004de0 <HAL_RCC_ClockConfig+0x244>)
 8004d12:	689b      	ldr	r3, [r3, #8]
 8004d14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	689b      	ldr	r3, [r3, #8]
 8004d1c:	4930      	ldr	r1, [pc, #192]	; (8004de0 <HAL_RCC_ClockConfig+0x244>)
 8004d1e:	4313      	orrs	r3, r2
 8004d20:	608b      	str	r3, [r1, #8]
 8004d22:	e008      	b.n	8004d36 <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004d24:	697b      	ldr	r3, [r7, #20]
 8004d26:	2b80      	cmp	r3, #128	; 0x80
 8004d28:	d105      	bne.n	8004d36 <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004d2a:	4b2d      	ldr	r3, [pc, #180]	; (8004de0 <HAL_RCC_ClockConfig+0x244>)
 8004d2c:	689b      	ldr	r3, [r3, #8]
 8004d2e:	4a2c      	ldr	r2, [pc, #176]	; (8004de0 <HAL_RCC_ClockConfig+0x244>)
 8004d30:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004d34:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004d36:	4b29      	ldr	r3, [pc, #164]	; (8004ddc <HAL_RCC_ClockConfig+0x240>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f003 030f 	and.w	r3, r3, #15
 8004d3e:	683a      	ldr	r2, [r7, #0]
 8004d40:	429a      	cmp	r2, r3
 8004d42:	d210      	bcs.n	8004d66 <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d44:	4b25      	ldr	r3, [pc, #148]	; (8004ddc <HAL_RCC_ClockConfig+0x240>)
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f023 020f 	bic.w	r2, r3, #15
 8004d4c:	4923      	ldr	r1, [pc, #140]	; (8004ddc <HAL_RCC_ClockConfig+0x240>)
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	4313      	orrs	r3, r2
 8004d52:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d54:	4b21      	ldr	r3, [pc, #132]	; (8004ddc <HAL_RCC_ClockConfig+0x240>)
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f003 030f 	and.w	r3, r3, #15
 8004d5c:	683a      	ldr	r2, [r7, #0]
 8004d5e:	429a      	cmp	r2, r3
 8004d60:	d001      	beq.n	8004d66 <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 8004d62:	2301      	movs	r3, #1
 8004d64:	e036      	b.n	8004dd4 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f003 0304 	and.w	r3, r3, #4
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d008      	beq.n	8004d84 <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d72:	4b1b      	ldr	r3, [pc, #108]	; (8004de0 <HAL_RCC_ClockConfig+0x244>)
 8004d74:	689b      	ldr	r3, [r3, #8]
 8004d76:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	68db      	ldr	r3, [r3, #12]
 8004d7e:	4918      	ldr	r1, [pc, #96]	; (8004de0 <HAL_RCC_ClockConfig+0x244>)
 8004d80:	4313      	orrs	r3, r2
 8004d82:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f003 0308 	and.w	r3, r3, #8
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d009      	beq.n	8004da4 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004d90:	4b13      	ldr	r3, [pc, #76]	; (8004de0 <HAL_RCC_ClockConfig+0x244>)
 8004d92:	689b      	ldr	r3, [r3, #8]
 8004d94:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	691b      	ldr	r3, [r3, #16]
 8004d9c:	00db      	lsls	r3, r3, #3
 8004d9e:	4910      	ldr	r1, [pc, #64]	; (8004de0 <HAL_RCC_ClockConfig+0x244>)
 8004da0:	4313      	orrs	r3, r2
 8004da2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004da4:	f000 f826 	bl	8004df4 <HAL_RCC_GetSysClockFreq>
 8004da8:	4602      	mov	r2, r0
 8004daa:	4b0d      	ldr	r3, [pc, #52]	; (8004de0 <HAL_RCC_ClockConfig+0x244>)
 8004dac:	689b      	ldr	r3, [r3, #8]
 8004dae:	091b      	lsrs	r3, r3, #4
 8004db0:	f003 030f 	and.w	r3, r3, #15
 8004db4:	490c      	ldr	r1, [pc, #48]	; (8004de8 <HAL_RCC_ClockConfig+0x24c>)
 8004db6:	5ccb      	ldrb	r3, [r1, r3]
 8004db8:	f003 031f 	and.w	r3, r3, #31
 8004dbc:	fa22 f303 	lsr.w	r3, r2, r3
 8004dc0:	4a0a      	ldr	r2, [pc, #40]	; (8004dec <HAL_RCC_ClockConfig+0x250>)
 8004dc2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004dc4:	4b0a      	ldr	r3, [pc, #40]	; (8004df0 <HAL_RCC_ClockConfig+0x254>)
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	4618      	mov	r0, r3
 8004dca:	f7fc f93f 	bl	800104c <HAL_InitTick>
 8004dce:	4603      	mov	r3, r0
 8004dd0:	73fb      	strb	r3, [r7, #15]

  return status;
 8004dd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	3718      	adds	r7, #24
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	bd80      	pop	{r7, pc}
 8004ddc:	40022000 	.word	0x40022000
 8004de0:	40021000 	.word	0x40021000
 8004de4:	04c4b400 	.word	0x04c4b400
 8004de8:	08013b80 	.word	0x08013b80
 8004dec:	20000040 	.word	0x20000040
 8004df0:	20000000 	.word	0x20000000

08004df4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004df4:	b480      	push	{r7}
 8004df6:	b089      	sub	sp, #36	; 0x24
 8004df8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	61fb      	str	r3, [r7, #28]
 8004dfe:	2300      	movs	r3, #0
 8004e00:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004e02:	4b3e      	ldr	r3, [pc, #248]	; (8004efc <HAL_RCC_GetSysClockFreq+0x108>)
 8004e04:	689b      	ldr	r3, [r3, #8]
 8004e06:	f003 030c 	and.w	r3, r3, #12
 8004e0a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004e0c:	4b3b      	ldr	r3, [pc, #236]	; (8004efc <HAL_RCC_GetSysClockFreq+0x108>)
 8004e0e:	68db      	ldr	r3, [r3, #12]
 8004e10:	f003 0303 	and.w	r3, r3, #3
 8004e14:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004e16:	693b      	ldr	r3, [r7, #16]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d005      	beq.n	8004e28 <HAL_RCC_GetSysClockFreq+0x34>
 8004e1c:	693b      	ldr	r3, [r7, #16]
 8004e1e:	2b0c      	cmp	r3, #12
 8004e20:	d121      	bne.n	8004e66 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	2b01      	cmp	r3, #1
 8004e26:	d11e      	bne.n	8004e66 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004e28:	4b34      	ldr	r3, [pc, #208]	; (8004efc <HAL_RCC_GetSysClockFreq+0x108>)
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f003 0308 	and.w	r3, r3, #8
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d107      	bne.n	8004e44 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004e34:	4b31      	ldr	r3, [pc, #196]	; (8004efc <HAL_RCC_GetSysClockFreq+0x108>)
 8004e36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e3a:	0a1b      	lsrs	r3, r3, #8
 8004e3c:	f003 030f 	and.w	r3, r3, #15
 8004e40:	61fb      	str	r3, [r7, #28]
 8004e42:	e005      	b.n	8004e50 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004e44:	4b2d      	ldr	r3, [pc, #180]	; (8004efc <HAL_RCC_GetSysClockFreq+0x108>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	091b      	lsrs	r3, r3, #4
 8004e4a:	f003 030f 	and.w	r3, r3, #15
 8004e4e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004e50:	4a2b      	ldr	r2, [pc, #172]	; (8004f00 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004e52:	69fb      	ldr	r3, [r7, #28]
 8004e54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e58:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004e5a:	693b      	ldr	r3, [r7, #16]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d10d      	bne.n	8004e7c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004e60:	69fb      	ldr	r3, [r7, #28]
 8004e62:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004e64:	e00a      	b.n	8004e7c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004e66:	693b      	ldr	r3, [r7, #16]
 8004e68:	2b04      	cmp	r3, #4
 8004e6a:	d102      	bne.n	8004e72 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004e6c:	4b25      	ldr	r3, [pc, #148]	; (8004f04 <HAL_RCC_GetSysClockFreq+0x110>)
 8004e6e:	61bb      	str	r3, [r7, #24]
 8004e70:	e004      	b.n	8004e7c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004e72:	693b      	ldr	r3, [r7, #16]
 8004e74:	2b08      	cmp	r3, #8
 8004e76:	d101      	bne.n	8004e7c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004e78:	4b23      	ldr	r3, [pc, #140]	; (8004f08 <HAL_RCC_GetSysClockFreq+0x114>)
 8004e7a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004e7c:	693b      	ldr	r3, [r7, #16]
 8004e7e:	2b0c      	cmp	r3, #12
 8004e80:	d134      	bne.n	8004eec <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004e82:	4b1e      	ldr	r3, [pc, #120]	; (8004efc <HAL_RCC_GetSysClockFreq+0x108>)
 8004e84:	68db      	ldr	r3, [r3, #12]
 8004e86:	f003 0303 	and.w	r3, r3, #3
 8004e8a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004e8c:	68bb      	ldr	r3, [r7, #8]
 8004e8e:	2b02      	cmp	r3, #2
 8004e90:	d003      	beq.n	8004e9a <HAL_RCC_GetSysClockFreq+0xa6>
 8004e92:	68bb      	ldr	r3, [r7, #8]
 8004e94:	2b03      	cmp	r3, #3
 8004e96:	d003      	beq.n	8004ea0 <HAL_RCC_GetSysClockFreq+0xac>
 8004e98:	e005      	b.n	8004ea6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004e9a:	4b1a      	ldr	r3, [pc, #104]	; (8004f04 <HAL_RCC_GetSysClockFreq+0x110>)
 8004e9c:	617b      	str	r3, [r7, #20]
      break;
 8004e9e:	e005      	b.n	8004eac <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004ea0:	4b19      	ldr	r3, [pc, #100]	; (8004f08 <HAL_RCC_GetSysClockFreq+0x114>)
 8004ea2:	617b      	str	r3, [r7, #20]
      break;
 8004ea4:	e002      	b.n	8004eac <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004ea6:	69fb      	ldr	r3, [r7, #28]
 8004ea8:	617b      	str	r3, [r7, #20]
      break;
 8004eaa:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004eac:	4b13      	ldr	r3, [pc, #76]	; (8004efc <HAL_RCC_GetSysClockFreq+0x108>)
 8004eae:	68db      	ldr	r3, [r3, #12]
 8004eb0:	091b      	lsrs	r3, r3, #4
 8004eb2:	f003 030f 	and.w	r3, r3, #15
 8004eb6:	3301      	adds	r3, #1
 8004eb8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004eba:	4b10      	ldr	r3, [pc, #64]	; (8004efc <HAL_RCC_GetSysClockFreq+0x108>)
 8004ebc:	68db      	ldr	r3, [r3, #12]
 8004ebe:	0a1b      	lsrs	r3, r3, #8
 8004ec0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ec4:	697a      	ldr	r2, [r7, #20]
 8004ec6:	fb02 f203 	mul.w	r2, r2, r3
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ed0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004ed2:	4b0a      	ldr	r3, [pc, #40]	; (8004efc <HAL_RCC_GetSysClockFreq+0x108>)
 8004ed4:	68db      	ldr	r3, [r3, #12]
 8004ed6:	0e5b      	lsrs	r3, r3, #25
 8004ed8:	f003 0303 	and.w	r3, r3, #3
 8004edc:	3301      	adds	r3, #1
 8004ede:	005b      	lsls	r3, r3, #1
 8004ee0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004ee2:	697a      	ldr	r2, [r7, #20]
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004eea:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004eec:	69bb      	ldr	r3, [r7, #24]
}
 8004eee:	4618      	mov	r0, r3
 8004ef0:	3724      	adds	r7, #36	; 0x24
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef8:	4770      	bx	lr
 8004efa:	bf00      	nop
 8004efc:	40021000 	.word	0x40021000
 8004f00:	08013b98 	.word	0x08013b98
 8004f04:	00f42400 	.word	0x00f42400
 8004f08:	007a1200 	.word	0x007a1200

08004f0c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004f10:	4b03      	ldr	r3, [pc, #12]	; (8004f20 <HAL_RCC_GetHCLKFreq+0x14>)
 8004f12:	681b      	ldr	r3, [r3, #0]
}
 8004f14:	4618      	mov	r0, r3
 8004f16:	46bd      	mov	sp, r7
 8004f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1c:	4770      	bx	lr
 8004f1e:	bf00      	nop
 8004f20:	20000040 	.word	0x20000040

08004f24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004f28:	f7ff fff0 	bl	8004f0c <HAL_RCC_GetHCLKFreq>
 8004f2c:	4602      	mov	r2, r0
 8004f2e:	4b06      	ldr	r3, [pc, #24]	; (8004f48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004f30:	689b      	ldr	r3, [r3, #8]
 8004f32:	0a1b      	lsrs	r3, r3, #8
 8004f34:	f003 0307 	and.w	r3, r3, #7
 8004f38:	4904      	ldr	r1, [pc, #16]	; (8004f4c <HAL_RCC_GetPCLK1Freq+0x28>)
 8004f3a:	5ccb      	ldrb	r3, [r1, r3]
 8004f3c:	f003 031f 	and.w	r3, r3, #31
 8004f40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f44:	4618      	mov	r0, r3
 8004f46:	bd80      	pop	{r7, pc}
 8004f48:	40021000 	.word	0x40021000
 8004f4c:	08013b90 	.word	0x08013b90

08004f50 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004f54:	f7ff ffda 	bl	8004f0c <HAL_RCC_GetHCLKFreq>
 8004f58:	4602      	mov	r2, r0
 8004f5a:	4b06      	ldr	r3, [pc, #24]	; (8004f74 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004f5c:	689b      	ldr	r3, [r3, #8]
 8004f5e:	0adb      	lsrs	r3, r3, #11
 8004f60:	f003 0307 	and.w	r3, r3, #7
 8004f64:	4904      	ldr	r1, [pc, #16]	; (8004f78 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004f66:	5ccb      	ldrb	r3, [r1, r3]
 8004f68:	f003 031f 	and.w	r3, r3, #31
 8004f6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f70:	4618      	mov	r0, r3
 8004f72:	bd80      	pop	{r7, pc}
 8004f74:	40021000 	.word	0x40021000
 8004f78:	08013b90 	.word	0x08013b90

08004f7c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b086      	sub	sp, #24
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004f84:	2300      	movs	r3, #0
 8004f86:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004f88:	4b27      	ldr	r3, [pc, #156]	; (8005028 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004f8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d003      	beq.n	8004f9c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004f94:	f7ff f918 	bl	80041c8 <HAL_PWREx_GetVoltageRange>
 8004f98:	6178      	str	r0, [r7, #20]
 8004f9a:	e014      	b.n	8004fc6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004f9c:	4b22      	ldr	r3, [pc, #136]	; (8005028 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004f9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fa0:	4a21      	ldr	r2, [pc, #132]	; (8005028 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004fa2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fa6:	6593      	str	r3, [r2, #88]	; 0x58
 8004fa8:	4b1f      	ldr	r3, [pc, #124]	; (8005028 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004faa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fb0:	60fb      	str	r3, [r7, #12]
 8004fb2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004fb4:	f7ff f908 	bl	80041c8 <HAL_PWREx_GetVoltageRange>
 8004fb8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004fba:	4b1b      	ldr	r3, [pc, #108]	; (8005028 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004fbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fbe:	4a1a      	ldr	r2, [pc, #104]	; (8005028 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004fc0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004fc4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004fc6:	697b      	ldr	r3, [r7, #20]
 8004fc8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004fcc:	d10b      	bne.n	8004fe6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2b80      	cmp	r3, #128	; 0x80
 8004fd2:	d913      	bls.n	8004ffc <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2ba0      	cmp	r3, #160	; 0xa0
 8004fd8:	d902      	bls.n	8004fe0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004fda:	2302      	movs	r3, #2
 8004fdc:	613b      	str	r3, [r7, #16]
 8004fde:	e00d      	b.n	8004ffc <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004fe0:	2301      	movs	r3, #1
 8004fe2:	613b      	str	r3, [r7, #16]
 8004fe4:	e00a      	b.n	8004ffc <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2b7f      	cmp	r3, #127	; 0x7f
 8004fea:	d902      	bls.n	8004ff2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8004fec:	2302      	movs	r3, #2
 8004fee:	613b      	str	r3, [r7, #16]
 8004ff0:	e004      	b.n	8004ffc <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2b70      	cmp	r3, #112	; 0x70
 8004ff6:	d101      	bne.n	8004ffc <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004ff8:	2301      	movs	r3, #1
 8004ffa:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004ffc:	4b0b      	ldr	r3, [pc, #44]	; (800502c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f023 020f 	bic.w	r2, r3, #15
 8005004:	4909      	ldr	r1, [pc, #36]	; (800502c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005006:	693b      	ldr	r3, [r7, #16]
 8005008:	4313      	orrs	r3, r2
 800500a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800500c:	4b07      	ldr	r3, [pc, #28]	; (800502c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f003 030f 	and.w	r3, r3, #15
 8005014:	693a      	ldr	r2, [r7, #16]
 8005016:	429a      	cmp	r2, r3
 8005018:	d001      	beq.n	800501e <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 800501a:	2301      	movs	r3, #1
 800501c:	e000      	b.n	8005020 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 800501e:	2300      	movs	r3, #0
}
 8005020:	4618      	mov	r0, r3
 8005022:	3718      	adds	r7, #24
 8005024:	46bd      	mov	sp, r7
 8005026:	bd80      	pop	{r7, pc}
 8005028:	40021000 	.word	0x40021000
 800502c:	40022000 	.word	0x40022000

08005030 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005030:	b480      	push	{r7}
 8005032:	b087      	sub	sp, #28
 8005034:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8005036:	2300      	movs	r3, #0
 8005038:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 800503a:	4b2d      	ldr	r3, [pc, #180]	; (80050f0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800503c:	68db      	ldr	r3, [r3, #12]
 800503e:	f003 0303 	and.w	r3, r3, #3
 8005042:	2b01      	cmp	r3, #1
 8005044:	d118      	bne.n	8005078 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005046:	4b2a      	ldr	r3, [pc, #168]	; (80050f0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f003 0308 	and.w	r3, r3, #8
 800504e:	2b00      	cmp	r3, #0
 8005050:	d107      	bne.n	8005062 <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005052:	4b27      	ldr	r3, [pc, #156]	; (80050f0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005054:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005058:	0a1b      	lsrs	r3, r3, #8
 800505a:	f003 030f 	and.w	r3, r3, #15
 800505e:	617b      	str	r3, [r7, #20]
 8005060:	e005      	b.n	800506e <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005062:	4b23      	ldr	r3, [pc, #140]	; (80050f0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	091b      	lsrs	r3, r3, #4
 8005068:	f003 030f 	and.w	r3, r3, #15
 800506c:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800506e:	4a21      	ldr	r2, [pc, #132]	; (80050f4 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8005070:	697b      	ldr	r3, [r7, #20]
 8005072:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005076:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005078:	4b1d      	ldr	r3, [pc, #116]	; (80050f0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800507a:	68db      	ldr	r3, [r3, #12]
 800507c:	f003 0303 	and.w	r3, r3, #3
 8005080:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	2b02      	cmp	r3, #2
 8005086:	d003      	beq.n	8005090 <RCC_GetSysClockFreqFromPLLSource+0x60>
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	2b03      	cmp	r3, #3
 800508c:	d003      	beq.n	8005096 <RCC_GetSysClockFreqFromPLLSource+0x66>
 800508e:	e005      	b.n	800509c <RCC_GetSysClockFreqFromPLLSource+0x6c>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8005090:	4b19      	ldr	r3, [pc, #100]	; (80050f8 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8005092:	613b      	str	r3, [r7, #16]
    break;
 8005094:	e005      	b.n	80050a2 <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8005096:	4b19      	ldr	r3, [pc, #100]	; (80050fc <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8005098:	613b      	str	r3, [r7, #16]
    break;
 800509a:	e002      	b.n	80050a2 <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 800509c:	697b      	ldr	r3, [r7, #20]
 800509e:	613b      	str	r3, [r7, #16]
    break;
 80050a0:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80050a2:	4b13      	ldr	r3, [pc, #76]	; (80050f0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80050a4:	68db      	ldr	r3, [r3, #12]
 80050a6:	091b      	lsrs	r3, r3, #4
 80050a8:	f003 030f 	and.w	r3, r3, #15
 80050ac:	3301      	adds	r3, #1
 80050ae:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80050b0:	4b0f      	ldr	r3, [pc, #60]	; (80050f0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80050b2:	68db      	ldr	r3, [r3, #12]
 80050b4:	0a1b      	lsrs	r3, r3, #8
 80050b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80050ba:	693a      	ldr	r2, [r7, #16]
 80050bc:	fb02 f203 	mul.w	r2, r2, r3
 80050c0:	68bb      	ldr	r3, [r7, #8]
 80050c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80050c6:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80050c8:	4b09      	ldr	r3, [pc, #36]	; (80050f0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80050ca:	68db      	ldr	r3, [r3, #12]
 80050cc:	0e5b      	lsrs	r3, r3, #25
 80050ce:	f003 0303 	and.w	r3, r3, #3
 80050d2:	3301      	adds	r3, #1
 80050d4:	005b      	lsls	r3, r3, #1
 80050d6:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80050d8:	693a      	ldr	r2, [r7, #16]
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80050e0:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80050e2:	683b      	ldr	r3, [r7, #0]
}
 80050e4:	4618      	mov	r0, r3
 80050e6:	371c      	adds	r7, #28
 80050e8:	46bd      	mov	sp, r7
 80050ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ee:	4770      	bx	lr
 80050f0:	40021000 	.word	0x40021000
 80050f4:	08013b98 	.word	0x08013b98
 80050f8:	00f42400 	.word	0x00f42400
 80050fc:	007a1200 	.word	0x007a1200

08005100 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b086      	sub	sp, #24
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005108:	2300      	movs	r3, #0
 800510a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800510c:	2300      	movs	r3, #0
 800510e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005118:	2b00      	cmp	r3, #0
 800511a:	d040      	beq.n	800519e <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005120:	2b80      	cmp	r3, #128	; 0x80
 8005122:	d02a      	beq.n	800517a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005124:	2b80      	cmp	r3, #128	; 0x80
 8005126:	d825      	bhi.n	8005174 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005128:	2b60      	cmp	r3, #96	; 0x60
 800512a:	d026      	beq.n	800517a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800512c:	2b60      	cmp	r3, #96	; 0x60
 800512e:	d821      	bhi.n	8005174 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005130:	2b40      	cmp	r3, #64	; 0x40
 8005132:	d006      	beq.n	8005142 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8005134:	2b40      	cmp	r3, #64	; 0x40
 8005136:	d81d      	bhi.n	8005174 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005138:	2b00      	cmp	r3, #0
 800513a:	d009      	beq.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0x50>
 800513c:	2b20      	cmp	r3, #32
 800513e:	d010      	beq.n	8005162 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8005140:	e018      	b.n	8005174 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005142:	4b89      	ldr	r3, [pc, #548]	; (8005368 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005144:	68db      	ldr	r3, [r3, #12]
 8005146:	4a88      	ldr	r2, [pc, #544]	; (8005368 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005148:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800514c:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800514e:	e015      	b.n	800517c <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	3304      	adds	r3, #4
 8005154:	2100      	movs	r1, #0
 8005156:	4618      	mov	r0, r3
 8005158:	f000 fb02 	bl	8005760 <RCCEx_PLLSAI1_Config>
 800515c:	4603      	mov	r3, r0
 800515e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005160:	e00c      	b.n	800517c <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	3320      	adds	r3, #32
 8005166:	2100      	movs	r1, #0
 8005168:	4618      	mov	r0, r3
 800516a:	f000 fbed 	bl	8005948 <RCCEx_PLLSAI2_Config>
 800516e:	4603      	mov	r3, r0
 8005170:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005172:	e003      	b.n	800517c <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005174:	2301      	movs	r3, #1
 8005176:	74fb      	strb	r3, [r7, #19]
      break;
 8005178:	e000      	b.n	800517c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 800517a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800517c:	7cfb      	ldrb	r3, [r7, #19]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d10b      	bne.n	800519a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005182:	4b79      	ldr	r3, [pc, #484]	; (8005368 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005184:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005188:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005190:	4975      	ldr	r1, [pc, #468]	; (8005368 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005192:	4313      	orrs	r3, r2
 8005194:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8005198:	e001      	b.n	800519e <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800519a:	7cfb      	ldrb	r3, [r7, #19]
 800519c:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d047      	beq.n	800523a <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051b2:	d030      	beq.n	8005216 <HAL_RCCEx_PeriphCLKConfig+0x116>
 80051b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051b8:	d82a      	bhi.n	8005210 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80051ba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80051be:	d02a      	beq.n	8005216 <HAL_RCCEx_PeriphCLKConfig+0x116>
 80051c0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80051c4:	d824      	bhi.n	8005210 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80051c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80051ca:	d008      	beq.n	80051de <HAL_RCCEx_PeriphCLKConfig+0xde>
 80051cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80051d0:	d81e      	bhi.n	8005210 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d00a      	beq.n	80051ec <HAL_RCCEx_PeriphCLKConfig+0xec>
 80051d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051da:	d010      	beq.n	80051fe <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80051dc:	e018      	b.n	8005210 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80051de:	4b62      	ldr	r3, [pc, #392]	; (8005368 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80051e0:	68db      	ldr	r3, [r3, #12]
 80051e2:	4a61      	ldr	r2, [pc, #388]	; (8005368 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80051e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80051e8:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80051ea:	e015      	b.n	8005218 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	3304      	adds	r3, #4
 80051f0:	2100      	movs	r1, #0
 80051f2:	4618      	mov	r0, r3
 80051f4:	f000 fab4 	bl	8005760 <RCCEx_PLLSAI1_Config>
 80051f8:	4603      	mov	r3, r0
 80051fa:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80051fc:	e00c      	b.n	8005218 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	3320      	adds	r3, #32
 8005202:	2100      	movs	r1, #0
 8005204:	4618      	mov	r0, r3
 8005206:	f000 fb9f 	bl	8005948 <RCCEx_PLLSAI2_Config>
 800520a:	4603      	mov	r3, r0
 800520c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800520e:	e003      	b.n	8005218 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005210:	2301      	movs	r3, #1
 8005212:	74fb      	strb	r3, [r7, #19]
      break;
 8005214:	e000      	b.n	8005218 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8005216:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005218:	7cfb      	ldrb	r3, [r7, #19]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d10b      	bne.n	8005236 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800521e:	4b52      	ldr	r3, [pc, #328]	; (8005368 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005220:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005224:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800522c:	494e      	ldr	r1, [pc, #312]	; (8005368 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800522e:	4313      	orrs	r3, r2
 8005230:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8005234:	e001      	b.n	800523a <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005236:	7cfb      	ldrb	r3, [r7, #19]
 8005238:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005242:	2b00      	cmp	r3, #0
 8005244:	f000 809f 	beq.w	8005386 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005248:	2300      	movs	r3, #0
 800524a:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800524c:	4b46      	ldr	r3, [pc, #280]	; (8005368 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800524e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005250:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005254:	2b00      	cmp	r3, #0
 8005256:	d101      	bne.n	800525c <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8005258:	2301      	movs	r3, #1
 800525a:	e000      	b.n	800525e <HAL_RCCEx_PeriphCLKConfig+0x15e>
 800525c:	2300      	movs	r3, #0
 800525e:	2b00      	cmp	r3, #0
 8005260:	d00d      	beq.n	800527e <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005262:	4b41      	ldr	r3, [pc, #260]	; (8005368 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005264:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005266:	4a40      	ldr	r2, [pc, #256]	; (8005368 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005268:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800526c:	6593      	str	r3, [r2, #88]	; 0x58
 800526e:	4b3e      	ldr	r3, [pc, #248]	; (8005368 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005270:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005272:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005276:	60bb      	str	r3, [r7, #8]
 8005278:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800527a:	2301      	movs	r3, #1
 800527c:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800527e:	4b3b      	ldr	r3, [pc, #236]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	4a3a      	ldr	r2, [pc, #232]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005284:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005288:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800528a:	f7fb ff2b 	bl	80010e4 <HAL_GetTick>
 800528e:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005290:	e009      	b.n	80052a6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005292:	f7fb ff27 	bl	80010e4 <HAL_GetTick>
 8005296:	4602      	mov	r2, r0
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	1ad3      	subs	r3, r2, r3
 800529c:	2b02      	cmp	r3, #2
 800529e:	d902      	bls.n	80052a6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 80052a0:	2303      	movs	r3, #3
 80052a2:	74fb      	strb	r3, [r7, #19]
        break;
 80052a4:	e005      	b.n	80052b2 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80052a6:	4b31      	ldr	r3, [pc, #196]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d0ef      	beq.n	8005292 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 80052b2:	7cfb      	ldrb	r3, [r7, #19]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d15b      	bne.n	8005370 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80052b8:	4b2b      	ldr	r3, [pc, #172]	; (8005368 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80052ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052c2:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80052c4:	697b      	ldr	r3, [r7, #20]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d01f      	beq.n	800530a <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052d0:	697a      	ldr	r2, [r7, #20]
 80052d2:	429a      	cmp	r2, r3
 80052d4:	d019      	beq.n	800530a <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80052d6:	4b24      	ldr	r3, [pc, #144]	; (8005368 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80052d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052e0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80052e2:	4b21      	ldr	r3, [pc, #132]	; (8005368 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80052e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052e8:	4a1f      	ldr	r2, [pc, #124]	; (8005368 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80052ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80052f2:	4b1d      	ldr	r3, [pc, #116]	; (8005368 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80052f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052f8:	4a1b      	ldr	r2, [pc, #108]	; (8005368 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80052fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80052fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005302:	4a19      	ldr	r2, [pc, #100]	; (8005368 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005304:	697b      	ldr	r3, [r7, #20]
 8005306:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800530a:	697b      	ldr	r3, [r7, #20]
 800530c:	f003 0301 	and.w	r3, r3, #1
 8005310:	2b00      	cmp	r3, #0
 8005312:	d016      	beq.n	8005342 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005314:	f7fb fee6 	bl	80010e4 <HAL_GetTick>
 8005318:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800531a:	e00b      	b.n	8005334 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800531c:	f7fb fee2 	bl	80010e4 <HAL_GetTick>
 8005320:	4602      	mov	r2, r0
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	1ad3      	subs	r3, r2, r3
 8005326:	f241 3288 	movw	r2, #5000	; 0x1388
 800532a:	4293      	cmp	r3, r2
 800532c:	d902      	bls.n	8005334 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 800532e:	2303      	movs	r3, #3
 8005330:	74fb      	strb	r3, [r7, #19]
            break;
 8005332:	e006      	b.n	8005342 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005334:	4b0c      	ldr	r3, [pc, #48]	; (8005368 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005336:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800533a:	f003 0302 	and.w	r3, r3, #2
 800533e:	2b00      	cmp	r3, #0
 8005340:	d0ec      	beq.n	800531c <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8005342:	7cfb      	ldrb	r3, [r7, #19]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d10c      	bne.n	8005362 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005348:	4b07      	ldr	r3, [pc, #28]	; (8005368 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800534a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800534e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005358:	4903      	ldr	r1, [pc, #12]	; (8005368 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800535a:	4313      	orrs	r3, r2
 800535c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005360:	e008      	b.n	8005374 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005362:	7cfb      	ldrb	r3, [r7, #19]
 8005364:	74bb      	strb	r3, [r7, #18]
 8005366:	e005      	b.n	8005374 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8005368:	40021000 	.word	0x40021000
 800536c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005370:	7cfb      	ldrb	r3, [r7, #19]
 8005372:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005374:	7c7b      	ldrb	r3, [r7, #17]
 8005376:	2b01      	cmp	r3, #1
 8005378:	d105      	bne.n	8005386 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800537a:	4ba0      	ldr	r3, [pc, #640]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800537c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800537e:	4a9f      	ldr	r2, [pc, #636]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005380:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005384:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f003 0301 	and.w	r3, r3, #1
 800538e:	2b00      	cmp	r3, #0
 8005390:	d00a      	beq.n	80053a8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005392:	4b9a      	ldr	r3, [pc, #616]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005394:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005398:	f023 0203 	bic.w	r2, r3, #3
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053a0:	4996      	ldr	r1, [pc, #600]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80053a2:	4313      	orrs	r3, r2
 80053a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f003 0302 	and.w	r3, r3, #2
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d00a      	beq.n	80053ca <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80053b4:	4b91      	ldr	r3, [pc, #580]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80053b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053ba:	f023 020c 	bic.w	r2, r3, #12
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053c2:	498e      	ldr	r1, [pc, #568]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80053c4:	4313      	orrs	r3, r2
 80053c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f003 0304 	and.w	r3, r3, #4
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d00a      	beq.n	80053ec <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80053d6:	4b89      	ldr	r3, [pc, #548]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80053d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053dc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053e4:	4985      	ldr	r1, [pc, #532]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80053e6:	4313      	orrs	r3, r2
 80053e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f003 0308 	and.w	r3, r3, #8
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d00a      	beq.n	800540e <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80053f8:	4b80      	ldr	r3, [pc, #512]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80053fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053fe:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005406:	497d      	ldr	r1, [pc, #500]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005408:	4313      	orrs	r3, r2
 800540a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f003 0310 	and.w	r3, r3, #16
 8005416:	2b00      	cmp	r3, #0
 8005418:	d00a      	beq.n	8005430 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800541a:	4b78      	ldr	r3, [pc, #480]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800541c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005420:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005428:	4974      	ldr	r1, [pc, #464]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800542a:	4313      	orrs	r3, r2
 800542c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f003 0320 	and.w	r3, r3, #32
 8005438:	2b00      	cmp	r3, #0
 800543a:	d00a      	beq.n	8005452 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800543c:	4b6f      	ldr	r3, [pc, #444]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800543e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005442:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800544a:	496c      	ldr	r1, [pc, #432]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800544c:	4313      	orrs	r3, r2
 800544e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800545a:	2b00      	cmp	r3, #0
 800545c:	d00a      	beq.n	8005474 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800545e:	4b67      	ldr	r3, [pc, #412]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005460:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005464:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800546c:	4963      	ldr	r1, [pc, #396]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800546e:	4313      	orrs	r3, r2
 8005470:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800547c:	2b00      	cmp	r3, #0
 800547e:	d00a      	beq.n	8005496 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005480:	4b5e      	ldr	r3, [pc, #376]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005482:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005486:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800548e:	495b      	ldr	r1, [pc, #364]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005490:	4313      	orrs	r3, r2
 8005492:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d00a      	beq.n	80054b8 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80054a2:	4b56      	ldr	r3, [pc, #344]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80054a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054a8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054b0:	4952      	ldr	r1, [pc, #328]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80054b2:	4313      	orrs	r3, r2
 80054b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d00a      	beq.n	80054da <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80054c4:	4b4d      	ldr	r3, [pc, #308]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80054c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054ca:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054d2:	494a      	ldr	r1, [pc, #296]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80054d4:	4313      	orrs	r3, r2
 80054d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d00a      	beq.n	80054fc <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80054e6:	4b45      	ldr	r3, [pc, #276]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80054e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054ec:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054f4:	4941      	ldr	r1, [pc, #260]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80054f6:	4313      	orrs	r3, r2
 80054f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005504:	2b00      	cmp	r3, #0
 8005506:	d00a      	beq.n	800551e <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005508:	4b3c      	ldr	r3, [pc, #240]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800550a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800550e:	f023 0203 	bic.w	r2, r3, #3
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005516:	4939      	ldr	r1, [pc, #228]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005518:	4313      	orrs	r3, r2
 800551a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005526:	2b00      	cmp	r3, #0
 8005528:	d028      	beq.n	800557c <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800552a:	4b34      	ldr	r3, [pc, #208]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800552c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005530:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005538:	4930      	ldr	r1, [pc, #192]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800553a:	4313      	orrs	r3, r2
 800553c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005544:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005548:	d106      	bne.n	8005558 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800554a:	4b2c      	ldr	r3, [pc, #176]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800554c:	68db      	ldr	r3, [r3, #12]
 800554e:	4a2b      	ldr	r2, [pc, #172]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005550:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005554:	60d3      	str	r3, [r2, #12]
 8005556:	e011      	b.n	800557c <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800555c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005560:	d10c      	bne.n	800557c <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	3304      	adds	r3, #4
 8005566:	2101      	movs	r1, #1
 8005568:	4618      	mov	r0, r3
 800556a:	f000 f8f9 	bl	8005760 <RCCEx_PLLSAI1_Config>
 800556e:	4603      	mov	r3, r0
 8005570:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005572:	7cfb      	ldrb	r3, [r7, #19]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d001      	beq.n	800557c <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8005578:	7cfb      	ldrb	r3, [r7, #19]
 800557a:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005584:	2b00      	cmp	r3, #0
 8005586:	d04d      	beq.n	8005624 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800558c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005590:	d108      	bne.n	80055a4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8005592:	4b1a      	ldr	r3, [pc, #104]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005594:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005598:	4a18      	ldr	r2, [pc, #96]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800559a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800559e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80055a2:	e012      	b.n	80055ca <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80055a4:	4b15      	ldr	r3, [pc, #84]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80055a6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80055aa:	4a14      	ldr	r2, [pc, #80]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80055ac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80055b0:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80055b4:	4b11      	ldr	r3, [pc, #68]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80055b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055ba:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80055c2:	490e      	ldr	r1, [pc, #56]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80055c4:	4313      	orrs	r3, r2
 80055c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80055ce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80055d2:	d106      	bne.n	80055e2 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80055d4:	4b09      	ldr	r3, [pc, #36]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80055d6:	68db      	ldr	r3, [r3, #12]
 80055d8:	4a08      	ldr	r2, [pc, #32]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80055da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80055de:	60d3      	str	r3, [r2, #12]
 80055e0:	e020      	b.n	8005624 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80055e6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80055ea:	d109      	bne.n	8005600 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80055ec:	4b03      	ldr	r3, [pc, #12]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80055ee:	68db      	ldr	r3, [r3, #12]
 80055f0:	4a02      	ldr	r2, [pc, #8]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80055f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055f6:	60d3      	str	r3, [r2, #12]
 80055f8:	e014      	b.n	8005624 <HAL_RCCEx_PeriphCLKConfig+0x524>
 80055fa:	bf00      	nop
 80055fc:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005604:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005608:	d10c      	bne.n	8005624 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	3304      	adds	r3, #4
 800560e:	2101      	movs	r1, #1
 8005610:	4618      	mov	r0, r3
 8005612:	f000 f8a5 	bl	8005760 <RCCEx_PLLSAI1_Config>
 8005616:	4603      	mov	r3, r0
 8005618:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800561a:	7cfb      	ldrb	r3, [r7, #19]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d001      	beq.n	8005624 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8005620:	7cfb      	ldrb	r3, [r7, #19]
 8005622:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800562c:	2b00      	cmp	r3, #0
 800562e:	d028      	beq.n	8005682 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005630:	4b4a      	ldr	r3, [pc, #296]	; (800575c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005632:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005636:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800563e:	4947      	ldr	r1, [pc, #284]	; (800575c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005640:	4313      	orrs	r3, r2
 8005642:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800564a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800564e:	d106      	bne.n	800565e <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005650:	4b42      	ldr	r3, [pc, #264]	; (800575c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005652:	68db      	ldr	r3, [r3, #12]
 8005654:	4a41      	ldr	r2, [pc, #260]	; (800575c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005656:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800565a:	60d3      	str	r3, [r2, #12]
 800565c:	e011      	b.n	8005682 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005662:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005666:	d10c      	bne.n	8005682 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	3304      	adds	r3, #4
 800566c:	2101      	movs	r1, #1
 800566e:	4618      	mov	r0, r3
 8005670:	f000 f876 	bl	8005760 <RCCEx_PLLSAI1_Config>
 8005674:	4603      	mov	r3, r0
 8005676:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005678:	7cfb      	ldrb	r3, [r7, #19]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d001      	beq.n	8005682 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 800567e:	7cfb      	ldrb	r3, [r7, #19]
 8005680:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800568a:	2b00      	cmp	r3, #0
 800568c:	d01e      	beq.n	80056cc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800568e:	4b33      	ldr	r3, [pc, #204]	; (800575c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005690:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005694:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800569e:	492f      	ldr	r1, [pc, #188]	; (800575c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80056a0:	4313      	orrs	r3, r2
 80056a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80056ac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80056b0:	d10c      	bne.n	80056cc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	3304      	adds	r3, #4
 80056b6:	2102      	movs	r1, #2
 80056b8:	4618      	mov	r0, r3
 80056ba:	f000 f851 	bl	8005760 <RCCEx_PLLSAI1_Config>
 80056be:	4603      	mov	r3, r0
 80056c0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80056c2:	7cfb      	ldrb	r3, [r7, #19]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d001      	beq.n	80056cc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 80056c8:	7cfb      	ldrb	r3, [r7, #19]
 80056ca:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d00b      	beq.n	80056f0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80056d8:	4b20      	ldr	r3, [pc, #128]	; (800575c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80056da:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80056de:	f023 0204 	bic.w	r2, r3, #4
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80056e8:	491c      	ldr	r1, [pc, #112]	; (800575c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80056ea:	4313      	orrs	r3, r2
 80056ec:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d00b      	beq.n	8005714 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80056fc:	4b17      	ldr	r3, [pc, #92]	; (800575c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80056fe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005702:	f023 0218 	bic.w	r2, r3, #24
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800570c:	4913      	ldr	r1, [pc, #76]	; (800575c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800570e:	4313      	orrs	r3, r2
 8005710:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800571c:	2b00      	cmp	r3, #0
 800571e:	d017      	beq.n	8005750 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8005720:	4b0e      	ldr	r3, [pc, #56]	; (800575c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005722:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005726:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005730:	490a      	ldr	r1, [pc, #40]	; (800575c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005732:	4313      	orrs	r3, r2
 8005734:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800573e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005742:	d105      	bne.n	8005750 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005744:	4b05      	ldr	r3, [pc, #20]	; (800575c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005746:	68db      	ldr	r3, [r3, #12]
 8005748:	4a04      	ldr	r2, [pc, #16]	; (800575c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800574a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800574e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005750:	7cbb      	ldrb	r3, [r7, #18]
}
 8005752:	4618      	mov	r0, r3
 8005754:	3718      	adds	r7, #24
 8005756:	46bd      	mov	sp, r7
 8005758:	bd80      	pop	{r7, pc}
 800575a:	bf00      	nop
 800575c:	40021000 	.word	0x40021000

08005760 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005760:	b580      	push	{r7, lr}
 8005762:	b084      	sub	sp, #16
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
 8005768:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800576a:	2300      	movs	r3, #0
 800576c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800576e:	4b72      	ldr	r3, [pc, #456]	; (8005938 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005770:	68db      	ldr	r3, [r3, #12]
 8005772:	f003 0303 	and.w	r3, r3, #3
 8005776:	2b00      	cmp	r3, #0
 8005778:	d00e      	beq.n	8005798 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800577a:	4b6f      	ldr	r3, [pc, #444]	; (8005938 <RCCEx_PLLSAI1_Config+0x1d8>)
 800577c:	68db      	ldr	r3, [r3, #12]
 800577e:	f003 0203 	and.w	r2, r3, #3
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	429a      	cmp	r2, r3
 8005788:	d103      	bne.n	8005792 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
       ||
 800578e:	2b00      	cmp	r3, #0
 8005790:	d142      	bne.n	8005818 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8005792:	2301      	movs	r3, #1
 8005794:	73fb      	strb	r3, [r7, #15]
 8005796:	e03f      	b.n	8005818 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	2b03      	cmp	r3, #3
 800579e:	d018      	beq.n	80057d2 <RCCEx_PLLSAI1_Config+0x72>
 80057a0:	2b03      	cmp	r3, #3
 80057a2:	d825      	bhi.n	80057f0 <RCCEx_PLLSAI1_Config+0x90>
 80057a4:	2b01      	cmp	r3, #1
 80057a6:	d002      	beq.n	80057ae <RCCEx_PLLSAI1_Config+0x4e>
 80057a8:	2b02      	cmp	r3, #2
 80057aa:	d009      	beq.n	80057c0 <RCCEx_PLLSAI1_Config+0x60>
 80057ac:	e020      	b.n	80057f0 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80057ae:	4b62      	ldr	r3, [pc, #392]	; (8005938 <RCCEx_PLLSAI1_Config+0x1d8>)
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f003 0302 	and.w	r3, r3, #2
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d11d      	bne.n	80057f6 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 80057ba:	2301      	movs	r3, #1
 80057bc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80057be:	e01a      	b.n	80057f6 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80057c0:	4b5d      	ldr	r3, [pc, #372]	; (8005938 <RCCEx_PLLSAI1_Config+0x1d8>)
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d116      	bne.n	80057fa <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 80057cc:	2301      	movs	r3, #1
 80057ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80057d0:	e013      	b.n	80057fa <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80057d2:	4b59      	ldr	r3, [pc, #356]	; (8005938 <RCCEx_PLLSAI1_Config+0x1d8>)
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d10f      	bne.n	80057fe <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80057de:	4b56      	ldr	r3, [pc, #344]	; (8005938 <RCCEx_PLLSAI1_Config+0x1d8>)
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d109      	bne.n	80057fe <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 80057ea:	2301      	movs	r3, #1
 80057ec:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80057ee:	e006      	b.n	80057fe <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 80057f0:	2301      	movs	r3, #1
 80057f2:	73fb      	strb	r3, [r7, #15]
      break;
 80057f4:	e004      	b.n	8005800 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80057f6:	bf00      	nop
 80057f8:	e002      	b.n	8005800 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80057fa:	bf00      	nop
 80057fc:	e000      	b.n	8005800 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80057fe:	bf00      	nop
    }

    if(status == HAL_OK)
 8005800:	7bfb      	ldrb	r3, [r7, #15]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d108      	bne.n	8005818 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8005806:	4b4c      	ldr	r3, [pc, #304]	; (8005938 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005808:	68db      	ldr	r3, [r3, #12]
 800580a:	f023 0203 	bic.w	r2, r3, #3
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	4949      	ldr	r1, [pc, #292]	; (8005938 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005814:	4313      	orrs	r3, r2
 8005816:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8005818:	7bfb      	ldrb	r3, [r7, #15]
 800581a:	2b00      	cmp	r3, #0
 800581c:	f040 8086 	bne.w	800592c <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005820:	4b45      	ldr	r3, [pc, #276]	; (8005938 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	4a44      	ldr	r2, [pc, #272]	; (8005938 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005826:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800582a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800582c:	f7fb fc5a 	bl	80010e4 <HAL_GetTick>
 8005830:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005832:	e009      	b.n	8005848 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005834:	f7fb fc56 	bl	80010e4 <HAL_GetTick>
 8005838:	4602      	mov	r2, r0
 800583a:	68bb      	ldr	r3, [r7, #8]
 800583c:	1ad3      	subs	r3, r2, r3
 800583e:	2b02      	cmp	r3, #2
 8005840:	d902      	bls.n	8005848 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8005842:	2303      	movs	r3, #3
 8005844:	73fb      	strb	r3, [r7, #15]
        break;
 8005846:	e005      	b.n	8005854 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005848:	4b3b      	ldr	r3, [pc, #236]	; (8005938 <RCCEx_PLLSAI1_Config+0x1d8>)
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005850:	2b00      	cmp	r3, #0
 8005852:	d1ef      	bne.n	8005834 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8005854:	7bfb      	ldrb	r3, [r7, #15]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d168      	bne.n	800592c <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d113      	bne.n	8005888 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005860:	4b35      	ldr	r3, [pc, #212]	; (8005938 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005862:	691a      	ldr	r2, [r3, #16]
 8005864:	4b35      	ldr	r3, [pc, #212]	; (800593c <RCCEx_PLLSAI1_Config+0x1dc>)
 8005866:	4013      	ands	r3, r2
 8005868:	687a      	ldr	r2, [r7, #4]
 800586a:	6892      	ldr	r2, [r2, #8]
 800586c:	0211      	lsls	r1, r2, #8
 800586e:	687a      	ldr	r2, [r7, #4]
 8005870:	68d2      	ldr	r2, [r2, #12]
 8005872:	06d2      	lsls	r2, r2, #27
 8005874:	4311      	orrs	r1, r2
 8005876:	687a      	ldr	r2, [r7, #4]
 8005878:	6852      	ldr	r2, [r2, #4]
 800587a:	3a01      	subs	r2, #1
 800587c:	0112      	lsls	r2, r2, #4
 800587e:	430a      	orrs	r2, r1
 8005880:	492d      	ldr	r1, [pc, #180]	; (8005938 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005882:	4313      	orrs	r3, r2
 8005884:	610b      	str	r3, [r1, #16]
 8005886:	e02d      	b.n	80058e4 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	2b01      	cmp	r3, #1
 800588c:	d115      	bne.n	80058ba <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800588e:	4b2a      	ldr	r3, [pc, #168]	; (8005938 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005890:	691a      	ldr	r2, [r3, #16]
 8005892:	4b2b      	ldr	r3, [pc, #172]	; (8005940 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005894:	4013      	ands	r3, r2
 8005896:	687a      	ldr	r2, [r7, #4]
 8005898:	6892      	ldr	r2, [r2, #8]
 800589a:	0211      	lsls	r1, r2, #8
 800589c:	687a      	ldr	r2, [r7, #4]
 800589e:	6912      	ldr	r2, [r2, #16]
 80058a0:	0852      	lsrs	r2, r2, #1
 80058a2:	3a01      	subs	r2, #1
 80058a4:	0552      	lsls	r2, r2, #21
 80058a6:	4311      	orrs	r1, r2
 80058a8:	687a      	ldr	r2, [r7, #4]
 80058aa:	6852      	ldr	r2, [r2, #4]
 80058ac:	3a01      	subs	r2, #1
 80058ae:	0112      	lsls	r2, r2, #4
 80058b0:	430a      	orrs	r2, r1
 80058b2:	4921      	ldr	r1, [pc, #132]	; (8005938 <RCCEx_PLLSAI1_Config+0x1d8>)
 80058b4:	4313      	orrs	r3, r2
 80058b6:	610b      	str	r3, [r1, #16]
 80058b8:	e014      	b.n	80058e4 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80058ba:	4b1f      	ldr	r3, [pc, #124]	; (8005938 <RCCEx_PLLSAI1_Config+0x1d8>)
 80058bc:	691a      	ldr	r2, [r3, #16]
 80058be:	4b21      	ldr	r3, [pc, #132]	; (8005944 <RCCEx_PLLSAI1_Config+0x1e4>)
 80058c0:	4013      	ands	r3, r2
 80058c2:	687a      	ldr	r2, [r7, #4]
 80058c4:	6892      	ldr	r2, [r2, #8]
 80058c6:	0211      	lsls	r1, r2, #8
 80058c8:	687a      	ldr	r2, [r7, #4]
 80058ca:	6952      	ldr	r2, [r2, #20]
 80058cc:	0852      	lsrs	r2, r2, #1
 80058ce:	3a01      	subs	r2, #1
 80058d0:	0652      	lsls	r2, r2, #25
 80058d2:	4311      	orrs	r1, r2
 80058d4:	687a      	ldr	r2, [r7, #4]
 80058d6:	6852      	ldr	r2, [r2, #4]
 80058d8:	3a01      	subs	r2, #1
 80058da:	0112      	lsls	r2, r2, #4
 80058dc:	430a      	orrs	r2, r1
 80058de:	4916      	ldr	r1, [pc, #88]	; (8005938 <RCCEx_PLLSAI1_Config+0x1d8>)
 80058e0:	4313      	orrs	r3, r2
 80058e2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80058e4:	4b14      	ldr	r3, [pc, #80]	; (8005938 <RCCEx_PLLSAI1_Config+0x1d8>)
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	4a13      	ldr	r2, [pc, #76]	; (8005938 <RCCEx_PLLSAI1_Config+0x1d8>)
 80058ea:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80058ee:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058f0:	f7fb fbf8 	bl	80010e4 <HAL_GetTick>
 80058f4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80058f6:	e009      	b.n	800590c <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80058f8:	f7fb fbf4 	bl	80010e4 <HAL_GetTick>
 80058fc:	4602      	mov	r2, r0
 80058fe:	68bb      	ldr	r3, [r7, #8]
 8005900:	1ad3      	subs	r3, r2, r3
 8005902:	2b02      	cmp	r3, #2
 8005904:	d902      	bls.n	800590c <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8005906:	2303      	movs	r3, #3
 8005908:	73fb      	strb	r3, [r7, #15]
          break;
 800590a:	e005      	b.n	8005918 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800590c:	4b0a      	ldr	r3, [pc, #40]	; (8005938 <RCCEx_PLLSAI1_Config+0x1d8>)
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005914:	2b00      	cmp	r3, #0
 8005916:	d0ef      	beq.n	80058f8 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8005918:	7bfb      	ldrb	r3, [r7, #15]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d106      	bne.n	800592c <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800591e:	4b06      	ldr	r3, [pc, #24]	; (8005938 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005920:	691a      	ldr	r2, [r3, #16]
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	699b      	ldr	r3, [r3, #24]
 8005926:	4904      	ldr	r1, [pc, #16]	; (8005938 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005928:	4313      	orrs	r3, r2
 800592a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800592c:	7bfb      	ldrb	r3, [r7, #15]
}
 800592e:	4618      	mov	r0, r3
 8005930:	3710      	adds	r7, #16
 8005932:	46bd      	mov	sp, r7
 8005934:	bd80      	pop	{r7, pc}
 8005936:	bf00      	nop
 8005938:	40021000 	.word	0x40021000
 800593c:	07ff800f 	.word	0x07ff800f
 8005940:	ff9f800f 	.word	0xff9f800f
 8005944:	f9ff800f 	.word	0xf9ff800f

08005948 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b084      	sub	sp, #16
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
 8005950:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005952:	2300      	movs	r3, #0
 8005954:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005956:	4b72      	ldr	r3, [pc, #456]	; (8005b20 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005958:	68db      	ldr	r3, [r3, #12]
 800595a:	f003 0303 	and.w	r3, r3, #3
 800595e:	2b00      	cmp	r3, #0
 8005960:	d00e      	beq.n	8005980 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005962:	4b6f      	ldr	r3, [pc, #444]	; (8005b20 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005964:	68db      	ldr	r3, [r3, #12]
 8005966:	f003 0203 	and.w	r2, r3, #3
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	429a      	cmp	r2, r3
 8005970:	d103      	bne.n	800597a <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
       ||
 8005976:	2b00      	cmp	r3, #0
 8005978:	d142      	bne.n	8005a00 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 800597a:	2301      	movs	r3, #1
 800597c:	73fb      	strb	r3, [r7, #15]
 800597e:	e03f      	b.n	8005a00 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	2b03      	cmp	r3, #3
 8005986:	d018      	beq.n	80059ba <RCCEx_PLLSAI2_Config+0x72>
 8005988:	2b03      	cmp	r3, #3
 800598a:	d825      	bhi.n	80059d8 <RCCEx_PLLSAI2_Config+0x90>
 800598c:	2b01      	cmp	r3, #1
 800598e:	d002      	beq.n	8005996 <RCCEx_PLLSAI2_Config+0x4e>
 8005990:	2b02      	cmp	r3, #2
 8005992:	d009      	beq.n	80059a8 <RCCEx_PLLSAI2_Config+0x60>
 8005994:	e020      	b.n	80059d8 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005996:	4b62      	ldr	r3, [pc, #392]	; (8005b20 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f003 0302 	and.w	r3, r3, #2
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d11d      	bne.n	80059de <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 80059a2:	2301      	movs	r3, #1
 80059a4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80059a6:	e01a      	b.n	80059de <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80059a8:	4b5d      	ldr	r3, [pc, #372]	; (8005b20 <RCCEx_PLLSAI2_Config+0x1d8>)
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d116      	bne.n	80059e2 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 80059b4:	2301      	movs	r3, #1
 80059b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80059b8:	e013      	b.n	80059e2 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80059ba:	4b59      	ldr	r3, [pc, #356]	; (8005b20 <RCCEx_PLLSAI2_Config+0x1d8>)
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d10f      	bne.n	80059e6 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80059c6:	4b56      	ldr	r3, [pc, #344]	; (8005b20 <RCCEx_PLLSAI2_Config+0x1d8>)
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d109      	bne.n	80059e6 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 80059d2:	2301      	movs	r3, #1
 80059d4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80059d6:	e006      	b.n	80059e6 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 80059d8:	2301      	movs	r3, #1
 80059da:	73fb      	strb	r3, [r7, #15]
      break;
 80059dc:	e004      	b.n	80059e8 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80059de:	bf00      	nop
 80059e0:	e002      	b.n	80059e8 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80059e2:	bf00      	nop
 80059e4:	e000      	b.n	80059e8 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80059e6:	bf00      	nop
    }

    if(status == HAL_OK)
 80059e8:	7bfb      	ldrb	r3, [r7, #15]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d108      	bne.n	8005a00 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 80059ee:	4b4c      	ldr	r3, [pc, #304]	; (8005b20 <RCCEx_PLLSAI2_Config+0x1d8>)
 80059f0:	68db      	ldr	r3, [r3, #12]
 80059f2:	f023 0203 	bic.w	r2, r3, #3
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	4949      	ldr	r1, [pc, #292]	; (8005b20 <RCCEx_PLLSAI2_Config+0x1d8>)
 80059fc:	4313      	orrs	r3, r2
 80059fe:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8005a00:	7bfb      	ldrb	r3, [r7, #15]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	f040 8086 	bne.w	8005b14 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005a08:	4b45      	ldr	r3, [pc, #276]	; (8005b20 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	4a44      	ldr	r2, [pc, #272]	; (8005b20 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005a0e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a12:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a14:	f7fb fb66 	bl	80010e4 <HAL_GetTick>
 8005a18:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005a1a:	e009      	b.n	8005a30 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005a1c:	f7fb fb62 	bl	80010e4 <HAL_GetTick>
 8005a20:	4602      	mov	r2, r0
 8005a22:	68bb      	ldr	r3, [r7, #8]
 8005a24:	1ad3      	subs	r3, r2, r3
 8005a26:	2b02      	cmp	r3, #2
 8005a28:	d902      	bls.n	8005a30 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8005a2a:	2303      	movs	r3, #3
 8005a2c:	73fb      	strb	r3, [r7, #15]
        break;
 8005a2e:	e005      	b.n	8005a3c <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005a30:	4b3b      	ldr	r3, [pc, #236]	; (8005b20 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d1ef      	bne.n	8005a1c <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8005a3c:	7bfb      	ldrb	r3, [r7, #15]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d168      	bne.n	8005b14 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d113      	bne.n	8005a70 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005a48:	4b35      	ldr	r3, [pc, #212]	; (8005b20 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005a4a:	695a      	ldr	r2, [r3, #20]
 8005a4c:	4b35      	ldr	r3, [pc, #212]	; (8005b24 <RCCEx_PLLSAI2_Config+0x1dc>)
 8005a4e:	4013      	ands	r3, r2
 8005a50:	687a      	ldr	r2, [r7, #4]
 8005a52:	6892      	ldr	r2, [r2, #8]
 8005a54:	0211      	lsls	r1, r2, #8
 8005a56:	687a      	ldr	r2, [r7, #4]
 8005a58:	68d2      	ldr	r2, [r2, #12]
 8005a5a:	06d2      	lsls	r2, r2, #27
 8005a5c:	4311      	orrs	r1, r2
 8005a5e:	687a      	ldr	r2, [r7, #4]
 8005a60:	6852      	ldr	r2, [r2, #4]
 8005a62:	3a01      	subs	r2, #1
 8005a64:	0112      	lsls	r2, r2, #4
 8005a66:	430a      	orrs	r2, r1
 8005a68:	492d      	ldr	r1, [pc, #180]	; (8005b20 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005a6a:	4313      	orrs	r3, r2
 8005a6c:	614b      	str	r3, [r1, #20]
 8005a6e:	e02d      	b.n	8005acc <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	2b01      	cmp	r3, #1
 8005a74:	d115      	bne.n	8005aa2 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005a76:	4b2a      	ldr	r3, [pc, #168]	; (8005b20 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005a78:	695a      	ldr	r2, [r3, #20]
 8005a7a:	4b2b      	ldr	r3, [pc, #172]	; (8005b28 <RCCEx_PLLSAI2_Config+0x1e0>)
 8005a7c:	4013      	ands	r3, r2
 8005a7e:	687a      	ldr	r2, [r7, #4]
 8005a80:	6892      	ldr	r2, [r2, #8]
 8005a82:	0211      	lsls	r1, r2, #8
 8005a84:	687a      	ldr	r2, [r7, #4]
 8005a86:	6912      	ldr	r2, [r2, #16]
 8005a88:	0852      	lsrs	r2, r2, #1
 8005a8a:	3a01      	subs	r2, #1
 8005a8c:	0552      	lsls	r2, r2, #21
 8005a8e:	4311      	orrs	r1, r2
 8005a90:	687a      	ldr	r2, [r7, #4]
 8005a92:	6852      	ldr	r2, [r2, #4]
 8005a94:	3a01      	subs	r2, #1
 8005a96:	0112      	lsls	r2, r2, #4
 8005a98:	430a      	orrs	r2, r1
 8005a9a:	4921      	ldr	r1, [pc, #132]	; (8005b20 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005a9c:	4313      	orrs	r3, r2
 8005a9e:	614b      	str	r3, [r1, #20]
 8005aa0:	e014      	b.n	8005acc <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005aa2:	4b1f      	ldr	r3, [pc, #124]	; (8005b20 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005aa4:	695a      	ldr	r2, [r3, #20]
 8005aa6:	4b21      	ldr	r3, [pc, #132]	; (8005b2c <RCCEx_PLLSAI2_Config+0x1e4>)
 8005aa8:	4013      	ands	r3, r2
 8005aaa:	687a      	ldr	r2, [r7, #4]
 8005aac:	6892      	ldr	r2, [r2, #8]
 8005aae:	0211      	lsls	r1, r2, #8
 8005ab0:	687a      	ldr	r2, [r7, #4]
 8005ab2:	6952      	ldr	r2, [r2, #20]
 8005ab4:	0852      	lsrs	r2, r2, #1
 8005ab6:	3a01      	subs	r2, #1
 8005ab8:	0652      	lsls	r2, r2, #25
 8005aba:	4311      	orrs	r1, r2
 8005abc:	687a      	ldr	r2, [r7, #4]
 8005abe:	6852      	ldr	r2, [r2, #4]
 8005ac0:	3a01      	subs	r2, #1
 8005ac2:	0112      	lsls	r2, r2, #4
 8005ac4:	430a      	orrs	r2, r1
 8005ac6:	4916      	ldr	r1, [pc, #88]	; (8005b20 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005ac8:	4313      	orrs	r3, r2
 8005aca:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005acc:	4b14      	ldr	r3, [pc, #80]	; (8005b20 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	4a13      	ldr	r2, [pc, #76]	; (8005b20 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005ad2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ad6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ad8:	f7fb fb04 	bl	80010e4 <HAL_GetTick>
 8005adc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005ade:	e009      	b.n	8005af4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005ae0:	f7fb fb00 	bl	80010e4 <HAL_GetTick>
 8005ae4:	4602      	mov	r2, r0
 8005ae6:	68bb      	ldr	r3, [r7, #8]
 8005ae8:	1ad3      	subs	r3, r2, r3
 8005aea:	2b02      	cmp	r3, #2
 8005aec:	d902      	bls.n	8005af4 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8005aee:	2303      	movs	r3, #3
 8005af0:	73fb      	strb	r3, [r7, #15]
          break;
 8005af2:	e005      	b.n	8005b00 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005af4:	4b0a      	ldr	r3, [pc, #40]	; (8005b20 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d0ef      	beq.n	8005ae0 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8005b00:	7bfb      	ldrb	r3, [r7, #15]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d106      	bne.n	8005b14 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005b06:	4b06      	ldr	r3, [pc, #24]	; (8005b20 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005b08:	695a      	ldr	r2, [r3, #20]
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	699b      	ldr	r3, [r3, #24]
 8005b0e:	4904      	ldr	r1, [pc, #16]	; (8005b20 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005b10:	4313      	orrs	r3, r2
 8005b12:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005b14:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b16:	4618      	mov	r0, r3
 8005b18:	3710      	adds	r7, #16
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	bd80      	pop	{r7, pc}
 8005b1e:	bf00      	nop
 8005b20:	40021000 	.word	0x40021000
 8005b24:	07ff800f 	.word	0x07ff800f
 8005b28:	ff9f800f 	.word	0xff9f800f
 8005b2c:	f9ff800f 	.word	0xf9ff800f

08005b30 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b084      	sub	sp, #16
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d101      	bne.n	8005b42 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8005b3e:	2301      	movs	r3, #1
 8005b40:	e04d      	b.n	8005bde <HAL_RNG_Init+0xae>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	7a5b      	ldrb	r3, [r3, #9]
 8005b46:	b2db      	uxtb	r3, r3
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d105      	bne.n	8005b58 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2200      	movs	r2, #0
 8005b50:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8005b52:	6878      	ldr	r0, [r7, #4]
 8005b54:	f008 fc0a 	bl	800e36c <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2202      	movs	r2, #2
 8005b5c:	725a      	strb	r2, [r3, #9]
    }
  }
#else
#if defined(RNG_CR_CED)
  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f023 0120 	bic.w	r1, r3, #32
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	685a      	ldr	r2, [r3, #4]
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	430a      	orrs	r2, r1
 8005b72:	601a      	str	r2, [r3, #0]
#endif /* defined(RNG_CR_CED) */
#endif /* end of RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	681a      	ldr	r2, [r3, #0]
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f042 0204 	orr.w	r2, r2, #4
 8005b82:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	685b      	ldr	r3, [r3, #4]
 8005b8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b8e:	2b40      	cmp	r3, #64	; 0x40
 8005b90:	d104      	bne.n	8005b9c <HAL_RNG_Init+0x6c>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2204      	movs	r2, #4
 8005b96:	725a      	strb	r2, [r3, #9]
    return HAL_ERROR;
 8005b98:	2301      	movs	r3, #1
 8005b9a:	e020      	b.n	8005bde <HAL_RNG_Init+0xae>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 8005b9c:	f7fb faa2 	bl	80010e4 <HAL_GetTick>
 8005ba0:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8005ba2:	e00e      	b.n	8005bc2 <HAL_RNG_Init+0x92>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8005ba4:	f7fb fa9e 	bl	80010e4 <HAL_GetTick>
 8005ba8:	4602      	mov	r2, r0
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	1ad3      	subs	r3, r2, r3
 8005bae:	2b02      	cmp	r3, #2
 8005bb0:	d907      	bls.n	8005bc2 <HAL_RNG_Init+0x92>
    {
      hrng->State = HAL_RNG_STATE_ERROR;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2204      	movs	r2, #4
 8005bb6:	725a      	strb	r2, [r3, #9]
      hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2202      	movs	r2, #2
 8005bbc:	60da      	str	r2, [r3, #12]
      return HAL_ERROR;
 8005bbe:	2301      	movs	r3, #1
 8005bc0:	e00d      	b.n	8005bde <HAL_RNG_Init+0xae>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	685b      	ldr	r3, [r3, #4]
 8005bc8:	f003 0304 	and.w	r3, r3, #4
 8005bcc:	2b04      	cmp	r3, #4
 8005bce:	d0e9      	beq.n	8005ba4 <HAL_RNG_Init+0x74>
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2201      	movs	r2, #1
 8005bd4:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2200      	movs	r2, #0
 8005bda:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 8005bdc:	2300      	movs	r3, #0
}
 8005bde:	4618      	mov	r0, r3
 8005be0:	3710      	adds	r7, #16
 8005be2:	46bd      	mov	sp, r7
 8005be4:	bd80      	pop	{r7, pc}

08005be6 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005be6:	b580      	push	{r7, lr}
 8005be8:	b084      	sub	sp, #16
 8005bea:	af00      	add	r7, sp, #0
 8005bec:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d101      	bne.n	8005bf8 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005bf4:	2301      	movs	r3, #1
 8005bf6:	e07c      	b.n	8005cf2 <HAL_SPI_Init+0x10c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005c04:	b2db      	uxtb	r3, r3
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d106      	bne.n	8005c18 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005c12:	6878      	ldr	r0, [r7, #4]
 8005c14:	f008 fbca 	bl	800e3ac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2202      	movs	r2, #2
 8005c1c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	681a      	ldr	r2, [r3, #0]
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c2e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	68db      	ldr	r3, [r3, #12]
 8005c34:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005c38:	d902      	bls.n	8005c40 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	60fb      	str	r3, [r7, #12]
 8005c3e:	e002      	b.n	8005c46 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005c40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005c44:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	68db      	ldr	r3, [r3, #12]
 8005c4a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005c4e:	d007      	beq.n	8005c60 <HAL_SPI_Init+0x7a>
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	68db      	ldr	r3, [r3, #12]
 8005c54:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005c58:	d002      	beq.n	8005c60 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d10b      	bne.n	8005c80 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	68db      	ldr	r3, [r3, #12]
 8005c6c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005c70:	d903      	bls.n	8005c7a <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2202      	movs	r2, #2
 8005c76:	631a      	str	r2, [r3, #48]	; 0x30
 8005c78:	e002      	b.n	8005c80 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2201      	movs	r2, #1
 8005c7e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	685a      	ldr	r2, [r3, #4]
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	689b      	ldr	r3, [r3, #8]
 8005c88:	431a      	orrs	r2, r3
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	691b      	ldr	r3, [r3, #16]
 8005c8e:	431a      	orrs	r2, r3
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	695b      	ldr	r3, [r3, #20]
 8005c94:	431a      	orrs	r2, r3
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	699b      	ldr	r3, [r3, #24]
 8005c9a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005c9e:	431a      	orrs	r2, r3
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	69db      	ldr	r3, [r3, #28]
 8005ca4:	431a      	orrs	r2, r3
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6a1b      	ldr	r3, [r3, #32]
 8005caa:	ea42 0103 	orr.w	r1, r2, r3
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	430a      	orrs	r2, r1
 8005cb8:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	699b      	ldr	r3, [r3, #24]
 8005cbe:	0c1b      	lsrs	r3, r3, #16
 8005cc0:	f003 0204 	and.w	r2, r3, #4
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cc8:	431a      	orrs	r2, r3
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cce:	431a      	orrs	r2, r3
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	68db      	ldr	r3, [r3, #12]
 8005cd4:	ea42 0103 	orr.w	r1, r2, r3
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	68fa      	ldr	r2, [r7, #12]
 8005cde:	430a      	orrs	r2, r1
 8005ce0:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2201      	movs	r2, #1
 8005cec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005cf0:	2300      	movs	r3, #0
}
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	3710      	adds	r7, #16
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	bd80      	pop	{r7, pc}

08005cfa <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005cfa:	b580      	push	{r7, lr}
 8005cfc:	b088      	sub	sp, #32
 8005cfe:	af00      	add	r7, sp, #0
 8005d00:	60f8      	str	r0, [r7, #12]
 8005d02:	60b9      	str	r1, [r7, #8]
 8005d04:	603b      	str	r3, [r7, #0]
 8005d06:	4613      	mov	r3, r2
 8005d08:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005d14:	2b01      	cmp	r3, #1
 8005d16:	d101      	bne.n	8005d1c <HAL_SPI_Transmit+0x22>
 8005d18:	2302      	movs	r3, #2
 8005d1a:	e150      	b.n	8005fbe <HAL_SPI_Transmit+0x2c4>
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	2201      	movs	r2, #1
 8005d20:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005d24:	f7fb f9de 	bl	80010e4 <HAL_GetTick>
 8005d28:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005d2a:	88fb      	ldrh	r3, [r7, #6]
 8005d2c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005d34:	b2db      	uxtb	r3, r3
 8005d36:	2b01      	cmp	r3, #1
 8005d38:	d002      	beq.n	8005d40 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005d3a:	2302      	movs	r3, #2
 8005d3c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005d3e:	e135      	b.n	8005fac <HAL_SPI_Transmit+0x2b2>
  }

  if ((pData == NULL) || (Size == 0U))
 8005d40:	68bb      	ldr	r3, [r7, #8]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d002      	beq.n	8005d4c <HAL_SPI_Transmit+0x52>
 8005d46:	88fb      	ldrh	r3, [r7, #6]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d102      	bne.n	8005d52 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005d4c:	2301      	movs	r3, #1
 8005d4e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005d50:	e12c      	b.n	8005fac <HAL_SPI_Transmit+0x2b2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	2203      	movs	r2, #3
 8005d56:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	68ba      	ldr	r2, [r7, #8]
 8005d64:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	88fa      	ldrh	r2, [r7, #6]
 8005d6a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	88fa      	ldrh	r2, [r7, #6]
 8005d70:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	2200      	movs	r2, #0
 8005d76:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	2200      	movs	r2, #0
 8005d84:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	2200      	movs	r2, #0
 8005d92:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	689b      	ldr	r3, [r3, #8]
 8005d98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d9c:	d107      	bne.n	8005dae <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	681a      	ldr	r2, [r3, #0]
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005dac:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005db8:	2b40      	cmp	r3, #64	; 0x40
 8005dba:	d007      	beq.n	8005dcc <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	681a      	ldr	r2, [r3, #0]
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005dca:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	68db      	ldr	r3, [r3, #12]
 8005dd0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005dd4:	d94b      	bls.n	8005e6e <HAL_SPI_Transmit+0x174>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	685b      	ldr	r3, [r3, #4]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d002      	beq.n	8005de4 <HAL_SPI_Transmit+0xea>
 8005dde:	8afb      	ldrh	r3, [r7, #22]
 8005de0:	2b01      	cmp	r3, #1
 8005de2:	d13e      	bne.n	8005e62 <HAL_SPI_Transmit+0x168>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005de8:	881a      	ldrh	r2, [r3, #0]
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005df4:	1c9a      	adds	r2, r3, #2
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005dfe:	b29b      	uxth	r3, r3
 8005e00:	3b01      	subs	r3, #1
 8005e02:	b29a      	uxth	r2, r3
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005e08:	e02b      	b.n	8005e62 <HAL_SPI_Transmit+0x168>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	689b      	ldr	r3, [r3, #8]
 8005e10:	f003 0302 	and.w	r3, r3, #2
 8005e14:	2b02      	cmp	r3, #2
 8005e16:	d112      	bne.n	8005e3e <HAL_SPI_Transmit+0x144>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e1c:	881a      	ldrh	r2, [r3, #0]
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e28:	1c9a      	adds	r2, r3, #2
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e32:	b29b      	uxth	r3, r3
 8005e34:	3b01      	subs	r3, #1
 8005e36:	b29a      	uxth	r2, r3
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005e3c:	e011      	b.n	8005e62 <HAL_SPI_Transmit+0x168>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005e3e:	f7fb f951 	bl	80010e4 <HAL_GetTick>
 8005e42:	4602      	mov	r2, r0
 8005e44:	69bb      	ldr	r3, [r7, #24]
 8005e46:	1ad3      	subs	r3, r2, r3
 8005e48:	683a      	ldr	r2, [r7, #0]
 8005e4a:	429a      	cmp	r2, r3
 8005e4c:	d803      	bhi.n	8005e56 <HAL_SPI_Transmit+0x15c>
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e54:	d102      	bne.n	8005e5c <HAL_SPI_Transmit+0x162>
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d102      	bne.n	8005e62 <HAL_SPI_Transmit+0x168>
        {
          errorcode = HAL_TIMEOUT;
 8005e5c:	2303      	movs	r3, #3
 8005e5e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005e60:	e0a4      	b.n	8005fac <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e66:	b29b      	uxth	r3, r3
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d1ce      	bne.n	8005e0a <HAL_SPI_Transmit+0x110>
 8005e6c:	e07c      	b.n	8005f68 <HAL_SPI_Transmit+0x26e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	685b      	ldr	r3, [r3, #4]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d002      	beq.n	8005e7c <HAL_SPI_Transmit+0x182>
 8005e76:	8afb      	ldrh	r3, [r7, #22]
 8005e78:	2b01      	cmp	r3, #1
 8005e7a:	d170      	bne.n	8005f5e <HAL_SPI_Transmit+0x264>
    {
      if (hspi->TxXferCount > 1U)
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e80:	b29b      	uxth	r3, r3
 8005e82:	2b01      	cmp	r3, #1
 8005e84:	d912      	bls.n	8005eac <HAL_SPI_Transmit+0x1b2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e8a:	881a      	ldrh	r2, [r3, #0]
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e96:	1c9a      	adds	r2, r3, #2
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ea0:	b29b      	uxth	r3, r3
 8005ea2:	3b02      	subs	r3, #2
 8005ea4:	b29a      	uxth	r2, r3
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005eaa:	e058      	b.n	8005f5e <HAL_SPI_Transmit+0x264>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	330c      	adds	r3, #12
 8005eb6:	7812      	ldrb	r2, [r2, #0]
 8005eb8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ebe:	1c5a      	adds	r2, r3, #1
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ec8:	b29b      	uxth	r3, r3
 8005eca:	3b01      	subs	r3, #1
 8005ecc:	b29a      	uxth	r2, r3
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005ed2:	e044      	b.n	8005f5e <HAL_SPI_Transmit+0x264>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	689b      	ldr	r3, [r3, #8]
 8005eda:	f003 0302 	and.w	r3, r3, #2
 8005ede:	2b02      	cmp	r3, #2
 8005ee0:	d12b      	bne.n	8005f3a <HAL_SPI_Transmit+0x240>
      {
        if (hspi->TxXferCount > 1U)
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ee6:	b29b      	uxth	r3, r3
 8005ee8:	2b01      	cmp	r3, #1
 8005eea:	d912      	bls.n	8005f12 <HAL_SPI_Transmit+0x218>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ef0:	881a      	ldrh	r2, [r3, #0]
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005efc:	1c9a      	adds	r2, r3, #2
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f06:	b29b      	uxth	r3, r3
 8005f08:	3b02      	subs	r3, #2
 8005f0a:	b29a      	uxth	r2, r3
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005f10:	e025      	b.n	8005f5e <HAL_SPI_Transmit+0x264>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	330c      	adds	r3, #12
 8005f1c:	7812      	ldrb	r2, [r2, #0]
 8005f1e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f24:	1c5a      	adds	r2, r3, #1
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f2e:	b29b      	uxth	r3, r3
 8005f30:	3b01      	subs	r3, #1
 8005f32:	b29a      	uxth	r2, r3
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005f38:	e011      	b.n	8005f5e <HAL_SPI_Transmit+0x264>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005f3a:	f7fb f8d3 	bl	80010e4 <HAL_GetTick>
 8005f3e:	4602      	mov	r2, r0
 8005f40:	69bb      	ldr	r3, [r7, #24]
 8005f42:	1ad3      	subs	r3, r2, r3
 8005f44:	683a      	ldr	r2, [r7, #0]
 8005f46:	429a      	cmp	r2, r3
 8005f48:	d803      	bhi.n	8005f52 <HAL_SPI_Transmit+0x258>
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f50:	d102      	bne.n	8005f58 <HAL_SPI_Transmit+0x25e>
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d102      	bne.n	8005f5e <HAL_SPI_Transmit+0x264>
        {
          errorcode = HAL_TIMEOUT;
 8005f58:	2303      	movs	r3, #3
 8005f5a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005f5c:	e026      	b.n	8005fac <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f62:	b29b      	uxth	r3, r3
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d1b5      	bne.n	8005ed4 <HAL_SPI_Transmit+0x1da>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005f68:	69ba      	ldr	r2, [r7, #24]
 8005f6a:	6839      	ldr	r1, [r7, #0]
 8005f6c:	68f8      	ldr	r0, [r7, #12]
 8005f6e:	f000 fcd4 	bl	800691a <SPI_EndRxTxTransaction>
 8005f72:	4603      	mov	r3, r0
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d002      	beq.n	8005f7e <HAL_SPI_Transmit+0x284>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	2220      	movs	r2, #32
 8005f7c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	689b      	ldr	r3, [r3, #8]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d10a      	bne.n	8005f9c <HAL_SPI_Transmit+0x2a2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005f86:	2300      	movs	r3, #0
 8005f88:	613b      	str	r3, [r7, #16]
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	68db      	ldr	r3, [r3, #12]
 8005f90:	613b      	str	r3, [r7, #16]
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	689b      	ldr	r3, [r3, #8]
 8005f98:	613b      	str	r3, [r7, #16]
 8005f9a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d002      	beq.n	8005faa <HAL_SPI_Transmit+0x2b0>
  {
    errorcode = HAL_ERROR;
 8005fa4:	2301      	movs	r3, #1
 8005fa6:	77fb      	strb	r3, [r7, #31]
 8005fa8:	e000      	b.n	8005fac <HAL_SPI_Transmit+0x2b2>
  }

error:
 8005faa:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	2201      	movs	r2, #1
 8005fb0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005fbc:	7ffb      	ldrb	r3, [r7, #31]
}
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	3720      	adds	r7, #32
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	bd80      	pop	{r7, pc}

08005fc6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005fc6:	b580      	push	{r7, lr}
 8005fc8:	b08a      	sub	sp, #40	; 0x28
 8005fca:	af00      	add	r7, sp, #0
 8005fcc:	60f8      	str	r0, [r7, #12]
 8005fce:	60b9      	str	r1, [r7, #8]
 8005fd0:	607a      	str	r2, [r7, #4]
 8005fd2:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005fd4:	2301      	movs	r3, #1
 8005fd6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005fd8:	2300      	movs	r3, #0
 8005fda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005fe4:	2b01      	cmp	r3, #1
 8005fe6:	d101      	bne.n	8005fec <HAL_SPI_TransmitReceive+0x26>
 8005fe8:	2302      	movs	r3, #2
 8005fea:	e1fb      	b.n	80063e4 <HAL_SPI_TransmitReceive+0x41e>
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	2201      	movs	r2, #1
 8005ff0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005ff4:	f7fb f876 	bl	80010e4 <HAL_GetTick>
 8005ff8:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006000:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	685b      	ldr	r3, [r3, #4]
 8006006:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8006008:	887b      	ldrh	r3, [r7, #2]
 800600a:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800600c:	887b      	ldrh	r3, [r7, #2]
 800600e:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006010:	7efb      	ldrb	r3, [r7, #27]
 8006012:	2b01      	cmp	r3, #1
 8006014:	d00e      	beq.n	8006034 <HAL_SPI_TransmitReceive+0x6e>
 8006016:	697b      	ldr	r3, [r7, #20]
 8006018:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800601c:	d106      	bne.n	800602c <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	689b      	ldr	r3, [r3, #8]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d102      	bne.n	800602c <HAL_SPI_TransmitReceive+0x66>
 8006026:	7efb      	ldrb	r3, [r7, #27]
 8006028:	2b04      	cmp	r3, #4
 800602a:	d003      	beq.n	8006034 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800602c:	2302      	movs	r3, #2
 800602e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8006032:	e1cd      	b.n	80063d0 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006034:	68bb      	ldr	r3, [r7, #8]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d005      	beq.n	8006046 <HAL_SPI_TransmitReceive+0x80>
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d002      	beq.n	8006046 <HAL_SPI_TransmitReceive+0x80>
 8006040:	887b      	ldrh	r3, [r7, #2]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d103      	bne.n	800604e <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8006046:	2301      	movs	r3, #1
 8006048:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800604c:	e1c0      	b.n	80063d0 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006054:	b2db      	uxtb	r3, r3
 8006056:	2b04      	cmp	r3, #4
 8006058:	d003      	beq.n	8006062 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	2205      	movs	r2, #5
 800605e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	2200      	movs	r2, #0
 8006066:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	687a      	ldr	r2, [r7, #4]
 800606c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	887a      	ldrh	r2, [r7, #2]
 8006072:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	887a      	ldrh	r2, [r7, #2]
 800607a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	68ba      	ldr	r2, [r7, #8]
 8006082:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	887a      	ldrh	r2, [r7, #2]
 8006088:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	887a      	ldrh	r2, [r7, #2]
 800608e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	2200      	movs	r2, #0
 8006094:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	2200      	movs	r2, #0
 800609a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	68db      	ldr	r3, [r3, #12]
 80060a0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80060a4:	d802      	bhi.n	80060ac <HAL_SPI_TransmitReceive+0xe6>
 80060a6:	8a3b      	ldrh	r3, [r7, #16]
 80060a8:	2b01      	cmp	r3, #1
 80060aa:	d908      	bls.n	80060be <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	685a      	ldr	r2, [r3, #4]
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80060ba:	605a      	str	r2, [r3, #4]
 80060bc:	e007      	b.n	80060ce <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	685a      	ldr	r2, [r3, #4]
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80060cc:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060d8:	2b40      	cmp	r3, #64	; 0x40
 80060da:	d007      	beq.n	80060ec <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	681a      	ldr	r2, [r3, #0]
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80060ea:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	68db      	ldr	r3, [r3, #12]
 80060f0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80060f4:	d97c      	bls.n	80061f0 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	685b      	ldr	r3, [r3, #4]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d002      	beq.n	8006104 <HAL_SPI_TransmitReceive+0x13e>
 80060fe:	8a7b      	ldrh	r3, [r7, #18]
 8006100:	2b01      	cmp	r3, #1
 8006102:	d169      	bne.n	80061d8 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006108:	881a      	ldrh	r2, [r3, #0]
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006114:	1c9a      	adds	r2, r3, #2
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800611e:	b29b      	uxth	r3, r3
 8006120:	3b01      	subs	r3, #1
 8006122:	b29a      	uxth	r2, r3
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006128:	e056      	b.n	80061d8 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	689b      	ldr	r3, [r3, #8]
 8006130:	f003 0302 	and.w	r3, r3, #2
 8006134:	2b02      	cmp	r3, #2
 8006136:	d11b      	bne.n	8006170 <HAL_SPI_TransmitReceive+0x1aa>
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800613c:	b29b      	uxth	r3, r3
 800613e:	2b00      	cmp	r3, #0
 8006140:	d016      	beq.n	8006170 <HAL_SPI_TransmitReceive+0x1aa>
 8006142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006144:	2b01      	cmp	r3, #1
 8006146:	d113      	bne.n	8006170 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800614c:	881a      	ldrh	r2, [r3, #0]
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006158:	1c9a      	adds	r2, r3, #2
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006162:	b29b      	uxth	r3, r3
 8006164:	3b01      	subs	r3, #1
 8006166:	b29a      	uxth	r2, r3
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800616c:	2300      	movs	r3, #0
 800616e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	689b      	ldr	r3, [r3, #8]
 8006176:	f003 0301 	and.w	r3, r3, #1
 800617a:	2b01      	cmp	r3, #1
 800617c:	d11c      	bne.n	80061b8 <HAL_SPI_TransmitReceive+0x1f2>
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006184:	b29b      	uxth	r3, r3
 8006186:	2b00      	cmp	r3, #0
 8006188:	d016      	beq.n	80061b8 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	68da      	ldr	r2, [r3, #12]
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006194:	b292      	uxth	r2, r2
 8006196:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800619c:	1c9a      	adds	r2, r3, #2
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80061a8:	b29b      	uxth	r3, r3
 80061aa:	3b01      	subs	r3, #1
 80061ac:	b29a      	uxth	r2, r3
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80061b4:	2301      	movs	r3, #1
 80061b6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80061b8:	f7fa ff94 	bl	80010e4 <HAL_GetTick>
 80061bc:	4602      	mov	r2, r0
 80061be:	69fb      	ldr	r3, [r7, #28]
 80061c0:	1ad3      	subs	r3, r2, r3
 80061c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80061c4:	429a      	cmp	r2, r3
 80061c6:	d807      	bhi.n	80061d8 <HAL_SPI_TransmitReceive+0x212>
 80061c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061ce:	d003      	beq.n	80061d8 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80061d0:	2303      	movs	r3, #3
 80061d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80061d6:	e0fb      	b.n	80063d0 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80061dc:	b29b      	uxth	r3, r3
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d1a3      	bne.n	800612a <HAL_SPI_TransmitReceive+0x164>
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80061e8:	b29b      	uxth	r3, r3
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d19d      	bne.n	800612a <HAL_SPI_TransmitReceive+0x164>
 80061ee:	e0df      	b.n	80063b0 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	685b      	ldr	r3, [r3, #4]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d003      	beq.n	8006200 <HAL_SPI_TransmitReceive+0x23a>
 80061f8:	8a7b      	ldrh	r3, [r7, #18]
 80061fa:	2b01      	cmp	r3, #1
 80061fc:	f040 80cb 	bne.w	8006396 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006204:	b29b      	uxth	r3, r3
 8006206:	2b01      	cmp	r3, #1
 8006208:	d912      	bls.n	8006230 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800620e:	881a      	ldrh	r2, [r3, #0]
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800621a:	1c9a      	adds	r2, r3, #2
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006224:	b29b      	uxth	r3, r3
 8006226:	3b02      	subs	r3, #2
 8006228:	b29a      	uxth	r2, r3
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800622e:	e0b2      	b.n	8006396 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	330c      	adds	r3, #12
 800623a:	7812      	ldrb	r2, [r2, #0]
 800623c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006242:	1c5a      	adds	r2, r3, #1
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800624c:	b29b      	uxth	r3, r3
 800624e:	3b01      	subs	r3, #1
 8006250:	b29a      	uxth	r2, r3
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006256:	e09e      	b.n	8006396 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	689b      	ldr	r3, [r3, #8]
 800625e:	f003 0302 	and.w	r3, r3, #2
 8006262:	2b02      	cmp	r3, #2
 8006264:	d134      	bne.n	80062d0 <HAL_SPI_TransmitReceive+0x30a>
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800626a:	b29b      	uxth	r3, r3
 800626c:	2b00      	cmp	r3, #0
 800626e:	d02f      	beq.n	80062d0 <HAL_SPI_TransmitReceive+0x30a>
 8006270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006272:	2b01      	cmp	r3, #1
 8006274:	d12c      	bne.n	80062d0 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800627a:	b29b      	uxth	r3, r3
 800627c:	2b01      	cmp	r3, #1
 800627e:	d912      	bls.n	80062a6 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006284:	881a      	ldrh	r2, [r3, #0]
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006290:	1c9a      	adds	r2, r3, #2
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800629a:	b29b      	uxth	r3, r3
 800629c:	3b02      	subs	r3, #2
 800629e:	b29a      	uxth	r2, r3
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80062a4:	e012      	b.n	80062cc <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	330c      	adds	r3, #12
 80062b0:	7812      	ldrb	r2, [r2, #0]
 80062b2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062b8:	1c5a      	adds	r2, r3, #1
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80062c2:	b29b      	uxth	r3, r3
 80062c4:	3b01      	subs	r3, #1
 80062c6:	b29a      	uxth	r2, r3
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80062cc:	2300      	movs	r3, #0
 80062ce:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	689b      	ldr	r3, [r3, #8]
 80062d6:	f003 0301 	and.w	r3, r3, #1
 80062da:	2b01      	cmp	r3, #1
 80062dc:	d148      	bne.n	8006370 <HAL_SPI_TransmitReceive+0x3aa>
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80062e4:	b29b      	uxth	r3, r3
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d042      	beq.n	8006370 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80062f0:	b29b      	uxth	r3, r3
 80062f2:	2b01      	cmp	r3, #1
 80062f4:	d923      	bls.n	800633e <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	68da      	ldr	r2, [r3, #12]
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006300:	b292      	uxth	r2, r2
 8006302:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006308:	1c9a      	adds	r2, r3, #2
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006314:	b29b      	uxth	r3, r3
 8006316:	3b02      	subs	r3, #2
 8006318:	b29a      	uxth	r2, r3
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006326:	b29b      	uxth	r3, r3
 8006328:	2b01      	cmp	r3, #1
 800632a:	d81f      	bhi.n	800636c <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	685a      	ldr	r2, [r3, #4]
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800633a:	605a      	str	r2, [r3, #4]
 800633c:	e016      	b.n	800636c <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f103 020c 	add.w	r2, r3, #12
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800634a:	7812      	ldrb	r2, [r2, #0]
 800634c:	b2d2      	uxtb	r2, r2
 800634e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006354:	1c5a      	adds	r2, r3, #1
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006360:	b29b      	uxth	r3, r3
 8006362:	3b01      	subs	r3, #1
 8006364:	b29a      	uxth	r2, r3
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800636c:	2301      	movs	r3, #1
 800636e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006370:	f7fa feb8 	bl	80010e4 <HAL_GetTick>
 8006374:	4602      	mov	r2, r0
 8006376:	69fb      	ldr	r3, [r7, #28]
 8006378:	1ad3      	subs	r3, r2, r3
 800637a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800637c:	429a      	cmp	r2, r3
 800637e:	d803      	bhi.n	8006388 <HAL_SPI_TransmitReceive+0x3c2>
 8006380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006382:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006386:	d102      	bne.n	800638e <HAL_SPI_TransmitReceive+0x3c8>
 8006388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800638a:	2b00      	cmp	r3, #0
 800638c:	d103      	bne.n	8006396 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800638e:	2303      	movs	r3, #3
 8006390:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8006394:	e01c      	b.n	80063d0 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800639a:	b29b      	uxth	r3, r3
 800639c:	2b00      	cmp	r3, #0
 800639e:	f47f af5b 	bne.w	8006258 <HAL_SPI_TransmitReceive+0x292>
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80063a8:	b29b      	uxth	r3, r3
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	f47f af54 	bne.w	8006258 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80063b0:	69fa      	ldr	r2, [r7, #28]
 80063b2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80063b4:	68f8      	ldr	r0, [r7, #12]
 80063b6:	f000 fab0 	bl	800691a <SPI_EndRxTxTransaction>
 80063ba:	4603      	mov	r3, r0
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d006      	beq.n	80063ce <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80063c0:	2301      	movs	r3, #1
 80063c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	2220      	movs	r2, #32
 80063ca:	661a      	str	r2, [r3, #96]	; 0x60
 80063cc:	e000      	b.n	80063d0 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80063ce:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	2201      	movs	r2, #1
 80063d4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	2200      	movs	r2, #0
 80063dc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80063e0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80063e4:	4618      	mov	r0, r3
 80063e6:	3728      	adds	r7, #40	; 0x28
 80063e8:	46bd      	mov	sp, r7
 80063ea:	bd80      	pop	{r7, pc}

080063ec <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80063ec:	b580      	push	{r7, lr}
 80063ee:	b086      	sub	sp, #24
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	60f8      	str	r0, [r7, #12]
 80063f4:	60b9      	str	r1, [r7, #8]
 80063f6:	4613      	mov	r3, r2
 80063f8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80063fa:	2300      	movs	r3, #0
 80063fc:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006404:	2b01      	cmp	r3, #1
 8006406:	d101      	bne.n	800640c <HAL_SPI_Transmit_DMA+0x20>
 8006408:	2302      	movs	r3, #2
 800640a:	e0d0      	b.n	80065ae <HAL_SPI_Transmit_DMA+0x1c2>
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	2201      	movs	r2, #1
 8006410:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800641a:	b2db      	uxtb	r3, r3
 800641c:	2b01      	cmp	r3, #1
 800641e:	d002      	beq.n	8006426 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8006420:	2302      	movs	r3, #2
 8006422:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006424:	e0be      	b.n	80065a4 <HAL_SPI_Transmit_DMA+0x1b8>
  }

  if ((pData == NULL) || (Size == 0U))
 8006426:	68bb      	ldr	r3, [r7, #8]
 8006428:	2b00      	cmp	r3, #0
 800642a:	d002      	beq.n	8006432 <HAL_SPI_Transmit_DMA+0x46>
 800642c:	88fb      	ldrh	r3, [r7, #6]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d102      	bne.n	8006438 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8006432:	2301      	movs	r3, #1
 8006434:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006436:	e0b5      	b.n	80065a4 <HAL_SPI_Transmit_DMA+0x1b8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	2203      	movs	r2, #3
 800643c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	2200      	movs	r2, #0
 8006444:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	68ba      	ldr	r2, [r7, #8]
 800644a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	88fa      	ldrh	r2, [r7, #6]
 8006450:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	88fa      	ldrh	r2, [r7, #6]
 8006456:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	2200      	movs	r2, #0
 800645c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	2200      	movs	r2, #0
 8006462:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	2200      	movs	r2, #0
 8006468:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->RxXferSize  = 0U;
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	2200      	movs	r2, #0
 800646e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	2200      	movs	r2, #0
 8006476:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	689b      	ldr	r3, [r3, #8]
 800647e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006482:	d107      	bne.n	8006494 <HAL_SPI_Transmit_DMA+0xa8>
  {
    SPI_1LINE_TX(hspi);
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	681a      	ldr	r2, [r3, #0]
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006492:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006498:	4a47      	ldr	r2, [pc, #284]	; (80065b8 <HAL_SPI_Transmit_DMA+0x1cc>)
 800649a:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064a0:	4a46      	ldr	r2, [pc, #280]	; (80065bc <HAL_SPI_Transmit_DMA+0x1d0>)
 80064a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064a8:	4a45      	ldr	r2, [pc, #276]	; (80065c0 <HAL_SPI_Transmit_DMA+0x1d4>)
 80064aa:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064b0:	2200      	movs	r2, #0
 80064b2:	639a      	str	r2, [r3, #56]	; 0x38

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	685a      	ldr	r2, [r3, #4]
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80064c2:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	68db      	ldr	r3, [r3, #12]
 80064c8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80064cc:	d82d      	bhi.n	800652a <HAL_SPI_Transmit_DMA+0x13e>
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064d2:	699b      	ldr	r3, [r3, #24]
 80064d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80064d8:	d127      	bne.n	800652a <HAL_SPI_Transmit_DMA+0x13e>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064de:	b29b      	uxth	r3, r3
 80064e0:	f003 0301 	and.w	r3, r3, #1
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d10f      	bne.n	8006508 <HAL_SPI_Transmit_DMA+0x11c>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	685a      	ldr	r2, [r3, #4]
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80064f6:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064fc:	b29b      	uxth	r3, r3
 80064fe:	085b      	lsrs	r3, r3, #1
 8006500:	b29a      	uxth	r2, r3
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006506:	e010      	b.n	800652a <HAL_SPI_Transmit_DMA+0x13e>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	685a      	ldr	r2, [r3, #4]
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006516:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800651c:	b29b      	uxth	r3, r3
 800651e:	085b      	lsrs	r3, r3, #1
 8006520:	b29b      	uxth	r3, r3
 8006522:	3301      	adds	r3, #1
 8006524:	b29a      	uxth	r2, r3
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR, hspi->TxXferCount))
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006532:	4619      	mov	r1, r3
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	330c      	adds	r3, #12
 800653a:	461a      	mov	r2, r3
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006540:	b29b      	uxth	r3, r3
 8006542:	f7fc fcb5 	bl	8002eb0 <HAL_DMA_Start_IT>
 8006546:	4603      	mov	r3, r0
 8006548:	2b00      	cmp	r3, #0
 800654a:	d00c      	beq.n	8006566 <HAL_SPI_Transmit_DMA+0x17a>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006550:	f043 0210 	orr.w	r2, r3, #16
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8006558:	2301      	movs	r3, #1
 800655a:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	2201      	movs	r2, #1
 8006560:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 8006564:	e01e      	b.n	80065a4 <HAL_SPI_Transmit_DMA+0x1b8>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006570:	2b40      	cmp	r3, #64	; 0x40
 8006572:	d007      	beq.n	8006584 <HAL_SPI_Transmit_DMA+0x198>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	681a      	ldr	r2, [r3, #0]
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006582:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	685a      	ldr	r2, [r3, #4]
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f042 0220 	orr.w	r2, r2, #32
 8006592:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	685a      	ldr	r2, [r3, #4]
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f042 0202 	orr.w	r2, r2, #2
 80065a2:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	2200      	movs	r2, #0
 80065a8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80065ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80065ae:	4618      	mov	r0, r3
 80065b0:	3718      	adds	r7, #24
 80065b2:	46bd      	mov	sp, r7
 80065b4:	bd80      	pop	{r7, pc}
 80065b6:	bf00      	nop
 80065b8:	08006711 	.word	0x08006711
 80065bc:	0800666b 	.word	0x0800666b
 80065c0:	0800672d 	.word	0x0800672d

080065c4 <HAL_SPI_DMAStop>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DMAStop(SPI_HandleTypeDef *hspi)
{
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b084      	sub	sp, #16
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80065cc:	2300      	movs	r3, #0
 80065ce:	73fb      	strb	r3, [r7, #15]
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_SPI_TxCpltCallback() or HAL_SPI_RxCpltCallback() or HAL_SPI_TxRxCpltCallback()
     */

  /* Abort the SPI DMA tx Stream/Channel  */
  if (hspi->hdmatx != NULL)
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d00f      	beq.n	80065f8 <HAL_SPI_DMAStop+0x34>
  {
    if (HAL_OK != HAL_DMA_Abort(hspi->hdmatx))
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065dc:	4618      	mov	r0, r3
 80065de:	f7fc fce2 	bl	8002fa6 <HAL_DMA_Abort>
 80065e2:	4603      	mov	r3, r0
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d007      	beq.n	80065f8 <HAL_SPI_DMAStop+0x34>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065ec:	f043 0210 	orr.w	r2, r3, #16
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	661a      	str	r2, [r3, #96]	; 0x60
      errorcode = HAL_ERROR;
 80065f4:	2301      	movs	r3, #1
 80065f6:	73fb      	strb	r3, [r7, #15]
    }
  }
  /* Abort the SPI DMA rx Stream/Channel  */
  if (hspi->hdmarx != NULL)
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d00f      	beq.n	8006620 <HAL_SPI_DMAStop+0x5c>
  {
    if (HAL_OK != HAL_DMA_Abort(hspi->hdmarx))
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006604:	4618      	mov	r0, r3
 8006606:	f7fc fcce 	bl	8002fa6 <HAL_DMA_Abort>
 800660a:	4603      	mov	r3, r0
 800660c:	2b00      	cmp	r3, #0
 800660e:	d007      	beq.n	8006620 <HAL_SPI_DMAStop+0x5c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006614:	f043 0210 	orr.w	r2, r3, #16
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	661a      	str	r2, [r3, #96]	; 0x60
      errorcode = HAL_ERROR;
 800661c:	2301      	movs	r3, #1
 800661e:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* Disable the SPI DMA Tx & Rx requests */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	685a      	ldr	r2, [r3, #4]
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f022 0203 	bic.w	r2, r2, #3
 800662e:	605a      	str	r2, [r3, #4]
  hspi->State = HAL_SPI_STATE_READY;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2201      	movs	r2, #1
 8006634:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  return errorcode;
 8006638:	7bfb      	ldrb	r3, [r7, #15]
}
 800663a:	4618      	mov	r0, r3
 800663c:	3710      	adds	r7, #16
 800663e:	46bd      	mov	sp, r7
 8006640:	bd80      	pop	{r7, pc}

08006642 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006642:	b480      	push	{r7}
 8006644:	b083      	sub	sp, #12
 8006646:	af00      	add	r7, sp, #0
 8006648:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800664a:	bf00      	nop
 800664c:	370c      	adds	r7, #12
 800664e:	46bd      	mov	sp, r7
 8006650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006654:	4770      	bx	lr

08006656 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006656:	b480      	push	{r7}
 8006658:	b083      	sub	sp, #12
 800665a:	af00      	add	r7, sp, #0
 800665c:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800665e:	bf00      	nop
 8006660:	370c      	adds	r7, #12
 8006662:	46bd      	mov	sp, r7
 8006664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006668:	4770      	bx	lr

0800666a <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800666a:	b580      	push	{r7, lr}
 800666c:	b086      	sub	sp, #24
 800666e:	af00      	add	r7, sp, #0
 8006670:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006676:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006678:	f7fa fd34 	bl	80010e4 <HAL_GetTick>
 800667c:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	f003 0320 	and.w	r3, r3, #32
 8006688:	2b20      	cmp	r3, #32
 800668a:	d03b      	beq.n	8006704 <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800668c:	697b      	ldr	r3, [r7, #20]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	685a      	ldr	r2, [r3, #4]
 8006692:	697b      	ldr	r3, [r7, #20]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	f022 0220 	bic.w	r2, r2, #32
 800669a:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800669c:	697b      	ldr	r3, [r7, #20]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	685a      	ldr	r2, [r3, #4]
 80066a2:	697b      	ldr	r3, [r7, #20]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f022 0202 	bic.w	r2, r2, #2
 80066aa:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80066ac:	693a      	ldr	r2, [r7, #16]
 80066ae:	2164      	movs	r1, #100	; 0x64
 80066b0:	6978      	ldr	r0, [r7, #20]
 80066b2:	f000 f932 	bl	800691a <SPI_EndRxTxTransaction>
 80066b6:	4603      	mov	r3, r0
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d005      	beq.n	80066c8 <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80066bc:	697b      	ldr	r3, [r7, #20]
 80066be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80066c0:	f043 0220 	orr.w	r2, r3, #32
 80066c4:	697b      	ldr	r3, [r7, #20]
 80066c6:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80066c8:	697b      	ldr	r3, [r7, #20]
 80066ca:	689b      	ldr	r3, [r3, #8]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d10a      	bne.n	80066e6 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80066d0:	2300      	movs	r3, #0
 80066d2:	60fb      	str	r3, [r7, #12]
 80066d4:	697b      	ldr	r3, [r7, #20]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	68db      	ldr	r3, [r3, #12]
 80066da:	60fb      	str	r3, [r7, #12]
 80066dc:	697b      	ldr	r3, [r7, #20]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	689b      	ldr	r3, [r3, #8]
 80066e2:	60fb      	str	r3, [r7, #12]
 80066e4:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 80066e6:	697b      	ldr	r3, [r7, #20]
 80066e8:	2200      	movs	r2, #0
 80066ea:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 80066ec:	697b      	ldr	r3, [r7, #20]
 80066ee:	2201      	movs	r2, #1
 80066f0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80066f4:	697b      	ldr	r3, [r7, #20]
 80066f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d003      	beq.n	8006704 <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80066fc:	6978      	ldr	r0, [r7, #20]
 80066fe:	f7ff ffaa 	bl	8006656 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8006702:	e002      	b.n	800670a <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8006704:	6978      	ldr	r0, [r7, #20]
 8006706:	f006 fde7 	bl	800d2d8 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800670a:	3718      	adds	r7, #24
 800670c:	46bd      	mov	sp, r7
 800670e:	bd80      	pop	{r7, pc}

08006710 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006710:	b580      	push	{r7, lr}
 8006712:	b084      	sub	sp, #16
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800671c:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800671e:	68f8      	ldr	r0, [r7, #12]
 8006720:	f7ff ff8f 	bl	8006642 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006724:	bf00      	nop
 8006726:	3710      	adds	r7, #16
 8006728:	46bd      	mov	sp, r7
 800672a:	bd80      	pop	{r7, pc}

0800672c <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800672c:	b580      	push	{r7, lr}
 800672e:	b084      	sub	sp, #16
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006738:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	685a      	ldr	r2, [r3, #4]
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f022 0203 	bic.w	r2, r2, #3
 8006748:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800674e:	f043 0210 	orr.w	r2, r3, #16
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	2201      	movs	r2, #1
 800675a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800675e:	68f8      	ldr	r0, [r7, #12]
 8006760:	f7ff ff79 	bl	8006656 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006764:	bf00      	nop
 8006766:	3710      	adds	r7, #16
 8006768:	46bd      	mov	sp, r7
 800676a:	bd80      	pop	{r7, pc}

0800676c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800676c:	b580      	push	{r7, lr}
 800676e:	b084      	sub	sp, #16
 8006770:	af00      	add	r7, sp, #0
 8006772:	60f8      	str	r0, [r7, #12]
 8006774:	60b9      	str	r1, [r7, #8]
 8006776:	603b      	str	r3, [r7, #0]
 8006778:	4613      	mov	r3, r2
 800677a:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800677c:	e04c      	b.n	8006818 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006784:	d048      	beq.n	8006818 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8006786:	f7fa fcad 	bl	80010e4 <HAL_GetTick>
 800678a:	4602      	mov	r2, r0
 800678c:	69bb      	ldr	r3, [r7, #24]
 800678e:	1ad3      	subs	r3, r2, r3
 8006790:	683a      	ldr	r2, [r7, #0]
 8006792:	429a      	cmp	r2, r3
 8006794:	d902      	bls.n	800679c <SPI_WaitFlagStateUntilTimeout+0x30>
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d13d      	bne.n	8006818 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	685a      	ldr	r2, [r3, #4]
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80067aa:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	685b      	ldr	r3, [r3, #4]
 80067b0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80067b4:	d111      	bne.n	80067da <SPI_WaitFlagStateUntilTimeout+0x6e>
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	689b      	ldr	r3, [r3, #8]
 80067ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80067be:	d004      	beq.n	80067ca <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	689b      	ldr	r3, [r3, #8]
 80067c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80067c8:	d107      	bne.n	80067da <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	681a      	ldr	r2, [r3, #0]
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80067d8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80067e2:	d10f      	bne.n	8006804 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	681a      	ldr	r2, [r3, #0]
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80067f2:	601a      	str	r2, [r3, #0]
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	681a      	ldr	r2, [r3, #0]
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006802:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	2201      	movs	r2, #1
 8006808:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	2200      	movs	r2, #0
 8006810:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006814:	2303      	movs	r3, #3
 8006816:	e00f      	b.n	8006838 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	689a      	ldr	r2, [r3, #8]
 800681e:	68bb      	ldr	r3, [r7, #8]
 8006820:	4013      	ands	r3, r2
 8006822:	68ba      	ldr	r2, [r7, #8]
 8006824:	429a      	cmp	r2, r3
 8006826:	bf0c      	ite	eq
 8006828:	2301      	moveq	r3, #1
 800682a:	2300      	movne	r3, #0
 800682c:	b2db      	uxtb	r3, r3
 800682e:	461a      	mov	r2, r3
 8006830:	79fb      	ldrb	r3, [r7, #7]
 8006832:	429a      	cmp	r2, r3
 8006834:	d1a3      	bne.n	800677e <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8006836:	2300      	movs	r3, #0
}
 8006838:	4618      	mov	r0, r3
 800683a:	3710      	adds	r7, #16
 800683c:	46bd      	mov	sp, r7
 800683e:	bd80      	pop	{r7, pc}

08006840 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006840:	b580      	push	{r7, lr}
 8006842:	b084      	sub	sp, #16
 8006844:	af00      	add	r7, sp, #0
 8006846:	60f8      	str	r0, [r7, #12]
 8006848:	60b9      	str	r1, [r7, #8]
 800684a:	607a      	str	r2, [r7, #4]
 800684c:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 800684e:	e057      	b.n	8006900 <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006850:	68bb      	ldr	r3, [r7, #8]
 8006852:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006856:	d106      	bne.n	8006866 <SPI_WaitFifoStateUntilTimeout+0x26>
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d103      	bne.n	8006866 <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	330c      	adds	r3, #12
 8006864:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006866:	683b      	ldr	r3, [r7, #0]
 8006868:	f1b3 3fff 	cmp.w	r3, #4294967295
 800686c:	d048      	beq.n	8006900 <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800686e:	f7fa fc39 	bl	80010e4 <HAL_GetTick>
 8006872:	4602      	mov	r2, r0
 8006874:	69bb      	ldr	r3, [r7, #24]
 8006876:	1ad3      	subs	r3, r2, r3
 8006878:	683a      	ldr	r2, [r7, #0]
 800687a:	429a      	cmp	r2, r3
 800687c:	d902      	bls.n	8006884 <SPI_WaitFifoStateUntilTimeout+0x44>
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	2b00      	cmp	r3, #0
 8006882:	d13d      	bne.n	8006900 <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	685a      	ldr	r2, [r3, #4]
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006892:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	685b      	ldr	r3, [r3, #4]
 8006898:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800689c:	d111      	bne.n	80068c2 <SPI_WaitFifoStateUntilTimeout+0x82>
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	689b      	ldr	r3, [r3, #8]
 80068a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80068a6:	d004      	beq.n	80068b2 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	689b      	ldr	r3, [r3, #8]
 80068ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80068b0:	d107      	bne.n	80068c2 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	681a      	ldr	r2, [r3, #0]
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80068c0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80068ca:	d10f      	bne.n	80068ec <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	681a      	ldr	r2, [r3, #0]
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80068da:	601a      	str	r2, [r3, #0]
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	681a      	ldr	r2, [r3, #0]
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80068ea:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	2201      	movs	r2, #1
 80068f0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	2200      	movs	r2, #0
 80068f8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80068fc:	2303      	movs	r3, #3
 80068fe:	e008      	b.n	8006912 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	689a      	ldr	r2, [r3, #8]
 8006906:	68bb      	ldr	r3, [r7, #8]
 8006908:	4013      	ands	r3, r2
 800690a:	687a      	ldr	r2, [r7, #4]
 800690c:	429a      	cmp	r2, r3
 800690e:	d19f      	bne.n	8006850 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8006910:	2300      	movs	r3, #0
}
 8006912:	4618      	mov	r0, r3
 8006914:	3710      	adds	r7, #16
 8006916:	46bd      	mov	sp, r7
 8006918:	bd80      	pop	{r7, pc}

0800691a <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800691a:	b580      	push	{r7, lr}
 800691c:	b086      	sub	sp, #24
 800691e:	af02      	add	r7, sp, #8
 8006920:	60f8      	str	r0, [r7, #12]
 8006922:	60b9      	str	r1, [r7, #8]
 8006924:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	9300      	str	r3, [sp, #0]
 800692a:	68bb      	ldr	r3, [r7, #8]
 800692c:	2200      	movs	r2, #0
 800692e:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8006932:	68f8      	ldr	r0, [r7, #12]
 8006934:	f7ff ff84 	bl	8006840 <SPI_WaitFifoStateUntilTimeout>
 8006938:	4603      	mov	r3, r0
 800693a:	2b00      	cmp	r3, #0
 800693c:	d007      	beq.n	800694e <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006942:	f043 0220 	orr.w	r2, r3, #32
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800694a:	2303      	movs	r3, #3
 800694c:	e027      	b.n	800699e <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	9300      	str	r3, [sp, #0]
 8006952:	68bb      	ldr	r3, [r7, #8]
 8006954:	2200      	movs	r2, #0
 8006956:	2180      	movs	r1, #128	; 0x80
 8006958:	68f8      	ldr	r0, [r7, #12]
 800695a:	f7ff ff07 	bl	800676c <SPI_WaitFlagStateUntilTimeout>
 800695e:	4603      	mov	r3, r0
 8006960:	2b00      	cmp	r3, #0
 8006962:	d007      	beq.n	8006974 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006968:	f043 0220 	orr.w	r2, r3, #32
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006970:	2303      	movs	r3, #3
 8006972:	e014      	b.n	800699e <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	9300      	str	r3, [sp, #0]
 8006978:	68bb      	ldr	r3, [r7, #8]
 800697a:	2200      	movs	r2, #0
 800697c:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006980:	68f8      	ldr	r0, [r7, #12]
 8006982:	f7ff ff5d 	bl	8006840 <SPI_WaitFifoStateUntilTimeout>
 8006986:	4603      	mov	r3, r0
 8006988:	2b00      	cmp	r3, #0
 800698a:	d007      	beq.n	800699c <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006990:	f043 0220 	orr.w	r2, r3, #32
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006998:	2303      	movs	r3, #3
 800699a:	e000      	b.n	800699e <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800699c:	2300      	movs	r3, #0
}
 800699e:	4618      	mov	r0, r3
 80069a0:	3710      	adds	r7, #16
 80069a2:	46bd      	mov	sp, r7
 80069a4:	bd80      	pop	{r7, pc}

080069a6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80069a6:	b580      	push	{r7, lr}
 80069a8:	b082      	sub	sp, #8
 80069aa:	af00      	add	r7, sp, #0
 80069ac:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d101      	bne.n	80069b8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80069b4:	2301      	movs	r3, #1
 80069b6:	e01d      	b.n	80069f4 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069be:	b2db      	uxtb	r3, r3
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d106      	bne.n	80069d2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2200      	movs	r2, #0
 80069c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80069cc:	6878      	ldr	r0, [r7, #4]
 80069ce:	f007 fdad 	bl	800e52c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	2202      	movs	r2, #2
 80069d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681a      	ldr	r2, [r3, #0]
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	3304      	adds	r3, #4
 80069e2:	4619      	mov	r1, r3
 80069e4:	4610      	mov	r0, r2
 80069e6:	f000 fdd3 	bl	8007590 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	2201      	movs	r2, #1
 80069ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80069f2:	2300      	movs	r3, #0
}
 80069f4:	4618      	mov	r0, r3
 80069f6:	3708      	adds	r7, #8
 80069f8:	46bd      	mov	sp, r7
 80069fa:	bd80      	pop	{r7, pc}

080069fc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80069fc:	b480      	push	{r7}
 80069fe:	b085      	sub	sp, #20
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	68da      	ldr	r2, [r3, #12]
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f042 0201 	orr.w	r2, r2, #1
 8006a12:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	689a      	ldr	r2, [r3, #8]
 8006a1a:	4b0c      	ldr	r3, [pc, #48]	; (8006a4c <HAL_TIM_Base_Start_IT+0x50>)
 8006a1c:	4013      	ands	r3, r2
 8006a1e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	2b06      	cmp	r3, #6
 8006a24:	d00b      	beq.n	8006a3e <HAL_TIM_Base_Start_IT+0x42>
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a2c:	d007      	beq.n	8006a3e <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	681a      	ldr	r2, [r3, #0]
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	f042 0201 	orr.w	r2, r2, #1
 8006a3c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006a3e:	2300      	movs	r3, #0
}
 8006a40:	4618      	mov	r0, r3
 8006a42:	3714      	adds	r7, #20
 8006a44:	46bd      	mov	sp, r7
 8006a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4a:	4770      	bx	lr
 8006a4c:	00010007 	.word	0x00010007

08006a50 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8006a50:	b480      	push	{r7}
 8006a52:	b083      	sub	sp, #12
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	68da      	ldr	r2, [r3, #12]
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f022 0201 	bic.w	r2, r2, #1
 8006a66:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	6a1a      	ldr	r2, [r3, #32]
 8006a6e:	f241 1311 	movw	r3, #4369	; 0x1111
 8006a72:	4013      	ands	r3, r2
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d10f      	bne.n	8006a98 <HAL_TIM_Base_Stop_IT+0x48>
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	6a1a      	ldr	r2, [r3, #32]
 8006a7e:	f240 4344 	movw	r3, #1092	; 0x444
 8006a82:	4013      	ands	r3, r2
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d107      	bne.n	8006a98 <HAL_TIM_Base_Stop_IT+0x48>
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	681a      	ldr	r2, [r3, #0]
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	f022 0201 	bic.w	r2, r2, #1
 8006a96:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006a98:	2300      	movs	r3, #0
}
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	370c      	adds	r7, #12
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa4:	4770      	bx	lr

08006aa6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006aa6:	b580      	push	{r7, lr}
 8006aa8:	b082      	sub	sp, #8
 8006aaa:	af00      	add	r7, sp, #0
 8006aac:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d101      	bne.n	8006ab8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006ab4:	2301      	movs	r3, #1
 8006ab6:	e01d      	b.n	8006af4 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006abe:	b2db      	uxtb	r3, r3
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d106      	bne.n	8006ad2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006acc:	6878      	ldr	r0, [r7, #4]
 8006ace:	f000 f815 	bl	8006afc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	2202      	movs	r2, #2
 8006ad6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681a      	ldr	r2, [r3, #0]
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	3304      	adds	r3, #4
 8006ae2:	4619      	mov	r1, r3
 8006ae4:	4610      	mov	r0, r2
 8006ae6:	f000 fd53 	bl	8007590 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	2201      	movs	r2, #1
 8006aee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006af2:	2300      	movs	r3, #0
}
 8006af4:	4618      	mov	r0, r3
 8006af6:	3708      	adds	r7, #8
 8006af8:	46bd      	mov	sp, r7
 8006afa:	bd80      	pop	{r7, pc}

08006afc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006afc:	b480      	push	{r7}
 8006afe:	b083      	sub	sp, #12
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006b04:	bf00      	nop
 8006b06:	370c      	adds	r7, #12
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0e:	4770      	bx	lr

08006b10 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006b10:	b580      	push	{r7, lr}
 8006b12:	b084      	sub	sp, #16
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
 8006b18:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	2201      	movs	r2, #1
 8006b20:	6839      	ldr	r1, [r7, #0]
 8006b22:	4618      	mov	r0, r3
 8006b24:	f001 f93e 	bl	8007da4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	4a1e      	ldr	r2, [pc, #120]	; (8006ba8 <HAL_TIM_PWM_Start+0x98>)
 8006b2e:	4293      	cmp	r3, r2
 8006b30:	d013      	beq.n	8006b5a <HAL_TIM_PWM_Start+0x4a>
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	4a1d      	ldr	r2, [pc, #116]	; (8006bac <HAL_TIM_PWM_Start+0x9c>)
 8006b38:	4293      	cmp	r3, r2
 8006b3a:	d00e      	beq.n	8006b5a <HAL_TIM_PWM_Start+0x4a>
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	4a1b      	ldr	r2, [pc, #108]	; (8006bb0 <HAL_TIM_PWM_Start+0xa0>)
 8006b42:	4293      	cmp	r3, r2
 8006b44:	d009      	beq.n	8006b5a <HAL_TIM_PWM_Start+0x4a>
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	4a1a      	ldr	r2, [pc, #104]	; (8006bb4 <HAL_TIM_PWM_Start+0xa4>)
 8006b4c:	4293      	cmp	r3, r2
 8006b4e:	d004      	beq.n	8006b5a <HAL_TIM_PWM_Start+0x4a>
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	4a18      	ldr	r2, [pc, #96]	; (8006bb8 <HAL_TIM_PWM_Start+0xa8>)
 8006b56:	4293      	cmp	r3, r2
 8006b58:	d101      	bne.n	8006b5e <HAL_TIM_PWM_Start+0x4e>
 8006b5a:	2301      	movs	r3, #1
 8006b5c:	e000      	b.n	8006b60 <HAL_TIM_PWM_Start+0x50>
 8006b5e:	2300      	movs	r3, #0
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d007      	beq.n	8006b74 <HAL_TIM_PWM_Start+0x64>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006b72:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	689a      	ldr	r2, [r3, #8]
 8006b7a:	4b10      	ldr	r3, [pc, #64]	; (8006bbc <HAL_TIM_PWM_Start+0xac>)
 8006b7c:	4013      	ands	r3, r2
 8006b7e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	2b06      	cmp	r3, #6
 8006b84:	d00b      	beq.n	8006b9e <HAL_TIM_PWM_Start+0x8e>
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b8c:	d007      	beq.n	8006b9e <HAL_TIM_PWM_Start+0x8e>
  {
    __HAL_TIM_ENABLE(htim);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	681a      	ldr	r2, [r3, #0]
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	f042 0201 	orr.w	r2, r2, #1
 8006b9c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006b9e:	2300      	movs	r3, #0
}
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	3710      	adds	r7, #16
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	bd80      	pop	{r7, pc}
 8006ba8:	40012c00 	.word	0x40012c00
 8006bac:	40013400 	.word	0x40013400
 8006bb0:	40014000 	.word	0x40014000
 8006bb4:	40014400 	.word	0x40014400
 8006bb8:	40014800 	.word	0x40014800
 8006bbc:	00010007 	.word	0x00010007

08006bc0 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006bc0:	b580      	push	{r7, lr}
 8006bc2:	b082      	sub	sp, #8
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]
 8006bc8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	2200      	movs	r2, #0
 8006bd0:	6839      	ldr	r1, [r7, #0]
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	f001 f8e6 	bl	8007da4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	4a2a      	ldr	r2, [pc, #168]	; (8006c88 <HAL_TIM_PWM_Stop+0xc8>)
 8006bde:	4293      	cmp	r3, r2
 8006be0:	d013      	beq.n	8006c0a <HAL_TIM_PWM_Stop+0x4a>
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	4a29      	ldr	r2, [pc, #164]	; (8006c8c <HAL_TIM_PWM_Stop+0xcc>)
 8006be8:	4293      	cmp	r3, r2
 8006bea:	d00e      	beq.n	8006c0a <HAL_TIM_PWM_Stop+0x4a>
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	4a27      	ldr	r2, [pc, #156]	; (8006c90 <HAL_TIM_PWM_Stop+0xd0>)
 8006bf2:	4293      	cmp	r3, r2
 8006bf4:	d009      	beq.n	8006c0a <HAL_TIM_PWM_Stop+0x4a>
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	4a26      	ldr	r2, [pc, #152]	; (8006c94 <HAL_TIM_PWM_Stop+0xd4>)
 8006bfc:	4293      	cmp	r3, r2
 8006bfe:	d004      	beq.n	8006c0a <HAL_TIM_PWM_Stop+0x4a>
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	4a24      	ldr	r2, [pc, #144]	; (8006c98 <HAL_TIM_PWM_Stop+0xd8>)
 8006c06:	4293      	cmp	r3, r2
 8006c08:	d101      	bne.n	8006c0e <HAL_TIM_PWM_Stop+0x4e>
 8006c0a:	2301      	movs	r3, #1
 8006c0c:	e000      	b.n	8006c10 <HAL_TIM_PWM_Stop+0x50>
 8006c0e:	2300      	movs	r3, #0
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d017      	beq.n	8006c44 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	6a1a      	ldr	r2, [r3, #32]
 8006c1a:	f241 1311 	movw	r3, #4369	; 0x1111
 8006c1e:	4013      	ands	r3, r2
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d10f      	bne.n	8006c44 <HAL_TIM_PWM_Stop+0x84>
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	6a1a      	ldr	r2, [r3, #32]
 8006c2a:	f240 4344 	movw	r3, #1092	; 0x444
 8006c2e:	4013      	ands	r3, r2
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d107      	bne.n	8006c44 <HAL_TIM_PWM_Stop+0x84>
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006c42:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	6a1a      	ldr	r2, [r3, #32]
 8006c4a:	f241 1311 	movw	r3, #4369	; 0x1111
 8006c4e:	4013      	ands	r3, r2
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d10f      	bne.n	8006c74 <HAL_TIM_PWM_Stop+0xb4>
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	6a1a      	ldr	r2, [r3, #32]
 8006c5a:	f240 4344 	movw	r3, #1092	; 0x444
 8006c5e:	4013      	ands	r3, r2
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d107      	bne.n	8006c74 <HAL_TIM_PWM_Stop+0xb4>
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	681a      	ldr	r2, [r3, #0]
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	f022 0201 	bic.w	r2, r2, #1
 8006c72:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2201      	movs	r2, #1
 8006c78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8006c7c:	2300      	movs	r3, #0
}
 8006c7e:	4618      	mov	r0, r3
 8006c80:	3708      	adds	r7, #8
 8006c82:	46bd      	mov	sp, r7
 8006c84:	bd80      	pop	{r7, pc}
 8006c86:	bf00      	nop
 8006c88:	40012c00 	.word	0x40012c00
 8006c8c:	40013400 	.word	0x40013400
 8006c90:	40014000 	.word	0x40014000
 8006c94:	40014400 	.word	0x40014400
 8006c98:	40014800 	.word	0x40014800

08006c9c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8006c9c:	b580      	push	{r7, lr}
 8006c9e:	b086      	sub	sp, #24
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
 8006ca4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d101      	bne.n	8006cb0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006cac:	2301      	movs	r3, #1
 8006cae:	e083      	b.n	8006db8 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006cb6:	b2db      	uxtb	r3, r3
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d106      	bne.n	8006cca <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006cc4:	6878      	ldr	r0, [r7, #4]
 8006cc6:	f007 fcc9 	bl	800e65c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	2202      	movs	r2, #2
 8006cce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	689b      	ldr	r3, [r3, #8]
 8006cd8:	687a      	ldr	r2, [r7, #4]
 8006cda:	6812      	ldr	r2, [r2, #0]
 8006cdc:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8006ce0:	f023 0307 	bic.w	r3, r3, #7
 8006ce4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681a      	ldr	r2, [r3, #0]
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	3304      	adds	r3, #4
 8006cee:	4619      	mov	r1, r3
 8006cf0:	4610      	mov	r0, r2
 8006cf2:	f000 fc4d 	bl	8007590 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	689b      	ldr	r3, [r3, #8]
 8006cfc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	699b      	ldr	r3, [r3, #24]
 8006d04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	6a1b      	ldr	r3, [r3, #32]
 8006d0c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006d0e:	683b      	ldr	r3, [r7, #0]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	697a      	ldr	r2, [r7, #20]
 8006d14:	4313      	orrs	r3, r2
 8006d16:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006d18:	693b      	ldr	r3, [r7, #16]
 8006d1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d1e:	f023 0303 	bic.w	r3, r3, #3
 8006d22:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006d24:	683b      	ldr	r3, [r7, #0]
 8006d26:	689a      	ldr	r2, [r3, #8]
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	699b      	ldr	r3, [r3, #24]
 8006d2c:	021b      	lsls	r3, r3, #8
 8006d2e:	4313      	orrs	r3, r2
 8006d30:	693a      	ldr	r2, [r7, #16]
 8006d32:	4313      	orrs	r3, r2
 8006d34:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006d36:	693b      	ldr	r3, [r7, #16]
 8006d38:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006d3c:	f023 030c 	bic.w	r3, r3, #12
 8006d40:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006d42:	693b      	ldr	r3, [r7, #16]
 8006d44:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006d48:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006d4c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006d4e:	683b      	ldr	r3, [r7, #0]
 8006d50:	68da      	ldr	r2, [r3, #12]
 8006d52:	683b      	ldr	r3, [r7, #0]
 8006d54:	69db      	ldr	r3, [r3, #28]
 8006d56:	021b      	lsls	r3, r3, #8
 8006d58:	4313      	orrs	r3, r2
 8006d5a:	693a      	ldr	r2, [r7, #16]
 8006d5c:	4313      	orrs	r3, r2
 8006d5e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006d60:	683b      	ldr	r3, [r7, #0]
 8006d62:	691b      	ldr	r3, [r3, #16]
 8006d64:	011a      	lsls	r2, r3, #4
 8006d66:	683b      	ldr	r3, [r7, #0]
 8006d68:	6a1b      	ldr	r3, [r3, #32]
 8006d6a:	031b      	lsls	r3, r3, #12
 8006d6c:	4313      	orrs	r3, r2
 8006d6e:	693a      	ldr	r2, [r7, #16]
 8006d70:	4313      	orrs	r3, r2
 8006d72:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8006d7a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8006d82:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006d84:	683b      	ldr	r3, [r7, #0]
 8006d86:	685a      	ldr	r2, [r3, #4]
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	695b      	ldr	r3, [r3, #20]
 8006d8c:	011b      	lsls	r3, r3, #4
 8006d8e:	4313      	orrs	r3, r2
 8006d90:	68fa      	ldr	r2, [r7, #12]
 8006d92:	4313      	orrs	r3, r2
 8006d94:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	697a      	ldr	r2, [r7, #20]
 8006d9c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	693a      	ldr	r2, [r7, #16]
 8006da4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	68fa      	ldr	r2, [r7, #12]
 8006dac:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	2201      	movs	r2, #1
 8006db2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006db6:	2300      	movs	r3, #0
}
 8006db8:	4618      	mov	r0, r3
 8006dba:	3718      	adds	r7, #24
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	bd80      	pop	{r7, pc}

08006dc0 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	b082      	sub	sp, #8
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
 8006dc8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d003      	beq.n	8006dd8 <HAL_TIM_Encoder_Start_IT+0x18>
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	2b04      	cmp	r3, #4
 8006dd4:	d010      	beq.n	8006df8 <HAL_TIM_Encoder_Start_IT+0x38>
 8006dd6:	e01f      	b.n	8006e18 <HAL_TIM_Encoder_Start_IT+0x58>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	2201      	movs	r2, #1
 8006dde:	2100      	movs	r1, #0
 8006de0:	4618      	mov	r0, r3
 8006de2:	f000 ffdf 	bl	8007da4 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	68da      	ldr	r2, [r3, #12]
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	f042 0202 	orr.w	r2, r2, #2
 8006df4:	60da      	str	r2, [r3, #12]
      break;
 8006df6:	e02e      	b.n	8006e56 <HAL_TIM_Encoder_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	2201      	movs	r2, #1
 8006dfe:	2104      	movs	r1, #4
 8006e00:	4618      	mov	r0, r3
 8006e02:	f000 ffcf 	bl	8007da4 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	68da      	ldr	r2, [r3, #12]
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	f042 0204 	orr.w	r2, r2, #4
 8006e14:	60da      	str	r2, [r3, #12]
      break;
 8006e16:	e01e      	b.n	8006e56 <HAL_TIM_Encoder_Start_IT+0x96>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	2201      	movs	r2, #1
 8006e1e:	2100      	movs	r1, #0
 8006e20:	4618      	mov	r0, r3
 8006e22:	f000 ffbf 	bl	8007da4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	2201      	movs	r2, #1
 8006e2c:	2104      	movs	r1, #4
 8006e2e:	4618      	mov	r0, r3
 8006e30:	f000 ffb8 	bl	8007da4 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	68da      	ldr	r2, [r3, #12]
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	f042 0202 	orr.w	r2, r2, #2
 8006e42:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	68da      	ldr	r2, [r3, #12]
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	f042 0204 	orr.w	r2, r2, #4
 8006e52:	60da      	str	r2, [r3, #12]
      break;
 8006e54:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	681a      	ldr	r2, [r3, #0]
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	f042 0201 	orr.w	r2, r2, #1
 8006e64:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006e66:	2300      	movs	r3, #0
}
 8006e68:	4618      	mov	r0, r3
 8006e6a:	3708      	adds	r7, #8
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	bd80      	pop	{r7, pc}

08006e70 <HAL_TIM_Encoder_Stop_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006e70:	b580      	push	{r7, lr}
 8006e72:	b082      	sub	sp, #8
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
 8006e78:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Disable the Input Capture channels 1 and 2
    (in the EncoderInterface the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2) */
  if (Channel == TIM_CHANNEL_1)
 8006e7a:	683b      	ldr	r3, [r7, #0]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d10f      	bne.n	8006ea0 <HAL_TIM_Encoder_Stop_IT+0x30>
  {
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	2200      	movs	r2, #0
 8006e86:	2100      	movs	r1, #0
 8006e88:	4618      	mov	r0, r3
 8006e8a:	f000 ff8b 	bl	8007da4 <TIM_CCxChannelCmd>

    /* Disable the capture compare Interrupts 1 */
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	68da      	ldr	r2, [r3, #12]
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	f022 0202 	bic.w	r2, r2, #2
 8006e9c:	60da      	str	r2, [r3, #12]
 8006e9e:	e030      	b.n	8006f02 <HAL_TIM_Encoder_Stop_IT+0x92>
  }
  else if (Channel == TIM_CHANNEL_2)
 8006ea0:	683b      	ldr	r3, [r7, #0]
 8006ea2:	2b04      	cmp	r3, #4
 8006ea4:	d10f      	bne.n	8006ec6 <HAL_TIM_Encoder_Stop_IT+0x56>
  {
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	2200      	movs	r2, #0
 8006eac:	2104      	movs	r1, #4
 8006eae:	4618      	mov	r0, r3
 8006eb0:	f000 ff78 	bl	8007da4 <TIM_CCxChannelCmd>

    /* Disable the capture compare Interrupts 2 */
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	68da      	ldr	r2, [r3, #12]
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	f022 0204 	bic.w	r2, r2, #4
 8006ec2:	60da      	str	r2, [r3, #12]
 8006ec4:	e01d      	b.n	8006f02 <HAL_TIM_Encoder_Stop_IT+0x92>
  }
  else
  {
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	2200      	movs	r2, #0
 8006ecc:	2100      	movs	r1, #0
 8006ece:	4618      	mov	r0, r3
 8006ed0:	f000 ff68 	bl	8007da4 <TIM_CCxChannelCmd>
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	2200      	movs	r2, #0
 8006eda:	2104      	movs	r1, #4
 8006edc:	4618      	mov	r0, r3
 8006ede:	f000 ff61 	bl	8007da4 <TIM_CCxChannelCmd>

    /* Disable the capture compare Interrupts 1 and 2 */
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	68da      	ldr	r2, [r3, #12]
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	f022 0202 	bic.w	r2, r2, #2
 8006ef0:	60da      	str	r2, [r3, #12]
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	68da      	ldr	r2, [r3, #12]
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	f022 0204 	bic.w	r2, r2, #4
 8006f00:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	6a1a      	ldr	r2, [r3, #32]
 8006f08:	f241 1311 	movw	r3, #4369	; 0x1111
 8006f0c:	4013      	ands	r3, r2
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d10f      	bne.n	8006f32 <HAL_TIM_Encoder_Stop_IT+0xc2>
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	6a1a      	ldr	r2, [r3, #32]
 8006f18:	f240 4344 	movw	r3, #1092	; 0x444
 8006f1c:	4013      	ands	r3, r2
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d107      	bne.n	8006f32 <HAL_TIM_Encoder_Stop_IT+0xc2>
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	681a      	ldr	r2, [r3, #0]
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	f022 0201 	bic.w	r2, r2, #1
 8006f30:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	2201      	movs	r2, #1
 8006f36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8006f3a:	2300      	movs	r3, #0
}
 8006f3c:	4618      	mov	r0, r3
 8006f3e:	3708      	adds	r7, #8
 8006f40:	46bd      	mov	sp, r7
 8006f42:	bd80      	pop	{r7, pc}

08006f44 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006f44:	b580      	push	{r7, lr}
 8006f46:	b082      	sub	sp, #8
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	691b      	ldr	r3, [r3, #16]
 8006f52:	f003 0302 	and.w	r3, r3, #2
 8006f56:	2b02      	cmp	r3, #2
 8006f58:	d122      	bne.n	8006fa0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	68db      	ldr	r3, [r3, #12]
 8006f60:	f003 0302 	and.w	r3, r3, #2
 8006f64:	2b02      	cmp	r3, #2
 8006f66:	d11b      	bne.n	8006fa0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	f06f 0202 	mvn.w	r2, #2
 8006f70:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	2201      	movs	r2, #1
 8006f76:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	699b      	ldr	r3, [r3, #24]
 8006f7e:	f003 0303 	and.w	r3, r3, #3
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d003      	beq.n	8006f8e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006f86:	6878      	ldr	r0, [r7, #4]
 8006f88:	f000 fae4 	bl	8007554 <HAL_TIM_IC_CaptureCallback>
 8006f8c:	e005      	b.n	8006f9a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f8e:	6878      	ldr	r0, [r7, #4]
 8006f90:	f000 fad6 	bl	8007540 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f94:	6878      	ldr	r0, [r7, #4]
 8006f96:	f000 fae7 	bl	8007568 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	2200      	movs	r2, #0
 8006f9e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	691b      	ldr	r3, [r3, #16]
 8006fa6:	f003 0304 	and.w	r3, r3, #4
 8006faa:	2b04      	cmp	r3, #4
 8006fac:	d122      	bne.n	8006ff4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	68db      	ldr	r3, [r3, #12]
 8006fb4:	f003 0304 	and.w	r3, r3, #4
 8006fb8:	2b04      	cmp	r3, #4
 8006fba:	d11b      	bne.n	8006ff4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	f06f 0204 	mvn.w	r2, #4
 8006fc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	2202      	movs	r2, #2
 8006fca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	699b      	ldr	r3, [r3, #24]
 8006fd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d003      	beq.n	8006fe2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006fda:	6878      	ldr	r0, [r7, #4]
 8006fdc:	f000 faba 	bl	8007554 <HAL_TIM_IC_CaptureCallback>
 8006fe0:	e005      	b.n	8006fee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006fe2:	6878      	ldr	r0, [r7, #4]
 8006fe4:	f000 faac 	bl	8007540 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006fe8:	6878      	ldr	r0, [r7, #4]
 8006fea:	f000 fabd 	bl	8007568 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	691b      	ldr	r3, [r3, #16]
 8006ffa:	f003 0308 	and.w	r3, r3, #8
 8006ffe:	2b08      	cmp	r3, #8
 8007000:	d122      	bne.n	8007048 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	68db      	ldr	r3, [r3, #12]
 8007008:	f003 0308 	and.w	r3, r3, #8
 800700c:	2b08      	cmp	r3, #8
 800700e:	d11b      	bne.n	8007048 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	f06f 0208 	mvn.w	r2, #8
 8007018:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	2204      	movs	r2, #4
 800701e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	69db      	ldr	r3, [r3, #28]
 8007026:	f003 0303 	and.w	r3, r3, #3
 800702a:	2b00      	cmp	r3, #0
 800702c:	d003      	beq.n	8007036 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800702e:	6878      	ldr	r0, [r7, #4]
 8007030:	f000 fa90 	bl	8007554 <HAL_TIM_IC_CaptureCallback>
 8007034:	e005      	b.n	8007042 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007036:	6878      	ldr	r0, [r7, #4]
 8007038:	f000 fa82 	bl	8007540 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800703c:	6878      	ldr	r0, [r7, #4]
 800703e:	f000 fa93 	bl	8007568 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	2200      	movs	r2, #0
 8007046:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	691b      	ldr	r3, [r3, #16]
 800704e:	f003 0310 	and.w	r3, r3, #16
 8007052:	2b10      	cmp	r3, #16
 8007054:	d122      	bne.n	800709c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	68db      	ldr	r3, [r3, #12]
 800705c:	f003 0310 	and.w	r3, r3, #16
 8007060:	2b10      	cmp	r3, #16
 8007062:	d11b      	bne.n	800709c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	f06f 0210 	mvn.w	r2, #16
 800706c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	2208      	movs	r2, #8
 8007072:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	69db      	ldr	r3, [r3, #28]
 800707a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800707e:	2b00      	cmp	r3, #0
 8007080:	d003      	beq.n	800708a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007082:	6878      	ldr	r0, [r7, #4]
 8007084:	f000 fa66 	bl	8007554 <HAL_TIM_IC_CaptureCallback>
 8007088:	e005      	b.n	8007096 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800708a:	6878      	ldr	r0, [r7, #4]
 800708c:	f000 fa58 	bl	8007540 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007090:	6878      	ldr	r0, [r7, #4]
 8007092:	f000 fa69 	bl	8007568 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	2200      	movs	r2, #0
 800709a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	691b      	ldr	r3, [r3, #16]
 80070a2:	f003 0301 	and.w	r3, r3, #1
 80070a6:	2b01      	cmp	r3, #1
 80070a8:	d10e      	bne.n	80070c8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	68db      	ldr	r3, [r3, #12]
 80070b0:	f003 0301 	and.w	r3, r3, #1
 80070b4:	2b01      	cmp	r3, #1
 80070b6:	d107      	bne.n	80070c8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f06f 0201 	mvn.w	r2, #1
 80070c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80070c2:	6878      	ldr	r0, [r7, #4]
 80070c4:	f006 f97e 	bl	800d3c4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	691b      	ldr	r3, [r3, #16]
 80070ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070d2:	2b80      	cmp	r3, #128	; 0x80
 80070d4:	d10e      	bne.n	80070f4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	68db      	ldr	r3, [r3, #12]
 80070dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070e0:	2b80      	cmp	r3, #128	; 0x80
 80070e2:	d107      	bne.n	80070f4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80070ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80070ee:	6878      	ldr	r0, [r7, #4]
 80070f0:	f000 ff8e 	bl	8008010 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	691b      	ldr	r3, [r3, #16]
 80070fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007102:	d10e      	bne.n	8007122 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	68db      	ldr	r3, [r3, #12]
 800710a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800710e:	2b80      	cmp	r3, #128	; 0x80
 8007110:	d107      	bne.n	8007122 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800711a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800711c:	6878      	ldr	r0, [r7, #4]
 800711e:	f000 ff81 	bl	8008024 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	691b      	ldr	r3, [r3, #16]
 8007128:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800712c:	2b40      	cmp	r3, #64	; 0x40
 800712e:	d10e      	bne.n	800714e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	68db      	ldr	r3, [r3, #12]
 8007136:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800713a:	2b40      	cmp	r3, #64	; 0x40
 800713c:	d107      	bne.n	800714e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007146:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007148:	6878      	ldr	r0, [r7, #4]
 800714a:	f000 fa17 	bl	800757c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	691b      	ldr	r3, [r3, #16]
 8007154:	f003 0320 	and.w	r3, r3, #32
 8007158:	2b20      	cmp	r3, #32
 800715a:	d10e      	bne.n	800717a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	68db      	ldr	r3, [r3, #12]
 8007162:	f003 0320 	and.w	r3, r3, #32
 8007166:	2b20      	cmp	r3, #32
 8007168:	d107      	bne.n	800717a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	f06f 0220 	mvn.w	r2, #32
 8007172:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007174:	6878      	ldr	r0, [r7, #4]
 8007176:	f000 ff41 	bl	8007ffc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800717a:	bf00      	nop
 800717c:	3708      	adds	r7, #8
 800717e:	46bd      	mov	sp, r7
 8007180:	bd80      	pop	{r7, pc}
	...

08007184 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007184:	b580      	push	{r7, lr}
 8007186:	b084      	sub	sp, #16
 8007188:	af00      	add	r7, sp, #0
 800718a:	60f8      	str	r0, [r7, #12]
 800718c:	60b9      	str	r1, [r7, #8]
 800718e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007196:	2b01      	cmp	r3, #1
 8007198:	d101      	bne.n	800719e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800719a:	2302      	movs	r3, #2
 800719c:	e105      	b.n	80073aa <HAL_TIM_PWM_ConfigChannel+0x226>
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	2201      	movs	r2, #1
 80071a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	2202      	movs	r2, #2
 80071aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	2b14      	cmp	r3, #20
 80071b2:	f200 80f0 	bhi.w	8007396 <HAL_TIM_PWM_ConfigChannel+0x212>
 80071b6:	a201      	add	r2, pc, #4	; (adr r2, 80071bc <HAL_TIM_PWM_ConfigChannel+0x38>)
 80071b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071bc:	08007211 	.word	0x08007211
 80071c0:	08007397 	.word	0x08007397
 80071c4:	08007397 	.word	0x08007397
 80071c8:	08007397 	.word	0x08007397
 80071cc:	08007251 	.word	0x08007251
 80071d0:	08007397 	.word	0x08007397
 80071d4:	08007397 	.word	0x08007397
 80071d8:	08007397 	.word	0x08007397
 80071dc:	08007293 	.word	0x08007293
 80071e0:	08007397 	.word	0x08007397
 80071e4:	08007397 	.word	0x08007397
 80071e8:	08007397 	.word	0x08007397
 80071ec:	080072d3 	.word	0x080072d3
 80071f0:	08007397 	.word	0x08007397
 80071f4:	08007397 	.word	0x08007397
 80071f8:	08007397 	.word	0x08007397
 80071fc:	08007315 	.word	0x08007315
 8007200:	08007397 	.word	0x08007397
 8007204:	08007397 	.word	0x08007397
 8007208:	08007397 	.word	0x08007397
 800720c:	08007355 	.word	0x08007355
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	68b9      	ldr	r1, [r7, #8]
 8007216:	4618      	mov	r0, r3
 8007218:	f000 fa54 	bl	80076c4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	699a      	ldr	r2, [r3, #24]
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	f042 0208 	orr.w	r2, r2, #8
 800722a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	699a      	ldr	r2, [r3, #24]
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	f022 0204 	bic.w	r2, r2, #4
 800723a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	6999      	ldr	r1, [r3, #24]
 8007242:	68bb      	ldr	r3, [r7, #8]
 8007244:	691a      	ldr	r2, [r3, #16]
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	430a      	orrs	r2, r1
 800724c:	619a      	str	r2, [r3, #24]
      break;
 800724e:	e0a3      	b.n	8007398 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	68b9      	ldr	r1, [r7, #8]
 8007256:	4618      	mov	r0, r3
 8007258:	f000 fac4 	bl	80077e4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	699a      	ldr	r2, [r3, #24]
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800726a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	699a      	ldr	r2, [r3, #24]
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800727a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	6999      	ldr	r1, [r3, #24]
 8007282:	68bb      	ldr	r3, [r7, #8]
 8007284:	691b      	ldr	r3, [r3, #16]
 8007286:	021a      	lsls	r2, r3, #8
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	430a      	orrs	r2, r1
 800728e:	619a      	str	r2, [r3, #24]
      break;
 8007290:	e082      	b.n	8007398 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	68b9      	ldr	r1, [r7, #8]
 8007298:	4618      	mov	r0, r3
 800729a:	f000 fb2d 	bl	80078f8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	69da      	ldr	r2, [r3, #28]
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	f042 0208 	orr.w	r2, r2, #8
 80072ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	69da      	ldr	r2, [r3, #28]
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	f022 0204 	bic.w	r2, r2, #4
 80072bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	69d9      	ldr	r1, [r3, #28]
 80072c4:	68bb      	ldr	r3, [r7, #8]
 80072c6:	691a      	ldr	r2, [r3, #16]
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	430a      	orrs	r2, r1
 80072ce:	61da      	str	r2, [r3, #28]
      break;
 80072d0:	e062      	b.n	8007398 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	68b9      	ldr	r1, [r7, #8]
 80072d8:	4618      	mov	r0, r3
 80072da:	f000 fb95 	bl	8007a08 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	69da      	ldr	r2, [r3, #28]
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80072ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	69da      	ldr	r2, [r3, #28]
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80072fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	69d9      	ldr	r1, [r3, #28]
 8007304:	68bb      	ldr	r3, [r7, #8]
 8007306:	691b      	ldr	r3, [r3, #16]
 8007308:	021a      	lsls	r2, r3, #8
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	430a      	orrs	r2, r1
 8007310:	61da      	str	r2, [r3, #28]
      break;
 8007312:	e041      	b.n	8007398 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	68b9      	ldr	r1, [r7, #8]
 800731a:	4618      	mov	r0, r3
 800731c:	f000 fbde 	bl	8007adc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	f042 0208 	orr.w	r2, r2, #8
 800732e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	f022 0204 	bic.w	r2, r2, #4
 800733e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007346:	68bb      	ldr	r3, [r7, #8]
 8007348:	691a      	ldr	r2, [r3, #16]
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	430a      	orrs	r2, r1
 8007350:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007352:	e021      	b.n	8007398 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	68b9      	ldr	r1, [r7, #8]
 800735a:	4618      	mov	r0, r3
 800735c:	f000 fc22 	bl	8007ba4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800736e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800737e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007386:	68bb      	ldr	r3, [r7, #8]
 8007388:	691b      	ldr	r3, [r3, #16]
 800738a:	021a      	lsls	r2, r3, #8
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	430a      	orrs	r2, r1
 8007392:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007394:	e000      	b.n	8007398 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 8007396:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	2201      	movs	r2, #1
 800739c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	2200      	movs	r2, #0
 80073a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80073a8:	2300      	movs	r3, #0
}
 80073aa:	4618      	mov	r0, r3
 80073ac:	3710      	adds	r7, #16
 80073ae:	46bd      	mov	sp, r7
 80073b0:	bd80      	pop	{r7, pc}
 80073b2:	bf00      	nop

080073b4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80073b4:	b580      	push	{r7, lr}
 80073b6:	b084      	sub	sp, #16
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]
 80073bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80073c4:	2b01      	cmp	r3, #1
 80073c6:	d101      	bne.n	80073cc <HAL_TIM_ConfigClockSource+0x18>
 80073c8:	2302      	movs	r3, #2
 80073ca:	e0b5      	b.n	8007538 <HAL_TIM_ConfigClockSource+0x184>
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2201      	movs	r2, #1
 80073d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2202      	movs	r2, #2
 80073d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	689b      	ldr	r3, [r3, #8]
 80073e2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80073ea:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80073ee:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80073f6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	68fa      	ldr	r2, [r7, #12]
 80073fe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007400:	683b      	ldr	r3, [r7, #0]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007408:	d03e      	beq.n	8007488 <HAL_TIM_ConfigClockSource+0xd4>
 800740a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800740e:	f200 8087 	bhi.w	8007520 <HAL_TIM_ConfigClockSource+0x16c>
 8007412:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007416:	f000 8085 	beq.w	8007524 <HAL_TIM_ConfigClockSource+0x170>
 800741a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800741e:	d87f      	bhi.n	8007520 <HAL_TIM_ConfigClockSource+0x16c>
 8007420:	2b70      	cmp	r3, #112	; 0x70
 8007422:	d01a      	beq.n	800745a <HAL_TIM_ConfigClockSource+0xa6>
 8007424:	2b70      	cmp	r3, #112	; 0x70
 8007426:	d87b      	bhi.n	8007520 <HAL_TIM_ConfigClockSource+0x16c>
 8007428:	2b60      	cmp	r3, #96	; 0x60
 800742a:	d050      	beq.n	80074ce <HAL_TIM_ConfigClockSource+0x11a>
 800742c:	2b60      	cmp	r3, #96	; 0x60
 800742e:	d877      	bhi.n	8007520 <HAL_TIM_ConfigClockSource+0x16c>
 8007430:	2b50      	cmp	r3, #80	; 0x50
 8007432:	d03c      	beq.n	80074ae <HAL_TIM_ConfigClockSource+0xfa>
 8007434:	2b50      	cmp	r3, #80	; 0x50
 8007436:	d873      	bhi.n	8007520 <HAL_TIM_ConfigClockSource+0x16c>
 8007438:	2b40      	cmp	r3, #64	; 0x40
 800743a:	d058      	beq.n	80074ee <HAL_TIM_ConfigClockSource+0x13a>
 800743c:	2b40      	cmp	r3, #64	; 0x40
 800743e:	d86f      	bhi.n	8007520 <HAL_TIM_ConfigClockSource+0x16c>
 8007440:	2b30      	cmp	r3, #48	; 0x30
 8007442:	d064      	beq.n	800750e <HAL_TIM_ConfigClockSource+0x15a>
 8007444:	2b30      	cmp	r3, #48	; 0x30
 8007446:	d86b      	bhi.n	8007520 <HAL_TIM_ConfigClockSource+0x16c>
 8007448:	2b20      	cmp	r3, #32
 800744a:	d060      	beq.n	800750e <HAL_TIM_ConfigClockSource+0x15a>
 800744c:	2b20      	cmp	r3, #32
 800744e:	d867      	bhi.n	8007520 <HAL_TIM_ConfigClockSource+0x16c>
 8007450:	2b00      	cmp	r3, #0
 8007452:	d05c      	beq.n	800750e <HAL_TIM_ConfigClockSource+0x15a>
 8007454:	2b10      	cmp	r3, #16
 8007456:	d05a      	beq.n	800750e <HAL_TIM_ConfigClockSource+0x15a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8007458:	e062      	b.n	8007520 <HAL_TIM_ConfigClockSource+0x16c>
      TIM_ETR_SetConfig(htim->Instance,
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	6818      	ldr	r0, [r3, #0]
 800745e:	683b      	ldr	r3, [r7, #0]
 8007460:	6899      	ldr	r1, [r3, #8]
 8007462:	683b      	ldr	r3, [r7, #0]
 8007464:	685a      	ldr	r2, [r3, #4]
 8007466:	683b      	ldr	r3, [r7, #0]
 8007468:	68db      	ldr	r3, [r3, #12]
 800746a:	f000 fc7b 	bl	8007d64 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	689b      	ldr	r3, [r3, #8]
 8007474:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800747c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	68fa      	ldr	r2, [r7, #12]
 8007484:	609a      	str	r2, [r3, #8]
      break;
 8007486:	e04e      	b.n	8007526 <HAL_TIM_ConfigClockSource+0x172>
      TIM_ETR_SetConfig(htim->Instance,
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	6818      	ldr	r0, [r3, #0]
 800748c:	683b      	ldr	r3, [r7, #0]
 800748e:	6899      	ldr	r1, [r3, #8]
 8007490:	683b      	ldr	r3, [r7, #0]
 8007492:	685a      	ldr	r2, [r3, #4]
 8007494:	683b      	ldr	r3, [r7, #0]
 8007496:	68db      	ldr	r3, [r3, #12]
 8007498:	f000 fc64 	bl	8007d64 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	689a      	ldr	r2, [r3, #8]
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80074aa:	609a      	str	r2, [r3, #8]
      break;
 80074ac:	e03b      	b.n	8007526 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	6818      	ldr	r0, [r3, #0]
 80074b2:	683b      	ldr	r3, [r7, #0]
 80074b4:	6859      	ldr	r1, [r3, #4]
 80074b6:	683b      	ldr	r3, [r7, #0]
 80074b8:	68db      	ldr	r3, [r3, #12]
 80074ba:	461a      	mov	r2, r3
 80074bc:	f000 fbd8 	bl	8007c70 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	2150      	movs	r1, #80	; 0x50
 80074c6:	4618      	mov	r0, r3
 80074c8:	f000 fc31 	bl	8007d2e <TIM_ITRx_SetConfig>
      break;
 80074cc:	e02b      	b.n	8007526 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	6818      	ldr	r0, [r3, #0]
 80074d2:	683b      	ldr	r3, [r7, #0]
 80074d4:	6859      	ldr	r1, [r3, #4]
 80074d6:	683b      	ldr	r3, [r7, #0]
 80074d8:	68db      	ldr	r3, [r3, #12]
 80074da:	461a      	mov	r2, r3
 80074dc:	f000 fbf7 	bl	8007cce <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	2160      	movs	r1, #96	; 0x60
 80074e6:	4618      	mov	r0, r3
 80074e8:	f000 fc21 	bl	8007d2e <TIM_ITRx_SetConfig>
      break;
 80074ec:	e01b      	b.n	8007526 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	6818      	ldr	r0, [r3, #0]
 80074f2:	683b      	ldr	r3, [r7, #0]
 80074f4:	6859      	ldr	r1, [r3, #4]
 80074f6:	683b      	ldr	r3, [r7, #0]
 80074f8:	68db      	ldr	r3, [r3, #12]
 80074fa:	461a      	mov	r2, r3
 80074fc:	f000 fbb8 	bl	8007c70 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	2140      	movs	r1, #64	; 0x40
 8007506:	4618      	mov	r0, r3
 8007508:	f000 fc11 	bl	8007d2e <TIM_ITRx_SetConfig>
      break;
 800750c:	e00b      	b.n	8007526 <HAL_TIM_ConfigClockSource+0x172>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681a      	ldr	r2, [r3, #0]
 8007512:	683b      	ldr	r3, [r7, #0]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	4619      	mov	r1, r3
 8007518:	4610      	mov	r0, r2
 800751a:	f000 fc08 	bl	8007d2e <TIM_ITRx_SetConfig>
      break;
 800751e:	e002      	b.n	8007526 <HAL_TIM_ConfigClockSource+0x172>
      break;
 8007520:	bf00      	nop
 8007522:	e000      	b.n	8007526 <HAL_TIM_ConfigClockSource+0x172>
      break;
 8007524:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	2201      	movs	r2, #1
 800752a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	2200      	movs	r2, #0
 8007532:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007536:	2300      	movs	r3, #0
}
 8007538:	4618      	mov	r0, r3
 800753a:	3710      	adds	r7, #16
 800753c:	46bd      	mov	sp, r7
 800753e:	bd80      	pop	{r7, pc}

08007540 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007540:	b480      	push	{r7}
 8007542:	b083      	sub	sp, #12
 8007544:	af00      	add	r7, sp, #0
 8007546:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007548:	bf00      	nop
 800754a:	370c      	adds	r7, #12
 800754c:	46bd      	mov	sp, r7
 800754e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007552:	4770      	bx	lr

08007554 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007554:	b480      	push	{r7}
 8007556:	b083      	sub	sp, #12
 8007558:	af00      	add	r7, sp, #0
 800755a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800755c:	bf00      	nop
 800755e:	370c      	adds	r7, #12
 8007560:	46bd      	mov	sp, r7
 8007562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007566:	4770      	bx	lr

08007568 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007568:	b480      	push	{r7}
 800756a:	b083      	sub	sp, #12
 800756c:	af00      	add	r7, sp, #0
 800756e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007570:	bf00      	nop
 8007572:	370c      	adds	r7, #12
 8007574:	46bd      	mov	sp, r7
 8007576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757a:	4770      	bx	lr

0800757c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800757c:	b480      	push	{r7}
 800757e:	b083      	sub	sp, #12
 8007580:	af00      	add	r7, sp, #0
 8007582:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007584:	bf00      	nop
 8007586:	370c      	adds	r7, #12
 8007588:	46bd      	mov	sp, r7
 800758a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758e:	4770      	bx	lr

08007590 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007590:	b480      	push	{r7}
 8007592:	b085      	sub	sp, #20
 8007594:	af00      	add	r7, sp, #0
 8007596:	6078      	str	r0, [r7, #4]
 8007598:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	4a40      	ldr	r2, [pc, #256]	; (80076a4 <TIM_Base_SetConfig+0x114>)
 80075a4:	4293      	cmp	r3, r2
 80075a6:	d013      	beq.n	80075d0 <TIM_Base_SetConfig+0x40>
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80075ae:	d00f      	beq.n	80075d0 <TIM_Base_SetConfig+0x40>
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	4a3d      	ldr	r2, [pc, #244]	; (80076a8 <TIM_Base_SetConfig+0x118>)
 80075b4:	4293      	cmp	r3, r2
 80075b6:	d00b      	beq.n	80075d0 <TIM_Base_SetConfig+0x40>
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	4a3c      	ldr	r2, [pc, #240]	; (80076ac <TIM_Base_SetConfig+0x11c>)
 80075bc:	4293      	cmp	r3, r2
 80075be:	d007      	beq.n	80075d0 <TIM_Base_SetConfig+0x40>
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	4a3b      	ldr	r2, [pc, #236]	; (80076b0 <TIM_Base_SetConfig+0x120>)
 80075c4:	4293      	cmp	r3, r2
 80075c6:	d003      	beq.n	80075d0 <TIM_Base_SetConfig+0x40>
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	4a3a      	ldr	r2, [pc, #232]	; (80076b4 <TIM_Base_SetConfig+0x124>)
 80075cc:	4293      	cmp	r3, r2
 80075ce:	d108      	bne.n	80075e2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80075d8:	683b      	ldr	r3, [r7, #0]
 80075da:	685b      	ldr	r3, [r3, #4]
 80075dc:	68fa      	ldr	r2, [r7, #12]
 80075de:	4313      	orrs	r3, r2
 80075e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	4a2f      	ldr	r2, [pc, #188]	; (80076a4 <TIM_Base_SetConfig+0x114>)
 80075e6:	4293      	cmp	r3, r2
 80075e8:	d01f      	beq.n	800762a <TIM_Base_SetConfig+0x9a>
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80075f0:	d01b      	beq.n	800762a <TIM_Base_SetConfig+0x9a>
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	4a2c      	ldr	r2, [pc, #176]	; (80076a8 <TIM_Base_SetConfig+0x118>)
 80075f6:	4293      	cmp	r3, r2
 80075f8:	d017      	beq.n	800762a <TIM_Base_SetConfig+0x9a>
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	4a2b      	ldr	r2, [pc, #172]	; (80076ac <TIM_Base_SetConfig+0x11c>)
 80075fe:	4293      	cmp	r3, r2
 8007600:	d013      	beq.n	800762a <TIM_Base_SetConfig+0x9a>
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	4a2a      	ldr	r2, [pc, #168]	; (80076b0 <TIM_Base_SetConfig+0x120>)
 8007606:	4293      	cmp	r3, r2
 8007608:	d00f      	beq.n	800762a <TIM_Base_SetConfig+0x9a>
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	4a29      	ldr	r2, [pc, #164]	; (80076b4 <TIM_Base_SetConfig+0x124>)
 800760e:	4293      	cmp	r3, r2
 8007610:	d00b      	beq.n	800762a <TIM_Base_SetConfig+0x9a>
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	4a28      	ldr	r2, [pc, #160]	; (80076b8 <TIM_Base_SetConfig+0x128>)
 8007616:	4293      	cmp	r3, r2
 8007618:	d007      	beq.n	800762a <TIM_Base_SetConfig+0x9a>
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	4a27      	ldr	r2, [pc, #156]	; (80076bc <TIM_Base_SetConfig+0x12c>)
 800761e:	4293      	cmp	r3, r2
 8007620:	d003      	beq.n	800762a <TIM_Base_SetConfig+0x9a>
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	4a26      	ldr	r2, [pc, #152]	; (80076c0 <TIM_Base_SetConfig+0x130>)
 8007626:	4293      	cmp	r3, r2
 8007628:	d108      	bne.n	800763c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007630:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007632:	683b      	ldr	r3, [r7, #0]
 8007634:	68db      	ldr	r3, [r3, #12]
 8007636:	68fa      	ldr	r2, [r7, #12]
 8007638:	4313      	orrs	r3, r2
 800763a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007642:	683b      	ldr	r3, [r7, #0]
 8007644:	695b      	ldr	r3, [r3, #20]
 8007646:	4313      	orrs	r3, r2
 8007648:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	68fa      	ldr	r2, [r7, #12]
 800764e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007650:	683b      	ldr	r3, [r7, #0]
 8007652:	689a      	ldr	r2, [r3, #8]
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007658:	683b      	ldr	r3, [r7, #0]
 800765a:	681a      	ldr	r2, [r3, #0]
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	4a10      	ldr	r2, [pc, #64]	; (80076a4 <TIM_Base_SetConfig+0x114>)
 8007664:	4293      	cmp	r3, r2
 8007666:	d00f      	beq.n	8007688 <TIM_Base_SetConfig+0xf8>
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	4a12      	ldr	r2, [pc, #72]	; (80076b4 <TIM_Base_SetConfig+0x124>)
 800766c:	4293      	cmp	r3, r2
 800766e:	d00b      	beq.n	8007688 <TIM_Base_SetConfig+0xf8>
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	4a11      	ldr	r2, [pc, #68]	; (80076b8 <TIM_Base_SetConfig+0x128>)
 8007674:	4293      	cmp	r3, r2
 8007676:	d007      	beq.n	8007688 <TIM_Base_SetConfig+0xf8>
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	4a10      	ldr	r2, [pc, #64]	; (80076bc <TIM_Base_SetConfig+0x12c>)
 800767c:	4293      	cmp	r3, r2
 800767e:	d003      	beq.n	8007688 <TIM_Base_SetConfig+0xf8>
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	4a0f      	ldr	r2, [pc, #60]	; (80076c0 <TIM_Base_SetConfig+0x130>)
 8007684:	4293      	cmp	r3, r2
 8007686:	d103      	bne.n	8007690 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007688:	683b      	ldr	r3, [r7, #0]
 800768a:	691a      	ldr	r2, [r3, #16]
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	2201      	movs	r2, #1
 8007694:	615a      	str	r2, [r3, #20]
}
 8007696:	bf00      	nop
 8007698:	3714      	adds	r7, #20
 800769a:	46bd      	mov	sp, r7
 800769c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a0:	4770      	bx	lr
 80076a2:	bf00      	nop
 80076a4:	40012c00 	.word	0x40012c00
 80076a8:	40000400 	.word	0x40000400
 80076ac:	40000800 	.word	0x40000800
 80076b0:	40000c00 	.word	0x40000c00
 80076b4:	40013400 	.word	0x40013400
 80076b8:	40014000 	.word	0x40014000
 80076bc:	40014400 	.word	0x40014400
 80076c0:	40014800 	.word	0x40014800

080076c4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80076c4:	b480      	push	{r7}
 80076c6:	b087      	sub	sp, #28
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
 80076cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	6a1b      	ldr	r3, [r3, #32]
 80076d2:	f023 0201 	bic.w	r2, r3, #1
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	6a1b      	ldr	r3, [r3, #32]
 80076de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	685b      	ldr	r3, [r3, #4]
 80076e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	699b      	ldr	r3, [r3, #24]
 80076ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80076f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	f023 0303 	bic.w	r3, r3, #3
 80076fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007700:	683b      	ldr	r3, [r7, #0]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	68fa      	ldr	r2, [r7, #12]
 8007706:	4313      	orrs	r3, r2
 8007708:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800770a:	697b      	ldr	r3, [r7, #20]
 800770c:	f023 0302 	bic.w	r3, r3, #2
 8007710:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007712:	683b      	ldr	r3, [r7, #0]
 8007714:	689b      	ldr	r3, [r3, #8]
 8007716:	697a      	ldr	r2, [r7, #20]
 8007718:	4313      	orrs	r3, r2
 800771a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	4a2c      	ldr	r2, [pc, #176]	; (80077d0 <TIM_OC1_SetConfig+0x10c>)
 8007720:	4293      	cmp	r3, r2
 8007722:	d00f      	beq.n	8007744 <TIM_OC1_SetConfig+0x80>
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	4a2b      	ldr	r2, [pc, #172]	; (80077d4 <TIM_OC1_SetConfig+0x110>)
 8007728:	4293      	cmp	r3, r2
 800772a:	d00b      	beq.n	8007744 <TIM_OC1_SetConfig+0x80>
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	4a2a      	ldr	r2, [pc, #168]	; (80077d8 <TIM_OC1_SetConfig+0x114>)
 8007730:	4293      	cmp	r3, r2
 8007732:	d007      	beq.n	8007744 <TIM_OC1_SetConfig+0x80>
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	4a29      	ldr	r2, [pc, #164]	; (80077dc <TIM_OC1_SetConfig+0x118>)
 8007738:	4293      	cmp	r3, r2
 800773a:	d003      	beq.n	8007744 <TIM_OC1_SetConfig+0x80>
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	4a28      	ldr	r2, [pc, #160]	; (80077e0 <TIM_OC1_SetConfig+0x11c>)
 8007740:	4293      	cmp	r3, r2
 8007742:	d10c      	bne.n	800775e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007744:	697b      	ldr	r3, [r7, #20]
 8007746:	f023 0308 	bic.w	r3, r3, #8
 800774a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800774c:	683b      	ldr	r3, [r7, #0]
 800774e:	68db      	ldr	r3, [r3, #12]
 8007750:	697a      	ldr	r2, [r7, #20]
 8007752:	4313      	orrs	r3, r2
 8007754:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007756:	697b      	ldr	r3, [r7, #20]
 8007758:	f023 0304 	bic.w	r3, r3, #4
 800775c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	4a1b      	ldr	r2, [pc, #108]	; (80077d0 <TIM_OC1_SetConfig+0x10c>)
 8007762:	4293      	cmp	r3, r2
 8007764:	d00f      	beq.n	8007786 <TIM_OC1_SetConfig+0xc2>
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	4a1a      	ldr	r2, [pc, #104]	; (80077d4 <TIM_OC1_SetConfig+0x110>)
 800776a:	4293      	cmp	r3, r2
 800776c:	d00b      	beq.n	8007786 <TIM_OC1_SetConfig+0xc2>
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	4a19      	ldr	r2, [pc, #100]	; (80077d8 <TIM_OC1_SetConfig+0x114>)
 8007772:	4293      	cmp	r3, r2
 8007774:	d007      	beq.n	8007786 <TIM_OC1_SetConfig+0xc2>
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	4a18      	ldr	r2, [pc, #96]	; (80077dc <TIM_OC1_SetConfig+0x118>)
 800777a:	4293      	cmp	r3, r2
 800777c:	d003      	beq.n	8007786 <TIM_OC1_SetConfig+0xc2>
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	4a17      	ldr	r2, [pc, #92]	; (80077e0 <TIM_OC1_SetConfig+0x11c>)
 8007782:	4293      	cmp	r3, r2
 8007784:	d111      	bne.n	80077aa <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007786:	693b      	ldr	r3, [r7, #16]
 8007788:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800778c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800778e:	693b      	ldr	r3, [r7, #16]
 8007790:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007794:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007796:	683b      	ldr	r3, [r7, #0]
 8007798:	695b      	ldr	r3, [r3, #20]
 800779a:	693a      	ldr	r2, [r7, #16]
 800779c:	4313      	orrs	r3, r2
 800779e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80077a0:	683b      	ldr	r3, [r7, #0]
 80077a2:	699b      	ldr	r3, [r3, #24]
 80077a4:	693a      	ldr	r2, [r7, #16]
 80077a6:	4313      	orrs	r3, r2
 80077a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	693a      	ldr	r2, [r7, #16]
 80077ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	68fa      	ldr	r2, [r7, #12]
 80077b4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80077b6:	683b      	ldr	r3, [r7, #0]
 80077b8:	685a      	ldr	r2, [r3, #4]
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	697a      	ldr	r2, [r7, #20]
 80077c2:	621a      	str	r2, [r3, #32]
}
 80077c4:	bf00      	nop
 80077c6:	371c      	adds	r7, #28
 80077c8:	46bd      	mov	sp, r7
 80077ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ce:	4770      	bx	lr
 80077d0:	40012c00 	.word	0x40012c00
 80077d4:	40013400 	.word	0x40013400
 80077d8:	40014000 	.word	0x40014000
 80077dc:	40014400 	.word	0x40014400
 80077e0:	40014800 	.word	0x40014800

080077e4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80077e4:	b480      	push	{r7}
 80077e6:	b087      	sub	sp, #28
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
 80077ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	6a1b      	ldr	r3, [r3, #32]
 80077f2:	f023 0210 	bic.w	r2, r3, #16
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	6a1b      	ldr	r3, [r3, #32]
 80077fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	685b      	ldr	r3, [r3, #4]
 8007804:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	699b      	ldr	r3, [r3, #24]
 800780a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007812:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007816:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800781e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007820:	683b      	ldr	r3, [r7, #0]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	021b      	lsls	r3, r3, #8
 8007826:	68fa      	ldr	r2, [r7, #12]
 8007828:	4313      	orrs	r3, r2
 800782a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800782c:	697b      	ldr	r3, [r7, #20]
 800782e:	f023 0320 	bic.w	r3, r3, #32
 8007832:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007834:	683b      	ldr	r3, [r7, #0]
 8007836:	689b      	ldr	r3, [r3, #8]
 8007838:	011b      	lsls	r3, r3, #4
 800783a:	697a      	ldr	r2, [r7, #20]
 800783c:	4313      	orrs	r3, r2
 800783e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	4a28      	ldr	r2, [pc, #160]	; (80078e4 <TIM_OC2_SetConfig+0x100>)
 8007844:	4293      	cmp	r3, r2
 8007846:	d003      	beq.n	8007850 <TIM_OC2_SetConfig+0x6c>
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	4a27      	ldr	r2, [pc, #156]	; (80078e8 <TIM_OC2_SetConfig+0x104>)
 800784c:	4293      	cmp	r3, r2
 800784e:	d10d      	bne.n	800786c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007850:	697b      	ldr	r3, [r7, #20]
 8007852:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007856:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007858:	683b      	ldr	r3, [r7, #0]
 800785a:	68db      	ldr	r3, [r3, #12]
 800785c:	011b      	lsls	r3, r3, #4
 800785e:	697a      	ldr	r2, [r7, #20]
 8007860:	4313      	orrs	r3, r2
 8007862:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007864:	697b      	ldr	r3, [r7, #20]
 8007866:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800786a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	4a1d      	ldr	r2, [pc, #116]	; (80078e4 <TIM_OC2_SetConfig+0x100>)
 8007870:	4293      	cmp	r3, r2
 8007872:	d00f      	beq.n	8007894 <TIM_OC2_SetConfig+0xb0>
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	4a1c      	ldr	r2, [pc, #112]	; (80078e8 <TIM_OC2_SetConfig+0x104>)
 8007878:	4293      	cmp	r3, r2
 800787a:	d00b      	beq.n	8007894 <TIM_OC2_SetConfig+0xb0>
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	4a1b      	ldr	r2, [pc, #108]	; (80078ec <TIM_OC2_SetConfig+0x108>)
 8007880:	4293      	cmp	r3, r2
 8007882:	d007      	beq.n	8007894 <TIM_OC2_SetConfig+0xb0>
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	4a1a      	ldr	r2, [pc, #104]	; (80078f0 <TIM_OC2_SetConfig+0x10c>)
 8007888:	4293      	cmp	r3, r2
 800788a:	d003      	beq.n	8007894 <TIM_OC2_SetConfig+0xb0>
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	4a19      	ldr	r2, [pc, #100]	; (80078f4 <TIM_OC2_SetConfig+0x110>)
 8007890:	4293      	cmp	r3, r2
 8007892:	d113      	bne.n	80078bc <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007894:	693b      	ldr	r3, [r7, #16]
 8007896:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800789a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800789c:	693b      	ldr	r3, [r7, #16]
 800789e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80078a2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80078a4:	683b      	ldr	r3, [r7, #0]
 80078a6:	695b      	ldr	r3, [r3, #20]
 80078a8:	009b      	lsls	r3, r3, #2
 80078aa:	693a      	ldr	r2, [r7, #16]
 80078ac:	4313      	orrs	r3, r2
 80078ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80078b0:	683b      	ldr	r3, [r7, #0]
 80078b2:	699b      	ldr	r3, [r3, #24]
 80078b4:	009b      	lsls	r3, r3, #2
 80078b6:	693a      	ldr	r2, [r7, #16]
 80078b8:	4313      	orrs	r3, r2
 80078ba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	693a      	ldr	r2, [r7, #16]
 80078c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	68fa      	ldr	r2, [r7, #12]
 80078c6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80078c8:	683b      	ldr	r3, [r7, #0]
 80078ca:	685a      	ldr	r2, [r3, #4]
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	697a      	ldr	r2, [r7, #20]
 80078d4:	621a      	str	r2, [r3, #32]
}
 80078d6:	bf00      	nop
 80078d8:	371c      	adds	r7, #28
 80078da:	46bd      	mov	sp, r7
 80078dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e0:	4770      	bx	lr
 80078e2:	bf00      	nop
 80078e4:	40012c00 	.word	0x40012c00
 80078e8:	40013400 	.word	0x40013400
 80078ec:	40014000 	.word	0x40014000
 80078f0:	40014400 	.word	0x40014400
 80078f4:	40014800 	.word	0x40014800

080078f8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80078f8:	b480      	push	{r7}
 80078fa:	b087      	sub	sp, #28
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	6078      	str	r0, [r7, #4]
 8007900:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	6a1b      	ldr	r3, [r3, #32]
 8007906:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	6a1b      	ldr	r3, [r3, #32]
 8007912:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	685b      	ldr	r3, [r3, #4]
 8007918:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	69db      	ldr	r3, [r3, #28]
 800791e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007926:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800792a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	f023 0303 	bic.w	r3, r3, #3
 8007932:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007934:	683b      	ldr	r3, [r7, #0]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	68fa      	ldr	r2, [r7, #12]
 800793a:	4313      	orrs	r3, r2
 800793c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800793e:	697b      	ldr	r3, [r7, #20]
 8007940:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007944:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007946:	683b      	ldr	r3, [r7, #0]
 8007948:	689b      	ldr	r3, [r3, #8]
 800794a:	021b      	lsls	r3, r3, #8
 800794c:	697a      	ldr	r2, [r7, #20]
 800794e:	4313      	orrs	r3, r2
 8007950:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	4a27      	ldr	r2, [pc, #156]	; (80079f4 <TIM_OC3_SetConfig+0xfc>)
 8007956:	4293      	cmp	r3, r2
 8007958:	d003      	beq.n	8007962 <TIM_OC3_SetConfig+0x6a>
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	4a26      	ldr	r2, [pc, #152]	; (80079f8 <TIM_OC3_SetConfig+0x100>)
 800795e:	4293      	cmp	r3, r2
 8007960:	d10d      	bne.n	800797e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007962:	697b      	ldr	r3, [r7, #20]
 8007964:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007968:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800796a:	683b      	ldr	r3, [r7, #0]
 800796c:	68db      	ldr	r3, [r3, #12]
 800796e:	021b      	lsls	r3, r3, #8
 8007970:	697a      	ldr	r2, [r7, #20]
 8007972:	4313      	orrs	r3, r2
 8007974:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007976:	697b      	ldr	r3, [r7, #20]
 8007978:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800797c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	4a1c      	ldr	r2, [pc, #112]	; (80079f4 <TIM_OC3_SetConfig+0xfc>)
 8007982:	4293      	cmp	r3, r2
 8007984:	d00f      	beq.n	80079a6 <TIM_OC3_SetConfig+0xae>
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	4a1b      	ldr	r2, [pc, #108]	; (80079f8 <TIM_OC3_SetConfig+0x100>)
 800798a:	4293      	cmp	r3, r2
 800798c:	d00b      	beq.n	80079a6 <TIM_OC3_SetConfig+0xae>
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	4a1a      	ldr	r2, [pc, #104]	; (80079fc <TIM_OC3_SetConfig+0x104>)
 8007992:	4293      	cmp	r3, r2
 8007994:	d007      	beq.n	80079a6 <TIM_OC3_SetConfig+0xae>
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	4a19      	ldr	r2, [pc, #100]	; (8007a00 <TIM_OC3_SetConfig+0x108>)
 800799a:	4293      	cmp	r3, r2
 800799c:	d003      	beq.n	80079a6 <TIM_OC3_SetConfig+0xae>
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	4a18      	ldr	r2, [pc, #96]	; (8007a04 <TIM_OC3_SetConfig+0x10c>)
 80079a2:	4293      	cmp	r3, r2
 80079a4:	d113      	bne.n	80079ce <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80079a6:	693b      	ldr	r3, [r7, #16]
 80079a8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80079ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80079ae:	693b      	ldr	r3, [r7, #16]
 80079b0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80079b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80079b6:	683b      	ldr	r3, [r7, #0]
 80079b8:	695b      	ldr	r3, [r3, #20]
 80079ba:	011b      	lsls	r3, r3, #4
 80079bc:	693a      	ldr	r2, [r7, #16]
 80079be:	4313      	orrs	r3, r2
 80079c0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80079c2:	683b      	ldr	r3, [r7, #0]
 80079c4:	699b      	ldr	r3, [r3, #24]
 80079c6:	011b      	lsls	r3, r3, #4
 80079c8:	693a      	ldr	r2, [r7, #16]
 80079ca:	4313      	orrs	r3, r2
 80079cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	693a      	ldr	r2, [r7, #16]
 80079d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	68fa      	ldr	r2, [r7, #12]
 80079d8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80079da:	683b      	ldr	r3, [r7, #0]
 80079dc:	685a      	ldr	r2, [r3, #4]
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	697a      	ldr	r2, [r7, #20]
 80079e6:	621a      	str	r2, [r3, #32]
}
 80079e8:	bf00      	nop
 80079ea:	371c      	adds	r7, #28
 80079ec:	46bd      	mov	sp, r7
 80079ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f2:	4770      	bx	lr
 80079f4:	40012c00 	.word	0x40012c00
 80079f8:	40013400 	.word	0x40013400
 80079fc:	40014000 	.word	0x40014000
 8007a00:	40014400 	.word	0x40014400
 8007a04:	40014800 	.word	0x40014800

08007a08 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007a08:	b480      	push	{r7}
 8007a0a:	b087      	sub	sp, #28
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	6078      	str	r0, [r7, #4]
 8007a10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	6a1b      	ldr	r3, [r3, #32]
 8007a16:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	6a1b      	ldr	r3, [r3, #32]
 8007a22:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	685b      	ldr	r3, [r3, #4]
 8007a28:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	69db      	ldr	r3, [r3, #28]
 8007a2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007a36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007a42:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007a44:	683b      	ldr	r3, [r7, #0]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	021b      	lsls	r3, r3, #8
 8007a4a:	68fa      	ldr	r2, [r7, #12]
 8007a4c:	4313      	orrs	r3, r2
 8007a4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007a50:	693b      	ldr	r3, [r7, #16]
 8007a52:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007a56:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007a58:	683b      	ldr	r3, [r7, #0]
 8007a5a:	689b      	ldr	r3, [r3, #8]
 8007a5c:	031b      	lsls	r3, r3, #12
 8007a5e:	693a      	ldr	r2, [r7, #16]
 8007a60:	4313      	orrs	r3, r2
 8007a62:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	4a18      	ldr	r2, [pc, #96]	; (8007ac8 <TIM_OC4_SetConfig+0xc0>)
 8007a68:	4293      	cmp	r3, r2
 8007a6a:	d00f      	beq.n	8007a8c <TIM_OC4_SetConfig+0x84>
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	4a17      	ldr	r2, [pc, #92]	; (8007acc <TIM_OC4_SetConfig+0xc4>)
 8007a70:	4293      	cmp	r3, r2
 8007a72:	d00b      	beq.n	8007a8c <TIM_OC4_SetConfig+0x84>
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	4a16      	ldr	r2, [pc, #88]	; (8007ad0 <TIM_OC4_SetConfig+0xc8>)
 8007a78:	4293      	cmp	r3, r2
 8007a7a:	d007      	beq.n	8007a8c <TIM_OC4_SetConfig+0x84>
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	4a15      	ldr	r2, [pc, #84]	; (8007ad4 <TIM_OC4_SetConfig+0xcc>)
 8007a80:	4293      	cmp	r3, r2
 8007a82:	d003      	beq.n	8007a8c <TIM_OC4_SetConfig+0x84>
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	4a14      	ldr	r2, [pc, #80]	; (8007ad8 <TIM_OC4_SetConfig+0xd0>)
 8007a88:	4293      	cmp	r3, r2
 8007a8a:	d109      	bne.n	8007aa0 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007a8c:	697b      	ldr	r3, [r7, #20]
 8007a8e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007a92:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007a94:	683b      	ldr	r3, [r7, #0]
 8007a96:	695b      	ldr	r3, [r3, #20]
 8007a98:	019b      	lsls	r3, r3, #6
 8007a9a:	697a      	ldr	r2, [r7, #20]
 8007a9c:	4313      	orrs	r3, r2
 8007a9e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	697a      	ldr	r2, [r7, #20]
 8007aa4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	68fa      	ldr	r2, [r7, #12]
 8007aaa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007aac:	683b      	ldr	r3, [r7, #0]
 8007aae:	685a      	ldr	r2, [r3, #4]
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	693a      	ldr	r2, [r7, #16]
 8007ab8:	621a      	str	r2, [r3, #32]
}
 8007aba:	bf00      	nop
 8007abc:	371c      	adds	r7, #28
 8007abe:	46bd      	mov	sp, r7
 8007ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac4:	4770      	bx	lr
 8007ac6:	bf00      	nop
 8007ac8:	40012c00 	.word	0x40012c00
 8007acc:	40013400 	.word	0x40013400
 8007ad0:	40014000 	.word	0x40014000
 8007ad4:	40014400 	.word	0x40014400
 8007ad8:	40014800 	.word	0x40014800

08007adc <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007adc:	b480      	push	{r7}
 8007ade:	b087      	sub	sp, #28
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	6078      	str	r0, [r7, #4]
 8007ae4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	6a1b      	ldr	r3, [r3, #32]
 8007aea:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	6a1b      	ldr	r3, [r3, #32]
 8007af6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	685b      	ldr	r3, [r3, #4]
 8007afc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007b0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007b10:	683b      	ldr	r3, [r7, #0]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	68fa      	ldr	r2, [r7, #12]
 8007b16:	4313      	orrs	r3, r2
 8007b18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007b1a:	693b      	ldr	r3, [r7, #16]
 8007b1c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007b20:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007b22:	683b      	ldr	r3, [r7, #0]
 8007b24:	689b      	ldr	r3, [r3, #8]
 8007b26:	041b      	lsls	r3, r3, #16
 8007b28:	693a      	ldr	r2, [r7, #16]
 8007b2a:	4313      	orrs	r3, r2
 8007b2c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	4a17      	ldr	r2, [pc, #92]	; (8007b90 <TIM_OC5_SetConfig+0xb4>)
 8007b32:	4293      	cmp	r3, r2
 8007b34:	d00f      	beq.n	8007b56 <TIM_OC5_SetConfig+0x7a>
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	4a16      	ldr	r2, [pc, #88]	; (8007b94 <TIM_OC5_SetConfig+0xb8>)
 8007b3a:	4293      	cmp	r3, r2
 8007b3c:	d00b      	beq.n	8007b56 <TIM_OC5_SetConfig+0x7a>
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	4a15      	ldr	r2, [pc, #84]	; (8007b98 <TIM_OC5_SetConfig+0xbc>)
 8007b42:	4293      	cmp	r3, r2
 8007b44:	d007      	beq.n	8007b56 <TIM_OC5_SetConfig+0x7a>
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	4a14      	ldr	r2, [pc, #80]	; (8007b9c <TIM_OC5_SetConfig+0xc0>)
 8007b4a:	4293      	cmp	r3, r2
 8007b4c:	d003      	beq.n	8007b56 <TIM_OC5_SetConfig+0x7a>
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	4a13      	ldr	r2, [pc, #76]	; (8007ba0 <TIM_OC5_SetConfig+0xc4>)
 8007b52:	4293      	cmp	r3, r2
 8007b54:	d109      	bne.n	8007b6a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007b56:	697b      	ldr	r3, [r7, #20]
 8007b58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007b5c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007b5e:	683b      	ldr	r3, [r7, #0]
 8007b60:	695b      	ldr	r3, [r3, #20]
 8007b62:	021b      	lsls	r3, r3, #8
 8007b64:	697a      	ldr	r2, [r7, #20]
 8007b66:	4313      	orrs	r3, r2
 8007b68:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	697a      	ldr	r2, [r7, #20]
 8007b6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	68fa      	ldr	r2, [r7, #12]
 8007b74:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007b76:	683b      	ldr	r3, [r7, #0]
 8007b78:	685a      	ldr	r2, [r3, #4]
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	693a      	ldr	r2, [r7, #16]
 8007b82:	621a      	str	r2, [r3, #32]
}
 8007b84:	bf00      	nop
 8007b86:	371c      	adds	r7, #28
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8e:	4770      	bx	lr
 8007b90:	40012c00 	.word	0x40012c00
 8007b94:	40013400 	.word	0x40013400
 8007b98:	40014000 	.word	0x40014000
 8007b9c:	40014400 	.word	0x40014400
 8007ba0:	40014800 	.word	0x40014800

08007ba4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007ba4:	b480      	push	{r7}
 8007ba6:	b087      	sub	sp, #28
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	6078      	str	r0, [r7, #4]
 8007bac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	6a1b      	ldr	r3, [r3, #32]
 8007bb2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	6a1b      	ldr	r3, [r3, #32]
 8007bbe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	685b      	ldr	r3, [r3, #4]
 8007bc4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007bd2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007bd6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007bd8:	683b      	ldr	r3, [r7, #0]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	021b      	lsls	r3, r3, #8
 8007bde:	68fa      	ldr	r2, [r7, #12]
 8007be0:	4313      	orrs	r3, r2
 8007be2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007be4:	693b      	ldr	r3, [r7, #16]
 8007be6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007bea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007bec:	683b      	ldr	r3, [r7, #0]
 8007bee:	689b      	ldr	r3, [r3, #8]
 8007bf0:	051b      	lsls	r3, r3, #20
 8007bf2:	693a      	ldr	r2, [r7, #16]
 8007bf4:	4313      	orrs	r3, r2
 8007bf6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	4a18      	ldr	r2, [pc, #96]	; (8007c5c <TIM_OC6_SetConfig+0xb8>)
 8007bfc:	4293      	cmp	r3, r2
 8007bfe:	d00f      	beq.n	8007c20 <TIM_OC6_SetConfig+0x7c>
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	4a17      	ldr	r2, [pc, #92]	; (8007c60 <TIM_OC6_SetConfig+0xbc>)
 8007c04:	4293      	cmp	r3, r2
 8007c06:	d00b      	beq.n	8007c20 <TIM_OC6_SetConfig+0x7c>
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	4a16      	ldr	r2, [pc, #88]	; (8007c64 <TIM_OC6_SetConfig+0xc0>)
 8007c0c:	4293      	cmp	r3, r2
 8007c0e:	d007      	beq.n	8007c20 <TIM_OC6_SetConfig+0x7c>
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	4a15      	ldr	r2, [pc, #84]	; (8007c68 <TIM_OC6_SetConfig+0xc4>)
 8007c14:	4293      	cmp	r3, r2
 8007c16:	d003      	beq.n	8007c20 <TIM_OC6_SetConfig+0x7c>
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	4a14      	ldr	r2, [pc, #80]	; (8007c6c <TIM_OC6_SetConfig+0xc8>)
 8007c1c:	4293      	cmp	r3, r2
 8007c1e:	d109      	bne.n	8007c34 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007c20:	697b      	ldr	r3, [r7, #20]
 8007c22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007c26:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007c28:	683b      	ldr	r3, [r7, #0]
 8007c2a:	695b      	ldr	r3, [r3, #20]
 8007c2c:	029b      	lsls	r3, r3, #10
 8007c2e:	697a      	ldr	r2, [r7, #20]
 8007c30:	4313      	orrs	r3, r2
 8007c32:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	697a      	ldr	r2, [r7, #20]
 8007c38:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	68fa      	ldr	r2, [r7, #12]
 8007c3e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007c40:	683b      	ldr	r3, [r7, #0]
 8007c42:	685a      	ldr	r2, [r3, #4]
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	693a      	ldr	r2, [r7, #16]
 8007c4c:	621a      	str	r2, [r3, #32]
}
 8007c4e:	bf00      	nop
 8007c50:	371c      	adds	r7, #28
 8007c52:	46bd      	mov	sp, r7
 8007c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c58:	4770      	bx	lr
 8007c5a:	bf00      	nop
 8007c5c:	40012c00 	.word	0x40012c00
 8007c60:	40013400 	.word	0x40013400
 8007c64:	40014000 	.word	0x40014000
 8007c68:	40014400 	.word	0x40014400
 8007c6c:	40014800 	.word	0x40014800

08007c70 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007c70:	b480      	push	{r7}
 8007c72:	b087      	sub	sp, #28
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	60f8      	str	r0, [r7, #12]
 8007c78:	60b9      	str	r1, [r7, #8]
 8007c7a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	6a1b      	ldr	r3, [r3, #32]
 8007c80:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	6a1b      	ldr	r3, [r3, #32]
 8007c86:	f023 0201 	bic.w	r2, r3, #1
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	699b      	ldr	r3, [r3, #24]
 8007c92:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007c94:	693b      	ldr	r3, [r7, #16]
 8007c96:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007c9a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	011b      	lsls	r3, r3, #4
 8007ca0:	693a      	ldr	r2, [r7, #16]
 8007ca2:	4313      	orrs	r3, r2
 8007ca4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007ca6:	697b      	ldr	r3, [r7, #20]
 8007ca8:	f023 030a 	bic.w	r3, r3, #10
 8007cac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007cae:	697a      	ldr	r2, [r7, #20]
 8007cb0:	68bb      	ldr	r3, [r7, #8]
 8007cb2:	4313      	orrs	r3, r2
 8007cb4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	693a      	ldr	r2, [r7, #16]
 8007cba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	697a      	ldr	r2, [r7, #20]
 8007cc0:	621a      	str	r2, [r3, #32]
}
 8007cc2:	bf00      	nop
 8007cc4:	371c      	adds	r7, #28
 8007cc6:	46bd      	mov	sp, r7
 8007cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ccc:	4770      	bx	lr

08007cce <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007cce:	b480      	push	{r7}
 8007cd0:	b087      	sub	sp, #28
 8007cd2:	af00      	add	r7, sp, #0
 8007cd4:	60f8      	str	r0, [r7, #12]
 8007cd6:	60b9      	str	r1, [r7, #8]
 8007cd8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	6a1b      	ldr	r3, [r3, #32]
 8007cde:	f023 0210 	bic.w	r2, r3, #16
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	699b      	ldr	r3, [r3, #24]
 8007cea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	6a1b      	ldr	r3, [r3, #32]
 8007cf0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007cf2:	697b      	ldr	r3, [r7, #20]
 8007cf4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007cf8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	031b      	lsls	r3, r3, #12
 8007cfe:	697a      	ldr	r2, [r7, #20]
 8007d00:	4313      	orrs	r3, r2
 8007d02:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007d04:	693b      	ldr	r3, [r7, #16]
 8007d06:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007d0a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007d0c:	68bb      	ldr	r3, [r7, #8]
 8007d0e:	011b      	lsls	r3, r3, #4
 8007d10:	693a      	ldr	r2, [r7, #16]
 8007d12:	4313      	orrs	r3, r2
 8007d14:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	697a      	ldr	r2, [r7, #20]
 8007d1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	693a      	ldr	r2, [r7, #16]
 8007d20:	621a      	str	r2, [r3, #32]
}
 8007d22:	bf00      	nop
 8007d24:	371c      	adds	r7, #28
 8007d26:	46bd      	mov	sp, r7
 8007d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2c:	4770      	bx	lr

08007d2e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007d2e:	b480      	push	{r7}
 8007d30:	b085      	sub	sp, #20
 8007d32:	af00      	add	r7, sp, #0
 8007d34:	6078      	str	r0, [r7, #4]
 8007d36:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	689b      	ldr	r3, [r3, #8]
 8007d3c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d44:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007d46:	683a      	ldr	r2, [r7, #0]
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	4313      	orrs	r3, r2
 8007d4c:	f043 0307 	orr.w	r3, r3, #7
 8007d50:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	68fa      	ldr	r2, [r7, #12]
 8007d56:	609a      	str	r2, [r3, #8]
}
 8007d58:	bf00      	nop
 8007d5a:	3714      	adds	r7, #20
 8007d5c:	46bd      	mov	sp, r7
 8007d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d62:	4770      	bx	lr

08007d64 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007d64:	b480      	push	{r7}
 8007d66:	b087      	sub	sp, #28
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	60f8      	str	r0, [r7, #12]
 8007d6c:	60b9      	str	r1, [r7, #8]
 8007d6e:	607a      	str	r2, [r7, #4]
 8007d70:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	689b      	ldr	r3, [r3, #8]
 8007d76:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007d78:	697b      	ldr	r3, [r7, #20]
 8007d7a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007d7e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007d80:	683b      	ldr	r3, [r7, #0]
 8007d82:	021a      	lsls	r2, r3, #8
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	431a      	orrs	r2, r3
 8007d88:	68bb      	ldr	r3, [r7, #8]
 8007d8a:	4313      	orrs	r3, r2
 8007d8c:	697a      	ldr	r2, [r7, #20]
 8007d8e:	4313      	orrs	r3, r2
 8007d90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	697a      	ldr	r2, [r7, #20]
 8007d96:	609a      	str	r2, [r3, #8]
}
 8007d98:	bf00      	nop
 8007d9a:	371c      	adds	r7, #28
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da2:	4770      	bx	lr

08007da4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007da4:	b480      	push	{r7}
 8007da6:	b087      	sub	sp, #28
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	60f8      	str	r0, [r7, #12]
 8007dac:	60b9      	str	r1, [r7, #8]
 8007dae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007db0:	68bb      	ldr	r3, [r7, #8]
 8007db2:	f003 031f 	and.w	r3, r3, #31
 8007db6:	2201      	movs	r2, #1
 8007db8:	fa02 f303 	lsl.w	r3, r2, r3
 8007dbc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	6a1a      	ldr	r2, [r3, #32]
 8007dc2:	697b      	ldr	r3, [r7, #20]
 8007dc4:	43db      	mvns	r3, r3
 8007dc6:	401a      	ands	r2, r3
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	6a1a      	ldr	r2, [r3, #32]
 8007dd0:	68bb      	ldr	r3, [r7, #8]
 8007dd2:	f003 031f 	and.w	r3, r3, #31
 8007dd6:	6879      	ldr	r1, [r7, #4]
 8007dd8:	fa01 f303 	lsl.w	r3, r1, r3
 8007ddc:	431a      	orrs	r2, r3
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	621a      	str	r2, [r3, #32]
}
 8007de2:	bf00      	nop
 8007de4:	371c      	adds	r7, #28
 8007de6:	46bd      	mov	sp, r7
 8007de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dec:	4770      	bx	lr
	...

08007df0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007df0:	b480      	push	{r7}
 8007df2:	b085      	sub	sp, #20
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	6078      	str	r0, [r7, #4]
 8007df8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007e00:	2b01      	cmp	r3, #1
 8007e02:	d101      	bne.n	8007e08 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007e04:	2302      	movs	r3, #2
 8007e06:	e068      	b.n	8007eda <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	2201      	movs	r2, #1
 8007e0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	2202      	movs	r2, #2
 8007e14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	685b      	ldr	r3, [r3, #4]
 8007e1e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	689b      	ldr	r3, [r3, #8]
 8007e26:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	4a2e      	ldr	r2, [pc, #184]	; (8007ee8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007e2e:	4293      	cmp	r3, r2
 8007e30:	d004      	beq.n	8007e3c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	4a2d      	ldr	r2, [pc, #180]	; (8007eec <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007e38:	4293      	cmp	r3, r2
 8007e3a:	d108      	bne.n	8007e4e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007e42:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007e44:	683b      	ldr	r3, [r7, #0]
 8007e46:	685b      	ldr	r3, [r3, #4]
 8007e48:	68fa      	ldr	r2, [r7, #12]
 8007e4a:	4313      	orrs	r3, r2
 8007e4c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e54:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007e56:	683b      	ldr	r3, [r7, #0]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	68fa      	ldr	r2, [r7, #12]
 8007e5c:	4313      	orrs	r3, r2
 8007e5e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	68fa      	ldr	r2, [r7, #12]
 8007e66:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	4a1e      	ldr	r2, [pc, #120]	; (8007ee8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007e6e:	4293      	cmp	r3, r2
 8007e70:	d01d      	beq.n	8007eae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e7a:	d018      	beq.n	8007eae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	4a1b      	ldr	r2, [pc, #108]	; (8007ef0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007e82:	4293      	cmp	r3, r2
 8007e84:	d013      	beq.n	8007eae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	4a1a      	ldr	r2, [pc, #104]	; (8007ef4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007e8c:	4293      	cmp	r3, r2
 8007e8e:	d00e      	beq.n	8007eae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	4a18      	ldr	r2, [pc, #96]	; (8007ef8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007e96:	4293      	cmp	r3, r2
 8007e98:	d009      	beq.n	8007eae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	4a13      	ldr	r2, [pc, #76]	; (8007eec <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007ea0:	4293      	cmp	r3, r2
 8007ea2:	d004      	beq.n	8007eae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	4a14      	ldr	r2, [pc, #80]	; (8007efc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007eaa:	4293      	cmp	r3, r2
 8007eac:	d10c      	bne.n	8007ec8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007eae:	68bb      	ldr	r3, [r7, #8]
 8007eb0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007eb4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007eb6:	683b      	ldr	r3, [r7, #0]
 8007eb8:	689b      	ldr	r3, [r3, #8]
 8007eba:	68ba      	ldr	r2, [r7, #8]
 8007ebc:	4313      	orrs	r3, r2
 8007ebe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	68ba      	ldr	r2, [r7, #8]
 8007ec6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	2201      	movs	r2, #1
 8007ecc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	2200      	movs	r2, #0
 8007ed4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007ed8:	2300      	movs	r3, #0
}
 8007eda:	4618      	mov	r0, r3
 8007edc:	3714      	adds	r7, #20
 8007ede:	46bd      	mov	sp, r7
 8007ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee4:	4770      	bx	lr
 8007ee6:	bf00      	nop
 8007ee8:	40012c00 	.word	0x40012c00
 8007eec:	40013400 	.word	0x40013400
 8007ef0:	40000400 	.word	0x40000400
 8007ef4:	40000800 	.word	0x40000800
 8007ef8:	40000c00 	.word	0x40000c00
 8007efc:	40014000 	.word	0x40014000

08007f00 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007f00:	b480      	push	{r7}
 8007f02:	b085      	sub	sp, #20
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	6078      	str	r0, [r7, #4]
 8007f08:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007f0a:	2300      	movs	r3, #0
 8007f0c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007f14:	2b01      	cmp	r3, #1
 8007f16:	d101      	bne.n	8007f1c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007f18:	2302      	movs	r3, #2
 8007f1a:	e065      	b.n	8007fe8 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	2201      	movs	r2, #1
 8007f20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007f2a:	683b      	ldr	r3, [r7, #0]
 8007f2c:	68db      	ldr	r3, [r3, #12]
 8007f2e:	4313      	orrs	r3, r2
 8007f30:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007f38:	683b      	ldr	r3, [r7, #0]
 8007f3a:	689b      	ldr	r3, [r3, #8]
 8007f3c:	4313      	orrs	r3, r2
 8007f3e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007f46:	683b      	ldr	r3, [r7, #0]
 8007f48:	685b      	ldr	r3, [r3, #4]
 8007f4a:	4313      	orrs	r3, r2
 8007f4c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007f54:	683b      	ldr	r3, [r7, #0]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	4313      	orrs	r3, r2
 8007f5a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007f62:	683b      	ldr	r3, [r7, #0]
 8007f64:	691b      	ldr	r3, [r3, #16]
 8007f66:	4313      	orrs	r3, r2
 8007f68:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007f70:	683b      	ldr	r3, [r7, #0]
 8007f72:	695b      	ldr	r3, [r3, #20]
 8007f74:	4313      	orrs	r3, r2
 8007f76:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007f7e:	683b      	ldr	r3, [r7, #0]
 8007f80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f82:	4313      	orrs	r3, r2
 8007f84:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8007f8c:	683b      	ldr	r3, [r7, #0]
 8007f8e:	699b      	ldr	r3, [r3, #24]
 8007f90:	041b      	lsls	r3, r3, #16
 8007f92:	4313      	orrs	r3, r2
 8007f94:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	4a16      	ldr	r2, [pc, #88]	; (8007ff4 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8007f9c:	4293      	cmp	r3, r2
 8007f9e:	d004      	beq.n	8007faa <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	4a14      	ldr	r2, [pc, #80]	; (8007ff8 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8007fa6:	4293      	cmp	r3, r2
 8007fa8:	d115      	bne.n	8007fd6 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8007fb0:	683b      	ldr	r3, [r7, #0]
 8007fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fb4:	051b      	lsls	r3, r3, #20
 8007fb6:	4313      	orrs	r3, r2
 8007fb8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007fc0:	683b      	ldr	r3, [r7, #0]
 8007fc2:	69db      	ldr	r3, [r3, #28]
 8007fc4:	4313      	orrs	r3, r2
 8007fc6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007fce:	683b      	ldr	r3, [r7, #0]
 8007fd0:	6a1b      	ldr	r3, [r3, #32]
 8007fd2:	4313      	orrs	r3, r2
 8007fd4:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	68fa      	ldr	r2, [r7, #12]
 8007fdc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	2200      	movs	r2, #0
 8007fe2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007fe6:	2300      	movs	r3, #0
}
 8007fe8:	4618      	mov	r0, r3
 8007fea:	3714      	adds	r7, #20
 8007fec:	46bd      	mov	sp, r7
 8007fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff2:	4770      	bx	lr
 8007ff4:	40012c00 	.word	0x40012c00
 8007ff8:	40013400 	.word	0x40013400

08007ffc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007ffc:	b480      	push	{r7}
 8007ffe:	b083      	sub	sp, #12
 8008000:	af00      	add	r7, sp, #0
 8008002:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008004:	bf00      	nop
 8008006:	370c      	adds	r7, #12
 8008008:	46bd      	mov	sp, r7
 800800a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800e:	4770      	bx	lr

08008010 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008010:	b480      	push	{r7}
 8008012:	b083      	sub	sp, #12
 8008014:	af00      	add	r7, sp, #0
 8008016:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008018:	bf00      	nop
 800801a:	370c      	adds	r7, #12
 800801c:	46bd      	mov	sp, r7
 800801e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008022:	4770      	bx	lr

08008024 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008024:	b480      	push	{r7}
 8008026:	b083      	sub	sp, #12
 8008028:	af00      	add	r7, sp, #0
 800802a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800802c:	bf00      	nop
 800802e:	370c      	adds	r7, #12
 8008030:	46bd      	mov	sp, r7
 8008032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008036:	4770      	bx	lr

08008038 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008038:	b580      	push	{r7, lr}
 800803a:	b082      	sub	sp, #8
 800803c:	af00      	add	r7, sp, #0
 800803e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	2b00      	cmp	r3, #0
 8008044:	d101      	bne.n	800804a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008046:	2301      	movs	r3, #1
 8008048:	e042      	b.n	80080d0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008050:	2b00      	cmp	r3, #0
 8008052:	d106      	bne.n	8008062 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	2200      	movs	r2, #0
 8008058:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800805c:	6878      	ldr	r0, [r7, #4]
 800805e:	f006 fbcb 	bl	800e7f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	2224      	movs	r2, #36	; 0x24
 8008066:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	681a      	ldr	r2, [r3, #0]
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	f022 0201 	bic.w	r2, r2, #1
 8008078:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800807a:	6878      	ldr	r0, [r7, #4]
 800807c:	f000 f82c 	bl	80080d8 <UART_SetConfig>
 8008080:	4603      	mov	r3, r0
 8008082:	2b01      	cmp	r3, #1
 8008084:	d101      	bne.n	800808a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8008086:	2301      	movs	r3, #1
 8008088:	e022      	b.n	80080d0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800808e:	2b00      	cmp	r3, #0
 8008090:	d002      	beq.n	8008098 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8008092:	6878      	ldr	r0, [r7, #4]
 8008094:	f001 f9dc 	bl	8009450 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	685a      	ldr	r2, [r3, #4]
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80080a6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	689a      	ldr	r2, [r3, #8]
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80080b6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	681a      	ldr	r2, [r3, #0]
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	f042 0201 	orr.w	r2, r2, #1
 80080c6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80080c8:	6878      	ldr	r0, [r7, #4]
 80080ca:	f001 fa63 	bl	8009594 <UART_CheckIdleState>
 80080ce:	4603      	mov	r3, r0
}
 80080d0:	4618      	mov	r0, r3
 80080d2:	3708      	adds	r7, #8
 80080d4:	46bd      	mov	sp, r7
 80080d6:	bd80      	pop	{r7, pc}

080080d8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80080d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80080dc:	b08c      	sub	sp, #48	; 0x30
 80080de:	af00      	add	r7, sp, #0
 80080e0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80080e2:	2300      	movs	r3, #0
 80080e4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef ret               = HAL_OK;
 80080e6:	2300      	movs	r3, #0
 80080e8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 80080ec:	2300      	movs	r3, #0
 80080ee:	61fb      	str	r3, [r7, #28]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	689a      	ldr	r2, [r3, #8]
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	691b      	ldr	r3, [r3, #16]
 80080f8:	431a      	orrs	r2, r3
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	695b      	ldr	r3, [r3, #20]
 80080fe:	431a      	orrs	r2, r3
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	69db      	ldr	r3, [r3, #28]
 8008104:	4313      	orrs	r3, r2
 8008106:	62fb      	str	r3, [r7, #44]	; 0x2c
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800810c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800810e:	4313      	orrs	r3, r2
 8008110:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	681a      	ldr	r2, [r3, #0]
 8008118:	4baa      	ldr	r3, [pc, #680]	; (80083c4 <UART_SetConfig+0x2ec>)
 800811a:	4013      	ands	r3, r2
 800811c:	68fa      	ldr	r2, [r7, #12]
 800811e:	6812      	ldr	r2, [r2, #0]
 8008120:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008122:	430b      	orrs	r3, r1
 8008124:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	685b      	ldr	r3, [r3, #4]
 800812c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	68da      	ldr	r2, [r3, #12]
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	430a      	orrs	r2, r1
 800813a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	699b      	ldr	r3, [r3, #24]
 8008140:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	4aa0      	ldr	r2, [pc, #640]	; (80083c8 <UART_SetConfig+0x2f0>)
 8008148:	4293      	cmp	r3, r2
 800814a:	d004      	beq.n	8008156 <UART_SetConfig+0x7e>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	6a1b      	ldr	r3, [r3, #32]
 8008150:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008152:	4313      	orrs	r3, r2
 8008154:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	689b      	ldr	r3, [r3, #8]
 800815c:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8008160:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8008164:	68fa      	ldr	r2, [r7, #12]
 8008166:	6812      	ldr	r2, [r2, #0]
 8008168:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800816a:	430b      	orrs	r3, r1
 800816c:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008174:	f023 010f 	bic.w	r1, r3, #15
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	430a      	orrs	r2, r1
 8008182:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	4a90      	ldr	r2, [pc, #576]	; (80083cc <UART_SetConfig+0x2f4>)
 800818a:	4293      	cmp	r3, r2
 800818c:	d126      	bne.n	80081dc <UART_SetConfig+0x104>
 800818e:	4b90      	ldr	r3, [pc, #576]	; (80083d0 <UART_SetConfig+0x2f8>)
 8008190:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008194:	f003 0303 	and.w	r3, r3, #3
 8008198:	2b03      	cmp	r3, #3
 800819a:	d81b      	bhi.n	80081d4 <UART_SetConfig+0xfc>
 800819c:	a201      	add	r2, pc, #4	; (adr r2, 80081a4 <UART_SetConfig+0xcc>)
 800819e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081a2:	bf00      	nop
 80081a4:	080081b5 	.word	0x080081b5
 80081a8:	080081c5 	.word	0x080081c5
 80081ac:	080081bd 	.word	0x080081bd
 80081b0:	080081cd 	.word	0x080081cd
 80081b4:	2301      	movs	r3, #1
 80081b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80081ba:	e116      	b.n	80083ea <UART_SetConfig+0x312>
 80081bc:	2302      	movs	r3, #2
 80081be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80081c2:	e112      	b.n	80083ea <UART_SetConfig+0x312>
 80081c4:	2304      	movs	r3, #4
 80081c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80081ca:	e10e      	b.n	80083ea <UART_SetConfig+0x312>
 80081cc:	2308      	movs	r3, #8
 80081ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80081d2:	e10a      	b.n	80083ea <UART_SetConfig+0x312>
 80081d4:	2310      	movs	r3, #16
 80081d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80081da:	e106      	b.n	80083ea <UART_SetConfig+0x312>
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	4a7c      	ldr	r2, [pc, #496]	; (80083d4 <UART_SetConfig+0x2fc>)
 80081e2:	4293      	cmp	r3, r2
 80081e4:	d138      	bne.n	8008258 <UART_SetConfig+0x180>
 80081e6:	4b7a      	ldr	r3, [pc, #488]	; (80083d0 <UART_SetConfig+0x2f8>)
 80081e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80081ec:	f003 030c 	and.w	r3, r3, #12
 80081f0:	2b0c      	cmp	r3, #12
 80081f2:	d82d      	bhi.n	8008250 <UART_SetConfig+0x178>
 80081f4:	a201      	add	r2, pc, #4	; (adr r2, 80081fc <UART_SetConfig+0x124>)
 80081f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081fa:	bf00      	nop
 80081fc:	08008231 	.word	0x08008231
 8008200:	08008251 	.word	0x08008251
 8008204:	08008251 	.word	0x08008251
 8008208:	08008251 	.word	0x08008251
 800820c:	08008241 	.word	0x08008241
 8008210:	08008251 	.word	0x08008251
 8008214:	08008251 	.word	0x08008251
 8008218:	08008251 	.word	0x08008251
 800821c:	08008239 	.word	0x08008239
 8008220:	08008251 	.word	0x08008251
 8008224:	08008251 	.word	0x08008251
 8008228:	08008251 	.word	0x08008251
 800822c:	08008249 	.word	0x08008249
 8008230:	2300      	movs	r3, #0
 8008232:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008236:	e0d8      	b.n	80083ea <UART_SetConfig+0x312>
 8008238:	2302      	movs	r3, #2
 800823a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800823e:	e0d4      	b.n	80083ea <UART_SetConfig+0x312>
 8008240:	2304      	movs	r3, #4
 8008242:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008246:	e0d0      	b.n	80083ea <UART_SetConfig+0x312>
 8008248:	2308      	movs	r3, #8
 800824a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800824e:	e0cc      	b.n	80083ea <UART_SetConfig+0x312>
 8008250:	2310      	movs	r3, #16
 8008252:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008256:	e0c8      	b.n	80083ea <UART_SetConfig+0x312>
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	4a5e      	ldr	r2, [pc, #376]	; (80083d8 <UART_SetConfig+0x300>)
 800825e:	4293      	cmp	r3, r2
 8008260:	d125      	bne.n	80082ae <UART_SetConfig+0x1d6>
 8008262:	4b5b      	ldr	r3, [pc, #364]	; (80083d0 <UART_SetConfig+0x2f8>)
 8008264:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008268:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800826c:	2b30      	cmp	r3, #48	; 0x30
 800826e:	d016      	beq.n	800829e <UART_SetConfig+0x1c6>
 8008270:	2b30      	cmp	r3, #48	; 0x30
 8008272:	d818      	bhi.n	80082a6 <UART_SetConfig+0x1ce>
 8008274:	2b20      	cmp	r3, #32
 8008276:	d00a      	beq.n	800828e <UART_SetConfig+0x1b6>
 8008278:	2b20      	cmp	r3, #32
 800827a:	d814      	bhi.n	80082a6 <UART_SetConfig+0x1ce>
 800827c:	2b00      	cmp	r3, #0
 800827e:	d002      	beq.n	8008286 <UART_SetConfig+0x1ae>
 8008280:	2b10      	cmp	r3, #16
 8008282:	d008      	beq.n	8008296 <UART_SetConfig+0x1be>
 8008284:	e00f      	b.n	80082a6 <UART_SetConfig+0x1ce>
 8008286:	2300      	movs	r3, #0
 8008288:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800828c:	e0ad      	b.n	80083ea <UART_SetConfig+0x312>
 800828e:	2302      	movs	r3, #2
 8008290:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008294:	e0a9      	b.n	80083ea <UART_SetConfig+0x312>
 8008296:	2304      	movs	r3, #4
 8008298:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800829c:	e0a5      	b.n	80083ea <UART_SetConfig+0x312>
 800829e:	2308      	movs	r3, #8
 80082a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80082a4:	e0a1      	b.n	80083ea <UART_SetConfig+0x312>
 80082a6:	2310      	movs	r3, #16
 80082a8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80082ac:	e09d      	b.n	80083ea <UART_SetConfig+0x312>
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	4a4a      	ldr	r2, [pc, #296]	; (80083dc <UART_SetConfig+0x304>)
 80082b4:	4293      	cmp	r3, r2
 80082b6:	d125      	bne.n	8008304 <UART_SetConfig+0x22c>
 80082b8:	4b45      	ldr	r3, [pc, #276]	; (80083d0 <UART_SetConfig+0x2f8>)
 80082ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80082be:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80082c2:	2bc0      	cmp	r3, #192	; 0xc0
 80082c4:	d016      	beq.n	80082f4 <UART_SetConfig+0x21c>
 80082c6:	2bc0      	cmp	r3, #192	; 0xc0
 80082c8:	d818      	bhi.n	80082fc <UART_SetConfig+0x224>
 80082ca:	2b80      	cmp	r3, #128	; 0x80
 80082cc:	d00a      	beq.n	80082e4 <UART_SetConfig+0x20c>
 80082ce:	2b80      	cmp	r3, #128	; 0x80
 80082d0:	d814      	bhi.n	80082fc <UART_SetConfig+0x224>
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d002      	beq.n	80082dc <UART_SetConfig+0x204>
 80082d6:	2b40      	cmp	r3, #64	; 0x40
 80082d8:	d008      	beq.n	80082ec <UART_SetConfig+0x214>
 80082da:	e00f      	b.n	80082fc <UART_SetConfig+0x224>
 80082dc:	2300      	movs	r3, #0
 80082de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80082e2:	e082      	b.n	80083ea <UART_SetConfig+0x312>
 80082e4:	2302      	movs	r3, #2
 80082e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80082ea:	e07e      	b.n	80083ea <UART_SetConfig+0x312>
 80082ec:	2304      	movs	r3, #4
 80082ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80082f2:	e07a      	b.n	80083ea <UART_SetConfig+0x312>
 80082f4:	2308      	movs	r3, #8
 80082f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80082fa:	e076      	b.n	80083ea <UART_SetConfig+0x312>
 80082fc:	2310      	movs	r3, #16
 80082fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008302:	e072      	b.n	80083ea <UART_SetConfig+0x312>
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	4a35      	ldr	r2, [pc, #212]	; (80083e0 <UART_SetConfig+0x308>)
 800830a:	4293      	cmp	r3, r2
 800830c:	d12a      	bne.n	8008364 <UART_SetConfig+0x28c>
 800830e:	4b30      	ldr	r3, [pc, #192]	; (80083d0 <UART_SetConfig+0x2f8>)
 8008310:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008314:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008318:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800831c:	d01a      	beq.n	8008354 <UART_SetConfig+0x27c>
 800831e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008322:	d81b      	bhi.n	800835c <UART_SetConfig+0x284>
 8008324:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008328:	d00c      	beq.n	8008344 <UART_SetConfig+0x26c>
 800832a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800832e:	d815      	bhi.n	800835c <UART_SetConfig+0x284>
 8008330:	2b00      	cmp	r3, #0
 8008332:	d003      	beq.n	800833c <UART_SetConfig+0x264>
 8008334:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008338:	d008      	beq.n	800834c <UART_SetConfig+0x274>
 800833a:	e00f      	b.n	800835c <UART_SetConfig+0x284>
 800833c:	2300      	movs	r3, #0
 800833e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008342:	e052      	b.n	80083ea <UART_SetConfig+0x312>
 8008344:	2302      	movs	r3, #2
 8008346:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800834a:	e04e      	b.n	80083ea <UART_SetConfig+0x312>
 800834c:	2304      	movs	r3, #4
 800834e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008352:	e04a      	b.n	80083ea <UART_SetConfig+0x312>
 8008354:	2308      	movs	r3, #8
 8008356:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800835a:	e046      	b.n	80083ea <UART_SetConfig+0x312>
 800835c:	2310      	movs	r3, #16
 800835e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008362:	e042      	b.n	80083ea <UART_SetConfig+0x312>
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	4a17      	ldr	r2, [pc, #92]	; (80083c8 <UART_SetConfig+0x2f0>)
 800836a:	4293      	cmp	r3, r2
 800836c:	d13a      	bne.n	80083e4 <UART_SetConfig+0x30c>
 800836e:	4b18      	ldr	r3, [pc, #96]	; (80083d0 <UART_SetConfig+0x2f8>)
 8008370:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008374:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008378:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800837c:	d01a      	beq.n	80083b4 <UART_SetConfig+0x2dc>
 800837e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008382:	d81b      	bhi.n	80083bc <UART_SetConfig+0x2e4>
 8008384:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008388:	d00c      	beq.n	80083a4 <UART_SetConfig+0x2cc>
 800838a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800838e:	d815      	bhi.n	80083bc <UART_SetConfig+0x2e4>
 8008390:	2b00      	cmp	r3, #0
 8008392:	d003      	beq.n	800839c <UART_SetConfig+0x2c4>
 8008394:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008398:	d008      	beq.n	80083ac <UART_SetConfig+0x2d4>
 800839a:	e00f      	b.n	80083bc <UART_SetConfig+0x2e4>
 800839c:	2300      	movs	r3, #0
 800839e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80083a2:	e022      	b.n	80083ea <UART_SetConfig+0x312>
 80083a4:	2302      	movs	r3, #2
 80083a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80083aa:	e01e      	b.n	80083ea <UART_SetConfig+0x312>
 80083ac:	2304      	movs	r3, #4
 80083ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80083b2:	e01a      	b.n	80083ea <UART_SetConfig+0x312>
 80083b4:	2308      	movs	r3, #8
 80083b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80083ba:	e016      	b.n	80083ea <UART_SetConfig+0x312>
 80083bc:	2310      	movs	r3, #16
 80083be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80083c2:	e012      	b.n	80083ea <UART_SetConfig+0x312>
 80083c4:	cfff69f3 	.word	0xcfff69f3
 80083c8:	40008000 	.word	0x40008000
 80083cc:	40013800 	.word	0x40013800
 80083d0:	40021000 	.word	0x40021000
 80083d4:	40004400 	.word	0x40004400
 80083d8:	40004800 	.word	0x40004800
 80083dc:	40004c00 	.word	0x40004c00
 80083e0:	40005000 	.word	0x40005000
 80083e4:	2310      	movs	r3, #16
 80083e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	4a88      	ldr	r2, [pc, #544]	; (8008610 <UART_SetConfig+0x538>)
 80083f0:	4293      	cmp	r3, r2
 80083f2:	f040 841b 	bne.w	8008c2c <UART_SetConfig+0xb54>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80083f6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80083fa:	2b08      	cmp	r3, #8
 80083fc:	f200 815c 	bhi.w	80086b8 <UART_SetConfig+0x5e0>
 8008400:	a201      	add	r2, pc, #4	; (adr r2, 8008408 <UART_SetConfig+0x330>)
 8008402:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008406:	bf00      	nop
 8008408:	0800842d 	.word	0x0800842d
 800840c:	080086b9 	.word	0x080086b9
 8008410:	080084cf 	.word	0x080084cf
 8008414:	080086b9 	.word	0x080086b9
 8008418:	0800856d 	.word	0x0800856d
 800841c:	080086b9 	.word	0x080086b9
 8008420:	080086b9 	.word	0x080086b9
 8008424:	080086b9 	.word	0x080086b9
 8008428:	08008619 	.word	0x08008619
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800842c:	f7fc fd7a 	bl	8004f24 <HAL_RCC_GetPCLK1Freq>
 8008430:	4602      	mov	r2, r0
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008436:	2b00      	cmp	r3, #0
 8008438:	d044      	beq.n	80084c4 <UART_SetConfig+0x3ec>
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800843e:	2b01      	cmp	r3, #1
 8008440:	d03e      	beq.n	80084c0 <UART_SetConfig+0x3e8>
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008446:	2b02      	cmp	r3, #2
 8008448:	d038      	beq.n	80084bc <UART_SetConfig+0x3e4>
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800844e:	2b03      	cmp	r3, #3
 8008450:	d032      	beq.n	80084b8 <UART_SetConfig+0x3e0>
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008456:	2b04      	cmp	r3, #4
 8008458:	d02c      	beq.n	80084b4 <UART_SetConfig+0x3dc>
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800845e:	2b05      	cmp	r3, #5
 8008460:	d026      	beq.n	80084b0 <UART_SetConfig+0x3d8>
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008466:	2b06      	cmp	r3, #6
 8008468:	d020      	beq.n	80084ac <UART_SetConfig+0x3d4>
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800846e:	2b07      	cmp	r3, #7
 8008470:	d01a      	beq.n	80084a8 <UART_SetConfig+0x3d0>
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008476:	2b08      	cmp	r3, #8
 8008478:	d014      	beq.n	80084a4 <UART_SetConfig+0x3cc>
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800847e:	2b09      	cmp	r3, #9
 8008480:	d00e      	beq.n	80084a0 <UART_SetConfig+0x3c8>
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008486:	2b0a      	cmp	r3, #10
 8008488:	d008      	beq.n	800849c <UART_SetConfig+0x3c4>
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800848e:	2b0b      	cmp	r3, #11
 8008490:	d102      	bne.n	8008498 <UART_SetConfig+0x3c0>
 8008492:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008496:	e016      	b.n	80084c6 <UART_SetConfig+0x3ee>
 8008498:	2301      	movs	r3, #1
 800849a:	e014      	b.n	80084c6 <UART_SetConfig+0x3ee>
 800849c:	2380      	movs	r3, #128	; 0x80
 800849e:	e012      	b.n	80084c6 <UART_SetConfig+0x3ee>
 80084a0:	2340      	movs	r3, #64	; 0x40
 80084a2:	e010      	b.n	80084c6 <UART_SetConfig+0x3ee>
 80084a4:	2320      	movs	r3, #32
 80084a6:	e00e      	b.n	80084c6 <UART_SetConfig+0x3ee>
 80084a8:	2310      	movs	r3, #16
 80084aa:	e00c      	b.n	80084c6 <UART_SetConfig+0x3ee>
 80084ac:	230c      	movs	r3, #12
 80084ae:	e00a      	b.n	80084c6 <UART_SetConfig+0x3ee>
 80084b0:	230a      	movs	r3, #10
 80084b2:	e008      	b.n	80084c6 <UART_SetConfig+0x3ee>
 80084b4:	2308      	movs	r3, #8
 80084b6:	e006      	b.n	80084c6 <UART_SetConfig+0x3ee>
 80084b8:	2306      	movs	r3, #6
 80084ba:	e004      	b.n	80084c6 <UART_SetConfig+0x3ee>
 80084bc:	2304      	movs	r3, #4
 80084be:	e002      	b.n	80084c6 <UART_SetConfig+0x3ee>
 80084c0:	2302      	movs	r3, #2
 80084c2:	e000      	b.n	80084c6 <UART_SetConfig+0x3ee>
 80084c4:	2301      	movs	r3, #1
 80084c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80084ca:	61fb      	str	r3, [r7, #28]
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
#endif /* USART_PRESC_PRESCALER */
        break;
 80084cc:	e0f8      	b.n	80086c0 <UART_SetConfig+0x5e8>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d044      	beq.n	8008560 <UART_SetConfig+0x488>
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084da:	2b01      	cmp	r3, #1
 80084dc:	d03e      	beq.n	800855c <UART_SetConfig+0x484>
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084e2:	2b02      	cmp	r3, #2
 80084e4:	d038      	beq.n	8008558 <UART_SetConfig+0x480>
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084ea:	2b03      	cmp	r3, #3
 80084ec:	d032      	beq.n	8008554 <UART_SetConfig+0x47c>
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084f2:	2b04      	cmp	r3, #4
 80084f4:	d02c      	beq.n	8008550 <UART_SetConfig+0x478>
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084fa:	2b05      	cmp	r3, #5
 80084fc:	d026      	beq.n	800854c <UART_SetConfig+0x474>
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008502:	2b06      	cmp	r3, #6
 8008504:	d020      	beq.n	8008548 <UART_SetConfig+0x470>
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800850a:	2b07      	cmp	r3, #7
 800850c:	d01a      	beq.n	8008544 <UART_SetConfig+0x46c>
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008512:	2b08      	cmp	r3, #8
 8008514:	d014      	beq.n	8008540 <UART_SetConfig+0x468>
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800851a:	2b09      	cmp	r3, #9
 800851c:	d00e      	beq.n	800853c <UART_SetConfig+0x464>
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008522:	2b0a      	cmp	r3, #10
 8008524:	d008      	beq.n	8008538 <UART_SetConfig+0x460>
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800852a:	2b0b      	cmp	r3, #11
 800852c:	d102      	bne.n	8008534 <UART_SetConfig+0x45c>
 800852e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008532:	e016      	b.n	8008562 <UART_SetConfig+0x48a>
 8008534:	2301      	movs	r3, #1
 8008536:	e014      	b.n	8008562 <UART_SetConfig+0x48a>
 8008538:	2380      	movs	r3, #128	; 0x80
 800853a:	e012      	b.n	8008562 <UART_SetConfig+0x48a>
 800853c:	2340      	movs	r3, #64	; 0x40
 800853e:	e010      	b.n	8008562 <UART_SetConfig+0x48a>
 8008540:	2320      	movs	r3, #32
 8008542:	e00e      	b.n	8008562 <UART_SetConfig+0x48a>
 8008544:	2310      	movs	r3, #16
 8008546:	e00c      	b.n	8008562 <UART_SetConfig+0x48a>
 8008548:	230c      	movs	r3, #12
 800854a:	e00a      	b.n	8008562 <UART_SetConfig+0x48a>
 800854c:	230a      	movs	r3, #10
 800854e:	e008      	b.n	8008562 <UART_SetConfig+0x48a>
 8008550:	2308      	movs	r3, #8
 8008552:	e006      	b.n	8008562 <UART_SetConfig+0x48a>
 8008554:	2306      	movs	r3, #6
 8008556:	e004      	b.n	8008562 <UART_SetConfig+0x48a>
 8008558:	2304      	movs	r3, #4
 800855a:	e002      	b.n	8008562 <UART_SetConfig+0x48a>
 800855c:	2302      	movs	r3, #2
 800855e:	e000      	b.n	8008562 <UART_SetConfig+0x48a>
 8008560:	2301      	movs	r3, #1
 8008562:	4a2c      	ldr	r2, [pc, #176]	; (8008614 <UART_SetConfig+0x53c>)
 8008564:	fbb2 f3f3 	udiv	r3, r2, r3
 8008568:	61fb      	str	r3, [r7, #28]
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
#endif /* USART_PRESC_PRESCALER */
        break;
 800856a:	e0a9      	b.n	80086c0 <UART_SetConfig+0x5e8>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800856c:	f7fc fc42 	bl	8004df4 <HAL_RCC_GetSysClockFreq>
 8008570:	4602      	mov	r2, r0
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008576:	2b00      	cmp	r3, #0
 8008578:	d044      	beq.n	8008604 <UART_SetConfig+0x52c>
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800857e:	2b01      	cmp	r3, #1
 8008580:	d03e      	beq.n	8008600 <UART_SetConfig+0x528>
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008586:	2b02      	cmp	r3, #2
 8008588:	d038      	beq.n	80085fc <UART_SetConfig+0x524>
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800858e:	2b03      	cmp	r3, #3
 8008590:	d032      	beq.n	80085f8 <UART_SetConfig+0x520>
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008596:	2b04      	cmp	r3, #4
 8008598:	d02c      	beq.n	80085f4 <UART_SetConfig+0x51c>
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800859e:	2b05      	cmp	r3, #5
 80085a0:	d026      	beq.n	80085f0 <UART_SetConfig+0x518>
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085a6:	2b06      	cmp	r3, #6
 80085a8:	d020      	beq.n	80085ec <UART_SetConfig+0x514>
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085ae:	2b07      	cmp	r3, #7
 80085b0:	d01a      	beq.n	80085e8 <UART_SetConfig+0x510>
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085b6:	2b08      	cmp	r3, #8
 80085b8:	d014      	beq.n	80085e4 <UART_SetConfig+0x50c>
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085be:	2b09      	cmp	r3, #9
 80085c0:	d00e      	beq.n	80085e0 <UART_SetConfig+0x508>
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085c6:	2b0a      	cmp	r3, #10
 80085c8:	d008      	beq.n	80085dc <UART_SetConfig+0x504>
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085ce:	2b0b      	cmp	r3, #11
 80085d0:	d102      	bne.n	80085d8 <UART_SetConfig+0x500>
 80085d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80085d6:	e016      	b.n	8008606 <UART_SetConfig+0x52e>
 80085d8:	2301      	movs	r3, #1
 80085da:	e014      	b.n	8008606 <UART_SetConfig+0x52e>
 80085dc:	2380      	movs	r3, #128	; 0x80
 80085de:	e012      	b.n	8008606 <UART_SetConfig+0x52e>
 80085e0:	2340      	movs	r3, #64	; 0x40
 80085e2:	e010      	b.n	8008606 <UART_SetConfig+0x52e>
 80085e4:	2320      	movs	r3, #32
 80085e6:	e00e      	b.n	8008606 <UART_SetConfig+0x52e>
 80085e8:	2310      	movs	r3, #16
 80085ea:	e00c      	b.n	8008606 <UART_SetConfig+0x52e>
 80085ec:	230c      	movs	r3, #12
 80085ee:	e00a      	b.n	8008606 <UART_SetConfig+0x52e>
 80085f0:	230a      	movs	r3, #10
 80085f2:	e008      	b.n	8008606 <UART_SetConfig+0x52e>
 80085f4:	2308      	movs	r3, #8
 80085f6:	e006      	b.n	8008606 <UART_SetConfig+0x52e>
 80085f8:	2306      	movs	r3, #6
 80085fa:	e004      	b.n	8008606 <UART_SetConfig+0x52e>
 80085fc:	2304      	movs	r3, #4
 80085fe:	e002      	b.n	8008606 <UART_SetConfig+0x52e>
 8008600:	2302      	movs	r3, #2
 8008602:	e000      	b.n	8008606 <UART_SetConfig+0x52e>
 8008604:	2301      	movs	r3, #1
 8008606:	fbb2 f3f3 	udiv	r3, r2, r3
 800860a:	61fb      	str	r3, [r7, #28]
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
#endif /* USART_PRESC_PRESCALER */
        break;
 800860c:	e058      	b.n	80086c0 <UART_SetConfig+0x5e8>
 800860e:	bf00      	nop
 8008610:	40008000 	.word	0x40008000
 8008614:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800861c:	2b00      	cmp	r3, #0
 800861e:	d044      	beq.n	80086aa <UART_SetConfig+0x5d2>
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008624:	2b01      	cmp	r3, #1
 8008626:	d03e      	beq.n	80086a6 <UART_SetConfig+0x5ce>
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800862c:	2b02      	cmp	r3, #2
 800862e:	d038      	beq.n	80086a2 <UART_SetConfig+0x5ca>
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008634:	2b03      	cmp	r3, #3
 8008636:	d032      	beq.n	800869e <UART_SetConfig+0x5c6>
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800863c:	2b04      	cmp	r3, #4
 800863e:	d02c      	beq.n	800869a <UART_SetConfig+0x5c2>
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008644:	2b05      	cmp	r3, #5
 8008646:	d026      	beq.n	8008696 <UART_SetConfig+0x5be>
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800864c:	2b06      	cmp	r3, #6
 800864e:	d020      	beq.n	8008692 <UART_SetConfig+0x5ba>
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008654:	2b07      	cmp	r3, #7
 8008656:	d01a      	beq.n	800868e <UART_SetConfig+0x5b6>
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800865c:	2b08      	cmp	r3, #8
 800865e:	d014      	beq.n	800868a <UART_SetConfig+0x5b2>
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008664:	2b09      	cmp	r3, #9
 8008666:	d00e      	beq.n	8008686 <UART_SetConfig+0x5ae>
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800866c:	2b0a      	cmp	r3, #10
 800866e:	d008      	beq.n	8008682 <UART_SetConfig+0x5aa>
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008674:	2b0b      	cmp	r3, #11
 8008676:	d102      	bne.n	800867e <UART_SetConfig+0x5a6>
 8008678:	f44f 7380 	mov.w	r3, #256	; 0x100
 800867c:	e016      	b.n	80086ac <UART_SetConfig+0x5d4>
 800867e:	2301      	movs	r3, #1
 8008680:	e014      	b.n	80086ac <UART_SetConfig+0x5d4>
 8008682:	2380      	movs	r3, #128	; 0x80
 8008684:	e012      	b.n	80086ac <UART_SetConfig+0x5d4>
 8008686:	2340      	movs	r3, #64	; 0x40
 8008688:	e010      	b.n	80086ac <UART_SetConfig+0x5d4>
 800868a:	2320      	movs	r3, #32
 800868c:	e00e      	b.n	80086ac <UART_SetConfig+0x5d4>
 800868e:	2310      	movs	r3, #16
 8008690:	e00c      	b.n	80086ac <UART_SetConfig+0x5d4>
 8008692:	230c      	movs	r3, #12
 8008694:	e00a      	b.n	80086ac <UART_SetConfig+0x5d4>
 8008696:	230a      	movs	r3, #10
 8008698:	e008      	b.n	80086ac <UART_SetConfig+0x5d4>
 800869a:	2308      	movs	r3, #8
 800869c:	e006      	b.n	80086ac <UART_SetConfig+0x5d4>
 800869e:	2306      	movs	r3, #6
 80086a0:	e004      	b.n	80086ac <UART_SetConfig+0x5d4>
 80086a2:	2304      	movs	r3, #4
 80086a4:	e002      	b.n	80086ac <UART_SetConfig+0x5d4>
 80086a6:	2302      	movs	r3, #2
 80086a8:	e000      	b.n	80086ac <UART_SetConfig+0x5d4>
 80086aa:	2301      	movs	r3, #1
 80086ac:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80086b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80086b4:	61fb      	str	r3, [r7, #28]
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
#endif /* USART_PRESC_PRESCALER */
        break;
 80086b6:	e003      	b.n	80086c0 <UART_SetConfig+0x5e8>
      default:
        ret = HAL_ERROR;
 80086b8:	2301      	movs	r3, #1
 80086ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        break;
 80086be:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 80086c0:	69fb      	ldr	r3, [r7, #28]
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	f000 86ad 	beq.w	8009422 <UART_SetConfig+0x134a>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	685a      	ldr	r2, [r3, #4]
 80086cc:	4613      	mov	r3, r2
 80086ce:	005b      	lsls	r3, r3, #1
 80086d0:	4413      	add	r3, r2
 80086d2:	69fa      	ldr	r2, [r7, #28]
 80086d4:	429a      	cmp	r2, r3
 80086d6:	d305      	bcc.n	80086e4 <UART_SetConfig+0x60c>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	685b      	ldr	r3, [r3, #4]
 80086dc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80086de:	69fa      	ldr	r2, [r7, #28]
 80086e0:	429a      	cmp	r2, r3
 80086e2:	d904      	bls.n	80086ee <UART_SetConfig+0x616>
      {
        ret = HAL_ERROR;
 80086e4:	2301      	movs	r3, #1
 80086e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80086ea:	f000 be9a 	b.w	8009422 <UART_SetConfig+0x134a>
      }
      else
      {
        switch (clocksource)
 80086ee:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80086f2:	2b08      	cmp	r3, #8
 80086f4:	f200 8282 	bhi.w	8008bfc <UART_SetConfig+0xb24>
 80086f8:	a201      	add	r2, pc, #4	; (adr r2, 8008700 <UART_SetConfig+0x628>)
 80086fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086fe:	bf00      	nop
 8008700:	08008725 	.word	0x08008725
 8008704:	08008bfd 	.word	0x08008bfd
 8008708:	0800885f 	.word	0x0800885f
 800870c:	08008bfd 	.word	0x08008bfd
 8008710:	08008991 	.word	0x08008991
 8008714:	08008bfd 	.word	0x08008bfd
 8008718:	08008bfd 	.word	0x08008bfd
 800871c:	08008bfd 	.word	0x08008bfd
 8008720:	08008acb 	.word	0x08008acb
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 8008724:	f7fc fbfe 	bl	8004f24 <HAL_RCC_GetPCLK1Freq>
 8008728:	61b8      	str	r0, [r7, #24]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800872a:	69bb      	ldr	r3, [r7, #24]
 800872c:	4618      	mov	r0, r3
 800872e:	f04f 0100 	mov.w	r1, #0
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008736:	2b00      	cmp	r3, #0
 8008738:	d067      	beq.n	800880a <UART_SetConfig+0x732>
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800873e:	2b01      	cmp	r3, #1
 8008740:	d05e      	beq.n	8008800 <UART_SetConfig+0x728>
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008746:	2b02      	cmp	r3, #2
 8008748:	d055      	beq.n	80087f6 <UART_SetConfig+0x71e>
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800874e:	2b03      	cmp	r3, #3
 8008750:	d04c      	beq.n	80087ec <UART_SetConfig+0x714>
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008756:	2b04      	cmp	r3, #4
 8008758:	d043      	beq.n	80087e2 <UART_SetConfig+0x70a>
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800875e:	2b05      	cmp	r3, #5
 8008760:	d03a      	beq.n	80087d8 <UART_SetConfig+0x700>
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008766:	2b06      	cmp	r3, #6
 8008768:	d031      	beq.n	80087ce <UART_SetConfig+0x6f6>
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800876e:	2b07      	cmp	r3, #7
 8008770:	d028      	beq.n	80087c4 <UART_SetConfig+0x6ec>
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008776:	2b08      	cmp	r3, #8
 8008778:	d01f      	beq.n	80087ba <UART_SetConfig+0x6e2>
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800877e:	2b09      	cmp	r3, #9
 8008780:	d016      	beq.n	80087b0 <UART_SetConfig+0x6d8>
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008786:	2b0a      	cmp	r3, #10
 8008788:	d00d      	beq.n	80087a6 <UART_SetConfig+0x6ce>
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800878e:	2b0b      	cmp	r3, #11
 8008790:	d104      	bne.n	800879c <UART_SetConfig+0x6c4>
 8008792:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008796:	f04f 0300 	mov.w	r3, #0
 800879a:	e03a      	b.n	8008812 <UART_SetConfig+0x73a>
 800879c:	f04f 0201 	mov.w	r2, #1
 80087a0:	f04f 0300 	mov.w	r3, #0
 80087a4:	e035      	b.n	8008812 <UART_SetConfig+0x73a>
 80087a6:	f04f 0280 	mov.w	r2, #128	; 0x80
 80087aa:	f04f 0300 	mov.w	r3, #0
 80087ae:	e030      	b.n	8008812 <UART_SetConfig+0x73a>
 80087b0:	f04f 0240 	mov.w	r2, #64	; 0x40
 80087b4:	f04f 0300 	mov.w	r3, #0
 80087b8:	e02b      	b.n	8008812 <UART_SetConfig+0x73a>
 80087ba:	f04f 0220 	mov.w	r2, #32
 80087be:	f04f 0300 	mov.w	r3, #0
 80087c2:	e026      	b.n	8008812 <UART_SetConfig+0x73a>
 80087c4:	f04f 0210 	mov.w	r2, #16
 80087c8:	f04f 0300 	mov.w	r3, #0
 80087cc:	e021      	b.n	8008812 <UART_SetConfig+0x73a>
 80087ce:	f04f 020c 	mov.w	r2, #12
 80087d2:	f04f 0300 	mov.w	r3, #0
 80087d6:	e01c      	b.n	8008812 <UART_SetConfig+0x73a>
 80087d8:	f04f 020a 	mov.w	r2, #10
 80087dc:	f04f 0300 	mov.w	r3, #0
 80087e0:	e017      	b.n	8008812 <UART_SetConfig+0x73a>
 80087e2:	f04f 0208 	mov.w	r2, #8
 80087e6:	f04f 0300 	mov.w	r3, #0
 80087ea:	e012      	b.n	8008812 <UART_SetConfig+0x73a>
 80087ec:	f04f 0206 	mov.w	r2, #6
 80087f0:	f04f 0300 	mov.w	r3, #0
 80087f4:	e00d      	b.n	8008812 <UART_SetConfig+0x73a>
 80087f6:	f04f 0204 	mov.w	r2, #4
 80087fa:	f04f 0300 	mov.w	r3, #0
 80087fe:	e008      	b.n	8008812 <UART_SetConfig+0x73a>
 8008800:	f04f 0202 	mov.w	r2, #2
 8008804:	f04f 0300 	mov.w	r3, #0
 8008808:	e003      	b.n	8008812 <UART_SetConfig+0x73a>
 800880a:	f04f 0201 	mov.w	r2, #1
 800880e:	f04f 0300 	mov.w	r3, #0
 8008812:	f7f8 fa51 	bl	8000cb8 <__aeabi_uldivmod>
 8008816:	4602      	mov	r2, r0
 8008818:	460b      	mov	r3, r1
 800881a:	4610      	mov	r0, r2
 800881c:	4619      	mov	r1, r3
 800881e:	f04f 0200 	mov.w	r2, #0
 8008822:	f04f 0300 	mov.w	r3, #0
 8008826:	020b      	lsls	r3, r1, #8
 8008828:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800882c:	0202      	lsls	r2, r0, #8
 800882e:	68f9      	ldr	r1, [r7, #12]
 8008830:	6849      	ldr	r1, [r1, #4]
 8008832:	0849      	lsrs	r1, r1, #1
 8008834:	4608      	mov	r0, r1
 8008836:	f04f 0100 	mov.w	r1, #0
 800883a:	1814      	adds	r4, r2, r0
 800883c:	603c      	str	r4, [r7, #0]
 800883e:	414b      	adcs	r3, r1
 8008840:	607b      	str	r3, [r7, #4]
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	685b      	ldr	r3, [r3, #4]
 8008846:	461a      	mov	r2, r3
 8008848:	f04f 0300 	mov.w	r3, #0
 800884c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008850:	f7f8 fa32 	bl	8000cb8 <__aeabi_uldivmod>
 8008854:	4602      	mov	r2, r0
 8008856:	460b      	mov	r3, r1
 8008858:	4613      	mov	r3, r2
 800885a:	627b      	str	r3, [r7, #36]	; 0x24
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
            break;
 800885c:	e1d2      	b.n	8008c04 <UART_SetConfig+0xb2c>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008862:	2b00      	cmp	r3, #0
 8008864:	d067      	beq.n	8008936 <UART_SetConfig+0x85e>
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800886a:	2b01      	cmp	r3, #1
 800886c:	d05e      	beq.n	800892c <UART_SetConfig+0x854>
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008872:	2b02      	cmp	r3, #2
 8008874:	d055      	beq.n	8008922 <UART_SetConfig+0x84a>
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800887a:	2b03      	cmp	r3, #3
 800887c:	d04c      	beq.n	8008918 <UART_SetConfig+0x840>
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008882:	2b04      	cmp	r3, #4
 8008884:	d043      	beq.n	800890e <UART_SetConfig+0x836>
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800888a:	2b05      	cmp	r3, #5
 800888c:	d03a      	beq.n	8008904 <UART_SetConfig+0x82c>
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008892:	2b06      	cmp	r3, #6
 8008894:	d031      	beq.n	80088fa <UART_SetConfig+0x822>
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800889a:	2b07      	cmp	r3, #7
 800889c:	d028      	beq.n	80088f0 <UART_SetConfig+0x818>
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088a2:	2b08      	cmp	r3, #8
 80088a4:	d01f      	beq.n	80088e6 <UART_SetConfig+0x80e>
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088aa:	2b09      	cmp	r3, #9
 80088ac:	d016      	beq.n	80088dc <UART_SetConfig+0x804>
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088b2:	2b0a      	cmp	r3, #10
 80088b4:	d00d      	beq.n	80088d2 <UART_SetConfig+0x7fa>
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088ba:	2b0b      	cmp	r3, #11
 80088bc:	d104      	bne.n	80088c8 <UART_SetConfig+0x7f0>
 80088be:	f44f 7280 	mov.w	r2, #256	; 0x100
 80088c2:	f04f 0300 	mov.w	r3, #0
 80088c6:	e03a      	b.n	800893e <UART_SetConfig+0x866>
 80088c8:	f04f 0201 	mov.w	r2, #1
 80088cc:	f04f 0300 	mov.w	r3, #0
 80088d0:	e035      	b.n	800893e <UART_SetConfig+0x866>
 80088d2:	f04f 0280 	mov.w	r2, #128	; 0x80
 80088d6:	f04f 0300 	mov.w	r3, #0
 80088da:	e030      	b.n	800893e <UART_SetConfig+0x866>
 80088dc:	f04f 0240 	mov.w	r2, #64	; 0x40
 80088e0:	f04f 0300 	mov.w	r3, #0
 80088e4:	e02b      	b.n	800893e <UART_SetConfig+0x866>
 80088e6:	f04f 0220 	mov.w	r2, #32
 80088ea:	f04f 0300 	mov.w	r3, #0
 80088ee:	e026      	b.n	800893e <UART_SetConfig+0x866>
 80088f0:	f04f 0210 	mov.w	r2, #16
 80088f4:	f04f 0300 	mov.w	r3, #0
 80088f8:	e021      	b.n	800893e <UART_SetConfig+0x866>
 80088fa:	f04f 020c 	mov.w	r2, #12
 80088fe:	f04f 0300 	mov.w	r3, #0
 8008902:	e01c      	b.n	800893e <UART_SetConfig+0x866>
 8008904:	f04f 020a 	mov.w	r2, #10
 8008908:	f04f 0300 	mov.w	r3, #0
 800890c:	e017      	b.n	800893e <UART_SetConfig+0x866>
 800890e:	f04f 0208 	mov.w	r2, #8
 8008912:	f04f 0300 	mov.w	r3, #0
 8008916:	e012      	b.n	800893e <UART_SetConfig+0x866>
 8008918:	f04f 0206 	mov.w	r2, #6
 800891c:	f04f 0300 	mov.w	r3, #0
 8008920:	e00d      	b.n	800893e <UART_SetConfig+0x866>
 8008922:	f04f 0204 	mov.w	r2, #4
 8008926:	f04f 0300 	mov.w	r3, #0
 800892a:	e008      	b.n	800893e <UART_SetConfig+0x866>
 800892c:	f04f 0202 	mov.w	r2, #2
 8008930:	f04f 0300 	mov.w	r3, #0
 8008934:	e003      	b.n	800893e <UART_SetConfig+0x866>
 8008936:	f04f 0201 	mov.w	r2, #1
 800893a:	f04f 0300 	mov.w	r3, #0
 800893e:	48ba      	ldr	r0, [pc, #744]	; (8008c28 <UART_SetConfig+0xb50>)
 8008940:	f04f 0100 	mov.w	r1, #0
 8008944:	f7f8 f9b8 	bl	8000cb8 <__aeabi_uldivmod>
 8008948:	4602      	mov	r2, r0
 800894a:	460b      	mov	r3, r1
 800894c:	4610      	mov	r0, r2
 800894e:	4619      	mov	r1, r3
 8008950:	f04f 0200 	mov.w	r2, #0
 8008954:	f04f 0300 	mov.w	r3, #0
 8008958:	020b      	lsls	r3, r1, #8
 800895a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800895e:	0202      	lsls	r2, r0, #8
 8008960:	68f9      	ldr	r1, [r7, #12]
 8008962:	6849      	ldr	r1, [r1, #4]
 8008964:	0849      	lsrs	r1, r1, #1
 8008966:	4608      	mov	r0, r1
 8008968:	f04f 0100 	mov.w	r1, #0
 800896c:	eb12 0a00 	adds.w	sl, r2, r0
 8008970:	eb43 0b01 	adc.w	fp, r3, r1
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	685b      	ldr	r3, [r3, #4]
 8008978:	461a      	mov	r2, r3
 800897a:	f04f 0300 	mov.w	r3, #0
 800897e:	4650      	mov	r0, sl
 8008980:	4659      	mov	r1, fp
 8008982:	f7f8 f999 	bl	8000cb8 <__aeabi_uldivmod>
 8008986:	4602      	mov	r2, r0
 8008988:	460b      	mov	r3, r1
 800898a:	4613      	mov	r3, r2
 800898c:	627b      	str	r3, [r7, #36]	; 0x24
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
            break;
 800898e:	e139      	b.n	8008c04 <UART_SetConfig+0xb2c>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 8008990:	f7fc fa30 	bl	8004df4 <HAL_RCC_GetSysClockFreq>
 8008994:	61b8      	str	r0, [r7, #24]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008996:	69bb      	ldr	r3, [r7, #24]
 8008998:	4618      	mov	r0, r3
 800899a:	f04f 0100 	mov.w	r1, #0
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d067      	beq.n	8008a76 <UART_SetConfig+0x99e>
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089aa:	2b01      	cmp	r3, #1
 80089ac:	d05e      	beq.n	8008a6c <UART_SetConfig+0x994>
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089b2:	2b02      	cmp	r3, #2
 80089b4:	d055      	beq.n	8008a62 <UART_SetConfig+0x98a>
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089ba:	2b03      	cmp	r3, #3
 80089bc:	d04c      	beq.n	8008a58 <UART_SetConfig+0x980>
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089c2:	2b04      	cmp	r3, #4
 80089c4:	d043      	beq.n	8008a4e <UART_SetConfig+0x976>
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089ca:	2b05      	cmp	r3, #5
 80089cc:	d03a      	beq.n	8008a44 <UART_SetConfig+0x96c>
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089d2:	2b06      	cmp	r3, #6
 80089d4:	d031      	beq.n	8008a3a <UART_SetConfig+0x962>
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089da:	2b07      	cmp	r3, #7
 80089dc:	d028      	beq.n	8008a30 <UART_SetConfig+0x958>
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089e2:	2b08      	cmp	r3, #8
 80089e4:	d01f      	beq.n	8008a26 <UART_SetConfig+0x94e>
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089ea:	2b09      	cmp	r3, #9
 80089ec:	d016      	beq.n	8008a1c <UART_SetConfig+0x944>
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089f2:	2b0a      	cmp	r3, #10
 80089f4:	d00d      	beq.n	8008a12 <UART_SetConfig+0x93a>
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089fa:	2b0b      	cmp	r3, #11
 80089fc:	d104      	bne.n	8008a08 <UART_SetConfig+0x930>
 80089fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008a02:	f04f 0300 	mov.w	r3, #0
 8008a06:	e03a      	b.n	8008a7e <UART_SetConfig+0x9a6>
 8008a08:	f04f 0201 	mov.w	r2, #1
 8008a0c:	f04f 0300 	mov.w	r3, #0
 8008a10:	e035      	b.n	8008a7e <UART_SetConfig+0x9a6>
 8008a12:	f04f 0280 	mov.w	r2, #128	; 0x80
 8008a16:	f04f 0300 	mov.w	r3, #0
 8008a1a:	e030      	b.n	8008a7e <UART_SetConfig+0x9a6>
 8008a1c:	f04f 0240 	mov.w	r2, #64	; 0x40
 8008a20:	f04f 0300 	mov.w	r3, #0
 8008a24:	e02b      	b.n	8008a7e <UART_SetConfig+0x9a6>
 8008a26:	f04f 0220 	mov.w	r2, #32
 8008a2a:	f04f 0300 	mov.w	r3, #0
 8008a2e:	e026      	b.n	8008a7e <UART_SetConfig+0x9a6>
 8008a30:	f04f 0210 	mov.w	r2, #16
 8008a34:	f04f 0300 	mov.w	r3, #0
 8008a38:	e021      	b.n	8008a7e <UART_SetConfig+0x9a6>
 8008a3a:	f04f 020c 	mov.w	r2, #12
 8008a3e:	f04f 0300 	mov.w	r3, #0
 8008a42:	e01c      	b.n	8008a7e <UART_SetConfig+0x9a6>
 8008a44:	f04f 020a 	mov.w	r2, #10
 8008a48:	f04f 0300 	mov.w	r3, #0
 8008a4c:	e017      	b.n	8008a7e <UART_SetConfig+0x9a6>
 8008a4e:	f04f 0208 	mov.w	r2, #8
 8008a52:	f04f 0300 	mov.w	r3, #0
 8008a56:	e012      	b.n	8008a7e <UART_SetConfig+0x9a6>
 8008a58:	f04f 0206 	mov.w	r2, #6
 8008a5c:	f04f 0300 	mov.w	r3, #0
 8008a60:	e00d      	b.n	8008a7e <UART_SetConfig+0x9a6>
 8008a62:	f04f 0204 	mov.w	r2, #4
 8008a66:	f04f 0300 	mov.w	r3, #0
 8008a6a:	e008      	b.n	8008a7e <UART_SetConfig+0x9a6>
 8008a6c:	f04f 0202 	mov.w	r2, #2
 8008a70:	f04f 0300 	mov.w	r3, #0
 8008a74:	e003      	b.n	8008a7e <UART_SetConfig+0x9a6>
 8008a76:	f04f 0201 	mov.w	r2, #1
 8008a7a:	f04f 0300 	mov.w	r3, #0
 8008a7e:	f7f8 f91b 	bl	8000cb8 <__aeabi_uldivmod>
 8008a82:	4602      	mov	r2, r0
 8008a84:	460b      	mov	r3, r1
 8008a86:	4610      	mov	r0, r2
 8008a88:	4619      	mov	r1, r3
 8008a8a:	f04f 0200 	mov.w	r2, #0
 8008a8e:	f04f 0300 	mov.w	r3, #0
 8008a92:	020b      	lsls	r3, r1, #8
 8008a94:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008a98:	0202      	lsls	r2, r0, #8
 8008a9a:	68f9      	ldr	r1, [r7, #12]
 8008a9c:	6849      	ldr	r1, [r1, #4]
 8008a9e:	0849      	lsrs	r1, r1, #1
 8008aa0:	4608      	mov	r0, r1
 8008aa2:	f04f 0100 	mov.w	r1, #0
 8008aa6:	eb12 0800 	adds.w	r8, r2, r0
 8008aaa:	eb43 0901 	adc.w	r9, r3, r1
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	685b      	ldr	r3, [r3, #4]
 8008ab2:	461a      	mov	r2, r3
 8008ab4:	f04f 0300 	mov.w	r3, #0
 8008ab8:	4640      	mov	r0, r8
 8008aba:	4649      	mov	r1, r9
 8008abc:	f7f8 f8fc 	bl	8000cb8 <__aeabi_uldivmod>
 8008ac0:	4602      	mov	r2, r0
 8008ac2:	460b      	mov	r3, r1
 8008ac4:	4613      	mov	r3, r2
 8008ac6:	627b      	str	r3, [r7, #36]	; 0x24
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
            break;
 8008ac8:	e09c      	b.n	8008c04 <UART_SetConfig+0xb2c>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d067      	beq.n	8008ba2 <UART_SetConfig+0xaca>
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ad6:	2b01      	cmp	r3, #1
 8008ad8:	d05e      	beq.n	8008b98 <UART_SetConfig+0xac0>
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ade:	2b02      	cmp	r3, #2
 8008ae0:	d055      	beq.n	8008b8e <UART_SetConfig+0xab6>
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ae6:	2b03      	cmp	r3, #3
 8008ae8:	d04c      	beq.n	8008b84 <UART_SetConfig+0xaac>
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008aee:	2b04      	cmp	r3, #4
 8008af0:	d043      	beq.n	8008b7a <UART_SetConfig+0xaa2>
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008af6:	2b05      	cmp	r3, #5
 8008af8:	d03a      	beq.n	8008b70 <UART_SetConfig+0xa98>
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008afe:	2b06      	cmp	r3, #6
 8008b00:	d031      	beq.n	8008b66 <UART_SetConfig+0xa8e>
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b06:	2b07      	cmp	r3, #7
 8008b08:	d028      	beq.n	8008b5c <UART_SetConfig+0xa84>
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b0e:	2b08      	cmp	r3, #8
 8008b10:	d01f      	beq.n	8008b52 <UART_SetConfig+0xa7a>
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b16:	2b09      	cmp	r3, #9
 8008b18:	d016      	beq.n	8008b48 <UART_SetConfig+0xa70>
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b1e:	2b0a      	cmp	r3, #10
 8008b20:	d00d      	beq.n	8008b3e <UART_SetConfig+0xa66>
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b26:	2b0b      	cmp	r3, #11
 8008b28:	d104      	bne.n	8008b34 <UART_SetConfig+0xa5c>
 8008b2a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008b2e:	f04f 0300 	mov.w	r3, #0
 8008b32:	e03a      	b.n	8008baa <UART_SetConfig+0xad2>
 8008b34:	f04f 0201 	mov.w	r2, #1
 8008b38:	f04f 0300 	mov.w	r3, #0
 8008b3c:	e035      	b.n	8008baa <UART_SetConfig+0xad2>
 8008b3e:	f04f 0280 	mov.w	r2, #128	; 0x80
 8008b42:	f04f 0300 	mov.w	r3, #0
 8008b46:	e030      	b.n	8008baa <UART_SetConfig+0xad2>
 8008b48:	f04f 0240 	mov.w	r2, #64	; 0x40
 8008b4c:	f04f 0300 	mov.w	r3, #0
 8008b50:	e02b      	b.n	8008baa <UART_SetConfig+0xad2>
 8008b52:	f04f 0220 	mov.w	r2, #32
 8008b56:	f04f 0300 	mov.w	r3, #0
 8008b5a:	e026      	b.n	8008baa <UART_SetConfig+0xad2>
 8008b5c:	f04f 0210 	mov.w	r2, #16
 8008b60:	f04f 0300 	mov.w	r3, #0
 8008b64:	e021      	b.n	8008baa <UART_SetConfig+0xad2>
 8008b66:	f04f 020c 	mov.w	r2, #12
 8008b6a:	f04f 0300 	mov.w	r3, #0
 8008b6e:	e01c      	b.n	8008baa <UART_SetConfig+0xad2>
 8008b70:	f04f 020a 	mov.w	r2, #10
 8008b74:	f04f 0300 	mov.w	r3, #0
 8008b78:	e017      	b.n	8008baa <UART_SetConfig+0xad2>
 8008b7a:	f04f 0208 	mov.w	r2, #8
 8008b7e:	f04f 0300 	mov.w	r3, #0
 8008b82:	e012      	b.n	8008baa <UART_SetConfig+0xad2>
 8008b84:	f04f 0206 	mov.w	r2, #6
 8008b88:	f04f 0300 	mov.w	r3, #0
 8008b8c:	e00d      	b.n	8008baa <UART_SetConfig+0xad2>
 8008b8e:	f04f 0204 	mov.w	r2, #4
 8008b92:	f04f 0300 	mov.w	r3, #0
 8008b96:	e008      	b.n	8008baa <UART_SetConfig+0xad2>
 8008b98:	f04f 0202 	mov.w	r2, #2
 8008b9c:	f04f 0300 	mov.w	r3, #0
 8008ba0:	e003      	b.n	8008baa <UART_SetConfig+0xad2>
 8008ba2:	f04f 0201 	mov.w	r2, #1
 8008ba6:	f04f 0300 	mov.w	r3, #0
 8008baa:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8008bae:	f04f 0100 	mov.w	r1, #0
 8008bb2:	f7f8 f881 	bl	8000cb8 <__aeabi_uldivmod>
 8008bb6:	4602      	mov	r2, r0
 8008bb8:	460b      	mov	r3, r1
 8008bba:	4610      	mov	r0, r2
 8008bbc:	4619      	mov	r1, r3
 8008bbe:	f04f 0200 	mov.w	r2, #0
 8008bc2:	f04f 0300 	mov.w	r3, #0
 8008bc6:	020b      	lsls	r3, r1, #8
 8008bc8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008bcc:	0202      	lsls	r2, r0, #8
 8008bce:	68f9      	ldr	r1, [r7, #12]
 8008bd0:	6849      	ldr	r1, [r1, #4]
 8008bd2:	0849      	lsrs	r1, r1, #1
 8008bd4:	4608      	mov	r0, r1
 8008bd6:	f04f 0100 	mov.w	r1, #0
 8008bda:	1814      	adds	r4, r2, r0
 8008bdc:	eb43 0501 	adc.w	r5, r3, r1
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	685b      	ldr	r3, [r3, #4]
 8008be4:	461a      	mov	r2, r3
 8008be6:	f04f 0300 	mov.w	r3, #0
 8008bea:	4620      	mov	r0, r4
 8008bec:	4629      	mov	r1, r5
 8008bee:	f7f8 f863 	bl	8000cb8 <__aeabi_uldivmod>
 8008bf2:	4602      	mov	r2, r0
 8008bf4:	460b      	mov	r3, r1
 8008bf6:	4613      	mov	r3, r2
 8008bf8:	627b      	str	r3, [r7, #36]	; 0x24
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
            break;
 8008bfa:	e003      	b.n	8008c04 <UART_SetConfig+0xb2c>
          default:
            ret = HAL_ERROR;
 8008bfc:	2301      	movs	r3, #1
 8008bfe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            break;
 8008c02:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c06:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008c0a:	d309      	bcc.n	8008c20 <UART_SetConfig+0xb48>
 8008c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c0e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008c12:	d205      	bcs.n	8008c20 <UART_SetConfig+0xb48>
        {
          huart->Instance->BRR = usartdiv;
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c1a:	60da      	str	r2, [r3, #12]
 8008c1c:	f000 bc01 	b.w	8009422 <UART_SetConfig+0x134a>
        }
        else
        {
          ret = HAL_ERROR;
 8008c20:	2301      	movs	r3, #1
 8008c22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008c26:	e3fc      	b.n	8009422 <UART_SetConfig+0x134a>
 8008c28:	00f42400 	.word	0x00f42400
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	69db      	ldr	r3, [r3, #28]
 8008c30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008c34:	f040 8203 	bne.w	800903e <UART_SetConfig+0xf66>
  {
    switch (clocksource)
 8008c38:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008c3c:	2b08      	cmp	r3, #8
 8008c3e:	f200 81dc 	bhi.w	8008ffa <UART_SetConfig+0xf22>
 8008c42:	a201      	add	r2, pc, #4	; (adr r2, 8008c48 <UART_SetConfig+0xb70>)
 8008c44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c48:	08008c6d 	.word	0x08008c6d
 8008c4c:	08008d25 	.word	0x08008d25
 8008c50:	08008ddd 	.word	0x08008ddd
 8008c54:	08008ffb 	.word	0x08008ffb
 8008c58:	08008e8f 	.word	0x08008e8f
 8008c5c:	08008ffb 	.word	0x08008ffb
 8008c60:	08008ffb 	.word	0x08008ffb
 8008c64:	08008ffb 	.word	0x08008ffb
 8008c68:	08008f47 	.word	0x08008f47
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008c6c:	f7fc f95a 	bl	8004f24 <HAL_RCC_GetPCLK1Freq>
 8008c70:	61b8      	str	r0, [r7, #24]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d044      	beq.n	8008d04 <UART_SetConfig+0xc2c>
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c7e:	2b01      	cmp	r3, #1
 8008c80:	d03e      	beq.n	8008d00 <UART_SetConfig+0xc28>
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c86:	2b02      	cmp	r3, #2
 8008c88:	d038      	beq.n	8008cfc <UART_SetConfig+0xc24>
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c8e:	2b03      	cmp	r3, #3
 8008c90:	d032      	beq.n	8008cf8 <UART_SetConfig+0xc20>
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c96:	2b04      	cmp	r3, #4
 8008c98:	d02c      	beq.n	8008cf4 <UART_SetConfig+0xc1c>
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c9e:	2b05      	cmp	r3, #5
 8008ca0:	d026      	beq.n	8008cf0 <UART_SetConfig+0xc18>
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ca6:	2b06      	cmp	r3, #6
 8008ca8:	d020      	beq.n	8008cec <UART_SetConfig+0xc14>
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cae:	2b07      	cmp	r3, #7
 8008cb0:	d01a      	beq.n	8008ce8 <UART_SetConfig+0xc10>
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cb6:	2b08      	cmp	r3, #8
 8008cb8:	d014      	beq.n	8008ce4 <UART_SetConfig+0xc0c>
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cbe:	2b09      	cmp	r3, #9
 8008cc0:	d00e      	beq.n	8008ce0 <UART_SetConfig+0xc08>
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cc6:	2b0a      	cmp	r3, #10
 8008cc8:	d008      	beq.n	8008cdc <UART_SetConfig+0xc04>
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cce:	2b0b      	cmp	r3, #11
 8008cd0:	d102      	bne.n	8008cd8 <UART_SetConfig+0xc00>
 8008cd2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008cd6:	e016      	b.n	8008d06 <UART_SetConfig+0xc2e>
 8008cd8:	2301      	movs	r3, #1
 8008cda:	e014      	b.n	8008d06 <UART_SetConfig+0xc2e>
 8008cdc:	2380      	movs	r3, #128	; 0x80
 8008cde:	e012      	b.n	8008d06 <UART_SetConfig+0xc2e>
 8008ce0:	2340      	movs	r3, #64	; 0x40
 8008ce2:	e010      	b.n	8008d06 <UART_SetConfig+0xc2e>
 8008ce4:	2320      	movs	r3, #32
 8008ce6:	e00e      	b.n	8008d06 <UART_SetConfig+0xc2e>
 8008ce8:	2310      	movs	r3, #16
 8008cea:	e00c      	b.n	8008d06 <UART_SetConfig+0xc2e>
 8008cec:	230c      	movs	r3, #12
 8008cee:	e00a      	b.n	8008d06 <UART_SetConfig+0xc2e>
 8008cf0:	230a      	movs	r3, #10
 8008cf2:	e008      	b.n	8008d06 <UART_SetConfig+0xc2e>
 8008cf4:	2308      	movs	r3, #8
 8008cf6:	e006      	b.n	8008d06 <UART_SetConfig+0xc2e>
 8008cf8:	2306      	movs	r3, #6
 8008cfa:	e004      	b.n	8008d06 <UART_SetConfig+0xc2e>
 8008cfc:	2304      	movs	r3, #4
 8008cfe:	e002      	b.n	8008d06 <UART_SetConfig+0xc2e>
 8008d00:	2302      	movs	r3, #2
 8008d02:	e000      	b.n	8008d06 <UART_SetConfig+0xc2e>
 8008d04:	2301      	movs	r3, #1
 8008d06:	69ba      	ldr	r2, [r7, #24]
 8008d08:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d0c:	005a      	lsls	r2, r3, #1
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	685b      	ldr	r3, [r3, #4]
 8008d12:	085b      	lsrs	r3, r3, #1
 8008d14:	441a      	add	r2, r3
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	685b      	ldr	r3, [r3, #4]
 8008d1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d1e:	b29b      	uxth	r3, r3
 8008d20:	627b      	str	r3, [r7, #36]	; 0x24
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 8008d22:	e16e      	b.n	8009002 <UART_SetConfig+0xf2a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008d24:	f7fc f914 	bl	8004f50 <HAL_RCC_GetPCLK2Freq>
 8008d28:	61b8      	str	r0, [r7, #24]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d044      	beq.n	8008dbc <UART_SetConfig+0xce4>
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d36:	2b01      	cmp	r3, #1
 8008d38:	d03e      	beq.n	8008db8 <UART_SetConfig+0xce0>
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d3e:	2b02      	cmp	r3, #2
 8008d40:	d038      	beq.n	8008db4 <UART_SetConfig+0xcdc>
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d46:	2b03      	cmp	r3, #3
 8008d48:	d032      	beq.n	8008db0 <UART_SetConfig+0xcd8>
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d4e:	2b04      	cmp	r3, #4
 8008d50:	d02c      	beq.n	8008dac <UART_SetConfig+0xcd4>
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d56:	2b05      	cmp	r3, #5
 8008d58:	d026      	beq.n	8008da8 <UART_SetConfig+0xcd0>
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d5e:	2b06      	cmp	r3, #6
 8008d60:	d020      	beq.n	8008da4 <UART_SetConfig+0xccc>
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d66:	2b07      	cmp	r3, #7
 8008d68:	d01a      	beq.n	8008da0 <UART_SetConfig+0xcc8>
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d6e:	2b08      	cmp	r3, #8
 8008d70:	d014      	beq.n	8008d9c <UART_SetConfig+0xcc4>
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d76:	2b09      	cmp	r3, #9
 8008d78:	d00e      	beq.n	8008d98 <UART_SetConfig+0xcc0>
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d7e:	2b0a      	cmp	r3, #10
 8008d80:	d008      	beq.n	8008d94 <UART_SetConfig+0xcbc>
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d86:	2b0b      	cmp	r3, #11
 8008d88:	d102      	bne.n	8008d90 <UART_SetConfig+0xcb8>
 8008d8a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008d8e:	e016      	b.n	8008dbe <UART_SetConfig+0xce6>
 8008d90:	2301      	movs	r3, #1
 8008d92:	e014      	b.n	8008dbe <UART_SetConfig+0xce6>
 8008d94:	2380      	movs	r3, #128	; 0x80
 8008d96:	e012      	b.n	8008dbe <UART_SetConfig+0xce6>
 8008d98:	2340      	movs	r3, #64	; 0x40
 8008d9a:	e010      	b.n	8008dbe <UART_SetConfig+0xce6>
 8008d9c:	2320      	movs	r3, #32
 8008d9e:	e00e      	b.n	8008dbe <UART_SetConfig+0xce6>
 8008da0:	2310      	movs	r3, #16
 8008da2:	e00c      	b.n	8008dbe <UART_SetConfig+0xce6>
 8008da4:	230c      	movs	r3, #12
 8008da6:	e00a      	b.n	8008dbe <UART_SetConfig+0xce6>
 8008da8:	230a      	movs	r3, #10
 8008daa:	e008      	b.n	8008dbe <UART_SetConfig+0xce6>
 8008dac:	2308      	movs	r3, #8
 8008dae:	e006      	b.n	8008dbe <UART_SetConfig+0xce6>
 8008db0:	2306      	movs	r3, #6
 8008db2:	e004      	b.n	8008dbe <UART_SetConfig+0xce6>
 8008db4:	2304      	movs	r3, #4
 8008db6:	e002      	b.n	8008dbe <UART_SetConfig+0xce6>
 8008db8:	2302      	movs	r3, #2
 8008dba:	e000      	b.n	8008dbe <UART_SetConfig+0xce6>
 8008dbc:	2301      	movs	r3, #1
 8008dbe:	69ba      	ldr	r2, [r7, #24]
 8008dc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8008dc4:	005a      	lsls	r2, r3, #1
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	685b      	ldr	r3, [r3, #4]
 8008dca:	085b      	lsrs	r3, r3, #1
 8008dcc:	441a      	add	r2, r3
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	685b      	ldr	r3, [r3, #4]
 8008dd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8008dd6:	b29b      	uxth	r3, r3
 8008dd8:	627b      	str	r3, [r7, #36]	; 0x24
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 8008dda:	e112      	b.n	8009002 <UART_SetConfig+0xf2a>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d044      	beq.n	8008e6e <UART_SetConfig+0xd96>
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008de8:	2b01      	cmp	r3, #1
 8008dea:	d03e      	beq.n	8008e6a <UART_SetConfig+0xd92>
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008df0:	2b02      	cmp	r3, #2
 8008df2:	d038      	beq.n	8008e66 <UART_SetConfig+0xd8e>
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008df8:	2b03      	cmp	r3, #3
 8008dfa:	d032      	beq.n	8008e62 <UART_SetConfig+0xd8a>
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e00:	2b04      	cmp	r3, #4
 8008e02:	d02c      	beq.n	8008e5e <UART_SetConfig+0xd86>
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e08:	2b05      	cmp	r3, #5
 8008e0a:	d026      	beq.n	8008e5a <UART_SetConfig+0xd82>
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e10:	2b06      	cmp	r3, #6
 8008e12:	d020      	beq.n	8008e56 <UART_SetConfig+0xd7e>
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e18:	2b07      	cmp	r3, #7
 8008e1a:	d01a      	beq.n	8008e52 <UART_SetConfig+0xd7a>
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e20:	2b08      	cmp	r3, #8
 8008e22:	d014      	beq.n	8008e4e <UART_SetConfig+0xd76>
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e28:	2b09      	cmp	r3, #9
 8008e2a:	d00e      	beq.n	8008e4a <UART_SetConfig+0xd72>
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e30:	2b0a      	cmp	r3, #10
 8008e32:	d008      	beq.n	8008e46 <UART_SetConfig+0xd6e>
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e38:	2b0b      	cmp	r3, #11
 8008e3a:	d102      	bne.n	8008e42 <UART_SetConfig+0xd6a>
 8008e3c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008e40:	e016      	b.n	8008e70 <UART_SetConfig+0xd98>
 8008e42:	2301      	movs	r3, #1
 8008e44:	e014      	b.n	8008e70 <UART_SetConfig+0xd98>
 8008e46:	2380      	movs	r3, #128	; 0x80
 8008e48:	e012      	b.n	8008e70 <UART_SetConfig+0xd98>
 8008e4a:	2340      	movs	r3, #64	; 0x40
 8008e4c:	e010      	b.n	8008e70 <UART_SetConfig+0xd98>
 8008e4e:	2320      	movs	r3, #32
 8008e50:	e00e      	b.n	8008e70 <UART_SetConfig+0xd98>
 8008e52:	2310      	movs	r3, #16
 8008e54:	e00c      	b.n	8008e70 <UART_SetConfig+0xd98>
 8008e56:	230c      	movs	r3, #12
 8008e58:	e00a      	b.n	8008e70 <UART_SetConfig+0xd98>
 8008e5a:	230a      	movs	r3, #10
 8008e5c:	e008      	b.n	8008e70 <UART_SetConfig+0xd98>
 8008e5e:	2308      	movs	r3, #8
 8008e60:	e006      	b.n	8008e70 <UART_SetConfig+0xd98>
 8008e62:	2306      	movs	r3, #6
 8008e64:	e004      	b.n	8008e70 <UART_SetConfig+0xd98>
 8008e66:	2304      	movs	r3, #4
 8008e68:	e002      	b.n	8008e70 <UART_SetConfig+0xd98>
 8008e6a:	2302      	movs	r3, #2
 8008e6c:	e000      	b.n	8008e70 <UART_SetConfig+0xd98>
 8008e6e:	2301      	movs	r3, #1
 8008e70:	4aa1      	ldr	r2, [pc, #644]	; (80090f8 <UART_SetConfig+0x1020>)
 8008e72:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e76:	005a      	lsls	r2, r3, #1
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	685b      	ldr	r3, [r3, #4]
 8008e7c:	085b      	lsrs	r3, r3, #1
 8008e7e:	441a      	add	r2, r3
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	685b      	ldr	r3, [r3, #4]
 8008e84:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e88:	b29b      	uxth	r3, r3
 8008e8a:	627b      	str	r3, [r7, #36]	; 0x24
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 8008e8c:	e0b9      	b.n	8009002 <UART_SetConfig+0xf2a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008e8e:	f7fb ffb1 	bl	8004df4 <HAL_RCC_GetSysClockFreq>
 8008e92:	61b8      	str	r0, [r7, #24]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d044      	beq.n	8008f26 <UART_SetConfig+0xe4e>
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ea0:	2b01      	cmp	r3, #1
 8008ea2:	d03e      	beq.n	8008f22 <UART_SetConfig+0xe4a>
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ea8:	2b02      	cmp	r3, #2
 8008eaa:	d038      	beq.n	8008f1e <UART_SetConfig+0xe46>
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eb0:	2b03      	cmp	r3, #3
 8008eb2:	d032      	beq.n	8008f1a <UART_SetConfig+0xe42>
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eb8:	2b04      	cmp	r3, #4
 8008eba:	d02c      	beq.n	8008f16 <UART_SetConfig+0xe3e>
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ec0:	2b05      	cmp	r3, #5
 8008ec2:	d026      	beq.n	8008f12 <UART_SetConfig+0xe3a>
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ec8:	2b06      	cmp	r3, #6
 8008eca:	d020      	beq.n	8008f0e <UART_SetConfig+0xe36>
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ed0:	2b07      	cmp	r3, #7
 8008ed2:	d01a      	beq.n	8008f0a <UART_SetConfig+0xe32>
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ed8:	2b08      	cmp	r3, #8
 8008eda:	d014      	beq.n	8008f06 <UART_SetConfig+0xe2e>
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ee0:	2b09      	cmp	r3, #9
 8008ee2:	d00e      	beq.n	8008f02 <UART_SetConfig+0xe2a>
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ee8:	2b0a      	cmp	r3, #10
 8008eea:	d008      	beq.n	8008efe <UART_SetConfig+0xe26>
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ef0:	2b0b      	cmp	r3, #11
 8008ef2:	d102      	bne.n	8008efa <UART_SetConfig+0xe22>
 8008ef4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008ef8:	e016      	b.n	8008f28 <UART_SetConfig+0xe50>
 8008efa:	2301      	movs	r3, #1
 8008efc:	e014      	b.n	8008f28 <UART_SetConfig+0xe50>
 8008efe:	2380      	movs	r3, #128	; 0x80
 8008f00:	e012      	b.n	8008f28 <UART_SetConfig+0xe50>
 8008f02:	2340      	movs	r3, #64	; 0x40
 8008f04:	e010      	b.n	8008f28 <UART_SetConfig+0xe50>
 8008f06:	2320      	movs	r3, #32
 8008f08:	e00e      	b.n	8008f28 <UART_SetConfig+0xe50>
 8008f0a:	2310      	movs	r3, #16
 8008f0c:	e00c      	b.n	8008f28 <UART_SetConfig+0xe50>
 8008f0e:	230c      	movs	r3, #12
 8008f10:	e00a      	b.n	8008f28 <UART_SetConfig+0xe50>
 8008f12:	230a      	movs	r3, #10
 8008f14:	e008      	b.n	8008f28 <UART_SetConfig+0xe50>
 8008f16:	2308      	movs	r3, #8
 8008f18:	e006      	b.n	8008f28 <UART_SetConfig+0xe50>
 8008f1a:	2306      	movs	r3, #6
 8008f1c:	e004      	b.n	8008f28 <UART_SetConfig+0xe50>
 8008f1e:	2304      	movs	r3, #4
 8008f20:	e002      	b.n	8008f28 <UART_SetConfig+0xe50>
 8008f22:	2302      	movs	r3, #2
 8008f24:	e000      	b.n	8008f28 <UART_SetConfig+0xe50>
 8008f26:	2301      	movs	r3, #1
 8008f28:	69ba      	ldr	r2, [r7, #24]
 8008f2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f2e:	005a      	lsls	r2, r3, #1
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	685b      	ldr	r3, [r3, #4]
 8008f34:	085b      	lsrs	r3, r3, #1
 8008f36:	441a      	add	r2, r3
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	685b      	ldr	r3, [r3, #4]
 8008f3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f40:	b29b      	uxth	r3, r3
 8008f42:	627b      	str	r3, [r7, #36]	; 0x24
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 8008f44:	e05d      	b.n	8009002 <UART_SetConfig+0xf2a>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d044      	beq.n	8008fd8 <UART_SetConfig+0xf00>
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f52:	2b01      	cmp	r3, #1
 8008f54:	d03e      	beq.n	8008fd4 <UART_SetConfig+0xefc>
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f5a:	2b02      	cmp	r3, #2
 8008f5c:	d038      	beq.n	8008fd0 <UART_SetConfig+0xef8>
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f62:	2b03      	cmp	r3, #3
 8008f64:	d032      	beq.n	8008fcc <UART_SetConfig+0xef4>
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f6a:	2b04      	cmp	r3, #4
 8008f6c:	d02c      	beq.n	8008fc8 <UART_SetConfig+0xef0>
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f72:	2b05      	cmp	r3, #5
 8008f74:	d026      	beq.n	8008fc4 <UART_SetConfig+0xeec>
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f7a:	2b06      	cmp	r3, #6
 8008f7c:	d020      	beq.n	8008fc0 <UART_SetConfig+0xee8>
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f82:	2b07      	cmp	r3, #7
 8008f84:	d01a      	beq.n	8008fbc <UART_SetConfig+0xee4>
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f8a:	2b08      	cmp	r3, #8
 8008f8c:	d014      	beq.n	8008fb8 <UART_SetConfig+0xee0>
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f92:	2b09      	cmp	r3, #9
 8008f94:	d00e      	beq.n	8008fb4 <UART_SetConfig+0xedc>
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f9a:	2b0a      	cmp	r3, #10
 8008f9c:	d008      	beq.n	8008fb0 <UART_SetConfig+0xed8>
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fa2:	2b0b      	cmp	r3, #11
 8008fa4:	d102      	bne.n	8008fac <UART_SetConfig+0xed4>
 8008fa6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008faa:	e016      	b.n	8008fda <UART_SetConfig+0xf02>
 8008fac:	2301      	movs	r3, #1
 8008fae:	e014      	b.n	8008fda <UART_SetConfig+0xf02>
 8008fb0:	2380      	movs	r3, #128	; 0x80
 8008fb2:	e012      	b.n	8008fda <UART_SetConfig+0xf02>
 8008fb4:	2340      	movs	r3, #64	; 0x40
 8008fb6:	e010      	b.n	8008fda <UART_SetConfig+0xf02>
 8008fb8:	2320      	movs	r3, #32
 8008fba:	e00e      	b.n	8008fda <UART_SetConfig+0xf02>
 8008fbc:	2310      	movs	r3, #16
 8008fbe:	e00c      	b.n	8008fda <UART_SetConfig+0xf02>
 8008fc0:	230c      	movs	r3, #12
 8008fc2:	e00a      	b.n	8008fda <UART_SetConfig+0xf02>
 8008fc4:	230a      	movs	r3, #10
 8008fc6:	e008      	b.n	8008fda <UART_SetConfig+0xf02>
 8008fc8:	2308      	movs	r3, #8
 8008fca:	e006      	b.n	8008fda <UART_SetConfig+0xf02>
 8008fcc:	2306      	movs	r3, #6
 8008fce:	e004      	b.n	8008fda <UART_SetConfig+0xf02>
 8008fd0:	2304      	movs	r3, #4
 8008fd2:	e002      	b.n	8008fda <UART_SetConfig+0xf02>
 8008fd4:	2302      	movs	r3, #2
 8008fd6:	e000      	b.n	8008fda <UART_SetConfig+0xf02>
 8008fd8:	2301      	movs	r3, #1
 8008fda:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8008fde:	fbb2 f3f3 	udiv	r3, r2, r3
 8008fe2:	005a      	lsls	r2, r3, #1
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	685b      	ldr	r3, [r3, #4]
 8008fe8:	085b      	lsrs	r3, r3, #1
 8008fea:	441a      	add	r2, r3
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	685b      	ldr	r3, [r3, #4]
 8008ff0:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ff4:	b29b      	uxth	r3, r3
 8008ff6:	627b      	str	r3, [r7, #36]	; 0x24
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 8008ff8:	e003      	b.n	8009002 <UART_SetConfig+0xf2a>
      default:
        ret = HAL_ERROR;
 8008ffa:	2301      	movs	r3, #1
 8008ffc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        break;
 8009000:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009004:	2b0f      	cmp	r3, #15
 8009006:	d916      	bls.n	8009036 <UART_SetConfig+0xf5e>
 8009008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800900a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800900e:	d212      	bcs.n	8009036 <UART_SetConfig+0xf5e>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009012:	b29b      	uxth	r3, r3
 8009014:	f023 030f 	bic.w	r3, r3, #15
 8009018:	82fb      	strh	r3, [r7, #22]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800901a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800901c:	085b      	lsrs	r3, r3, #1
 800901e:	b29b      	uxth	r3, r3
 8009020:	f003 0307 	and.w	r3, r3, #7
 8009024:	b29a      	uxth	r2, r3
 8009026:	8afb      	ldrh	r3, [r7, #22]
 8009028:	4313      	orrs	r3, r2
 800902a:	82fb      	strh	r3, [r7, #22]
      huart->Instance->BRR = brrtemp;
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	8afa      	ldrh	r2, [r7, #22]
 8009032:	60da      	str	r2, [r3, #12]
 8009034:	e1f5      	b.n	8009422 <UART_SetConfig+0x134a>
    }
    else
    {
      ret = HAL_ERROR;
 8009036:	2301      	movs	r3, #1
 8009038:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800903c:	e1f1      	b.n	8009422 <UART_SetConfig+0x134a>
    }
  }
  else
  {
    switch (clocksource)
 800903e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009042:	2b08      	cmp	r3, #8
 8009044:	f200 81da 	bhi.w	80093fc <UART_SetConfig+0x1324>
 8009048:	a201      	add	r2, pc, #4	; (adr r2, 8009050 <UART_SetConfig+0xf78>)
 800904a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800904e:	bf00      	nop
 8009050:	08009075 	.word	0x08009075
 8009054:	0800912f 	.word	0x0800912f
 8009058:	080091e5 	.word	0x080091e5
 800905c:	080093fd 	.word	0x080093fd
 8009060:	08009295 	.word	0x08009295
 8009064:	080093fd 	.word	0x080093fd
 8009068:	080093fd 	.word	0x080093fd
 800906c:	080093fd 	.word	0x080093fd
 8009070:	0800934b 	.word	0x0800934b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009074:	f7fb ff56 	bl	8004f24 <HAL_RCC_GetPCLK1Freq>
 8009078:	61b8      	str	r0, [r7, #24]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800907e:	2b00      	cmp	r3, #0
 8009080:	d046      	beq.n	8009110 <UART_SetConfig+0x1038>
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009086:	2b01      	cmp	r3, #1
 8009088:	d040      	beq.n	800910c <UART_SetConfig+0x1034>
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800908e:	2b02      	cmp	r3, #2
 8009090:	d03a      	beq.n	8009108 <UART_SetConfig+0x1030>
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009096:	2b03      	cmp	r3, #3
 8009098:	d034      	beq.n	8009104 <UART_SetConfig+0x102c>
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800909e:	2b04      	cmp	r3, #4
 80090a0:	d02e      	beq.n	8009100 <UART_SetConfig+0x1028>
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090a6:	2b05      	cmp	r3, #5
 80090a8:	d028      	beq.n	80090fc <UART_SetConfig+0x1024>
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090ae:	2b06      	cmp	r3, #6
 80090b0:	d020      	beq.n	80090f4 <UART_SetConfig+0x101c>
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090b6:	2b07      	cmp	r3, #7
 80090b8:	d01a      	beq.n	80090f0 <UART_SetConfig+0x1018>
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090be:	2b08      	cmp	r3, #8
 80090c0:	d014      	beq.n	80090ec <UART_SetConfig+0x1014>
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090c6:	2b09      	cmp	r3, #9
 80090c8:	d00e      	beq.n	80090e8 <UART_SetConfig+0x1010>
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090ce:	2b0a      	cmp	r3, #10
 80090d0:	d008      	beq.n	80090e4 <UART_SetConfig+0x100c>
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090d6:	2b0b      	cmp	r3, #11
 80090d8:	d102      	bne.n	80090e0 <UART_SetConfig+0x1008>
 80090da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80090de:	e018      	b.n	8009112 <UART_SetConfig+0x103a>
 80090e0:	2301      	movs	r3, #1
 80090e2:	e016      	b.n	8009112 <UART_SetConfig+0x103a>
 80090e4:	2380      	movs	r3, #128	; 0x80
 80090e6:	e014      	b.n	8009112 <UART_SetConfig+0x103a>
 80090e8:	2340      	movs	r3, #64	; 0x40
 80090ea:	e012      	b.n	8009112 <UART_SetConfig+0x103a>
 80090ec:	2320      	movs	r3, #32
 80090ee:	e010      	b.n	8009112 <UART_SetConfig+0x103a>
 80090f0:	2310      	movs	r3, #16
 80090f2:	e00e      	b.n	8009112 <UART_SetConfig+0x103a>
 80090f4:	230c      	movs	r3, #12
 80090f6:	e00c      	b.n	8009112 <UART_SetConfig+0x103a>
 80090f8:	00f42400 	.word	0x00f42400
 80090fc:	230a      	movs	r3, #10
 80090fe:	e008      	b.n	8009112 <UART_SetConfig+0x103a>
 8009100:	2308      	movs	r3, #8
 8009102:	e006      	b.n	8009112 <UART_SetConfig+0x103a>
 8009104:	2306      	movs	r3, #6
 8009106:	e004      	b.n	8009112 <UART_SetConfig+0x103a>
 8009108:	2304      	movs	r3, #4
 800910a:	e002      	b.n	8009112 <UART_SetConfig+0x103a>
 800910c:	2302      	movs	r3, #2
 800910e:	e000      	b.n	8009112 <UART_SetConfig+0x103a>
 8009110:	2301      	movs	r3, #1
 8009112:	69ba      	ldr	r2, [r7, #24]
 8009114:	fbb2 f2f3 	udiv	r2, r2, r3
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	685b      	ldr	r3, [r3, #4]
 800911c:	085b      	lsrs	r3, r3, #1
 800911e:	441a      	add	r2, r3
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	685b      	ldr	r3, [r3, #4]
 8009124:	fbb2 f3f3 	udiv	r3, r2, r3
 8009128:	b29b      	uxth	r3, r3
 800912a:	627b      	str	r3, [r7, #36]	; 0x24
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 800912c:	e16a      	b.n	8009404 <UART_SetConfig+0x132c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800912e:	f7fb ff0f 	bl	8004f50 <HAL_RCC_GetPCLK2Freq>
 8009132:	61b8      	str	r0, [r7, #24]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009138:	2b00      	cmp	r3, #0
 800913a:	d044      	beq.n	80091c6 <UART_SetConfig+0x10ee>
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009140:	2b01      	cmp	r3, #1
 8009142:	d03e      	beq.n	80091c2 <UART_SetConfig+0x10ea>
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009148:	2b02      	cmp	r3, #2
 800914a:	d038      	beq.n	80091be <UART_SetConfig+0x10e6>
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009150:	2b03      	cmp	r3, #3
 8009152:	d032      	beq.n	80091ba <UART_SetConfig+0x10e2>
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009158:	2b04      	cmp	r3, #4
 800915a:	d02c      	beq.n	80091b6 <UART_SetConfig+0x10de>
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009160:	2b05      	cmp	r3, #5
 8009162:	d026      	beq.n	80091b2 <UART_SetConfig+0x10da>
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009168:	2b06      	cmp	r3, #6
 800916a:	d020      	beq.n	80091ae <UART_SetConfig+0x10d6>
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009170:	2b07      	cmp	r3, #7
 8009172:	d01a      	beq.n	80091aa <UART_SetConfig+0x10d2>
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009178:	2b08      	cmp	r3, #8
 800917a:	d014      	beq.n	80091a6 <UART_SetConfig+0x10ce>
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009180:	2b09      	cmp	r3, #9
 8009182:	d00e      	beq.n	80091a2 <UART_SetConfig+0x10ca>
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009188:	2b0a      	cmp	r3, #10
 800918a:	d008      	beq.n	800919e <UART_SetConfig+0x10c6>
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009190:	2b0b      	cmp	r3, #11
 8009192:	d102      	bne.n	800919a <UART_SetConfig+0x10c2>
 8009194:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009198:	e016      	b.n	80091c8 <UART_SetConfig+0x10f0>
 800919a:	2301      	movs	r3, #1
 800919c:	e014      	b.n	80091c8 <UART_SetConfig+0x10f0>
 800919e:	2380      	movs	r3, #128	; 0x80
 80091a0:	e012      	b.n	80091c8 <UART_SetConfig+0x10f0>
 80091a2:	2340      	movs	r3, #64	; 0x40
 80091a4:	e010      	b.n	80091c8 <UART_SetConfig+0x10f0>
 80091a6:	2320      	movs	r3, #32
 80091a8:	e00e      	b.n	80091c8 <UART_SetConfig+0x10f0>
 80091aa:	2310      	movs	r3, #16
 80091ac:	e00c      	b.n	80091c8 <UART_SetConfig+0x10f0>
 80091ae:	230c      	movs	r3, #12
 80091b0:	e00a      	b.n	80091c8 <UART_SetConfig+0x10f0>
 80091b2:	230a      	movs	r3, #10
 80091b4:	e008      	b.n	80091c8 <UART_SetConfig+0x10f0>
 80091b6:	2308      	movs	r3, #8
 80091b8:	e006      	b.n	80091c8 <UART_SetConfig+0x10f0>
 80091ba:	2306      	movs	r3, #6
 80091bc:	e004      	b.n	80091c8 <UART_SetConfig+0x10f0>
 80091be:	2304      	movs	r3, #4
 80091c0:	e002      	b.n	80091c8 <UART_SetConfig+0x10f0>
 80091c2:	2302      	movs	r3, #2
 80091c4:	e000      	b.n	80091c8 <UART_SetConfig+0x10f0>
 80091c6:	2301      	movs	r3, #1
 80091c8:	69ba      	ldr	r2, [r7, #24]
 80091ca:	fbb2 f2f3 	udiv	r2, r2, r3
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	685b      	ldr	r3, [r3, #4]
 80091d2:	085b      	lsrs	r3, r3, #1
 80091d4:	441a      	add	r2, r3
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	685b      	ldr	r3, [r3, #4]
 80091da:	fbb2 f3f3 	udiv	r3, r2, r3
 80091de:	b29b      	uxth	r3, r3
 80091e0:	627b      	str	r3, [r7, #36]	; 0x24
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 80091e2:	e10f      	b.n	8009404 <UART_SetConfig+0x132c>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d044      	beq.n	8009276 <UART_SetConfig+0x119e>
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091f0:	2b01      	cmp	r3, #1
 80091f2:	d03e      	beq.n	8009272 <UART_SetConfig+0x119a>
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091f8:	2b02      	cmp	r3, #2
 80091fa:	d038      	beq.n	800926e <UART_SetConfig+0x1196>
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009200:	2b03      	cmp	r3, #3
 8009202:	d032      	beq.n	800926a <UART_SetConfig+0x1192>
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009208:	2b04      	cmp	r3, #4
 800920a:	d02c      	beq.n	8009266 <UART_SetConfig+0x118e>
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009210:	2b05      	cmp	r3, #5
 8009212:	d026      	beq.n	8009262 <UART_SetConfig+0x118a>
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009218:	2b06      	cmp	r3, #6
 800921a:	d020      	beq.n	800925e <UART_SetConfig+0x1186>
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009220:	2b07      	cmp	r3, #7
 8009222:	d01a      	beq.n	800925a <UART_SetConfig+0x1182>
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009228:	2b08      	cmp	r3, #8
 800922a:	d014      	beq.n	8009256 <UART_SetConfig+0x117e>
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009230:	2b09      	cmp	r3, #9
 8009232:	d00e      	beq.n	8009252 <UART_SetConfig+0x117a>
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009238:	2b0a      	cmp	r3, #10
 800923a:	d008      	beq.n	800924e <UART_SetConfig+0x1176>
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009240:	2b0b      	cmp	r3, #11
 8009242:	d102      	bne.n	800924a <UART_SetConfig+0x1172>
 8009244:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009248:	e016      	b.n	8009278 <UART_SetConfig+0x11a0>
 800924a:	2301      	movs	r3, #1
 800924c:	e014      	b.n	8009278 <UART_SetConfig+0x11a0>
 800924e:	2380      	movs	r3, #128	; 0x80
 8009250:	e012      	b.n	8009278 <UART_SetConfig+0x11a0>
 8009252:	2340      	movs	r3, #64	; 0x40
 8009254:	e010      	b.n	8009278 <UART_SetConfig+0x11a0>
 8009256:	2320      	movs	r3, #32
 8009258:	e00e      	b.n	8009278 <UART_SetConfig+0x11a0>
 800925a:	2310      	movs	r3, #16
 800925c:	e00c      	b.n	8009278 <UART_SetConfig+0x11a0>
 800925e:	230c      	movs	r3, #12
 8009260:	e00a      	b.n	8009278 <UART_SetConfig+0x11a0>
 8009262:	230a      	movs	r3, #10
 8009264:	e008      	b.n	8009278 <UART_SetConfig+0x11a0>
 8009266:	2308      	movs	r3, #8
 8009268:	e006      	b.n	8009278 <UART_SetConfig+0x11a0>
 800926a:	2306      	movs	r3, #6
 800926c:	e004      	b.n	8009278 <UART_SetConfig+0x11a0>
 800926e:	2304      	movs	r3, #4
 8009270:	e002      	b.n	8009278 <UART_SetConfig+0x11a0>
 8009272:	2302      	movs	r3, #2
 8009274:	e000      	b.n	8009278 <UART_SetConfig+0x11a0>
 8009276:	2301      	movs	r3, #1
 8009278:	4a74      	ldr	r2, [pc, #464]	; (800944c <UART_SetConfig+0x1374>)
 800927a:	fbb2 f2f3 	udiv	r2, r2, r3
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	685b      	ldr	r3, [r3, #4]
 8009282:	085b      	lsrs	r3, r3, #1
 8009284:	441a      	add	r2, r3
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	685b      	ldr	r3, [r3, #4]
 800928a:	fbb2 f3f3 	udiv	r3, r2, r3
 800928e:	b29b      	uxth	r3, r3
 8009290:	627b      	str	r3, [r7, #36]	; 0x24
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 8009292:	e0b7      	b.n	8009404 <UART_SetConfig+0x132c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009294:	f7fb fdae 	bl	8004df4 <HAL_RCC_GetSysClockFreq>
 8009298:	61b8      	str	r0, [r7, #24]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d044      	beq.n	800932c <UART_SetConfig+0x1254>
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092a6:	2b01      	cmp	r3, #1
 80092a8:	d03e      	beq.n	8009328 <UART_SetConfig+0x1250>
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092ae:	2b02      	cmp	r3, #2
 80092b0:	d038      	beq.n	8009324 <UART_SetConfig+0x124c>
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092b6:	2b03      	cmp	r3, #3
 80092b8:	d032      	beq.n	8009320 <UART_SetConfig+0x1248>
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092be:	2b04      	cmp	r3, #4
 80092c0:	d02c      	beq.n	800931c <UART_SetConfig+0x1244>
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092c6:	2b05      	cmp	r3, #5
 80092c8:	d026      	beq.n	8009318 <UART_SetConfig+0x1240>
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092ce:	2b06      	cmp	r3, #6
 80092d0:	d020      	beq.n	8009314 <UART_SetConfig+0x123c>
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092d6:	2b07      	cmp	r3, #7
 80092d8:	d01a      	beq.n	8009310 <UART_SetConfig+0x1238>
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092de:	2b08      	cmp	r3, #8
 80092e0:	d014      	beq.n	800930c <UART_SetConfig+0x1234>
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092e6:	2b09      	cmp	r3, #9
 80092e8:	d00e      	beq.n	8009308 <UART_SetConfig+0x1230>
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092ee:	2b0a      	cmp	r3, #10
 80092f0:	d008      	beq.n	8009304 <UART_SetConfig+0x122c>
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092f6:	2b0b      	cmp	r3, #11
 80092f8:	d102      	bne.n	8009300 <UART_SetConfig+0x1228>
 80092fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80092fe:	e016      	b.n	800932e <UART_SetConfig+0x1256>
 8009300:	2301      	movs	r3, #1
 8009302:	e014      	b.n	800932e <UART_SetConfig+0x1256>
 8009304:	2380      	movs	r3, #128	; 0x80
 8009306:	e012      	b.n	800932e <UART_SetConfig+0x1256>
 8009308:	2340      	movs	r3, #64	; 0x40
 800930a:	e010      	b.n	800932e <UART_SetConfig+0x1256>
 800930c:	2320      	movs	r3, #32
 800930e:	e00e      	b.n	800932e <UART_SetConfig+0x1256>
 8009310:	2310      	movs	r3, #16
 8009312:	e00c      	b.n	800932e <UART_SetConfig+0x1256>
 8009314:	230c      	movs	r3, #12
 8009316:	e00a      	b.n	800932e <UART_SetConfig+0x1256>
 8009318:	230a      	movs	r3, #10
 800931a:	e008      	b.n	800932e <UART_SetConfig+0x1256>
 800931c:	2308      	movs	r3, #8
 800931e:	e006      	b.n	800932e <UART_SetConfig+0x1256>
 8009320:	2306      	movs	r3, #6
 8009322:	e004      	b.n	800932e <UART_SetConfig+0x1256>
 8009324:	2304      	movs	r3, #4
 8009326:	e002      	b.n	800932e <UART_SetConfig+0x1256>
 8009328:	2302      	movs	r3, #2
 800932a:	e000      	b.n	800932e <UART_SetConfig+0x1256>
 800932c:	2301      	movs	r3, #1
 800932e:	69ba      	ldr	r2, [r7, #24]
 8009330:	fbb2 f2f3 	udiv	r2, r2, r3
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	685b      	ldr	r3, [r3, #4]
 8009338:	085b      	lsrs	r3, r3, #1
 800933a:	441a      	add	r2, r3
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	685b      	ldr	r3, [r3, #4]
 8009340:	fbb2 f3f3 	udiv	r3, r2, r3
 8009344:	b29b      	uxth	r3, r3
 8009346:	627b      	str	r3, [r7, #36]	; 0x24
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 8009348:	e05c      	b.n	8009404 <UART_SetConfig+0x132c>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800934e:	2b00      	cmp	r3, #0
 8009350:	d044      	beq.n	80093dc <UART_SetConfig+0x1304>
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009356:	2b01      	cmp	r3, #1
 8009358:	d03e      	beq.n	80093d8 <UART_SetConfig+0x1300>
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800935e:	2b02      	cmp	r3, #2
 8009360:	d038      	beq.n	80093d4 <UART_SetConfig+0x12fc>
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009366:	2b03      	cmp	r3, #3
 8009368:	d032      	beq.n	80093d0 <UART_SetConfig+0x12f8>
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800936e:	2b04      	cmp	r3, #4
 8009370:	d02c      	beq.n	80093cc <UART_SetConfig+0x12f4>
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009376:	2b05      	cmp	r3, #5
 8009378:	d026      	beq.n	80093c8 <UART_SetConfig+0x12f0>
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800937e:	2b06      	cmp	r3, #6
 8009380:	d020      	beq.n	80093c4 <UART_SetConfig+0x12ec>
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009386:	2b07      	cmp	r3, #7
 8009388:	d01a      	beq.n	80093c0 <UART_SetConfig+0x12e8>
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800938e:	2b08      	cmp	r3, #8
 8009390:	d014      	beq.n	80093bc <UART_SetConfig+0x12e4>
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009396:	2b09      	cmp	r3, #9
 8009398:	d00e      	beq.n	80093b8 <UART_SetConfig+0x12e0>
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800939e:	2b0a      	cmp	r3, #10
 80093a0:	d008      	beq.n	80093b4 <UART_SetConfig+0x12dc>
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093a6:	2b0b      	cmp	r3, #11
 80093a8:	d102      	bne.n	80093b0 <UART_SetConfig+0x12d8>
 80093aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80093ae:	e016      	b.n	80093de <UART_SetConfig+0x1306>
 80093b0:	2301      	movs	r3, #1
 80093b2:	e014      	b.n	80093de <UART_SetConfig+0x1306>
 80093b4:	2380      	movs	r3, #128	; 0x80
 80093b6:	e012      	b.n	80093de <UART_SetConfig+0x1306>
 80093b8:	2340      	movs	r3, #64	; 0x40
 80093ba:	e010      	b.n	80093de <UART_SetConfig+0x1306>
 80093bc:	2320      	movs	r3, #32
 80093be:	e00e      	b.n	80093de <UART_SetConfig+0x1306>
 80093c0:	2310      	movs	r3, #16
 80093c2:	e00c      	b.n	80093de <UART_SetConfig+0x1306>
 80093c4:	230c      	movs	r3, #12
 80093c6:	e00a      	b.n	80093de <UART_SetConfig+0x1306>
 80093c8:	230a      	movs	r3, #10
 80093ca:	e008      	b.n	80093de <UART_SetConfig+0x1306>
 80093cc:	2308      	movs	r3, #8
 80093ce:	e006      	b.n	80093de <UART_SetConfig+0x1306>
 80093d0:	2306      	movs	r3, #6
 80093d2:	e004      	b.n	80093de <UART_SetConfig+0x1306>
 80093d4:	2304      	movs	r3, #4
 80093d6:	e002      	b.n	80093de <UART_SetConfig+0x1306>
 80093d8:	2302      	movs	r3, #2
 80093da:	e000      	b.n	80093de <UART_SetConfig+0x1306>
 80093dc:	2301      	movs	r3, #1
 80093de:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80093e2:	fbb2 f2f3 	udiv	r2, r2, r3
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	685b      	ldr	r3, [r3, #4]
 80093ea:	085b      	lsrs	r3, r3, #1
 80093ec:	441a      	add	r2, r3
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	685b      	ldr	r3, [r3, #4]
 80093f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80093f6:	b29b      	uxth	r3, r3
 80093f8:	627b      	str	r3, [r7, #36]	; 0x24
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 80093fa:	e003      	b.n	8009404 <UART_SetConfig+0x132c>
      default:
        ret = HAL_ERROR;
 80093fc:	2301      	movs	r3, #1
 80093fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        break;
 8009402:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009406:	2b0f      	cmp	r3, #15
 8009408:	d908      	bls.n	800941c <UART_SetConfig+0x1344>
 800940a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800940c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009410:	d204      	bcs.n	800941c <UART_SetConfig+0x1344>
    {
      huart->Instance->BRR = usartdiv;
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009418:	60da      	str	r2, [r3, #12]
 800941a:	e002      	b.n	8009422 <UART_SetConfig+0x134a>
    }
    else
    {
      ret = HAL_ERROR;
 800941c:	2301      	movs	r3, #1
 800941e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	2201      	movs	r2, #1
 8009426:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	2201      	movs	r2, #1
 800942e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	2200      	movs	r2, #0
 8009436:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	2200      	movs	r2, #0
 800943c:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800943e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8009442:	4618      	mov	r0, r3
 8009444:	3730      	adds	r7, #48	; 0x30
 8009446:	46bd      	mov	sp, r7
 8009448:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800944c:	00f42400 	.word	0x00f42400

08009450 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009450:	b480      	push	{r7}
 8009452:	b083      	sub	sp, #12
 8009454:	af00      	add	r7, sp, #0
 8009456:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800945c:	f003 0301 	and.w	r3, r3, #1
 8009460:	2b00      	cmp	r3, #0
 8009462:	d00a      	beq.n	800947a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	685b      	ldr	r3, [r3, #4]
 800946a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	430a      	orrs	r2, r1
 8009478:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800947e:	f003 0302 	and.w	r3, r3, #2
 8009482:	2b00      	cmp	r3, #0
 8009484:	d00a      	beq.n	800949c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	685b      	ldr	r3, [r3, #4]
 800948c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	430a      	orrs	r2, r1
 800949a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094a0:	f003 0304 	and.w	r3, r3, #4
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d00a      	beq.n	80094be <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	685b      	ldr	r3, [r3, #4]
 80094ae:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	430a      	orrs	r2, r1
 80094bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094c2:	f003 0308 	and.w	r3, r3, #8
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d00a      	beq.n	80094e0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	685b      	ldr	r3, [r3, #4]
 80094d0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	430a      	orrs	r2, r1
 80094de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094e4:	f003 0310 	and.w	r3, r3, #16
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d00a      	beq.n	8009502 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	689b      	ldr	r3, [r3, #8]
 80094f2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	430a      	orrs	r2, r1
 8009500:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009506:	f003 0320 	and.w	r3, r3, #32
 800950a:	2b00      	cmp	r3, #0
 800950c:	d00a      	beq.n	8009524 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	689b      	ldr	r3, [r3, #8]
 8009514:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	430a      	orrs	r2, r1
 8009522:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009528:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800952c:	2b00      	cmp	r3, #0
 800952e:	d01a      	beq.n	8009566 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	685b      	ldr	r3, [r3, #4]
 8009536:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	430a      	orrs	r2, r1
 8009544:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800954a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800954e:	d10a      	bne.n	8009566 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	685b      	ldr	r3, [r3, #4]
 8009556:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	430a      	orrs	r2, r1
 8009564:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800956a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800956e:	2b00      	cmp	r3, #0
 8009570:	d00a      	beq.n	8009588 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	685b      	ldr	r3, [r3, #4]
 8009578:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	430a      	orrs	r2, r1
 8009586:	605a      	str	r2, [r3, #4]
  }
}
 8009588:	bf00      	nop
 800958a:	370c      	adds	r7, #12
 800958c:	46bd      	mov	sp, r7
 800958e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009592:	4770      	bx	lr

08009594 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009594:	b580      	push	{r7, lr}
 8009596:	b086      	sub	sp, #24
 8009598:	af02      	add	r7, sp, #8
 800959a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	2200      	movs	r2, #0
 80095a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80095a4:	f7f7 fd9e 	bl	80010e4 <HAL_GetTick>
 80095a8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	f003 0308 	and.w	r3, r3, #8
 80095b4:	2b08      	cmp	r3, #8
 80095b6:	d10e      	bne.n	80095d6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80095b8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80095bc:	9300      	str	r3, [sp, #0]
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	2200      	movs	r2, #0
 80095c2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80095c6:	6878      	ldr	r0, [r7, #4]
 80095c8:	f000 f82c 	bl	8009624 <UART_WaitOnFlagUntilTimeout>
 80095cc:	4603      	mov	r3, r0
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d001      	beq.n	80095d6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80095d2:	2303      	movs	r3, #3
 80095d4:	e022      	b.n	800961c <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	f003 0304 	and.w	r3, r3, #4
 80095e0:	2b04      	cmp	r3, #4
 80095e2:	d10e      	bne.n	8009602 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80095e4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80095e8:	9300      	str	r3, [sp, #0]
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	2200      	movs	r2, #0
 80095ee:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80095f2:	6878      	ldr	r0, [r7, #4]
 80095f4:	f000 f816 	bl	8009624 <UART_WaitOnFlagUntilTimeout>
 80095f8:	4603      	mov	r3, r0
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d001      	beq.n	8009602 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80095fe:	2303      	movs	r3, #3
 8009600:	e00c      	b.n	800961c <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	2220      	movs	r2, #32
 8009606:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	2220      	movs	r2, #32
 800960e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	2200      	movs	r2, #0
 8009616:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800961a:	2300      	movs	r3, #0
}
 800961c:	4618      	mov	r0, r3
 800961e:	3710      	adds	r7, #16
 8009620:	46bd      	mov	sp, r7
 8009622:	bd80      	pop	{r7, pc}

08009624 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009624:	b580      	push	{r7, lr}
 8009626:	b084      	sub	sp, #16
 8009628:	af00      	add	r7, sp, #0
 800962a:	60f8      	str	r0, [r7, #12]
 800962c:	60b9      	str	r1, [r7, #8]
 800962e:	603b      	str	r3, [r7, #0]
 8009630:	4613      	mov	r3, r2
 8009632:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009634:	e062      	b.n	80096fc <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009636:	69bb      	ldr	r3, [r7, #24]
 8009638:	f1b3 3fff 	cmp.w	r3, #4294967295
 800963c:	d05e      	beq.n	80096fc <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800963e:	f7f7 fd51 	bl	80010e4 <HAL_GetTick>
 8009642:	4602      	mov	r2, r0
 8009644:	683b      	ldr	r3, [r7, #0]
 8009646:	1ad3      	subs	r3, r2, r3
 8009648:	69ba      	ldr	r2, [r7, #24]
 800964a:	429a      	cmp	r2, r3
 800964c:	d302      	bcc.n	8009654 <UART_WaitOnFlagUntilTimeout+0x30>
 800964e:	69bb      	ldr	r3, [r7, #24]
 8009650:	2b00      	cmp	r3, #0
 8009652:	d11d      	bne.n	8009690 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	681a      	ldr	r2, [r3, #0]
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009662:	601a      	str	r2, [r3, #0]
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	689a      	ldr	r2, [r3, #8]
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	f022 0201 	bic.w	r2, r2, #1
 8009672:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	2220      	movs	r2, #32
 8009678:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	2220      	movs	r2, #32
 8009680:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	2200      	movs	r2, #0
 8009688:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800968c:	2303      	movs	r3, #3
 800968e:	e045      	b.n	800971c <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	f003 0304 	and.w	r3, r3, #4
 800969a:	2b00      	cmp	r3, #0
 800969c:	d02e      	beq.n	80096fc <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	69db      	ldr	r3, [r3, #28]
 80096a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80096a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80096ac:	d126      	bne.n	80096fc <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80096b6:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	681a      	ldr	r2, [r3, #0]
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80096c6:	601a      	str	r2, [r3, #0]
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	689a      	ldr	r2, [r3, #8]
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	f022 0201 	bic.w	r2, r2, #1
 80096d6:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	2220      	movs	r2, #32
 80096dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	2220      	movs	r2, #32
 80096e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	2220      	movs	r2, #32
 80096ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	2200      	movs	r2, #0
 80096f4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
          
          return HAL_TIMEOUT;
 80096f8:	2303      	movs	r3, #3
 80096fa:	e00f      	b.n	800971c <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	69da      	ldr	r2, [r3, #28]
 8009702:	68bb      	ldr	r3, [r7, #8]
 8009704:	4013      	ands	r3, r2
 8009706:	68ba      	ldr	r2, [r7, #8]
 8009708:	429a      	cmp	r2, r3
 800970a:	bf0c      	ite	eq
 800970c:	2301      	moveq	r3, #1
 800970e:	2300      	movne	r3, #0
 8009710:	b2db      	uxtb	r3, r3
 8009712:	461a      	mov	r2, r3
 8009714:	79fb      	ldrb	r3, [r7, #7]
 8009716:	429a      	cmp	r2, r3
 8009718:	d08d      	beq.n	8009636 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800971a:	2300      	movs	r3, #0
}
 800971c:	4618      	mov	r0, r3
 800971e:	3710      	adds	r7, #16
 8009720:	46bd      	mov	sp, r7
 8009722:	bd80      	pop	{r7, pc}

08009724 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009724:	b480      	push	{r7}
 8009726:	b085      	sub	sp, #20
 8009728:	af00      	add	r7, sp, #0
 800972a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8009732:	2b01      	cmp	r3, #1
 8009734:	d101      	bne.n	800973a <HAL_UARTEx_DisableFifoMode+0x16>
 8009736:	2302      	movs	r3, #2
 8009738:	e027      	b.n	800978a <HAL_UARTEx_DisableFifoMode+0x66>
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	2201      	movs	r2, #1
 800973e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	2224      	movs	r2, #36	; 0x24
 8009746:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	681a      	ldr	r2, [r3, #0]
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	f022 0201 	bic.w	r2, r2, #1
 8009760:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009768:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	2200      	movs	r2, #0
 800976e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	68fa      	ldr	r2, [r7, #12]
 8009776:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	2220      	movs	r2, #32
 800977c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	2200      	movs	r2, #0
 8009784:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8009788:	2300      	movs	r3, #0
}
 800978a:	4618      	mov	r0, r3
 800978c:	3714      	adds	r7, #20
 800978e:	46bd      	mov	sp, r7
 8009790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009794:	4770      	bx	lr

08009796 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009796:	b580      	push	{r7, lr}
 8009798:	b084      	sub	sp, #16
 800979a:	af00      	add	r7, sp, #0
 800979c:	6078      	str	r0, [r7, #4]
 800979e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80097a6:	2b01      	cmp	r3, #1
 80097a8:	d101      	bne.n	80097ae <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80097aa:	2302      	movs	r3, #2
 80097ac:	e02d      	b.n	800980a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	2201      	movs	r2, #1
 80097b2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	2224      	movs	r2, #36	; 0x24
 80097ba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	681a      	ldr	r2, [r3, #0]
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	f022 0201 	bic.w	r2, r2, #1
 80097d4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	689b      	ldr	r3, [r3, #8]
 80097dc:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	683a      	ldr	r2, [r7, #0]
 80097e6:	430a      	orrs	r2, r1
 80097e8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80097ea:	6878      	ldr	r0, [r7, #4]
 80097ec:	f000 f850 	bl	8009890 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	68fa      	ldr	r2, [r7, #12]
 80097f6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	2220      	movs	r2, #32
 80097fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	2200      	movs	r2, #0
 8009804:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8009808:	2300      	movs	r3, #0
}
 800980a:	4618      	mov	r0, r3
 800980c:	3710      	adds	r7, #16
 800980e:	46bd      	mov	sp, r7
 8009810:	bd80      	pop	{r7, pc}

08009812 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009812:	b580      	push	{r7, lr}
 8009814:	b084      	sub	sp, #16
 8009816:	af00      	add	r7, sp, #0
 8009818:	6078      	str	r0, [r7, #4]
 800981a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8009822:	2b01      	cmp	r3, #1
 8009824:	d101      	bne.n	800982a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009826:	2302      	movs	r3, #2
 8009828:	e02d      	b.n	8009886 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	2201      	movs	r2, #1
 800982e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	2224      	movs	r2, #36	; 0x24
 8009836:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	681a      	ldr	r2, [r3, #0]
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	f022 0201 	bic.w	r2, r2, #1
 8009850:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	689b      	ldr	r3, [r3, #8]
 8009858:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	683a      	ldr	r2, [r7, #0]
 8009862:	430a      	orrs	r2, r1
 8009864:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009866:	6878      	ldr	r0, [r7, #4]
 8009868:	f000 f812 	bl	8009890 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	68fa      	ldr	r2, [r7, #12]
 8009872:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	2220      	movs	r2, #32
 8009878:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	2200      	movs	r2, #0
 8009880:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8009884:	2300      	movs	r3, #0
}
 8009886:	4618      	mov	r0, r3
 8009888:	3710      	adds	r7, #16
 800988a:	46bd      	mov	sp, r7
 800988c:	bd80      	pop	{r7, pc}
	...

08009890 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009890:	b480      	push	{r7}
 8009892:	b089      	sub	sp, #36	; 0x24
 8009894:	af00      	add	r7, sp, #0
 8009896:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8009898:	4a2f      	ldr	r2, [pc, #188]	; (8009958 <UARTEx_SetNbDataToProcess+0xc8>)
 800989a:	f107 0314 	add.w	r3, r7, #20
 800989e:	e892 0003 	ldmia.w	r2, {r0, r1}
 80098a2:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 80098a6:	4a2d      	ldr	r2, [pc, #180]	; (800995c <UARTEx_SetNbDataToProcess+0xcc>)
 80098a8:	f107 030c 	add.w	r3, r7, #12
 80098ac:	e892 0003 	ldmia.w	r2, {r0, r1}
 80098b0:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d108      	bne.n	80098ce <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	2201      	movs	r2, #1
 80098c0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	2201      	movs	r2, #1
 80098c8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80098cc:	e03d      	b.n	800994a <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80098ce:	2308      	movs	r3, #8
 80098d0:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80098d2:	2308      	movs	r3, #8
 80098d4:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	689b      	ldr	r3, [r3, #8]
 80098dc:	0e5b      	lsrs	r3, r3, #25
 80098de:	b2db      	uxtb	r3, r3
 80098e0:	f003 0307 	and.w	r3, r3, #7
 80098e4:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	689b      	ldr	r3, [r3, #8]
 80098ec:	0f5b      	lsrs	r3, r3, #29
 80098ee:	b2db      	uxtb	r3, r3
 80098f0:	f003 0307 	and.w	r3, r3, #7
 80098f4:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 80098f6:	7fbb      	ldrb	r3, [r7, #30]
 80098f8:	7f3a      	ldrb	r2, [r7, #28]
 80098fa:	f107 0120 	add.w	r1, r7, #32
 80098fe:	440a      	add	r2, r1
 8009900:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8009904:	fb02 f303 	mul.w	r3, r2, r3
 8009908:	7f3a      	ldrb	r2, [r7, #28]
 800990a:	f107 0120 	add.w	r1, r7, #32
 800990e:	440a      	add	r2, r1
 8009910:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8009914:	fb93 f3f2 	sdiv	r3, r3, r2
 8009918:	b29a      	uxth	r2, r3
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8009920:	7ffb      	ldrb	r3, [r7, #31]
 8009922:	7f7a      	ldrb	r2, [r7, #29]
 8009924:	f107 0120 	add.w	r1, r7, #32
 8009928:	440a      	add	r2, r1
 800992a:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800992e:	fb02 f303 	mul.w	r3, r2, r3
 8009932:	7f7a      	ldrb	r2, [r7, #29]
 8009934:	f107 0120 	add.w	r1, r7, #32
 8009938:	440a      	add	r2, r1
 800993a:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800993e:	fb93 f3f2 	sdiv	r3, r3, r2
 8009942:	b29a      	uxth	r2, r3
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800994a:	bf00      	nop
 800994c:	3724      	adds	r7, #36	; 0x24
 800994e:	46bd      	mov	sp, r7
 8009950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009954:	4770      	bx	lr
 8009956:	bf00      	nop
 8009958:	08013590 	.word	0x08013590
 800995c:	08013598 	.word	0x08013598

08009960 <TFT9341_SendCommand>:
};

/* Functions ------------------------------------------------------------------*/
//posli command
void TFT9341_SendCommand(uint8_t cmd)
{
 8009960:	b580      	push	{r7, lr}
 8009962:	b082      	sub	sp, #8
 8009964:	af00      	add	r7, sp, #0
 8009966:	4603      	mov	r3, r0
 8009968:	71fb      	strb	r3, [r7, #7]
  DC_COMMAND();
 800996a:	4b09      	ldr	r3, [pc, #36]	; (8009990 <TFT9341_SendCommand+0x30>)
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	4a09      	ldr	r2, [pc, #36]	; (8009994 <TFT9341_SendCommand+0x34>)
 8009970:	8811      	ldrh	r1, [r2, #0]
 8009972:	2200      	movs	r2, #0
 8009974:	4618      	mov	r0, r3
 8009976:	f7f9 fe6b 	bl	8003650 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit (&hspi3, &cmd, 1, 5000);
 800997a:	1df9      	adds	r1, r7, #7
 800997c:	f241 3388 	movw	r3, #5000	; 0x1388
 8009980:	2201      	movs	r2, #1
 8009982:	4805      	ldr	r0, [pc, #20]	; (8009998 <TFT9341_SendCommand+0x38>)
 8009984:	f7fc f9b9 	bl	8005cfa <HAL_SPI_Transmit>
}
 8009988:	bf00      	nop
 800998a:	3708      	adds	r7, #8
 800998c:	46bd      	mov	sp, r7
 800998e:	bd80      	pop	{r7, pc}
 8009990:	20000240 	.word	0x20000240
 8009994:	20000244 	.word	0x20000244
 8009998:	2001056c 	.word	0x2001056c

0800999c <TFT9341_SendData>:
//posli data
void TFT9341_SendData(uint8_t dt)
{
 800999c:	b580      	push	{r7, lr}
 800999e:	b082      	sub	sp, #8
 80099a0:	af00      	add	r7, sp, #0
 80099a2:	4603      	mov	r3, r0
 80099a4:	71fb      	strb	r3, [r7, #7]
	DC_DATA();
 80099a6:	4b09      	ldr	r3, [pc, #36]	; (80099cc <TFT9341_SendData+0x30>)
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	4a09      	ldr	r2, [pc, #36]	; (80099d0 <TFT9341_SendData+0x34>)
 80099ac:	8811      	ldrh	r1, [r2, #0]
 80099ae:	2201      	movs	r2, #1
 80099b0:	4618      	mov	r0, r3
 80099b2:	f7f9 fe4d 	bl	8003650 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit (&hspi3, &dt, 1, 5000);
 80099b6:	1df9      	adds	r1, r7, #7
 80099b8:	f241 3388 	movw	r3, #5000	; 0x1388
 80099bc:	2201      	movs	r2, #1
 80099be:	4805      	ldr	r0, [pc, #20]	; (80099d4 <TFT9341_SendData+0x38>)
 80099c0:	f7fc f99b 	bl	8005cfa <HAL_SPI_Transmit>
}
 80099c4:	bf00      	nop
 80099c6:	3708      	adds	r7, #8
 80099c8:	46bd      	mov	sp, r7
 80099ca:	bd80      	pop	{r7, pc}
 80099cc:	20000240 	.word	0x20000240
 80099d0:	20000244 	.word	0x20000244
 80099d4:	2001056c 	.word	0x2001056c

080099d8 <TFT9341_WriteData>:
//zapis data
static void TFT9341_WriteData(uint8_t* buff, size_t buff_size)
{
 80099d8:	b580      	push	{r7, lr}
 80099da:	b084      	sub	sp, #16
 80099dc:	af00      	add	r7, sp, #0
 80099de:	6078      	str	r0, [r7, #4]
 80099e0:	6039      	str	r1, [r7, #0]
	DC_DATA();
 80099e2:	4b13      	ldr	r3, [pc, #76]	; (8009a30 <TFT9341_WriteData+0x58>)
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	4a13      	ldr	r2, [pc, #76]	; (8009a34 <TFT9341_WriteData+0x5c>)
 80099e8:	8811      	ldrh	r1, [r2, #0]
 80099ea:	2201      	movs	r2, #1
 80099ec:	4618      	mov	r0, r3
 80099ee:	f7f9 fe2f 	bl	8003650 <HAL_GPIO_WritePin>
	while(buff_size > 0) {
 80099f2:	e015      	b.n	8009a20 <TFT9341_WriteData+0x48>
		uint16_t chunk_size = buff_size > 32768 ? 32768 : buff_size;
 80099f4:	683b      	ldr	r3, [r7, #0]
 80099f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80099fa:	bf28      	it	cs
 80099fc:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 8009a00:	81fb      	strh	r3, [r7, #14]
		HAL_SPI_Transmit(&hspi3, buff, chunk_size, HAL_MAX_DELAY);
 8009a02:	89fa      	ldrh	r2, [r7, #14]
 8009a04:	f04f 33ff 	mov.w	r3, #4294967295
 8009a08:	6879      	ldr	r1, [r7, #4]
 8009a0a:	480b      	ldr	r0, [pc, #44]	; (8009a38 <TFT9341_WriteData+0x60>)
 8009a0c:	f7fc f975 	bl	8005cfa <HAL_SPI_Transmit>
		buff += chunk_size;
 8009a10:	89fb      	ldrh	r3, [r7, #14]
 8009a12:	687a      	ldr	r2, [r7, #4]
 8009a14:	4413      	add	r3, r2
 8009a16:	607b      	str	r3, [r7, #4]
		buff_size -= chunk_size;
 8009a18:	89fb      	ldrh	r3, [r7, #14]
 8009a1a:	683a      	ldr	r2, [r7, #0]
 8009a1c:	1ad3      	subs	r3, r2, r3
 8009a1e:	603b      	str	r3, [r7, #0]
	while(buff_size > 0) {
 8009a20:	683b      	ldr	r3, [r7, #0]
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d1e6      	bne.n	80099f4 <TFT9341_WriteData+0x1c>
	}
}
 8009a26:	bf00      	nop
 8009a28:	bf00      	nop
 8009a2a:	3710      	adds	r7, #16
 8009a2c:	46bd      	mov	sp, r7
 8009a2e:	bd80      	pop	{r7, pc}
 8009a30:	20000240 	.word	0x20000240
 8009a34:	20000244 	.word	0x20000244
 8009a38:	2001056c 	.word	0x2001056c

08009a3c <TFT9341_Init>:
//inicializace tft displeje
void TFT9341_Init(GPIO_TypeDef *csPORT, uint16_t csPIN, GPIO_TypeDef *dcPORT, uint16_t dcPIN, GPIO_TypeDef *resetPORT, uint16_t resetPIN)
{
 8009a3c:	b580      	push	{r7, lr}
 8009a3e:	b088      	sub	sp, #32
 8009a40:	af00      	add	r7, sp, #0
 8009a42:	60f8      	str	r0, [r7, #12]
 8009a44:	607a      	str	r2, [r7, #4]
 8009a46:	461a      	mov	r2, r3
 8009a48:	460b      	mov	r3, r1
 8009a4a:	817b      	strh	r3, [r7, #10]
 8009a4c:	4613      	mov	r3, r2
 8009a4e:	813b      	strh	r3, [r7, #8]
	 //CS pin
	 tftCS_GPIO = csPORT;
 8009a50:	4aaa      	ldr	r2, [pc, #680]	; (8009cfc <TFT9341_Init+0x2c0>)
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	6013      	str	r3, [r2, #0]
	 tftCS_PIN = csPIN;
 8009a56:	4aaa      	ldr	r2, [pc, #680]	; (8009d00 <TFT9341_Init+0x2c4>)
 8009a58:	897b      	ldrh	r3, [r7, #10]
 8009a5a:	8013      	strh	r3, [r2, #0]
	 //DC pin
	 tftDC_GPIO = dcPORT;
 8009a5c:	4aa9      	ldr	r2, [pc, #676]	; (8009d04 <TFT9341_Init+0x2c8>)
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	6013      	str	r3, [r2, #0]
	 tftDC_PIN = dcPIN;
 8009a62:	4aa9      	ldr	r2, [pc, #676]	; (8009d08 <TFT9341_Init+0x2cc>)
 8009a64:	893b      	ldrh	r3, [r7, #8]
 8009a66:	8013      	strh	r3, [r2, #0]
	 //RESET pin
	 tftRESET_GPIO = resetPORT;
 8009a68:	4aa8      	ldr	r2, [pc, #672]	; (8009d0c <TFT9341_Init+0x2d0>)
 8009a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a6c:	6013      	str	r3, [r2, #0]
	 tftRESET_PIN = resetPIN;
 8009a6e:	4aa8      	ldr	r2, [pc, #672]	; (8009d10 <TFT9341_Init+0x2d4>)
 8009a70:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8009a72:	8013      	strh	r3, [r2, #0]
	  uint8_t data[15];
	  CS_ACTIVE();
 8009a74:	4ba1      	ldr	r3, [pc, #644]	; (8009cfc <TFT9341_Init+0x2c0>)
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	4aa1      	ldr	r2, [pc, #644]	; (8009d00 <TFT9341_Init+0x2c4>)
 8009a7a:	8811      	ldrh	r1, [r2, #0]
 8009a7c:	2200      	movs	r2, #0
 8009a7e:	4618      	mov	r0, r3
 8009a80:	f7f9 fde6 	bl	8003650 <HAL_GPIO_WritePin>
	  TFT9341_reset();
 8009a84:	f000 f946 	bl	8009d14 <TFT9341_reset>
	  //Software Reset
	  TFT9341_SendCommand(0x01);
 8009a88:	2001      	movs	r0, #1
 8009a8a:	f7ff ff69 	bl	8009960 <TFT9341_SendCommand>
	  HAL_Delay(1000);
 8009a8e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009a92:	f7f7 fb33 	bl	80010fc <HAL_Delay>
	  //Power Control A
	  data[0] = 0x39;
 8009a96:	2339      	movs	r3, #57	; 0x39
 8009a98:	743b      	strb	r3, [r7, #16]
	  data[1] = 0x2C;
 8009a9a:	232c      	movs	r3, #44	; 0x2c
 8009a9c:	747b      	strb	r3, [r7, #17]
	  data[2] = 0x00;
 8009a9e:	2300      	movs	r3, #0
 8009aa0:	74bb      	strb	r3, [r7, #18]
	  data[3] = 0x34;
 8009aa2:	2334      	movs	r3, #52	; 0x34
 8009aa4:	74fb      	strb	r3, [r7, #19]
	  data[4] = 0x02;
 8009aa6:	2302      	movs	r3, #2
 8009aa8:	753b      	strb	r3, [r7, #20]
	  TFT9341_SendCommand(0xCB);
 8009aaa:	20cb      	movs	r0, #203	; 0xcb
 8009aac:	f7ff ff58 	bl	8009960 <TFT9341_SendCommand>
	  TFT9341_WriteData(data, 5);
 8009ab0:	f107 0310 	add.w	r3, r7, #16
 8009ab4:	2105      	movs	r1, #5
 8009ab6:	4618      	mov	r0, r3
 8009ab8:	f7ff ff8e 	bl	80099d8 <TFT9341_WriteData>
	  //Power Control B
	  data[0] = 0x00;
 8009abc:	2300      	movs	r3, #0
 8009abe:	743b      	strb	r3, [r7, #16]
	  data[1] = 0xC1;
 8009ac0:	23c1      	movs	r3, #193	; 0xc1
 8009ac2:	747b      	strb	r3, [r7, #17]
	  data[2] = 0x30;
 8009ac4:	2330      	movs	r3, #48	; 0x30
 8009ac6:	74bb      	strb	r3, [r7, #18]
	  TFT9341_SendCommand(0xCF);
 8009ac8:	20cf      	movs	r0, #207	; 0xcf
 8009aca:	f7ff ff49 	bl	8009960 <TFT9341_SendCommand>
	  TFT9341_WriteData(data, 3);
 8009ace:	f107 0310 	add.w	r3, r7, #16
 8009ad2:	2103      	movs	r1, #3
 8009ad4:	4618      	mov	r0, r3
 8009ad6:	f7ff ff7f 	bl	80099d8 <TFT9341_WriteData>
	  //Driver timing control A
	  data[0] = 0x85;
 8009ada:	2385      	movs	r3, #133	; 0x85
 8009adc:	743b      	strb	r3, [r7, #16]
	  data[1] = 0x00;
 8009ade:	2300      	movs	r3, #0
 8009ae0:	747b      	strb	r3, [r7, #17]
	  data[2] = 0x78;
 8009ae2:	2378      	movs	r3, #120	; 0x78
 8009ae4:	74bb      	strb	r3, [r7, #18]
	  TFT9341_SendCommand(0xE8);
 8009ae6:	20e8      	movs	r0, #232	; 0xe8
 8009ae8:	f7ff ff3a 	bl	8009960 <TFT9341_SendCommand>
	  TFT9341_WriteData(data, 3);
 8009aec:	f107 0310 	add.w	r3, r7, #16
 8009af0:	2103      	movs	r1, #3
 8009af2:	4618      	mov	r0, r3
 8009af4:	f7ff ff70 	bl	80099d8 <TFT9341_WriteData>
	  //Driver timing control B
	  data[0] = 0x00;
 8009af8:	2300      	movs	r3, #0
 8009afa:	743b      	strb	r3, [r7, #16]
	  data[1] = 0x00;
 8009afc:	2300      	movs	r3, #0
 8009afe:	747b      	strb	r3, [r7, #17]
	  TFT9341_SendCommand(0xEA);
 8009b00:	20ea      	movs	r0, #234	; 0xea
 8009b02:	f7ff ff2d 	bl	8009960 <TFT9341_SendCommand>
	  TFT9341_WriteData(data, 2);
 8009b06:	f107 0310 	add.w	r3, r7, #16
 8009b0a:	2102      	movs	r1, #2
 8009b0c:	4618      	mov	r0, r3
 8009b0e:	f7ff ff63 	bl	80099d8 <TFT9341_WriteData>
	  //Power on Sequence control
	  data[0] = 0x64;
 8009b12:	2364      	movs	r3, #100	; 0x64
 8009b14:	743b      	strb	r3, [r7, #16]
	  data[1] = 0x03;
 8009b16:	2303      	movs	r3, #3
 8009b18:	747b      	strb	r3, [r7, #17]
	  data[2] = 0x12;
 8009b1a:	2312      	movs	r3, #18
 8009b1c:	74bb      	strb	r3, [r7, #18]
	  data[3] = 0x81;
 8009b1e:	2381      	movs	r3, #129	; 0x81
 8009b20:	74fb      	strb	r3, [r7, #19]
	  TFT9341_SendCommand(0xED);
 8009b22:	20ed      	movs	r0, #237	; 0xed
 8009b24:	f7ff ff1c 	bl	8009960 <TFT9341_SendCommand>
	  TFT9341_WriteData(data, 4);
 8009b28:	f107 0310 	add.w	r3, r7, #16
 8009b2c:	2104      	movs	r1, #4
 8009b2e:	4618      	mov	r0, r3
 8009b30:	f7ff ff52 	bl	80099d8 <TFT9341_WriteData>
	  //Pump ratio control
	  data[0] = 0x20;
 8009b34:	2320      	movs	r3, #32
 8009b36:	743b      	strb	r3, [r7, #16]
	  TFT9341_SendCommand(0xF7);
 8009b38:	20f7      	movs	r0, #247	; 0xf7
 8009b3a:	f7ff ff11 	bl	8009960 <TFT9341_SendCommand>
	  TFT9341_WriteData(data, 1);
 8009b3e:	f107 0310 	add.w	r3, r7, #16
 8009b42:	2101      	movs	r1, #1
 8009b44:	4618      	mov	r0, r3
 8009b46:	f7ff ff47 	bl	80099d8 <TFT9341_WriteData>
	  //Power Control,VRH[5:0]
	  data[0] = 0x10;
 8009b4a:	2310      	movs	r3, #16
 8009b4c:	743b      	strb	r3, [r7, #16]
	  TFT9341_SendCommand(0xC0);
 8009b4e:	20c0      	movs	r0, #192	; 0xc0
 8009b50:	f7ff ff06 	bl	8009960 <TFT9341_SendCommand>
	  TFT9341_WriteData(data, 1);
 8009b54:	f107 0310 	add.w	r3, r7, #16
 8009b58:	2101      	movs	r1, #1
 8009b5a:	4618      	mov	r0, r3
 8009b5c:	f7ff ff3c 	bl	80099d8 <TFT9341_WriteData>
	  //Power Control,SAP[2:0];BT[3:0]
	  data[0] = 0x10;
 8009b60:	2310      	movs	r3, #16
 8009b62:	743b      	strb	r3, [r7, #16]
	  TFT9341_SendCommand(0xC1);
 8009b64:	20c1      	movs	r0, #193	; 0xc1
 8009b66:	f7ff fefb 	bl	8009960 <TFT9341_SendCommand>
	  TFT9341_WriteData(data, 1);
 8009b6a:	f107 0310 	add.w	r3, r7, #16
 8009b6e:	2101      	movs	r1, #1
 8009b70:	4618      	mov	r0, r3
 8009b72:	f7ff ff31 	bl	80099d8 <TFT9341_WriteData>
	  //VCOM Control 1
	  data[0] = 0x3E;
 8009b76:	233e      	movs	r3, #62	; 0x3e
 8009b78:	743b      	strb	r3, [r7, #16]
	  data[1] = 0x28;
 8009b7a:	2328      	movs	r3, #40	; 0x28
 8009b7c:	747b      	strb	r3, [r7, #17]
	  TFT9341_SendCommand(0xC5);
 8009b7e:	20c5      	movs	r0, #197	; 0xc5
 8009b80:	f7ff feee 	bl	8009960 <TFT9341_SendCommand>
	  TFT9341_WriteData(data, 2);
 8009b84:	f107 0310 	add.w	r3, r7, #16
 8009b88:	2102      	movs	r1, #2
 8009b8a:	4618      	mov	r0, r3
 8009b8c:	f7ff ff24 	bl	80099d8 <TFT9341_WriteData>
	  //VCOM Control 2
	  data[0] = 0x86;
 8009b90:	2386      	movs	r3, #134	; 0x86
 8009b92:	743b      	strb	r3, [r7, #16]
	  TFT9341_SendCommand(0xC7);
 8009b94:	20c7      	movs	r0, #199	; 0xc7
 8009b96:	f7ff fee3 	bl	8009960 <TFT9341_SendCommand>
	  TFT9341_WriteData(data, 1);
 8009b9a:	f107 0310 	add.w	r3, r7, #16
 8009b9e:	2101      	movs	r1, #1
 8009ba0:	4618      	mov	r0, r3
 8009ba2:	f7ff ff19 	bl	80099d8 <TFT9341_WriteData>
	  //Memory Acsess Control
	  data[0] = 0x48;
 8009ba6:	2348      	movs	r3, #72	; 0x48
 8009ba8:	743b      	strb	r3, [r7, #16]
	  TFT9341_SendCommand(0x36);
 8009baa:	2036      	movs	r0, #54	; 0x36
 8009bac:	f7ff fed8 	bl	8009960 <TFT9341_SendCommand>
	  TFT9341_WriteData(data, 1);
 8009bb0:	f107 0310 	add.w	r3, r7, #16
 8009bb4:	2101      	movs	r1, #1
 8009bb6:	4618      	mov	r0, r3
 8009bb8:	f7ff ff0e 	bl	80099d8 <TFT9341_WriteData>
	  //Pixel Format Set
	  data[0] = 0x55;//16bit
 8009bbc:	2355      	movs	r3, #85	; 0x55
 8009bbe:	743b      	strb	r3, [r7, #16]
	  TFT9341_SendCommand(0x3A);
 8009bc0:	203a      	movs	r0, #58	; 0x3a
 8009bc2:	f7ff fecd 	bl	8009960 <TFT9341_SendCommand>
	  TFT9341_WriteData(data, 1);
 8009bc6:	f107 0310 	add.w	r3, r7, #16
 8009bca:	2101      	movs	r1, #1
 8009bcc:	4618      	mov	r0, r3
 8009bce:	f7ff ff03 	bl	80099d8 <TFT9341_WriteData>
	  //Frame Rratio Control, Standard RGB Color
	  data[0] = 0x00;
 8009bd2:	2300      	movs	r3, #0
 8009bd4:	743b      	strb	r3, [r7, #16]
	  data[1] = 0x18;
 8009bd6:	2318      	movs	r3, #24
 8009bd8:	747b      	strb	r3, [r7, #17]
	  TFT9341_SendCommand(0xB1);
 8009bda:	20b1      	movs	r0, #177	; 0xb1
 8009bdc:	f7ff fec0 	bl	8009960 <TFT9341_SendCommand>
	  TFT9341_WriteData(data, 2);
 8009be0:	f107 0310 	add.w	r3, r7, #16
 8009be4:	2102      	movs	r1, #2
 8009be6:	4618      	mov	r0, r3
 8009be8:	f7ff fef6 	bl	80099d8 <TFT9341_WriteData>
	  //Display Function Control
	  data[0] = 0x08;
 8009bec:	2308      	movs	r3, #8
 8009bee:	743b      	strb	r3, [r7, #16]
	  data[1] = 0x82;
 8009bf0:	2382      	movs	r3, #130	; 0x82
 8009bf2:	747b      	strb	r3, [r7, #17]
	  data[2] = 0x27;//320
 8009bf4:	2327      	movs	r3, #39	; 0x27
 8009bf6:	74bb      	strb	r3, [r7, #18]
	  TFT9341_SendCommand(0xB6);
 8009bf8:	20b6      	movs	r0, #182	; 0xb6
 8009bfa:	f7ff feb1 	bl	8009960 <TFT9341_SendCommand>
	  TFT9341_WriteData(data, 3);
 8009bfe:	f107 0310 	add.w	r3, r7, #16
 8009c02:	2103      	movs	r1, #3
 8009c04:	4618      	mov	r0, r3
 8009c06:	f7ff fee7 	bl	80099d8 <TFT9341_WriteData>
	  //Enable 3G
	  data[0] = 0x00;
 8009c0a:	2300      	movs	r3, #0
 8009c0c:	743b      	strb	r3, [r7, #16]
	  TFT9341_SendCommand(0xF2);
 8009c0e:	20f2      	movs	r0, #242	; 0xf2
 8009c10:	f7ff fea6 	bl	8009960 <TFT9341_SendCommand>
	  TFT9341_WriteData(data, 1);
 8009c14:	f107 0310 	add.w	r3, r7, #16
 8009c18:	2101      	movs	r1, #1
 8009c1a:	4618      	mov	r0, r3
 8009c1c:	f7ff fedc 	bl	80099d8 <TFT9341_WriteData>
	  //Gamma set
	  data[0] = 0x01;//Gamma Curve (G2.2)
 8009c20:	2301      	movs	r3, #1
 8009c22:	743b      	strb	r3, [r7, #16]
	  TFT9341_SendCommand(0x26);
 8009c24:	2026      	movs	r0, #38	; 0x26
 8009c26:	f7ff fe9b 	bl	8009960 <TFT9341_SendCommand>
	  TFT9341_WriteData(data, 1);
 8009c2a:	f107 0310 	add.w	r3, r7, #16
 8009c2e:	2101      	movs	r1, #1
 8009c30:	4618      	mov	r0, r3
 8009c32:	f7ff fed1 	bl	80099d8 <TFT9341_WriteData>
	  //Positive Gamma  Correction
	  data[0] = 0x0F;
 8009c36:	230f      	movs	r3, #15
 8009c38:	743b      	strb	r3, [r7, #16]
	  data[1] = 0x31;
 8009c3a:	2331      	movs	r3, #49	; 0x31
 8009c3c:	747b      	strb	r3, [r7, #17]
	  data[2] = 0x2B;
 8009c3e:	232b      	movs	r3, #43	; 0x2b
 8009c40:	74bb      	strb	r3, [r7, #18]
	  data[3] = 0x0C;
 8009c42:	230c      	movs	r3, #12
 8009c44:	74fb      	strb	r3, [r7, #19]
	  data[4] = 0x0E;
 8009c46:	230e      	movs	r3, #14
 8009c48:	753b      	strb	r3, [r7, #20]
	  data[5] = 0x08;
 8009c4a:	2308      	movs	r3, #8
 8009c4c:	757b      	strb	r3, [r7, #21]
	  data[6] = 0x4E;
 8009c4e:	234e      	movs	r3, #78	; 0x4e
 8009c50:	75bb      	strb	r3, [r7, #22]
	  data[7] = 0xF1;
 8009c52:	23f1      	movs	r3, #241	; 0xf1
 8009c54:	75fb      	strb	r3, [r7, #23]
	  data[8] = 0x37;
 8009c56:	2337      	movs	r3, #55	; 0x37
 8009c58:	763b      	strb	r3, [r7, #24]
	  data[9] = 0x07;
 8009c5a:	2307      	movs	r3, #7
 8009c5c:	767b      	strb	r3, [r7, #25]
	  data[10] = 0x10;
 8009c5e:	2310      	movs	r3, #16
 8009c60:	76bb      	strb	r3, [r7, #26]
	  data[11] = 0x03;
 8009c62:	2303      	movs	r3, #3
 8009c64:	76fb      	strb	r3, [r7, #27]
	  data[12] = 0x0E;
 8009c66:	230e      	movs	r3, #14
 8009c68:	773b      	strb	r3, [r7, #28]
	  data[13] = 0x09;
 8009c6a:	2309      	movs	r3, #9
 8009c6c:	777b      	strb	r3, [r7, #29]
	  data[14] = 0x00;
 8009c6e:	2300      	movs	r3, #0
 8009c70:	77bb      	strb	r3, [r7, #30]
	  TFT9341_SendCommand(0xE0);
 8009c72:	20e0      	movs	r0, #224	; 0xe0
 8009c74:	f7ff fe74 	bl	8009960 <TFT9341_SendCommand>
	  TFT9341_WriteData(data, 15);
 8009c78:	f107 0310 	add.w	r3, r7, #16
 8009c7c:	210f      	movs	r1, #15
 8009c7e:	4618      	mov	r0, r3
 8009c80:	f7ff feaa 	bl	80099d8 <TFT9341_WriteData>
	  //Negative Gamma  Correction
	  data[0] = 0x00;
 8009c84:	2300      	movs	r3, #0
 8009c86:	743b      	strb	r3, [r7, #16]
	  data[1] = 0x0E;
 8009c88:	230e      	movs	r3, #14
 8009c8a:	747b      	strb	r3, [r7, #17]
	  data[2] = 0x14;
 8009c8c:	2314      	movs	r3, #20
 8009c8e:	74bb      	strb	r3, [r7, #18]
	  data[3] = 0x03;
 8009c90:	2303      	movs	r3, #3
 8009c92:	74fb      	strb	r3, [r7, #19]
	  data[4] = 0x11;
 8009c94:	2311      	movs	r3, #17
 8009c96:	753b      	strb	r3, [r7, #20]
	  data[5] = 0x07;
 8009c98:	2307      	movs	r3, #7
 8009c9a:	757b      	strb	r3, [r7, #21]
	  data[6] = 0x31;
 8009c9c:	2331      	movs	r3, #49	; 0x31
 8009c9e:	75bb      	strb	r3, [r7, #22]
	  data[7] = 0xC1;
 8009ca0:	23c1      	movs	r3, #193	; 0xc1
 8009ca2:	75fb      	strb	r3, [r7, #23]
	  data[8] = 0x48;
 8009ca4:	2348      	movs	r3, #72	; 0x48
 8009ca6:	763b      	strb	r3, [r7, #24]
	  data[9] = 0x08;
 8009ca8:	2308      	movs	r3, #8
 8009caa:	767b      	strb	r3, [r7, #25]
	  data[10] = 0x0F;
 8009cac:	230f      	movs	r3, #15
 8009cae:	76bb      	strb	r3, [r7, #26]
	  data[11] = 0x0C;
 8009cb0:	230c      	movs	r3, #12
 8009cb2:	76fb      	strb	r3, [r7, #27]
	  data[12] = 0x31;
 8009cb4:	2331      	movs	r3, #49	; 0x31
 8009cb6:	773b      	strb	r3, [r7, #28]
	  data[13] = 0x36;
 8009cb8:	2336      	movs	r3, #54	; 0x36
 8009cba:	777b      	strb	r3, [r7, #29]
	  data[14] = 0x0F;
 8009cbc:	230f      	movs	r3, #15
 8009cbe:	77bb      	strb	r3, [r7, #30]
	  TFT9341_SendCommand(0xE1);
 8009cc0:	20e1      	movs	r0, #225	; 0xe1
 8009cc2:	f7ff fe4d 	bl	8009960 <TFT9341_SendCommand>
	  TFT9341_WriteData(data, 15);
 8009cc6:	f107 0310 	add.w	r3, r7, #16
 8009cca:	210f      	movs	r1, #15
 8009ccc:	4618      	mov	r0, r3
 8009cce:	f7ff fe83 	bl	80099d8 <TFT9341_WriteData>
	  TFT9341_SendCommand(0x11);
 8009cd2:	2011      	movs	r0, #17
 8009cd4:	f7ff fe44 	bl	8009960 <TFT9341_SendCommand>
	  HAL_Delay(120);
 8009cd8:	2078      	movs	r0, #120	; 0x78
 8009cda:	f7f7 fa0f 	bl	80010fc <HAL_Delay>
	  //Display ON
	  data[0] = 0x48;
 8009cde:	2348      	movs	r3, #72	; 0x48
 8009ce0:	743b      	strb	r3, [r7, #16]
	  TFT9341_SendCommand(0x29);
 8009ce2:	2029      	movs	r0, #41	; 0x29
 8009ce4:	f7ff fe3c 	bl	8009960 <TFT9341_SendCommand>
	  TFT9341_WriteData(data, 1);
 8009ce8:	f107 0310 	add.w	r3, r7, #16
 8009cec:	2101      	movs	r1, #1
 8009cee:	4618      	mov	r0, r3
 8009cf0:	f7ff fe72 	bl	80099d8 <TFT9341_WriteData>
}
 8009cf4:	bf00      	nop
 8009cf6:	3720      	adds	r7, #32
 8009cf8:	46bd      	mov	sp, r7
 8009cfa:	bd80      	pop	{r7, pc}
 8009cfc:	20000238 	.word	0x20000238
 8009d00:	2000023c 	.word	0x2000023c
 8009d04:	20000240 	.word	0x20000240
 8009d08:	20000244 	.word	0x20000244
 8009d0c:	20000248 	.word	0x20000248
 8009d10:	2000024c 	.word	0x2000024c

08009d14 <TFT9341_reset>:
//reset TFT displeje
void TFT9341_reset(void)
{
 8009d14:	b580      	push	{r7, lr}
 8009d16:	af00      	add	r7, sp, #0
	RESET_ACTIVE();
 8009d18:	4b0a      	ldr	r3, [pc, #40]	; (8009d44 <TFT9341_reset+0x30>)
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	4a0a      	ldr	r2, [pc, #40]	; (8009d48 <TFT9341_reset+0x34>)
 8009d1e:	8811      	ldrh	r1, [r2, #0]
 8009d20:	2200      	movs	r2, #0
 8009d22:	4618      	mov	r0, r3
 8009d24:	f7f9 fc94 	bl	8003650 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8009d28:	2005      	movs	r0, #5
 8009d2a:	f7f7 f9e7 	bl	80010fc <HAL_Delay>
	RESET_IDLE();
 8009d2e:	4b05      	ldr	r3, [pc, #20]	; (8009d44 <TFT9341_reset+0x30>)
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	4a05      	ldr	r2, [pc, #20]	; (8009d48 <TFT9341_reset+0x34>)
 8009d34:	8811      	ldrh	r1, [r2, #0]
 8009d36:	2201      	movs	r2, #1
 8009d38:	4618      	mov	r0, r3
 8009d3a:	f7f9 fc89 	bl	8003650 <HAL_GPIO_WritePin>
}
 8009d3e:	bf00      	nop
 8009d40:	bd80      	pop	{r7, pc}
 8009d42:	bf00      	nop
 8009d44:	20000248 	.word	0x20000248
 8009d48:	2000024c 	.word	0x2000024c

08009d4c <TFT9341_SetAddrWindow>:
//nastaveni adresy okna kam se bude vykreslovat
static void TFT9341_SetAddrWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1)
{
 8009d4c:	b590      	push	{r4, r7, lr}
 8009d4e:	b085      	sub	sp, #20
 8009d50:	af00      	add	r7, sp, #0
 8009d52:	4604      	mov	r4, r0
 8009d54:	4608      	mov	r0, r1
 8009d56:	4611      	mov	r1, r2
 8009d58:	461a      	mov	r2, r3
 8009d5a:	4623      	mov	r3, r4
 8009d5c:	80fb      	strh	r3, [r7, #6]
 8009d5e:	4603      	mov	r3, r0
 8009d60:	80bb      	strh	r3, [r7, #4]
 8009d62:	460b      	mov	r3, r1
 8009d64:	807b      	strh	r3, [r7, #2]
 8009d66:	4613      	mov	r3, r2
 8009d68:	803b      	strh	r3, [r7, #0]
	  // column address set
	  TFT9341_SendCommand(0x2A); // CASET
 8009d6a:	202a      	movs	r0, #42	; 0x2a
 8009d6c:	f7ff fdf8 	bl	8009960 <TFT9341_SendCommand>
	  {
	    uint8_t data[] = { (x0 >> 8) & 0xFF, x0 & 0xFF, (x1 >> 8) & 0xFF, x1 & 0xFF };
 8009d70:	88fb      	ldrh	r3, [r7, #6]
 8009d72:	0a1b      	lsrs	r3, r3, #8
 8009d74:	b29b      	uxth	r3, r3
 8009d76:	b2db      	uxtb	r3, r3
 8009d78:	733b      	strb	r3, [r7, #12]
 8009d7a:	88fb      	ldrh	r3, [r7, #6]
 8009d7c:	b2db      	uxtb	r3, r3
 8009d7e:	737b      	strb	r3, [r7, #13]
 8009d80:	887b      	ldrh	r3, [r7, #2]
 8009d82:	0a1b      	lsrs	r3, r3, #8
 8009d84:	b29b      	uxth	r3, r3
 8009d86:	b2db      	uxtb	r3, r3
 8009d88:	73bb      	strb	r3, [r7, #14]
 8009d8a:	887b      	ldrh	r3, [r7, #2]
 8009d8c:	b2db      	uxtb	r3, r3
 8009d8e:	73fb      	strb	r3, [r7, #15]
	    TFT9341_WriteData(data, sizeof(data));
 8009d90:	f107 030c 	add.w	r3, r7, #12
 8009d94:	2104      	movs	r1, #4
 8009d96:	4618      	mov	r0, r3
 8009d98:	f7ff fe1e 	bl	80099d8 <TFT9341_WriteData>
	  }
	  // row address set
	  TFT9341_SendCommand(0x2B); // RASET
 8009d9c:	202b      	movs	r0, #43	; 0x2b
 8009d9e:	f7ff fddf 	bl	8009960 <TFT9341_SendCommand>
	  {
	    uint8_t data[] = { (y0 >> 8) & 0xFF, y0 & 0xFF, (y1 >> 8) & 0xFF, y1 & 0xFF };
 8009da2:	88bb      	ldrh	r3, [r7, #4]
 8009da4:	0a1b      	lsrs	r3, r3, #8
 8009da6:	b29b      	uxth	r3, r3
 8009da8:	b2db      	uxtb	r3, r3
 8009daa:	723b      	strb	r3, [r7, #8]
 8009dac:	88bb      	ldrh	r3, [r7, #4]
 8009dae:	b2db      	uxtb	r3, r3
 8009db0:	727b      	strb	r3, [r7, #9]
 8009db2:	883b      	ldrh	r3, [r7, #0]
 8009db4:	0a1b      	lsrs	r3, r3, #8
 8009db6:	b29b      	uxth	r3, r3
 8009db8:	b2db      	uxtb	r3, r3
 8009dba:	72bb      	strb	r3, [r7, #10]
 8009dbc:	883b      	ldrh	r3, [r7, #0]
 8009dbe:	b2db      	uxtb	r3, r3
 8009dc0:	72fb      	strb	r3, [r7, #11]
	    TFT9341_WriteData(data, sizeof(data));
 8009dc2:	f107 0308 	add.w	r3, r7, #8
 8009dc6:	2104      	movs	r1, #4
 8009dc8:	4618      	mov	r0, r3
 8009dca:	f7ff fe05 	bl	80099d8 <TFT9341_WriteData>
	  }
	  // write to RAM
	  TFT9341_SendCommand(0x2C); // RAMWR
 8009dce:	202c      	movs	r0, #44	; 0x2c
 8009dd0:	f7ff fdc6 	bl	8009960 <TFT9341_SendCommand>
}
 8009dd4:	bf00      	nop
 8009dd6:	3714      	adds	r7, #20
 8009dd8:	46bd      	mov	sp, r7
 8009dda:	bd90      	pop	{r4, r7, pc}

08009ddc <TFT9341_FillScreen>:
//vybarveni cele obrazovky
void TFT9341_FillScreen(uint16_t color)
{
 8009ddc:	b580      	push	{r7, lr}
 8009dde:	b084      	sub	sp, #16
 8009de0:	af00      	add	r7, sp, #0
 8009de2:	4603      	mov	r3, r0
 8009de4:	80fb      	strh	r3, [r7, #6]
	  uint32_t i, n;
	  TFT9341_SetAddrWindow(0, 0, TFT9341_WIDTH-1, TFT9341_HEIGHT-1);
 8009de6:	4b23      	ldr	r3, [pc, #140]	; (8009e74 <TFT9341_FillScreen+0x98>)
 8009de8:	881b      	ldrh	r3, [r3, #0]
 8009dea:	3b01      	subs	r3, #1
 8009dec:	b29a      	uxth	r2, r3
 8009dee:	4b22      	ldr	r3, [pc, #136]	; (8009e78 <TFT9341_FillScreen+0x9c>)
 8009df0:	881b      	ldrh	r3, [r3, #0]
 8009df2:	3b01      	subs	r3, #1
 8009df4:	b29b      	uxth	r3, r3
 8009df6:	2100      	movs	r1, #0
 8009df8:	2000      	movs	r0, #0
 8009dfa:	f7ff ffa7 	bl	8009d4c <TFT9341_SetAddrWindow>
	  for(i=0;i<25600;i++)
 8009dfe:	2300      	movs	r3, #0
 8009e00:	60fb      	str	r3, [r7, #12]
 8009e02:	e011      	b.n	8009e28 <TFT9341_FillScreen+0x4c>
	  {
	    frm_buf[i*2] = color >> 8;
 8009e04:	88fb      	ldrh	r3, [r7, #6]
 8009e06:	0a1b      	lsrs	r3, r3, #8
 8009e08:	b29a      	uxth	r2, r3
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	005b      	lsls	r3, r3, #1
 8009e0e:	b2d1      	uxtb	r1, r2
 8009e10:	4a1a      	ldr	r2, [pc, #104]	; (8009e7c <TFT9341_FillScreen+0xa0>)
 8009e12:	54d1      	strb	r1, [r2, r3]
	    frm_buf[i*2+1] = color & 0xFF;
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	005b      	lsls	r3, r3, #1
 8009e18:	3301      	adds	r3, #1
 8009e1a:	88fa      	ldrh	r2, [r7, #6]
 8009e1c:	b2d1      	uxtb	r1, r2
 8009e1e:	4a17      	ldr	r2, [pc, #92]	; (8009e7c <TFT9341_FillScreen+0xa0>)
 8009e20:	54d1      	strb	r1, [r2, r3]
	  for(i=0;i<25600;i++)
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	3301      	adds	r3, #1
 8009e26:	60fb      	str	r3, [r7, #12]
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	f5b3 4fc8 	cmp.w	r3, #25600	; 0x6400
 8009e2e:	d3e9      	bcc.n	8009e04 <TFT9341_FillScreen+0x28>
	  }
	  n = 51200;
 8009e30:	f44f 4348 	mov.w	r3, #51200	; 0xc800
 8009e34:	60bb      	str	r3, [r7, #8]
	  DC_DATA();
 8009e36:	4b12      	ldr	r3, [pc, #72]	; (8009e80 <TFT9341_FillScreen+0xa4>)
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	4a12      	ldr	r2, [pc, #72]	; (8009e84 <TFT9341_FillScreen+0xa8>)
 8009e3c:	8811      	ldrh	r1, [r2, #0]
 8009e3e:	2201      	movs	r2, #1
 8009e40:	4618      	mov	r0, r3
 8009e42:	f7f9 fc05 	bl	8003650 <HAL_GPIO_WritePin>
	  dma_spi_cnt = 3;
 8009e46:	4b10      	ldr	r3, [pc, #64]	; (8009e88 <TFT9341_FillScreen+0xac>)
 8009e48:	2203      	movs	r2, #3
 8009e4a:	601a      	str	r2, [r3, #0]
	  HAL_SPI_Transmit_DMA(&hspi3, frm_buf, n);
 8009e4c:	68bb      	ldr	r3, [r7, #8]
 8009e4e:	b29b      	uxth	r3, r3
 8009e50:	461a      	mov	r2, r3
 8009e52:	490a      	ldr	r1, [pc, #40]	; (8009e7c <TFT9341_FillScreen+0xa0>)
 8009e54:	480d      	ldr	r0, [pc, #52]	; (8009e8c <TFT9341_FillScreen+0xb0>)
 8009e56:	f7fc fac9 	bl	80063ec <HAL_SPI_Transmit_DMA>
	  while(!dma_spi_fl) {}
 8009e5a:	bf00      	nop
 8009e5c:	4b0c      	ldr	r3, [pc, #48]	; (8009e90 <TFT9341_FillScreen+0xb4>)
 8009e5e:	781b      	ldrb	r3, [r3, #0]
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d0fb      	beq.n	8009e5c <TFT9341_FillScreen+0x80>
	  dma_spi_fl=0;
 8009e64:	4b0a      	ldr	r3, [pc, #40]	; (8009e90 <TFT9341_FillScreen+0xb4>)
 8009e66:	2200      	movs	r2, #0
 8009e68:	701a      	strb	r2, [r3, #0]
}
 8009e6a:	bf00      	nop
 8009e6c:	3710      	adds	r7, #16
 8009e6e:	46bd      	mov	sp, r7
 8009e70:	bd80      	pop	{r7, pc}
 8009e72:	bf00      	nop
 8009e74:	2000000a 	.word	0x2000000a
 8009e78:	2000000c 	.word	0x2000000c
 8009e7c:	20000250 	.word	0x20000250
 8009e80:	20000240 	.word	0x20000240
 8009e84:	20000244 	.word	0x20000244
 8009e88:	2000001c 	.word	0x2000001c
 8009e8c:	2001056c 	.word	0x2001056c
 8009e90:	200102c9 	.word	0x200102c9

08009e94 <TFT9341_FillRect>:
//vykresleni obdelniku
void TFT9341_FillRect(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t color)
{
 8009e94:	b590      	push	{r4, r7, lr}
 8009e96:	b089      	sub	sp, #36	; 0x24
 8009e98:	af00      	add	r7, sp, #0
 8009e9a:	4604      	mov	r4, r0
 8009e9c:	4608      	mov	r0, r1
 8009e9e:	4611      	mov	r1, r2
 8009ea0:	461a      	mov	r2, r3
 8009ea2:	4623      	mov	r3, r4
 8009ea4:	80fb      	strh	r3, [r7, #6]
 8009ea6:	4603      	mov	r3, r0
 8009ea8:	80bb      	strh	r3, [r7, #4]
 8009eaa:	460b      	mov	r3, r1
 8009eac:	807b      	strh	r3, [r7, #2]
 8009eae:	4613      	mov	r3, r2
 8009eb0:	803b      	strh	r3, [r7, #0]
	 uint32_t i, n, cnt, buf_size;
		if(x1>x2) swap(x1,x2);
 8009eb2:	88fa      	ldrh	r2, [r7, #6]
 8009eb4:	887b      	ldrh	r3, [r7, #2]
 8009eb6:	429a      	cmp	r2, r3
 8009eb8:	d905      	bls.n	8009ec6 <TFT9341_FillRect+0x32>
 8009eba:	88fb      	ldrh	r3, [r7, #6]
 8009ebc:	827b      	strh	r3, [r7, #18]
 8009ebe:	887b      	ldrh	r3, [r7, #2]
 8009ec0:	80fb      	strh	r3, [r7, #6]
 8009ec2:	8a7b      	ldrh	r3, [r7, #18]
 8009ec4:	807b      	strh	r3, [r7, #2]
		if(y1>y2) swap(y1,y2);
 8009ec6:	88ba      	ldrh	r2, [r7, #4]
 8009ec8:	883b      	ldrh	r3, [r7, #0]
 8009eca:	429a      	cmp	r2, r3
 8009ecc:	d905      	bls.n	8009eda <TFT9341_FillRect+0x46>
 8009ece:	88bb      	ldrh	r3, [r7, #4]
 8009ed0:	823b      	strh	r3, [r7, #16]
 8009ed2:	883b      	ldrh	r3, [r7, #0]
 8009ed4:	80bb      	strh	r3, [r7, #4]
 8009ed6:	8a3b      	ldrh	r3, [r7, #16]
 8009ed8:	803b      	strh	r3, [r7, #0]
	  TFT9341_SetAddrWindow(x1, y1, x2, y2);
 8009eda:	883b      	ldrh	r3, [r7, #0]
 8009edc:	887a      	ldrh	r2, [r7, #2]
 8009ede:	88b9      	ldrh	r1, [r7, #4]
 8009ee0:	88f8      	ldrh	r0, [r7, #6]
 8009ee2:	f7ff ff33 	bl	8009d4c <TFT9341_SetAddrWindow>
	  DC_DATA();
 8009ee6:	4b39      	ldr	r3, [pc, #228]	; (8009fcc <TFT9341_FillRect+0x138>)
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	4a39      	ldr	r2, [pc, #228]	; (8009fd0 <TFT9341_FillRect+0x13c>)
 8009eec:	8811      	ldrh	r1, [r2, #0]
 8009eee:	2201      	movs	r2, #1
 8009ef0:	4618      	mov	r0, r3
 8009ef2:	f7f9 fbad 	bl	8003650 <HAL_GPIO_WritePin>
	  n = (x2-x1+1)*(y2-y1+1)*2;
 8009ef6:	887a      	ldrh	r2, [r7, #2]
 8009ef8:	88fb      	ldrh	r3, [r7, #6]
 8009efa:	1ad3      	subs	r3, r2, r3
 8009efc:	3301      	adds	r3, #1
 8009efe:	8839      	ldrh	r1, [r7, #0]
 8009f00:	88ba      	ldrh	r2, [r7, #4]
 8009f02:	1a8a      	subs	r2, r1, r2
 8009f04:	3201      	adds	r2, #1
 8009f06:	fb02 f303 	mul.w	r3, r2, r3
 8009f0a:	005b      	lsls	r3, r3, #1
 8009f0c:	60fb      	str	r3, [r7, #12]
	  if(n<=65535)
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009f14:	d204      	bcs.n	8009f20 <TFT9341_FillRect+0x8c>
	  {
	    cnt = 1;
 8009f16:	2301      	movs	r3, #1
 8009f18:	61bb      	str	r3, [r7, #24]
	    buf_size = n;
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	617b      	str	r3, [r7, #20]
 8009f1e:	e024      	b.n	8009f6a <TFT9341_FillRect+0xd6>
	  }
	  else
	  {
	    cnt = n/2;
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	085b      	lsrs	r3, r3, #1
 8009f24:	61bb      	str	r3, [r7, #24]
	    buf_size = 2;
 8009f26:	2302      	movs	r3, #2
 8009f28:	617b      	str	r3, [r7, #20]
	    for(i = 3; i < n/3; i++)
 8009f2a:	2303      	movs	r3, #3
 8009f2c:	61fb      	str	r3, [r7, #28]
 8009f2e:	e014      	b.n	8009f5a <TFT9341_FillRect+0xc6>
	    {
	      if(n%i == 0)
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	69fa      	ldr	r2, [r7, #28]
 8009f34:	fbb3 f2f2 	udiv	r2, r3, r2
 8009f38:	69f9      	ldr	r1, [r7, #28]
 8009f3a:	fb01 f202 	mul.w	r2, r1, r2
 8009f3e:	1a9b      	subs	r3, r3, r2
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d107      	bne.n	8009f54 <TFT9341_FillRect+0xc0>
	      {
	        cnt = i;
 8009f44:	69fb      	ldr	r3, [r7, #28]
 8009f46:	61bb      	str	r3, [r7, #24]
	        buf_size = n/i;
 8009f48:	68fa      	ldr	r2, [r7, #12]
 8009f4a:	69fb      	ldr	r3, [r7, #28]
 8009f4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f50:	617b      	str	r3, [r7, #20]
	        break;
 8009f52:	e00a      	b.n	8009f6a <TFT9341_FillRect+0xd6>
	    for(i = 3; i < n/3; i++)
 8009f54:	69fb      	ldr	r3, [r7, #28]
 8009f56:	3301      	adds	r3, #1
 8009f58:	61fb      	str	r3, [r7, #28]
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	4a1d      	ldr	r2, [pc, #116]	; (8009fd4 <TFT9341_FillRect+0x140>)
 8009f5e:	fba2 2303 	umull	r2, r3, r2, r3
 8009f62:	085b      	lsrs	r3, r3, #1
 8009f64:	69fa      	ldr	r2, [r7, #28]
 8009f66:	429a      	cmp	r2, r3
 8009f68:	d3e2      	bcc.n	8009f30 <TFT9341_FillRect+0x9c>
	      }
	    }
	  }
	  for(i = 0; i < buf_size/2; i++)
 8009f6a:	2300      	movs	r3, #0
 8009f6c:	61fb      	str	r3, [r7, #28]
 8009f6e:	e011      	b.n	8009f94 <TFT9341_FillRect+0x100>
	  {
	    frm_buf[i*2] = color >> 8;
 8009f70:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8009f72:	0a1b      	lsrs	r3, r3, #8
 8009f74:	b29a      	uxth	r2, r3
 8009f76:	69fb      	ldr	r3, [r7, #28]
 8009f78:	005b      	lsls	r3, r3, #1
 8009f7a:	b2d1      	uxtb	r1, r2
 8009f7c:	4a16      	ldr	r2, [pc, #88]	; (8009fd8 <TFT9341_FillRect+0x144>)
 8009f7e:	54d1      	strb	r1, [r2, r3]
	    frm_buf[i*2+1] = color & 0xFF;
 8009f80:	69fb      	ldr	r3, [r7, #28]
 8009f82:	005b      	lsls	r3, r3, #1
 8009f84:	3301      	adds	r3, #1
 8009f86:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8009f88:	b2d1      	uxtb	r1, r2
 8009f8a:	4a13      	ldr	r2, [pc, #76]	; (8009fd8 <TFT9341_FillRect+0x144>)
 8009f8c:	54d1      	strb	r1, [r2, r3]
	  for(i = 0; i < buf_size/2; i++)
 8009f8e:	69fb      	ldr	r3, [r7, #28]
 8009f90:	3301      	adds	r3, #1
 8009f92:	61fb      	str	r3, [r7, #28]
 8009f94:	697b      	ldr	r3, [r7, #20]
 8009f96:	085b      	lsrs	r3, r3, #1
 8009f98:	69fa      	ldr	r2, [r7, #28]
 8009f9a:	429a      	cmp	r2, r3
 8009f9c:	d3e8      	bcc.n	8009f70 <TFT9341_FillRect+0xdc>
	  }
	  dma_spi_cnt = cnt;
 8009f9e:	4a0f      	ldr	r2, [pc, #60]	; (8009fdc <TFT9341_FillRect+0x148>)
 8009fa0:	69bb      	ldr	r3, [r7, #24]
 8009fa2:	6013      	str	r3, [r2, #0]
	  HAL_SPI_Transmit_DMA(&hspi3, frm_buf, buf_size);
 8009fa4:	697b      	ldr	r3, [r7, #20]
 8009fa6:	b29b      	uxth	r3, r3
 8009fa8:	461a      	mov	r2, r3
 8009faa:	490b      	ldr	r1, [pc, #44]	; (8009fd8 <TFT9341_FillRect+0x144>)
 8009fac:	480c      	ldr	r0, [pc, #48]	; (8009fe0 <TFT9341_FillRect+0x14c>)
 8009fae:	f7fc fa1d 	bl	80063ec <HAL_SPI_Transmit_DMA>
	  while(!dma_spi_fl) {}
 8009fb2:	bf00      	nop
 8009fb4:	4b0b      	ldr	r3, [pc, #44]	; (8009fe4 <TFT9341_FillRect+0x150>)
 8009fb6:	781b      	ldrb	r3, [r3, #0]
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d0fb      	beq.n	8009fb4 <TFT9341_FillRect+0x120>
	  dma_spi_fl=0;
 8009fbc:	4b09      	ldr	r3, [pc, #36]	; (8009fe4 <TFT9341_FillRect+0x150>)
 8009fbe:	2200      	movs	r2, #0
 8009fc0:	701a      	strb	r2, [r3, #0]
}
 8009fc2:	bf00      	nop
 8009fc4:	3724      	adds	r7, #36	; 0x24
 8009fc6:	46bd      	mov	sp, r7
 8009fc8:	bd90      	pop	{r4, r7, pc}
 8009fca:	bf00      	nop
 8009fcc:	20000240 	.word	0x20000240
 8009fd0:	20000244 	.word	0x20000244
 8009fd4:	aaaaaaab 	.word	0xaaaaaaab
 8009fd8:	20000250 	.word	0x20000250
 8009fdc:	2000001c 	.word	0x2000001c
 8009fe0:	2001056c 	.word	0x2001056c
 8009fe4:	200102c9 	.word	0x200102c9

08009fe8 <TFT9341_DrawPixel>:
//vykresleni pixelu
void TFT9341_DrawPixel(int x, int y, uint16_t color)
{
 8009fe8:	b580      	push	{r7, lr}
 8009fea:	b084      	sub	sp, #16
 8009fec:	af00      	add	r7, sp, #0
 8009fee:	60f8      	str	r0, [r7, #12]
 8009ff0:	60b9      	str	r1, [r7, #8]
 8009ff2:	4613      	mov	r3, r2
 8009ff4:	80fb      	strh	r3, [r7, #6]
	if((x<0)||(y<0)||(x>=TFT9341_WIDTH)||(y>=TFT9341_HEIGHT)) return;
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	db28      	blt.n	800a04e <TFT9341_DrawPixel+0x66>
 8009ffc:	68bb      	ldr	r3, [r7, #8]
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	db25      	blt.n	800a04e <TFT9341_DrawPixel+0x66>
 800a002:	4b15      	ldr	r3, [pc, #84]	; (800a058 <TFT9341_DrawPixel+0x70>)
 800a004:	881b      	ldrh	r3, [r3, #0]
 800a006:	461a      	mov	r2, r3
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	4293      	cmp	r3, r2
 800a00c:	da1f      	bge.n	800a04e <TFT9341_DrawPixel+0x66>
 800a00e:	4b13      	ldr	r3, [pc, #76]	; (800a05c <TFT9341_DrawPixel+0x74>)
 800a010:	881b      	ldrh	r3, [r3, #0]
 800a012:	461a      	mov	r2, r3
 800a014:	68bb      	ldr	r3, [r7, #8]
 800a016:	4293      	cmp	r3, r2
 800a018:	da19      	bge.n	800a04e <TFT9341_DrawPixel+0x66>
	TFT9341_SetAddrWindow(x,y,x,y);
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	b298      	uxth	r0, r3
 800a01e:	68bb      	ldr	r3, [r7, #8]
 800a020:	b299      	uxth	r1, r3
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	b29a      	uxth	r2, r3
 800a026:	68bb      	ldr	r3, [r7, #8]
 800a028:	b29b      	uxth	r3, r3
 800a02a:	f7ff fe8f 	bl	8009d4c <TFT9341_SetAddrWindow>
	TFT9341_SendCommand(0x2C);
 800a02e:	202c      	movs	r0, #44	; 0x2c
 800a030:	f7ff fc96 	bl	8009960 <TFT9341_SendCommand>
	TFT9341_SendData(color>>8);
 800a034:	88fb      	ldrh	r3, [r7, #6]
 800a036:	0a1b      	lsrs	r3, r3, #8
 800a038:	b29b      	uxth	r3, r3
 800a03a:	b2db      	uxtb	r3, r3
 800a03c:	4618      	mov	r0, r3
 800a03e:	f7ff fcad 	bl	800999c <TFT9341_SendData>
	TFT9341_SendData(color & 0xFF);
 800a042:	88fb      	ldrh	r3, [r7, #6]
 800a044:	b2db      	uxtb	r3, r3
 800a046:	4618      	mov	r0, r3
 800a048:	f7ff fca8 	bl	800999c <TFT9341_SendData>
 800a04c:	e000      	b.n	800a050 <TFT9341_DrawPixel+0x68>
	if((x<0)||(y<0)||(x>=TFT9341_WIDTH)||(y>=TFT9341_HEIGHT)) return;
 800a04e:	bf00      	nop
}
 800a050:	3710      	adds	r7, #16
 800a052:	46bd      	mov	sp, r7
 800a054:	bd80      	pop	{r7, pc}
 800a056:	bf00      	nop
 800a058:	2000000a 	.word	0x2000000a
 800a05c:	2000000c 	.word	0x2000000c

0800a060 <TFT9341_DrawCircle>:
//vykresleni kruhu
void TFT9341_DrawCircle(uint16_t x0, uint16_t y0, int r, uint16_t color)
{
 800a060:	b580      	push	{r7, lr}
 800a062:	b08a      	sub	sp, #40	; 0x28
 800a064:	af00      	add	r7, sp, #0
 800a066:	60ba      	str	r2, [r7, #8]
 800a068:	461a      	mov	r2, r3
 800a06a:	4603      	mov	r3, r0
 800a06c:	81fb      	strh	r3, [r7, #14]
 800a06e:	460b      	mov	r3, r1
 800a070:	81bb      	strh	r3, [r7, #12]
 800a072:	4613      	mov	r3, r2
 800a074:	80fb      	strh	r3, [r7, #6]
	int f = 1-r;
 800a076:	68bb      	ldr	r3, [r7, #8]
 800a078:	f1c3 0301 	rsb	r3, r3, #1
 800a07c:	627b      	str	r3, [r7, #36]	; 0x24
	int ddF_x=1;
 800a07e:	2301      	movs	r3, #1
 800a080:	623b      	str	r3, [r7, #32]
	int ddF_y=-2*r;
 800a082:	68ba      	ldr	r2, [r7, #8]
 800a084:	4613      	mov	r3, r2
 800a086:	07db      	lsls	r3, r3, #31
 800a088:	1a9b      	subs	r3, r3, r2
 800a08a:	005b      	lsls	r3, r3, #1
 800a08c:	61fb      	str	r3, [r7, #28]
	int x = 0;
 800a08e:	2300      	movs	r3, #0
 800a090:	61bb      	str	r3, [r7, #24]
	int y = r;
 800a092:	68bb      	ldr	r3, [r7, #8]
 800a094:	617b      	str	r3, [r7, #20]
	TFT9341_DrawPixel(x0,y0+r,color);
 800a096:	89f8      	ldrh	r0, [r7, #14]
 800a098:	89ba      	ldrh	r2, [r7, #12]
 800a09a:	68bb      	ldr	r3, [r7, #8]
 800a09c:	4413      	add	r3, r2
 800a09e:	88fa      	ldrh	r2, [r7, #6]
 800a0a0:	4619      	mov	r1, r3
 800a0a2:	f7ff ffa1 	bl	8009fe8 <TFT9341_DrawPixel>
	TFT9341_DrawPixel(x0,y0-r,color);
 800a0a6:	89f8      	ldrh	r0, [r7, #14]
 800a0a8:	89ba      	ldrh	r2, [r7, #12]
 800a0aa:	68bb      	ldr	r3, [r7, #8]
 800a0ac:	1ad3      	subs	r3, r2, r3
 800a0ae:	88fa      	ldrh	r2, [r7, #6]
 800a0b0:	4619      	mov	r1, r3
 800a0b2:	f7ff ff99 	bl	8009fe8 <TFT9341_DrawPixel>
	TFT9341_DrawPixel(x0+r,y0,color);
 800a0b6:	89fa      	ldrh	r2, [r7, #14]
 800a0b8:	68bb      	ldr	r3, [r7, #8]
 800a0ba:	4413      	add	r3, r2
 800a0bc:	89b9      	ldrh	r1, [r7, #12]
 800a0be:	88fa      	ldrh	r2, [r7, #6]
 800a0c0:	4618      	mov	r0, r3
 800a0c2:	f7ff ff91 	bl	8009fe8 <TFT9341_DrawPixel>
	TFT9341_DrawPixel(x0-r,y0,color);
 800a0c6:	89fa      	ldrh	r2, [r7, #14]
 800a0c8:	68bb      	ldr	r3, [r7, #8]
 800a0ca:	1ad3      	subs	r3, r2, r3
 800a0cc:	89b9      	ldrh	r1, [r7, #12]
 800a0ce:	88fa      	ldrh	r2, [r7, #6]
 800a0d0:	4618      	mov	r0, r3
 800a0d2:	f7ff ff89 	bl	8009fe8 <TFT9341_DrawPixel>
	while (x<y)
 800a0d6:	e066      	b.n	800a1a6 <TFT9341_DrawCircle+0x146>
	{
		if (f>=0)
 800a0d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	db09      	blt.n	800a0f2 <TFT9341_DrawCircle+0x92>
		{
			y--;
 800a0de:	697b      	ldr	r3, [r7, #20]
 800a0e0:	3b01      	subs	r3, #1
 800a0e2:	617b      	str	r3, [r7, #20]
			ddF_y+=2;
 800a0e4:	69fb      	ldr	r3, [r7, #28]
 800a0e6:	3302      	adds	r3, #2
 800a0e8:	61fb      	str	r3, [r7, #28]
			f+=ddF_y;
 800a0ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a0ec:	69fb      	ldr	r3, [r7, #28]
 800a0ee:	4413      	add	r3, r2
 800a0f0:	627b      	str	r3, [r7, #36]	; 0x24
		}
		x++;
 800a0f2:	69bb      	ldr	r3, [r7, #24]
 800a0f4:	3301      	adds	r3, #1
 800a0f6:	61bb      	str	r3, [r7, #24]
		ddF_x+=2;
 800a0f8:	6a3b      	ldr	r3, [r7, #32]
 800a0fa:	3302      	adds	r3, #2
 800a0fc:	623b      	str	r3, [r7, #32]
		f+=ddF_x;
 800a0fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a100:	6a3b      	ldr	r3, [r7, #32]
 800a102:	4413      	add	r3, r2
 800a104:	627b      	str	r3, [r7, #36]	; 0x24
		TFT9341_DrawPixel(x0+x,y0+y,color);
 800a106:	89fa      	ldrh	r2, [r7, #14]
 800a108:	69bb      	ldr	r3, [r7, #24]
 800a10a:	18d0      	adds	r0, r2, r3
 800a10c:	89ba      	ldrh	r2, [r7, #12]
 800a10e:	697b      	ldr	r3, [r7, #20]
 800a110:	4413      	add	r3, r2
 800a112:	88fa      	ldrh	r2, [r7, #6]
 800a114:	4619      	mov	r1, r3
 800a116:	f7ff ff67 	bl	8009fe8 <TFT9341_DrawPixel>
		TFT9341_DrawPixel(x0-x,y0+y,color);
 800a11a:	89fa      	ldrh	r2, [r7, #14]
 800a11c:	69bb      	ldr	r3, [r7, #24]
 800a11e:	1ad0      	subs	r0, r2, r3
 800a120:	89ba      	ldrh	r2, [r7, #12]
 800a122:	697b      	ldr	r3, [r7, #20]
 800a124:	4413      	add	r3, r2
 800a126:	88fa      	ldrh	r2, [r7, #6]
 800a128:	4619      	mov	r1, r3
 800a12a:	f7ff ff5d 	bl	8009fe8 <TFT9341_DrawPixel>
		TFT9341_DrawPixel(x0+x,y0-y,color);
 800a12e:	89fa      	ldrh	r2, [r7, #14]
 800a130:	69bb      	ldr	r3, [r7, #24]
 800a132:	18d0      	adds	r0, r2, r3
 800a134:	89ba      	ldrh	r2, [r7, #12]
 800a136:	697b      	ldr	r3, [r7, #20]
 800a138:	1ad3      	subs	r3, r2, r3
 800a13a:	88fa      	ldrh	r2, [r7, #6]
 800a13c:	4619      	mov	r1, r3
 800a13e:	f7ff ff53 	bl	8009fe8 <TFT9341_DrawPixel>
		TFT9341_DrawPixel(x0-x,y0-y,color);
 800a142:	89fa      	ldrh	r2, [r7, #14]
 800a144:	69bb      	ldr	r3, [r7, #24]
 800a146:	1ad0      	subs	r0, r2, r3
 800a148:	89ba      	ldrh	r2, [r7, #12]
 800a14a:	697b      	ldr	r3, [r7, #20]
 800a14c:	1ad3      	subs	r3, r2, r3
 800a14e:	88fa      	ldrh	r2, [r7, #6]
 800a150:	4619      	mov	r1, r3
 800a152:	f7ff ff49 	bl	8009fe8 <TFT9341_DrawPixel>
		TFT9341_DrawPixel(x0+y,y0+x,color);
 800a156:	89fa      	ldrh	r2, [r7, #14]
 800a158:	697b      	ldr	r3, [r7, #20]
 800a15a:	18d0      	adds	r0, r2, r3
 800a15c:	89ba      	ldrh	r2, [r7, #12]
 800a15e:	69bb      	ldr	r3, [r7, #24]
 800a160:	4413      	add	r3, r2
 800a162:	88fa      	ldrh	r2, [r7, #6]
 800a164:	4619      	mov	r1, r3
 800a166:	f7ff ff3f 	bl	8009fe8 <TFT9341_DrawPixel>
		TFT9341_DrawPixel(x0-y,y0+x,color);
 800a16a:	89fa      	ldrh	r2, [r7, #14]
 800a16c:	697b      	ldr	r3, [r7, #20]
 800a16e:	1ad0      	subs	r0, r2, r3
 800a170:	89ba      	ldrh	r2, [r7, #12]
 800a172:	69bb      	ldr	r3, [r7, #24]
 800a174:	4413      	add	r3, r2
 800a176:	88fa      	ldrh	r2, [r7, #6]
 800a178:	4619      	mov	r1, r3
 800a17a:	f7ff ff35 	bl	8009fe8 <TFT9341_DrawPixel>
		TFT9341_DrawPixel(x0+y,y0-x,color);
 800a17e:	89fa      	ldrh	r2, [r7, #14]
 800a180:	697b      	ldr	r3, [r7, #20]
 800a182:	18d0      	adds	r0, r2, r3
 800a184:	89ba      	ldrh	r2, [r7, #12]
 800a186:	69bb      	ldr	r3, [r7, #24]
 800a188:	1ad3      	subs	r3, r2, r3
 800a18a:	88fa      	ldrh	r2, [r7, #6]
 800a18c:	4619      	mov	r1, r3
 800a18e:	f7ff ff2b 	bl	8009fe8 <TFT9341_DrawPixel>
		TFT9341_DrawPixel(x0-y,y0-x,color);
 800a192:	89fa      	ldrh	r2, [r7, #14]
 800a194:	697b      	ldr	r3, [r7, #20]
 800a196:	1ad0      	subs	r0, r2, r3
 800a198:	89ba      	ldrh	r2, [r7, #12]
 800a19a:	69bb      	ldr	r3, [r7, #24]
 800a19c:	1ad3      	subs	r3, r2, r3
 800a19e:	88fa      	ldrh	r2, [r7, #6]
 800a1a0:	4619      	mov	r1, r3
 800a1a2:	f7ff ff21 	bl	8009fe8 <TFT9341_DrawPixel>
	while (x<y)
 800a1a6:	69ba      	ldr	r2, [r7, #24]
 800a1a8:	697b      	ldr	r3, [r7, #20]
 800a1aa:	429a      	cmp	r2, r3
 800a1ac:	db94      	blt.n	800a0d8 <TFT9341_DrawCircle+0x78>
	}
}
 800a1ae:	bf00      	nop
 800a1b0:	bf00      	nop
 800a1b2:	3728      	adds	r7, #40	; 0x28
 800a1b4:	46bd      	mov	sp, r7
 800a1b6:	bd80      	pop	{r7, pc}

0800a1b8 <TFT9341_SetRotation>:
//nastaveni rotace displeje
void TFT9341_SetRotation(uint8_t r)
{
 800a1b8:	b580      	push	{r7, lr}
 800a1ba:	b082      	sub	sp, #8
 800a1bc:	af00      	add	r7, sp, #0
 800a1be:	4603      	mov	r3, r0
 800a1c0:	71fb      	strb	r3, [r7, #7]
  TFT9341_SendCommand(0x36);
 800a1c2:	2036      	movs	r0, #54	; 0x36
 800a1c4:	f7ff fbcc 	bl	8009960 <TFT9341_SendCommand>
  switch(r)
 800a1c8:	79fb      	ldrb	r3, [r7, #7]
 800a1ca:	3b01      	subs	r3, #1
 800a1cc:	2b03      	cmp	r3, #3
 800a1ce:	d843      	bhi.n	800a258 <TFT9341_SetRotation+0xa0>
 800a1d0:	a201      	add	r2, pc, #4	; (adr r2, 800a1d8 <TFT9341_SetRotation+0x20>)
 800a1d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1d6:	bf00      	nop
 800a1d8:	0800a1e9 	.word	0x0800a1e9
 800a1dc:	0800a205 	.word	0x0800a205
 800a1e0:	0800a221 	.word	0x0800a221
 800a1e4:	0800a23d 	.word	0x0800a23d
	{
		case 1:
			  rotationNum = 1;
 800a1e8:	4b24      	ldr	r3, [pc, #144]	; (800a27c <TFT9341_SetRotation+0xc4>)
 800a1ea:	2201      	movs	r2, #1
 800a1ec:	701a      	strb	r2, [r3, #0]
		      TFT9341_SendData(0x48);
 800a1ee:	2048      	movs	r0, #72	; 0x48
 800a1f0:	f7ff fbd4 	bl	800999c <TFT9341_SendData>
		      TFT9341_WIDTH = 240;
 800a1f4:	4b22      	ldr	r3, [pc, #136]	; (800a280 <TFT9341_SetRotation+0xc8>)
 800a1f6:	22f0      	movs	r2, #240	; 0xf0
 800a1f8:	801a      	strh	r2, [r3, #0]
		      TFT9341_HEIGHT = 320;
 800a1fa:	4b22      	ldr	r3, [pc, #136]	; (800a284 <TFT9341_SetRotation+0xcc>)
 800a1fc:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800a200:	801a      	strh	r2, [r3, #0]
			break;
 800a202:	e037      	b.n	800a274 <TFT9341_SetRotation+0xbc>
		case 2:
			  rotationNum = 2;
 800a204:	4b1d      	ldr	r3, [pc, #116]	; (800a27c <TFT9341_SetRotation+0xc4>)
 800a206:	2202      	movs	r2, #2
 800a208:	701a      	strb	r2, [r3, #0]
		      TFT9341_SendData(0x28);
 800a20a:	2028      	movs	r0, #40	; 0x28
 800a20c:	f7ff fbc6 	bl	800999c <TFT9341_SendData>
		      TFT9341_WIDTH = 320;
 800a210:	4b1b      	ldr	r3, [pc, #108]	; (800a280 <TFT9341_SetRotation+0xc8>)
 800a212:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800a216:	801a      	strh	r2, [r3, #0]
		      TFT9341_HEIGHT = 240;
 800a218:	4b1a      	ldr	r3, [pc, #104]	; (800a284 <TFT9341_SetRotation+0xcc>)
 800a21a:	22f0      	movs	r2, #240	; 0xf0
 800a21c:	801a      	strh	r2, [r3, #0]
			break;
 800a21e:	e029      	b.n	800a274 <TFT9341_SetRotation+0xbc>
		case 3:
			  rotationNum = 3;
 800a220:	4b16      	ldr	r3, [pc, #88]	; (800a27c <TFT9341_SetRotation+0xc4>)
 800a222:	2203      	movs	r2, #3
 800a224:	701a      	strb	r2, [r3, #0]
		      TFT9341_SendData(0x88);
 800a226:	2088      	movs	r0, #136	; 0x88
 800a228:	f7ff fbb8 	bl	800999c <TFT9341_SendData>
		      TFT9341_WIDTH = 240;
 800a22c:	4b14      	ldr	r3, [pc, #80]	; (800a280 <TFT9341_SetRotation+0xc8>)
 800a22e:	22f0      	movs	r2, #240	; 0xf0
 800a230:	801a      	strh	r2, [r3, #0]
		      TFT9341_HEIGHT = 320;
 800a232:	4b14      	ldr	r3, [pc, #80]	; (800a284 <TFT9341_SetRotation+0xcc>)
 800a234:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800a238:	801a      	strh	r2, [r3, #0]
			break;
 800a23a:	e01b      	b.n	800a274 <TFT9341_SetRotation+0xbc>
		case 4:
			  rotationNum = 4;
 800a23c:	4b0f      	ldr	r3, [pc, #60]	; (800a27c <TFT9341_SetRotation+0xc4>)
 800a23e:	2204      	movs	r2, #4
 800a240:	701a      	strb	r2, [r3, #0]
		      TFT9341_SendData(0xE8);
 800a242:	20e8      	movs	r0, #232	; 0xe8
 800a244:	f7ff fbaa 	bl	800999c <TFT9341_SendData>
		      TFT9341_WIDTH = 320;
 800a248:	4b0d      	ldr	r3, [pc, #52]	; (800a280 <TFT9341_SetRotation+0xc8>)
 800a24a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800a24e:	801a      	strh	r2, [r3, #0]
		      TFT9341_HEIGHT = 240;
 800a250:	4b0c      	ldr	r3, [pc, #48]	; (800a284 <TFT9341_SetRotation+0xcc>)
 800a252:	22f0      	movs	r2, #240	; 0xf0
 800a254:	801a      	strh	r2, [r3, #0]
			break;
 800a256:	e00d      	b.n	800a274 <TFT9341_SetRotation+0xbc>
		default:
			  rotationNum = 1;
 800a258:	4b08      	ldr	r3, [pc, #32]	; (800a27c <TFT9341_SetRotation+0xc4>)
 800a25a:	2201      	movs	r2, #1
 800a25c:	701a      	strb	r2, [r3, #0]
		      TFT9341_SendData(0x48);
 800a25e:	2048      	movs	r0, #72	; 0x48
 800a260:	f7ff fb9c 	bl	800999c <TFT9341_SendData>
		      TFT9341_WIDTH = 240;
 800a264:	4b06      	ldr	r3, [pc, #24]	; (800a280 <TFT9341_SetRotation+0xc8>)
 800a266:	22f0      	movs	r2, #240	; 0xf0
 800a268:	801a      	strh	r2, [r3, #0]
		      TFT9341_HEIGHT = 320;
 800a26a:	4b06      	ldr	r3, [pc, #24]	; (800a284 <TFT9341_SetRotation+0xcc>)
 800a26c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800a270:	801a      	strh	r2, [r3, #0]
			break;
 800a272:	bf00      	nop
	}
}
 800a274:	bf00      	nop
 800a276:	3708      	adds	r7, #8
 800a278:	46bd      	mov	sp, r7
 800a27a:	bd80      	pop	{r7, pc}
 800a27c:	20000008 	.word	0x20000008
 800a280:	2000000a 	.word	0x2000000a
 800a284:	2000000c 	.word	0x2000000c

0800a288 <TFT9341_drawChar>:
//vykresleni znaku
void TFT9341_drawChar(int16_t x, int16_t y, unsigned char c, uint16_t color, uint16_t bg, uint8_t size)
{
 800a288:	b5b0      	push	{r4, r5, r7, lr}
 800a28a:	b086      	sub	sp, #24
 800a28c:	af02      	add	r7, sp, #8
 800a28e:	4604      	mov	r4, r0
 800a290:	4608      	mov	r0, r1
 800a292:	4611      	mov	r1, r2
 800a294:	461a      	mov	r2, r3
 800a296:	4623      	mov	r3, r4
 800a298:	80fb      	strh	r3, [r7, #6]
 800a29a:	4603      	mov	r3, r0
 800a29c:	80bb      	strh	r3, [r7, #4]
 800a29e:	460b      	mov	r3, r1
 800a2a0:	70fb      	strb	r3, [r7, #3]
 800a2a2:	4613      	mov	r3, r2
 800a2a4:	803b      	strh	r3, [r7, #0]
	if(rotationNum == 2 || rotationNum ==4)
 800a2a6:	4ba6      	ldr	r3, [pc, #664]	; (800a540 <TFT9341_drawChar+0x2b8>)
 800a2a8:	781b      	ldrb	r3, [r3, #0]
 800a2aa:	2b02      	cmp	r3, #2
 800a2ac:	d003      	beq.n	800a2b6 <TFT9341_drawChar+0x2e>
 800a2ae:	4ba4      	ldr	r3, [pc, #656]	; (800a540 <TFT9341_drawChar+0x2b8>)
 800a2b0:	781b      	ldrb	r3, [r3, #0]
 800a2b2:	2b04      	cmp	r3, #4
 800a2b4:	d122      	bne.n	800a2fc <TFT9341_drawChar+0x74>
	{
		if((x >= TFT9341_WIDTH) || (y >= TFT9341_HEIGHT) || ((x + 6 * size - 1) < 0) || ((y + 8 * size - 1) < 0))
 800a2b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a2ba:	4aa2      	ldr	r2, [pc, #648]	; (800a544 <TFT9341_drawChar+0x2bc>)
 800a2bc:	8812      	ldrh	r2, [r2, #0]
 800a2be:	4293      	cmp	r3, r2
 800a2c0:	f280 8137 	bge.w	800a532 <TFT9341_drawChar+0x2aa>
 800a2c4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800a2c8:	4a9f      	ldr	r2, [pc, #636]	; (800a548 <TFT9341_drawChar+0x2c0>)
 800a2ca:	8812      	ldrh	r2, [r2, #0]
 800a2cc:	4293      	cmp	r3, r2
 800a2ce:	f280 8130 	bge.w	800a532 <TFT9341_drawChar+0x2aa>
 800a2d2:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 800a2d6:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800a2da:	4613      	mov	r3, r2
 800a2dc:	005b      	lsls	r3, r3, #1
 800a2de:	4413      	add	r3, r2
 800a2e0:	005b      	lsls	r3, r3, #1
 800a2e2:	440b      	add	r3, r1
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	f340 8124 	ble.w	800a532 <TFT9341_drawChar+0x2aa>
 800a2ea:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800a2ee:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800a2f2:	00db      	lsls	r3, r3, #3
 800a2f4:	4413      	add	r3, r2
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	dc24      	bgt.n	800a344 <TFT9341_drawChar+0xbc>
		{
			return;
 800a2fa:	e11a      	b.n	800a532 <TFT9341_drawChar+0x2aa>
		}
	}
	else
	{
		if((y >= TFT9341_WIDTH) || (x >= TFT9341_HEIGHT) || ((y + 6 * size - 1) < 0) || ((x + 8 * size - 1) < 0))
 800a2fc:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800a300:	4a90      	ldr	r2, [pc, #576]	; (800a544 <TFT9341_drawChar+0x2bc>)
 800a302:	8812      	ldrh	r2, [r2, #0]
 800a304:	4293      	cmp	r3, r2
 800a306:	f280 8116 	bge.w	800a536 <TFT9341_drawChar+0x2ae>
 800a30a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a30e:	4a8e      	ldr	r2, [pc, #568]	; (800a548 <TFT9341_drawChar+0x2c0>)
 800a310:	8812      	ldrh	r2, [r2, #0]
 800a312:	4293      	cmp	r3, r2
 800a314:	f280 810f 	bge.w	800a536 <TFT9341_drawChar+0x2ae>
 800a318:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800a31c:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800a320:	4613      	mov	r3, r2
 800a322:	005b      	lsls	r3, r3, #1
 800a324:	4413      	add	r3, r2
 800a326:	005b      	lsls	r3, r3, #1
 800a328:	440b      	add	r3, r1
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	f340 8103 	ble.w	800a536 <TFT9341_drawChar+0x2ae>
 800a330:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800a334:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800a338:	00db      	lsls	r3, r3, #3
 800a33a:	4413      	add	r3, r2
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	f340 80fa 	ble.w	800a536 <TFT9341_drawChar+0x2ae>
 800a342:	e000      	b.n	800a346 <TFT9341_drawChar+0xbe>
		if((x >= TFT9341_WIDTH) || (y >= TFT9341_HEIGHT) || ((x + 6 * size - 1) < 0) || ((y + 8 * size - 1) < 0))
 800a344:	bf00      	nop
		{
		    return;
		}
	}
  if(!_cp437 && (c >= 176)) c++;
 800a346:	4b81      	ldr	r3, [pc, #516]	; (800a54c <TFT9341_drawChar+0x2c4>)
 800a348:	781b      	ldrb	r3, [r3, #0]
 800a34a:	f083 0301 	eor.w	r3, r3, #1
 800a34e:	b2db      	uxtb	r3, r3
 800a350:	2b00      	cmp	r3, #0
 800a352:	d005      	beq.n	800a360 <TFT9341_drawChar+0xd8>
 800a354:	78fb      	ldrb	r3, [r7, #3]
 800a356:	2baf      	cmp	r3, #175	; 0xaf
 800a358:	d902      	bls.n	800a360 <TFT9341_drawChar+0xd8>
 800a35a:	78fb      	ldrb	r3, [r7, #3]
 800a35c:	3301      	adds	r3, #1
 800a35e:	70fb      	strb	r3, [r7, #3]

  for (int8_t i=0; i<6; i++ ) {
 800a360:	2300      	movs	r3, #0
 800a362:	73fb      	strb	r3, [r7, #15]
 800a364:	e0df      	b.n	800a526 <TFT9341_drawChar+0x29e>
    uint8_t line;
    if (i == 5)
 800a366:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a36a:	2b05      	cmp	r3, #5
 800a36c:	d102      	bne.n	800a374 <TFT9341_drawChar+0xec>
      line = 0x0;
 800a36e:	2300      	movs	r3, #0
 800a370:	73bb      	strb	r3, [r7, #14]
 800a372:	e00b      	b.n	800a38c <TFT9341_drawChar+0x104>
    else
      line = pgm_read_byte(font1+(c*5)+i);
 800a374:	78fa      	ldrb	r2, [r7, #3]
 800a376:	4613      	mov	r3, r2
 800a378:	009b      	lsls	r3, r3, #2
 800a37a:	4413      	add	r3, r2
 800a37c:	461a      	mov	r2, r3
 800a37e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a382:	4413      	add	r3, r2
 800a384:	4a72      	ldr	r2, [pc, #456]	; (800a550 <TFT9341_drawChar+0x2c8>)
 800a386:	4413      	add	r3, r2
 800a388:	781b      	ldrb	r3, [r3, #0]
 800a38a:	73bb      	strb	r3, [r7, #14]
    for (int8_t j = 0; j<8; j++) {
 800a38c:	2300      	movs	r3, #0
 800a38e:	737b      	strb	r3, [r7, #13]
 800a390:	e0be      	b.n	800a510 <TFT9341_drawChar+0x288>
      if (line & 0x1) {
 800a392:	7bbb      	ldrb	r3, [r7, #14]
 800a394:	f003 0301 	and.w	r3, r3, #1
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d056      	beq.n	800a44a <TFT9341_drawChar+0x1c2>
        if (size == 1) // default size
 800a39c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800a3a0:	2b01      	cmp	r3, #1
 800a3a2:	d10e      	bne.n	800a3c2 <TFT9341_drawChar+0x13a>
        	TFT9341_DrawPixel(x+i, y+j, color);
 800a3a4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800a3a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a3ac:	18d0      	adds	r0, r2, r3
 800a3ae:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800a3b2:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800a3b6:	4413      	add	r3, r2
 800a3b8:	883a      	ldrh	r2, [r7, #0]
 800a3ba:	4619      	mov	r1, r3
 800a3bc:	f7ff fe14 	bl	8009fe8 <TFT9341_DrawPixel>
 800a3c0:	e09d      	b.n	800a4fe <TFT9341_drawChar+0x276>
        else {  // big size
        	TFT9341_FillRect(x+(i*size), y+(j*size), size + x+(i*size), size+1 + y+(j*size), color);
 800a3c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a3c6:	b29a      	uxth	r2, r3
 800a3c8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800a3cc:	b29b      	uxth	r3, r3
 800a3ce:	fb12 f303 	smulbb	r3, r2, r3
 800a3d2:	b29a      	uxth	r2, r3
 800a3d4:	88fb      	ldrh	r3, [r7, #6]
 800a3d6:	4413      	add	r3, r2
 800a3d8:	b298      	uxth	r0, r3
 800a3da:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800a3de:	b29a      	uxth	r2, r3
 800a3e0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800a3e4:	b29b      	uxth	r3, r3
 800a3e6:	fb12 f303 	smulbb	r3, r2, r3
 800a3ea:	b29a      	uxth	r2, r3
 800a3ec:	88bb      	ldrh	r3, [r7, #4]
 800a3ee:	4413      	add	r3, r2
 800a3f0:	b29c      	uxth	r4, r3
 800a3f2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800a3f6:	b29a      	uxth	r2, r3
 800a3f8:	88fb      	ldrh	r3, [r7, #6]
 800a3fa:	4413      	add	r3, r2
 800a3fc:	b29a      	uxth	r2, r3
 800a3fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a402:	b299      	uxth	r1, r3
 800a404:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800a408:	b29b      	uxth	r3, r3
 800a40a:	fb11 f303 	smulbb	r3, r1, r3
 800a40e:	b29b      	uxth	r3, r3
 800a410:	4413      	add	r3, r2
 800a412:	b29d      	uxth	r5, r3
 800a414:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800a418:	b29a      	uxth	r2, r3
 800a41a:	88bb      	ldrh	r3, [r7, #4]
 800a41c:	4413      	add	r3, r2
 800a41e:	b29a      	uxth	r2, r3
 800a420:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800a424:	b299      	uxth	r1, r3
 800a426:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800a42a:	b29b      	uxth	r3, r3
 800a42c:	fb11 f303 	smulbb	r3, r1, r3
 800a430:	b29b      	uxth	r3, r3
 800a432:	4413      	add	r3, r2
 800a434:	b29b      	uxth	r3, r3
 800a436:	3301      	adds	r3, #1
 800a438:	b29a      	uxth	r2, r3
 800a43a:	883b      	ldrh	r3, [r7, #0]
 800a43c:	9300      	str	r3, [sp, #0]
 800a43e:	4613      	mov	r3, r2
 800a440:	462a      	mov	r2, r5
 800a442:	4621      	mov	r1, r4
 800a444:	f7ff fd26 	bl	8009e94 <TFT9341_FillRect>
 800a448:	e059      	b.n	800a4fe <TFT9341_drawChar+0x276>
        }
      } else if (bg != color) {
 800a44a:	8c3a      	ldrh	r2, [r7, #32]
 800a44c:	883b      	ldrh	r3, [r7, #0]
 800a44e:	429a      	cmp	r2, r3
 800a450:	d055      	beq.n	800a4fe <TFT9341_drawChar+0x276>
        if (size == 1) // default size
 800a452:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800a456:	2b01      	cmp	r3, #1
 800a458:	d10e      	bne.n	800a478 <TFT9341_drawChar+0x1f0>
        	TFT9341_DrawPixel(x+i, y+j, bg);
 800a45a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800a45e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a462:	18d0      	adds	r0, r2, r3
 800a464:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800a468:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800a46c:	4413      	add	r3, r2
 800a46e:	8c3a      	ldrh	r2, [r7, #32]
 800a470:	4619      	mov	r1, r3
 800a472:	f7ff fdb9 	bl	8009fe8 <TFT9341_DrawPixel>
 800a476:	e042      	b.n	800a4fe <TFT9341_drawChar+0x276>
        else {  // big size
        	TFT9341_FillRect(x+i*size, y+j*size, size + x+i*size, size+1 + y+j*size, bg);
 800a478:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a47c:	b29a      	uxth	r2, r3
 800a47e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800a482:	b29b      	uxth	r3, r3
 800a484:	fb12 f303 	smulbb	r3, r2, r3
 800a488:	b29a      	uxth	r2, r3
 800a48a:	88fb      	ldrh	r3, [r7, #6]
 800a48c:	4413      	add	r3, r2
 800a48e:	b298      	uxth	r0, r3
 800a490:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800a494:	b29a      	uxth	r2, r3
 800a496:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800a49a:	b29b      	uxth	r3, r3
 800a49c:	fb12 f303 	smulbb	r3, r2, r3
 800a4a0:	b29a      	uxth	r2, r3
 800a4a2:	88bb      	ldrh	r3, [r7, #4]
 800a4a4:	4413      	add	r3, r2
 800a4a6:	b29c      	uxth	r4, r3
 800a4a8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800a4ac:	b29a      	uxth	r2, r3
 800a4ae:	88fb      	ldrh	r3, [r7, #6]
 800a4b0:	4413      	add	r3, r2
 800a4b2:	b29a      	uxth	r2, r3
 800a4b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a4b8:	b299      	uxth	r1, r3
 800a4ba:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800a4be:	b29b      	uxth	r3, r3
 800a4c0:	fb11 f303 	smulbb	r3, r1, r3
 800a4c4:	b29b      	uxth	r3, r3
 800a4c6:	4413      	add	r3, r2
 800a4c8:	b29d      	uxth	r5, r3
 800a4ca:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800a4ce:	b29a      	uxth	r2, r3
 800a4d0:	88bb      	ldrh	r3, [r7, #4]
 800a4d2:	4413      	add	r3, r2
 800a4d4:	b29a      	uxth	r2, r3
 800a4d6:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800a4da:	b299      	uxth	r1, r3
 800a4dc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800a4e0:	b29b      	uxth	r3, r3
 800a4e2:	fb11 f303 	smulbb	r3, r1, r3
 800a4e6:	b29b      	uxth	r3, r3
 800a4e8:	4413      	add	r3, r2
 800a4ea:	b29b      	uxth	r3, r3
 800a4ec:	3301      	adds	r3, #1
 800a4ee:	b29a      	uxth	r2, r3
 800a4f0:	8c3b      	ldrh	r3, [r7, #32]
 800a4f2:	9300      	str	r3, [sp, #0]
 800a4f4:	4613      	mov	r3, r2
 800a4f6:	462a      	mov	r2, r5
 800a4f8:	4621      	mov	r1, r4
 800a4fa:	f7ff fccb 	bl	8009e94 <TFT9341_FillRect>
        }
      }
      line >>= 1;
 800a4fe:	7bbb      	ldrb	r3, [r7, #14]
 800a500:	085b      	lsrs	r3, r3, #1
 800a502:	73bb      	strb	r3, [r7, #14]
    for (int8_t j = 0; j<8; j++) {
 800a504:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800a508:	b2db      	uxtb	r3, r3
 800a50a:	3301      	adds	r3, #1
 800a50c:	b2db      	uxtb	r3, r3
 800a50e:	737b      	strb	r3, [r7, #13]
 800a510:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800a514:	2b07      	cmp	r3, #7
 800a516:	f77f af3c 	ble.w	800a392 <TFT9341_drawChar+0x10a>
  for (int8_t i=0; i<6; i++ ) {
 800a51a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a51e:	b2db      	uxtb	r3, r3
 800a520:	3301      	adds	r3, #1
 800a522:	b2db      	uxtb	r3, r3
 800a524:	73fb      	strb	r3, [r7, #15]
 800a526:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a52a:	2b05      	cmp	r3, #5
 800a52c:	f77f af1b 	ble.w	800a366 <TFT9341_drawChar+0xde>
 800a530:	e002      	b.n	800a538 <TFT9341_drawChar+0x2b0>
			return;
 800a532:	bf00      	nop
 800a534:	e000      	b.n	800a538 <TFT9341_drawChar+0x2b0>
		    return;
 800a536:	bf00      	nop
    }
  }
}
 800a538:	3710      	adds	r7, #16
 800a53a:	46bd      	mov	sp, r7
 800a53c:	bdb0      	pop	{r4, r5, r7, pc}
 800a53e:	bf00      	nop
 800a540:	20000008 	.word	0x20000008
 800a544:	2000000a 	.word	0x2000000a
 800a548:	2000000c 	.word	0x2000000c
 800a54c:	20000234 	.word	0x20000234
 800a550:	0801367c 	.word	0x0801367c

0800a554 <TFT9341_printText>:
//vykresleni textu
void TFT9341_printText(char text[], int16_t x, int16_t y, uint16_t color, uint16_t bg, uint8_t size)
{
 800a554:	b590      	push	{r4, r7, lr}
 800a556:	b089      	sub	sp, #36	; 0x24
 800a558:	af02      	add	r7, sp, #8
 800a55a:	60f8      	str	r0, [r7, #12]
 800a55c:	4608      	mov	r0, r1
 800a55e:	4611      	mov	r1, r2
 800a560:	461a      	mov	r2, r3
 800a562:	4603      	mov	r3, r0
 800a564:	817b      	strh	r3, [r7, #10]
 800a566:	460b      	mov	r3, r1
 800a568:	813b      	strh	r3, [r7, #8]
 800a56a:	4613      	mov	r3, r2
 800a56c:	80fb      	strh	r3, [r7, #6]
	int16_t offset;
	offset = size*6;
 800a56e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800a572:	b29b      	uxth	r3, r3
 800a574:	461a      	mov	r2, r3
 800a576:	0052      	lsls	r2, r2, #1
 800a578:	4413      	add	r3, r2
 800a57a:	005b      	lsls	r3, r3, #1
 800a57c:	b29b      	uxth	r3, r3
 800a57e:	82bb      	strh	r3, [r7, #20]
	for(uint16_t i=0; i<40 && text[i]!=NULL; i++)
 800a580:	2300      	movs	r3, #0
 800a582:	82fb      	strh	r3, [r7, #22]
 800a584:	e01a      	b.n	800a5bc <TFT9341_printText+0x68>
	{
		TFT9341_drawChar(x+(offset*i), y, text[i],color,bg,size);
 800a586:	8abb      	ldrh	r3, [r7, #20]
 800a588:	8afa      	ldrh	r2, [r7, #22]
 800a58a:	fb12 f303 	smulbb	r3, r2, r3
 800a58e:	b29a      	uxth	r2, r3
 800a590:	897b      	ldrh	r3, [r7, #10]
 800a592:	4413      	add	r3, r2
 800a594:	b29b      	uxth	r3, r3
 800a596:	b218      	sxth	r0, r3
 800a598:	8afb      	ldrh	r3, [r7, #22]
 800a59a:	68fa      	ldr	r2, [r7, #12]
 800a59c:	4413      	add	r3, r2
 800a59e:	781a      	ldrb	r2, [r3, #0]
 800a5a0:	88fc      	ldrh	r4, [r7, #6]
 800a5a2:	f9b7 1008 	ldrsh.w	r1, [r7, #8]
 800a5a6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800a5aa:	9301      	str	r3, [sp, #4]
 800a5ac:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a5ae:	9300      	str	r3, [sp, #0]
 800a5b0:	4623      	mov	r3, r4
 800a5b2:	f7ff fe69 	bl	800a288 <TFT9341_drawChar>
	for(uint16_t i=0; i<40 && text[i]!=NULL; i++)
 800a5b6:	8afb      	ldrh	r3, [r7, #22]
 800a5b8:	3301      	adds	r3, #1
 800a5ba:	82fb      	strh	r3, [r7, #22]
 800a5bc:	8afb      	ldrh	r3, [r7, #22]
 800a5be:	2b27      	cmp	r3, #39	; 0x27
 800a5c0:	d805      	bhi.n	800a5ce <TFT9341_printText+0x7a>
 800a5c2:	8afb      	ldrh	r3, [r7, #22]
 800a5c4:	68fa      	ldr	r2, [r7, #12]
 800a5c6:	4413      	add	r3, r2
 800a5c8:	781b      	ldrb	r3, [r3, #0]
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d1db      	bne.n	800a586 <TFT9341_printText+0x32>
	}
}
 800a5ce:	bf00      	nop
 800a5d0:	371c      	adds	r7, #28
 800a5d2:	46bd      	mov	sp, r7
 800a5d4:	bd90      	pop	{r4, r7, pc}
	...

0800a5d8 <TFT9341_getRotation>:
	TFT9341_DrawLine(color,x1,y1,x1,y2);
	TFT9341_DrawLine(color,x1,y2,x2,y2);
}
//vrati orientaci obrazovky
uint8_t TFT9341_getRotation(void)
{
 800a5d8:	b480      	push	{r7}
 800a5da:	af00      	add	r7, sp, #0
	return rotationNum;
 800a5dc:	4b03      	ldr	r3, [pc, #12]	; (800a5ec <TFT9341_getRotation+0x14>)
 800a5de:	781b      	ldrb	r3, [r3, #0]
}
 800a5e0:	4618      	mov	r0, r3
 800a5e2:	46bd      	mov	sp, r7
 800a5e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5e8:	4770      	bx	lr
 800a5ea:	bf00      	nop
 800a5ec:	20000008 	.word	0x20000008

0800a5f0 <XPT2046_Init>:


/* Functions ------------------------------------------------------------------*/
//inicializace
void XPT2046_Init(SPI_HandleTypeDef *touchSPI, GPIO_TypeDef *csPort, uint16_t csPin, GPIO_TypeDef *irqPort, uint16_t irqPin)
{
 800a5f0:	b580      	push	{r7, lr}
 800a5f2:	b084      	sub	sp, #16
 800a5f4:	af00      	add	r7, sp, #0
 800a5f6:	60f8      	str	r0, [r7, #12]
 800a5f8:	60b9      	str	r1, [r7, #8]
 800a5fa:	603b      	str	r3, [r7, #0]
 800a5fc:	4613      	mov	r3, r2
 800a5fe:	80fb      	strh	r3, [r7, #6]
	memcpy(&tsSPIhandle, touchSPI, sizeof(*touchSPI));
 800a600:	2264      	movs	r2, #100	; 0x64
 800a602:	68f9      	ldr	r1, [r7, #12]
 800a604:	4809      	ldr	r0, [pc, #36]	; (800a62c <XPT2046_Init+0x3c>)
 800a606:	f004 fb05 	bl	800ec14 <memcpy>
	tsCS_GPIO = csPort;
 800a60a:	4a09      	ldr	r2, [pc, #36]	; (800a630 <XPT2046_Init+0x40>)
 800a60c:	68bb      	ldr	r3, [r7, #8]
 800a60e:	6013      	str	r3, [r2, #0]
	tsCS_PIN = csPin;
 800a610:	4a08      	ldr	r2, [pc, #32]	; (800a634 <XPT2046_Init+0x44>)
 800a612:	88fb      	ldrh	r3, [r7, #6]
 800a614:	8013      	strh	r3, [r2, #0]
	tsIRQ_GPIO = irqPort;
 800a616:	4a08      	ldr	r2, [pc, #32]	; (800a638 <XPT2046_Init+0x48>)
 800a618:	683b      	ldr	r3, [r7, #0]
 800a61a:	6013      	str	r3, [r2, #0]
	tsIRQ_PIN = irqPin;
 800a61c:	4a07      	ldr	r2, [pc, #28]	; (800a63c <XPT2046_Init+0x4c>)
 800a61e:	8b3b      	ldrh	r3, [r7, #24]
 800a620:	8013      	strh	r3, [r2, #0]
}
 800a622:	bf00      	nop
 800a624:	3710      	adds	r7, #16
 800a626:	46bd      	mov	sp, r7
 800a628:	bd80      	pop	{r7, pc}
 800a62a:	bf00      	nop
 800a62c:	20010250 	.word	0x20010250
 800a630:	200102b4 	.word	0x200102b4
 800a634:	200102b8 	.word	0x200102b8
 800a638:	200102bc 	.word	0x200102bc
 800a63c:	200102c0 	.word	0x200102c0

0800a640 <XPT2046_TouchSelect>:
//komunikace pro dotyk -vybrana
static void XPT2046_TouchSelect()
{
 800a640:	b580      	push	{r7, lr}
 800a642:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(tsCS_GPIO, tsCS_PIN, GPIO_PIN_RESET);
 800a644:	4b04      	ldr	r3, [pc, #16]	; (800a658 <XPT2046_TouchSelect+0x18>)
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	4a04      	ldr	r2, [pc, #16]	; (800a65c <XPT2046_TouchSelect+0x1c>)
 800a64a:	8811      	ldrh	r1, [r2, #0]
 800a64c:	2200      	movs	r2, #0
 800a64e:	4618      	mov	r0, r3
 800a650:	f7f8 fffe 	bl	8003650 <HAL_GPIO_WritePin>
}
 800a654:	bf00      	nop
 800a656:	bd80      	pop	{r7, pc}
 800a658:	200102b4 	.word	0x200102b4
 800a65c:	200102b8 	.word	0x200102b8

0800a660 <XPT2046_TouchUnselect>:
//komunikace pro dotyk -nevybrana
static void XPT2046_TouchUnselect()
{
 800a660:	b580      	push	{r7, lr}
 800a662:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(tsCS_GPIO, tsCS_PIN, GPIO_PIN_SET);
 800a664:	4b04      	ldr	r3, [pc, #16]	; (800a678 <XPT2046_TouchUnselect+0x18>)
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	4a04      	ldr	r2, [pc, #16]	; (800a67c <XPT2046_TouchUnselect+0x1c>)
 800a66a:	8811      	ldrh	r1, [r2, #0]
 800a66c:	2201      	movs	r2, #1
 800a66e:	4618      	mov	r0, r3
 800a670:	f7f8 ffee 	bl	8003650 <HAL_GPIO_WritePin>
}
 800a674:	bf00      	nop
 800a676:	bd80      	pop	{r7, pc}
 800a678:	200102b4 	.word	0x200102b4
 800a67c:	200102b8 	.word	0x200102b8

0800a680 <XPT2046_TouchPressed>:
//preruseni pro stisk
bool XPT2046_TouchPressed()
{
 800a680:	b580      	push	{r7, lr}
 800a682:	af00      	add	r7, sp, #0
    return HAL_GPIO_ReadPin(tsIRQ_GPIO, tsIRQ_PIN) == GPIO_PIN_RESET;
 800a684:	4b07      	ldr	r3, [pc, #28]	; (800a6a4 <XPT2046_TouchPressed+0x24>)
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	4a07      	ldr	r2, [pc, #28]	; (800a6a8 <XPT2046_TouchPressed+0x28>)
 800a68a:	8812      	ldrh	r2, [r2, #0]
 800a68c:	4611      	mov	r1, r2
 800a68e:	4618      	mov	r0, r3
 800a690:	f7f8 ffc6 	bl	8003620 <HAL_GPIO_ReadPin>
 800a694:	4603      	mov	r3, r0
 800a696:	2b00      	cmp	r3, #0
 800a698:	bf0c      	ite	eq
 800a69a:	2301      	moveq	r3, #1
 800a69c:	2300      	movne	r3, #0
 800a69e:	b2db      	uxtb	r3, r3
}
 800a6a0:	4618      	mov	r0, r3
 800a6a2:	bd80      	pop	{r7, pc}
 800a6a4:	200102bc 	.word	0x200102bc
 800a6a8:	200102c0 	.word	0x200102c0

0800a6ac <XPT2046_TouchGetCoordinates>:
//funkce pro ziskani souradnic dotyku
bool XPT2046_TouchGetCoordinates(uint16_t* x, uint16_t* y)
{
 800a6ac:	b580      	push	{r7, lr}
 800a6ae:	b08c      	sub	sp, #48	; 0x30
 800a6b0:	af02      	add	r7, sp, #8
 800a6b2:	6078      	str	r0, [r7, #4]
 800a6b4:	6039      	str	r1, [r7, #0]
    static uint8_t cmd_read_x[1];
    static uint8_t cmd_read_y[1];

    if(XPT2046_getOrientation()==1 || XPT2046_getOrientation()==3)
 800a6b6:	f000 f9b1 	bl	800aa1c <XPT2046_getOrientation>
 800a6ba:	4603      	mov	r3, r0
 800a6bc:	2b01      	cmp	r3, #1
 800a6be:	d004      	beq.n	800a6ca <XPT2046_TouchGetCoordinates+0x1e>
 800a6c0:	f000 f9ac 	bl	800aa1c <XPT2046_getOrientation>
 800a6c4:	4603      	mov	r3, r0
 800a6c6:	2b03      	cmp	r3, #3
 800a6c8:	d11d      	bne.n	800a706 <XPT2046_TouchGetCoordinates+0x5a>
    {
        cmd_read_x[0] =READ_X;
 800a6ca:	4b96      	ldr	r3, [pc, #600]	; (800a924 <XPT2046_TouchGetCoordinates+0x278>)
 800a6cc:	22d0      	movs	r2, #208	; 0xd0
 800a6ce:	701a      	strb	r2, [r3, #0]
        cmd_read_y[0] =READ_Y;
 800a6d0:	4b95      	ldr	r3, [pc, #596]	; (800a928 <XPT2046_TouchGetCoordinates+0x27c>)
 800a6d2:	2290      	movs	r2, #144	; 0x90
 800a6d4:	701a      	strb	r2, [r3, #0]
    	XPT2046_SCALE_X=240;
 800a6d6:	4b95      	ldr	r3, [pc, #596]	; (800a92c <XPT2046_TouchGetCoordinates+0x280>)
 800a6d8:	22f0      	movs	r2, #240	; 0xf0
 800a6da:	801a      	strh	r2, [r3, #0]
    	XPT2046_SCALE_Y=320;
 800a6dc:	4b94      	ldr	r3, [pc, #592]	; (800a930 <XPT2046_TouchGetCoordinates+0x284>)
 800a6de:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800a6e2:	801a      	strh	r2, [r3, #0]
    	XPT2046_MIN_RAW_X=3400;
 800a6e4:	4b93      	ldr	r3, [pc, #588]	; (800a934 <XPT2046_TouchGetCoordinates+0x288>)
 800a6e6:	f640 5248 	movw	r2, #3400	; 0xd48
 800a6ea:	801a      	strh	r2, [r3, #0]
		XPT2046_MAX_RAW_X=29000;
 800a6ec:	4b92      	ldr	r3, [pc, #584]	; (800a938 <XPT2046_TouchGetCoordinates+0x28c>)
 800a6ee:	f247 1248 	movw	r2, #29000	; 0x7148
 800a6f2:	801a      	strh	r2, [r3, #0]
		XPT2046_MIN_RAW_Y=3300;
 800a6f4:	4b91      	ldr	r3, [pc, #580]	; (800a93c <XPT2046_TouchGetCoordinates+0x290>)
 800a6f6:	f640 42e4 	movw	r2, #3300	; 0xce4
 800a6fa:	801a      	strh	r2, [r3, #0]
		XPT2046_MAX_RAW_Y=30000;
 800a6fc:	4b90      	ldr	r3, [pc, #576]	; (800a940 <XPT2046_TouchGetCoordinates+0x294>)
 800a6fe:	f247 5230 	movw	r2, #30000	; 0x7530
 800a702:	801a      	strh	r2, [r3, #0]
 800a704:	e01c      	b.n	800a740 <XPT2046_TouchGetCoordinates+0x94>
    }
    else
    {
        cmd_read_x[0] =READ_Y;
 800a706:	4b87      	ldr	r3, [pc, #540]	; (800a924 <XPT2046_TouchGetCoordinates+0x278>)
 800a708:	2290      	movs	r2, #144	; 0x90
 800a70a:	701a      	strb	r2, [r3, #0]
        cmd_read_y[0] =READ_X;
 800a70c:	4b86      	ldr	r3, [pc, #536]	; (800a928 <XPT2046_TouchGetCoordinates+0x27c>)
 800a70e:	22d0      	movs	r2, #208	; 0xd0
 800a710:	701a      	strb	r2, [r3, #0]
    	XPT2046_SCALE_X=320;
 800a712:	4b86      	ldr	r3, [pc, #536]	; (800a92c <XPT2046_TouchGetCoordinates+0x280>)
 800a714:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800a718:	801a      	strh	r2, [r3, #0]
    	XPT2046_SCALE_Y=240;
 800a71a:	4b85      	ldr	r3, [pc, #532]	; (800a930 <XPT2046_TouchGetCoordinates+0x284>)
 800a71c:	22f0      	movs	r2, #240	; 0xf0
 800a71e:	801a      	strh	r2, [r3, #0]
    	XPT2046_MIN_RAW_X=3300;
 800a720:	4b84      	ldr	r3, [pc, #528]	; (800a934 <XPT2046_TouchGetCoordinates+0x288>)
 800a722:	f640 42e4 	movw	r2, #3300	; 0xce4
 800a726:	801a      	strh	r2, [r3, #0]
		XPT2046_MAX_RAW_X=30000;
 800a728:	4b83      	ldr	r3, [pc, #524]	; (800a938 <XPT2046_TouchGetCoordinates+0x28c>)
 800a72a:	f247 5230 	movw	r2, #30000	; 0x7530
 800a72e:	801a      	strh	r2, [r3, #0]
		XPT2046_MIN_RAW_Y=3400;
 800a730:	4b82      	ldr	r3, [pc, #520]	; (800a93c <XPT2046_TouchGetCoordinates+0x290>)
 800a732:	f640 5248 	movw	r2, #3400	; 0xd48
 800a736:	801a      	strh	r2, [r3, #0]
		XPT2046_MAX_RAW_Y=29000;
 800a738:	4b81      	ldr	r3, [pc, #516]	; (800a940 <XPT2046_TouchGetCoordinates+0x294>)
 800a73a:	f247 1248 	movw	r2, #29000	; 0x7148
 800a73e:	801a      	strh	r2, [r3, #0]
    }

    static const uint8_t zeroes_tx[] = { 0x00, 0x00 };

    XPT2046_TouchSelect();
 800a740:	f7ff ff7e 	bl	800a640 <XPT2046_TouchSelect>

    uint32_t avg_x = 0;
 800a744:	2300      	movs	r3, #0
 800a746:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t avg_y = 0;
 800a748:	2300      	movs	r3, #0
 800a74a:	623b      	str	r3, [r7, #32]
    uint8_t nsamples = 0;
 800a74c:	2300      	movs	r3, #0
 800a74e:	77fb      	strb	r3, [r7, #31]

    for(uint8_t i = 0; i < 16; i++)
 800a750:	2300      	movs	r3, #0
 800a752:	77bb      	strb	r3, [r7, #30]
 800a754:	e03f      	b.n	800a7d6 <XPT2046_TouchGetCoordinates+0x12a>
    {
        if(!XPT2046_TouchPressed())
 800a756:	f7ff ff93 	bl	800a680 <XPT2046_TouchPressed>
 800a75a:	4603      	mov	r3, r0
 800a75c:	f083 0301 	eor.w	r3, r3, #1
 800a760:	b2db      	uxtb	r3, r3
 800a762:	2b00      	cmp	r3, #0
 800a764:	d13b      	bne.n	800a7de <XPT2046_TouchGetCoordinates+0x132>
            break;

        nsamples++;
 800a766:	7ffb      	ldrb	r3, [r7, #31]
 800a768:	3301      	adds	r3, #1
 800a76a:	77fb      	strb	r3, [r7, #31]

        HAL_SPI_Transmit(&tsSPIhandle, (uint8_t*)cmd_read_y, sizeof(cmd_read_y), HAL_MAX_DELAY);
 800a76c:	f04f 33ff 	mov.w	r3, #4294967295
 800a770:	2201      	movs	r2, #1
 800a772:	496d      	ldr	r1, [pc, #436]	; (800a928 <XPT2046_TouchGetCoordinates+0x27c>)
 800a774:	4873      	ldr	r0, [pc, #460]	; (800a944 <XPT2046_TouchGetCoordinates+0x298>)
 800a776:	f7fb fac0 	bl	8005cfa <HAL_SPI_Transmit>
        uint8_t y_raw[2];
        HAL_SPI_TransmitReceive(&tsSPIhandle, (uint8_t*)zeroes_tx, y_raw, sizeof(y_raw), HAL_MAX_DELAY);
 800a77a:	f107 0210 	add.w	r2, r7, #16
 800a77e:	f04f 33ff 	mov.w	r3, #4294967295
 800a782:	9300      	str	r3, [sp, #0]
 800a784:	2302      	movs	r3, #2
 800a786:	4970      	ldr	r1, [pc, #448]	; (800a948 <XPT2046_TouchGetCoordinates+0x29c>)
 800a788:	486e      	ldr	r0, [pc, #440]	; (800a944 <XPT2046_TouchGetCoordinates+0x298>)
 800a78a:	f7fb fc1c 	bl	8005fc6 <HAL_SPI_TransmitReceive>

        HAL_SPI_Transmit(&tsSPIhandle, (uint8_t*)cmd_read_x, sizeof(cmd_read_x), HAL_MAX_DELAY);
 800a78e:	f04f 33ff 	mov.w	r3, #4294967295
 800a792:	2201      	movs	r2, #1
 800a794:	4963      	ldr	r1, [pc, #396]	; (800a924 <XPT2046_TouchGetCoordinates+0x278>)
 800a796:	486b      	ldr	r0, [pc, #428]	; (800a944 <XPT2046_TouchGetCoordinates+0x298>)
 800a798:	f7fb faaf 	bl	8005cfa <HAL_SPI_Transmit>
        uint8_t x_raw[2];
        HAL_SPI_TransmitReceive(&tsSPIhandle, (uint8_t*)zeroes_tx, x_raw, sizeof(x_raw), HAL_MAX_DELAY);
 800a79c:	f107 020c 	add.w	r2, r7, #12
 800a7a0:	f04f 33ff 	mov.w	r3, #4294967295
 800a7a4:	9300      	str	r3, [sp, #0]
 800a7a6:	2302      	movs	r3, #2
 800a7a8:	4967      	ldr	r1, [pc, #412]	; (800a948 <XPT2046_TouchGetCoordinates+0x29c>)
 800a7aa:	4866      	ldr	r0, [pc, #408]	; (800a944 <XPT2046_TouchGetCoordinates+0x298>)
 800a7ac:	f7fb fc0b 	bl	8005fc6 <HAL_SPI_TransmitReceive>

        avg_x += (((uint16_t)x_raw[0]) << 8) | ((uint16_t)x_raw[1]);
 800a7b0:	7b3b      	ldrb	r3, [r7, #12]
 800a7b2:	021b      	lsls	r3, r3, #8
 800a7b4:	7b7a      	ldrb	r2, [r7, #13]
 800a7b6:	4313      	orrs	r3, r2
 800a7b8:	461a      	mov	r2, r3
 800a7ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7bc:	4413      	add	r3, r2
 800a7be:	627b      	str	r3, [r7, #36]	; 0x24
        avg_y += (((uint16_t)y_raw[0]) << 8) | ((uint16_t)y_raw[1]);
 800a7c0:	7c3b      	ldrb	r3, [r7, #16]
 800a7c2:	021b      	lsls	r3, r3, #8
 800a7c4:	7c7a      	ldrb	r2, [r7, #17]
 800a7c6:	4313      	orrs	r3, r2
 800a7c8:	461a      	mov	r2, r3
 800a7ca:	6a3b      	ldr	r3, [r7, #32]
 800a7cc:	4413      	add	r3, r2
 800a7ce:	623b      	str	r3, [r7, #32]
    for(uint8_t i = 0; i < 16; i++)
 800a7d0:	7fbb      	ldrb	r3, [r7, #30]
 800a7d2:	3301      	adds	r3, #1
 800a7d4:	77bb      	strb	r3, [r7, #30]
 800a7d6:	7fbb      	ldrb	r3, [r7, #30]
 800a7d8:	2b0f      	cmp	r3, #15
 800a7da:	d9bc      	bls.n	800a756 <XPT2046_TouchGetCoordinates+0xaa>
 800a7dc:	e000      	b.n	800a7e0 <XPT2046_TouchGetCoordinates+0x134>
            break;
 800a7de:	bf00      	nop
    }

    XPT2046_TouchUnselect();
 800a7e0:	f7ff ff3e 	bl	800a660 <XPT2046_TouchUnselect>

    if(nsamples < 16)
 800a7e4:	7ffb      	ldrb	r3, [r7, #31]
 800a7e6:	2b0f      	cmp	r3, #15
 800a7e8:	d801      	bhi.n	800a7ee <XPT2046_TouchGetCoordinates+0x142>
        return false;
 800a7ea:	2300      	movs	r3, #0
 800a7ec:	e105      	b.n	800a9fa <XPT2046_TouchGetCoordinates+0x34e>

    uint32_t raw_x = (avg_x / 16);
 800a7ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7f0:	091b      	lsrs	r3, r3, #4
 800a7f2:	61bb      	str	r3, [r7, #24]
    if(raw_x < XPT2046_MIN_RAW_X) raw_x = XPT2046_MIN_RAW_X;
 800a7f4:	4b4f      	ldr	r3, [pc, #316]	; (800a934 <XPT2046_TouchGetCoordinates+0x288>)
 800a7f6:	881b      	ldrh	r3, [r3, #0]
 800a7f8:	461a      	mov	r2, r3
 800a7fa:	69bb      	ldr	r3, [r7, #24]
 800a7fc:	4293      	cmp	r3, r2
 800a7fe:	d202      	bcs.n	800a806 <XPT2046_TouchGetCoordinates+0x15a>
 800a800:	4b4c      	ldr	r3, [pc, #304]	; (800a934 <XPT2046_TouchGetCoordinates+0x288>)
 800a802:	881b      	ldrh	r3, [r3, #0]
 800a804:	61bb      	str	r3, [r7, #24]
    if(raw_x > XPT2046_MAX_RAW_X) raw_x = XPT2046_MAX_RAW_X;
 800a806:	4b4c      	ldr	r3, [pc, #304]	; (800a938 <XPT2046_TouchGetCoordinates+0x28c>)
 800a808:	881b      	ldrh	r3, [r3, #0]
 800a80a:	461a      	mov	r2, r3
 800a80c:	69bb      	ldr	r3, [r7, #24]
 800a80e:	4293      	cmp	r3, r2
 800a810:	d902      	bls.n	800a818 <XPT2046_TouchGetCoordinates+0x16c>
 800a812:	4b49      	ldr	r3, [pc, #292]	; (800a938 <XPT2046_TouchGetCoordinates+0x28c>)
 800a814:	881b      	ldrh	r3, [r3, #0]
 800a816:	61bb      	str	r3, [r7, #24]

    uint32_t raw_y = (avg_y / 16);
 800a818:	6a3b      	ldr	r3, [r7, #32]
 800a81a:	091b      	lsrs	r3, r3, #4
 800a81c:	617b      	str	r3, [r7, #20]
    if(raw_y < XPT2046_MIN_RAW_Y) raw_y = XPT2046_MIN_RAW_Y;
 800a81e:	4b47      	ldr	r3, [pc, #284]	; (800a93c <XPT2046_TouchGetCoordinates+0x290>)
 800a820:	881b      	ldrh	r3, [r3, #0]
 800a822:	461a      	mov	r2, r3
 800a824:	697b      	ldr	r3, [r7, #20]
 800a826:	4293      	cmp	r3, r2
 800a828:	d202      	bcs.n	800a830 <XPT2046_TouchGetCoordinates+0x184>
 800a82a:	4b44      	ldr	r3, [pc, #272]	; (800a93c <XPT2046_TouchGetCoordinates+0x290>)
 800a82c:	881b      	ldrh	r3, [r3, #0]
 800a82e:	617b      	str	r3, [r7, #20]
    if(raw_y > XPT2046_MAX_RAW_Y) raw_y = XPT2046_MAX_RAW_Y;
 800a830:	4b43      	ldr	r3, [pc, #268]	; (800a940 <XPT2046_TouchGetCoordinates+0x294>)
 800a832:	881b      	ldrh	r3, [r3, #0]
 800a834:	461a      	mov	r2, r3
 800a836:	697b      	ldr	r3, [r7, #20]
 800a838:	4293      	cmp	r3, r2
 800a83a:	d902      	bls.n	800a842 <XPT2046_TouchGetCoordinates+0x196>
 800a83c:	4b40      	ldr	r3, [pc, #256]	; (800a940 <XPT2046_TouchGetCoordinates+0x294>)
 800a83e:	881b      	ldrh	r3, [r3, #0]
 800a840:	617b      	str	r3, [r7, #20]

    switch(XPT2046_getOrientation())
 800a842:	f000 f8eb 	bl	800aa1c <XPT2046_getOrientation>
 800a846:	4603      	mov	r3, r0
 800a848:	3b01      	subs	r3, #1
 800a84a:	2b03      	cmp	r3, #3
 800a84c:	f200 80d4 	bhi.w	800a9f8 <XPT2046_TouchGetCoordinates+0x34c>
 800a850:	a201      	add	r2, pc, #4	; (adr r2, 800a858 <XPT2046_TouchGetCoordinates+0x1ac>)
 800a852:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a856:	bf00      	nop
 800a858:	0800a869 	.word	0x0800a869
 800a85c:	0800a8cb 	.word	0x0800a8cb
 800a860:	0800a94d 	.word	0x0800a94d
 800a864:	0800a99f 	.word	0x0800a99f
  	{
  		case 1:
  		    *x = XPT2046_SCALE_X-((raw_x - XPT2046_MIN_RAW_X) * XPT2046_SCALE_X / (XPT2046_MAX_RAW_X - XPT2046_MIN_RAW_X));
 800a868:	4b30      	ldr	r3, [pc, #192]	; (800a92c <XPT2046_TouchGetCoordinates+0x280>)
 800a86a:	881a      	ldrh	r2, [r3, #0]
 800a86c:	4b31      	ldr	r3, [pc, #196]	; (800a934 <XPT2046_TouchGetCoordinates+0x288>)
 800a86e:	881b      	ldrh	r3, [r3, #0]
 800a870:	4619      	mov	r1, r3
 800a872:	69bb      	ldr	r3, [r7, #24]
 800a874:	1a5b      	subs	r3, r3, r1
 800a876:	492d      	ldr	r1, [pc, #180]	; (800a92c <XPT2046_TouchGetCoordinates+0x280>)
 800a878:	8809      	ldrh	r1, [r1, #0]
 800a87a:	fb01 f303 	mul.w	r3, r1, r3
 800a87e:	492e      	ldr	r1, [pc, #184]	; (800a938 <XPT2046_TouchGetCoordinates+0x28c>)
 800a880:	8809      	ldrh	r1, [r1, #0]
 800a882:	4608      	mov	r0, r1
 800a884:	492b      	ldr	r1, [pc, #172]	; (800a934 <XPT2046_TouchGetCoordinates+0x288>)
 800a886:	8809      	ldrh	r1, [r1, #0]
 800a888:	1a41      	subs	r1, r0, r1
 800a88a:	fbb3 f3f1 	udiv	r3, r3, r1
 800a88e:	b29b      	uxth	r3, r3
 800a890:	1ad3      	subs	r3, r2, r3
 800a892:	b29a      	uxth	r2, r3
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	801a      	strh	r2, [r3, #0]
  		    *y = XPT2046_SCALE_Y-((raw_y - XPT2046_MIN_RAW_Y) * XPT2046_SCALE_Y / (XPT2046_MAX_RAW_Y - XPT2046_MIN_RAW_Y));
 800a898:	4b25      	ldr	r3, [pc, #148]	; (800a930 <XPT2046_TouchGetCoordinates+0x284>)
 800a89a:	881a      	ldrh	r2, [r3, #0]
 800a89c:	4b27      	ldr	r3, [pc, #156]	; (800a93c <XPT2046_TouchGetCoordinates+0x290>)
 800a89e:	881b      	ldrh	r3, [r3, #0]
 800a8a0:	4619      	mov	r1, r3
 800a8a2:	697b      	ldr	r3, [r7, #20]
 800a8a4:	1a5b      	subs	r3, r3, r1
 800a8a6:	4922      	ldr	r1, [pc, #136]	; (800a930 <XPT2046_TouchGetCoordinates+0x284>)
 800a8a8:	8809      	ldrh	r1, [r1, #0]
 800a8aa:	fb01 f303 	mul.w	r3, r1, r3
 800a8ae:	4924      	ldr	r1, [pc, #144]	; (800a940 <XPT2046_TouchGetCoordinates+0x294>)
 800a8b0:	8809      	ldrh	r1, [r1, #0]
 800a8b2:	4608      	mov	r0, r1
 800a8b4:	4921      	ldr	r1, [pc, #132]	; (800a93c <XPT2046_TouchGetCoordinates+0x290>)
 800a8b6:	8809      	ldrh	r1, [r1, #0]
 800a8b8:	1a41      	subs	r1, r0, r1
 800a8ba:	fbb3 f3f1 	udiv	r3, r3, r1
 800a8be:	b29b      	uxth	r3, r3
 800a8c0:	1ad3      	subs	r3, r2, r3
 800a8c2:	b29a      	uxth	r2, r3
 800a8c4:	683b      	ldr	r3, [r7, #0]
 800a8c6:	801a      	strh	r2, [r3, #0]
  			break;
 800a8c8:	e096      	b.n	800a9f8 <XPT2046_TouchGetCoordinates+0x34c>
  		case 2:
  		    *x = XPT2046_SCALE_X-((raw_x - XPT2046_MIN_RAW_X) * XPT2046_SCALE_X / (XPT2046_MAX_RAW_X - XPT2046_MIN_RAW_X));
 800a8ca:	4b18      	ldr	r3, [pc, #96]	; (800a92c <XPT2046_TouchGetCoordinates+0x280>)
 800a8cc:	881a      	ldrh	r2, [r3, #0]
 800a8ce:	4b19      	ldr	r3, [pc, #100]	; (800a934 <XPT2046_TouchGetCoordinates+0x288>)
 800a8d0:	881b      	ldrh	r3, [r3, #0]
 800a8d2:	4619      	mov	r1, r3
 800a8d4:	69bb      	ldr	r3, [r7, #24]
 800a8d6:	1a5b      	subs	r3, r3, r1
 800a8d8:	4914      	ldr	r1, [pc, #80]	; (800a92c <XPT2046_TouchGetCoordinates+0x280>)
 800a8da:	8809      	ldrh	r1, [r1, #0]
 800a8dc:	fb01 f303 	mul.w	r3, r1, r3
 800a8e0:	4915      	ldr	r1, [pc, #84]	; (800a938 <XPT2046_TouchGetCoordinates+0x28c>)
 800a8e2:	8809      	ldrh	r1, [r1, #0]
 800a8e4:	4608      	mov	r0, r1
 800a8e6:	4913      	ldr	r1, [pc, #76]	; (800a934 <XPT2046_TouchGetCoordinates+0x288>)
 800a8e8:	8809      	ldrh	r1, [r1, #0]
 800a8ea:	1a41      	subs	r1, r0, r1
 800a8ec:	fbb3 f3f1 	udiv	r3, r3, r1
 800a8f0:	b29b      	uxth	r3, r3
 800a8f2:	1ad3      	subs	r3, r2, r3
 800a8f4:	b29a      	uxth	r2, r3
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	801a      	strh	r2, [r3, #0]
  		    *y = ((raw_y - XPT2046_MIN_RAW_Y) * XPT2046_SCALE_Y / (XPT2046_MAX_RAW_Y - XPT2046_MIN_RAW_Y));
 800a8fa:	4b10      	ldr	r3, [pc, #64]	; (800a93c <XPT2046_TouchGetCoordinates+0x290>)
 800a8fc:	881b      	ldrh	r3, [r3, #0]
 800a8fe:	461a      	mov	r2, r3
 800a900:	697b      	ldr	r3, [r7, #20]
 800a902:	1a9b      	subs	r3, r3, r2
 800a904:	4a0a      	ldr	r2, [pc, #40]	; (800a930 <XPT2046_TouchGetCoordinates+0x284>)
 800a906:	8812      	ldrh	r2, [r2, #0]
 800a908:	fb02 f303 	mul.w	r3, r2, r3
 800a90c:	4a0c      	ldr	r2, [pc, #48]	; (800a940 <XPT2046_TouchGetCoordinates+0x294>)
 800a90e:	8812      	ldrh	r2, [r2, #0]
 800a910:	4611      	mov	r1, r2
 800a912:	4a0a      	ldr	r2, [pc, #40]	; (800a93c <XPT2046_TouchGetCoordinates+0x290>)
 800a914:	8812      	ldrh	r2, [r2, #0]
 800a916:	1a8a      	subs	r2, r1, r2
 800a918:	fbb3 f3f2 	udiv	r3, r3, r2
 800a91c:	b29a      	uxth	r2, r3
 800a91e:	683b      	ldr	r3, [r7, #0]
 800a920:	801a      	strh	r2, [r3, #0]
  			break;
 800a922:	e069      	b.n	800a9f8 <XPT2046_TouchGetCoordinates+0x34c>
 800a924:	200102c4 	.word	0x200102c4
 800a928:	200102c8 	.word	0x200102c8
 800a92c:	2000000e 	.word	0x2000000e
 800a930:	20000010 	.word	0x20000010
 800a934:	20000012 	.word	0x20000012
 800a938:	20000014 	.word	0x20000014
 800a93c:	20000016 	.word	0x20000016
 800a940:	20000018 	.word	0x20000018
 800a944:	20010250 	.word	0x20010250
 800a948:	08013b7c 	.word	0x08013b7c
  		case 3:
  		    *x = (raw_x - XPT2046_MIN_RAW_X) * XPT2046_SCALE_X / (XPT2046_MAX_RAW_X - XPT2046_MIN_RAW_X);
 800a94c:	4b2d      	ldr	r3, [pc, #180]	; (800aa04 <XPT2046_TouchGetCoordinates+0x358>)
 800a94e:	881b      	ldrh	r3, [r3, #0]
 800a950:	461a      	mov	r2, r3
 800a952:	69bb      	ldr	r3, [r7, #24]
 800a954:	1a9b      	subs	r3, r3, r2
 800a956:	4a2c      	ldr	r2, [pc, #176]	; (800aa08 <XPT2046_TouchGetCoordinates+0x35c>)
 800a958:	8812      	ldrh	r2, [r2, #0]
 800a95a:	fb02 f303 	mul.w	r3, r2, r3
 800a95e:	4a2b      	ldr	r2, [pc, #172]	; (800aa0c <XPT2046_TouchGetCoordinates+0x360>)
 800a960:	8812      	ldrh	r2, [r2, #0]
 800a962:	4611      	mov	r1, r2
 800a964:	4a27      	ldr	r2, [pc, #156]	; (800aa04 <XPT2046_TouchGetCoordinates+0x358>)
 800a966:	8812      	ldrh	r2, [r2, #0]
 800a968:	1a8a      	subs	r2, r1, r2
 800a96a:	fbb3 f3f2 	udiv	r3, r3, r2
 800a96e:	b29a      	uxth	r2, r3
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	801a      	strh	r2, [r3, #0]
  		    *y = (raw_y - XPT2046_MIN_RAW_Y) * XPT2046_SCALE_Y / (XPT2046_MAX_RAW_Y - XPT2046_MIN_RAW_Y);
 800a974:	4b26      	ldr	r3, [pc, #152]	; (800aa10 <XPT2046_TouchGetCoordinates+0x364>)
 800a976:	881b      	ldrh	r3, [r3, #0]
 800a978:	461a      	mov	r2, r3
 800a97a:	697b      	ldr	r3, [r7, #20]
 800a97c:	1a9b      	subs	r3, r3, r2
 800a97e:	4a25      	ldr	r2, [pc, #148]	; (800aa14 <XPT2046_TouchGetCoordinates+0x368>)
 800a980:	8812      	ldrh	r2, [r2, #0]
 800a982:	fb02 f303 	mul.w	r3, r2, r3
 800a986:	4a24      	ldr	r2, [pc, #144]	; (800aa18 <XPT2046_TouchGetCoordinates+0x36c>)
 800a988:	8812      	ldrh	r2, [r2, #0]
 800a98a:	4611      	mov	r1, r2
 800a98c:	4a20      	ldr	r2, [pc, #128]	; (800aa10 <XPT2046_TouchGetCoordinates+0x364>)
 800a98e:	8812      	ldrh	r2, [r2, #0]
 800a990:	1a8a      	subs	r2, r1, r2
 800a992:	fbb3 f3f2 	udiv	r3, r3, r2
 800a996:	b29a      	uxth	r2, r3
 800a998:	683b      	ldr	r3, [r7, #0]
 800a99a:	801a      	strh	r2, [r3, #0]
  			break;
 800a99c:	e02c      	b.n	800a9f8 <XPT2046_TouchGetCoordinates+0x34c>
  		case 4:
  		    *x = ((raw_x - XPT2046_MIN_RAW_X) * XPT2046_SCALE_X / (XPT2046_MAX_RAW_X - XPT2046_MIN_RAW_X));
 800a99e:	4b19      	ldr	r3, [pc, #100]	; (800aa04 <XPT2046_TouchGetCoordinates+0x358>)
 800a9a0:	881b      	ldrh	r3, [r3, #0]
 800a9a2:	461a      	mov	r2, r3
 800a9a4:	69bb      	ldr	r3, [r7, #24]
 800a9a6:	1a9b      	subs	r3, r3, r2
 800a9a8:	4a17      	ldr	r2, [pc, #92]	; (800aa08 <XPT2046_TouchGetCoordinates+0x35c>)
 800a9aa:	8812      	ldrh	r2, [r2, #0]
 800a9ac:	fb02 f303 	mul.w	r3, r2, r3
 800a9b0:	4a16      	ldr	r2, [pc, #88]	; (800aa0c <XPT2046_TouchGetCoordinates+0x360>)
 800a9b2:	8812      	ldrh	r2, [r2, #0]
 800a9b4:	4611      	mov	r1, r2
 800a9b6:	4a13      	ldr	r2, [pc, #76]	; (800aa04 <XPT2046_TouchGetCoordinates+0x358>)
 800a9b8:	8812      	ldrh	r2, [r2, #0]
 800a9ba:	1a8a      	subs	r2, r1, r2
 800a9bc:	fbb3 f3f2 	udiv	r3, r3, r2
 800a9c0:	b29a      	uxth	r2, r3
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	801a      	strh	r2, [r3, #0]
  		    *y = XPT2046_SCALE_Y-((raw_y - XPT2046_MIN_RAW_Y) * XPT2046_SCALE_Y / (XPT2046_MAX_RAW_Y - XPT2046_MIN_RAW_Y));
 800a9c6:	4b13      	ldr	r3, [pc, #76]	; (800aa14 <XPT2046_TouchGetCoordinates+0x368>)
 800a9c8:	881a      	ldrh	r2, [r3, #0]
 800a9ca:	4b11      	ldr	r3, [pc, #68]	; (800aa10 <XPT2046_TouchGetCoordinates+0x364>)
 800a9cc:	881b      	ldrh	r3, [r3, #0]
 800a9ce:	4619      	mov	r1, r3
 800a9d0:	697b      	ldr	r3, [r7, #20]
 800a9d2:	1a5b      	subs	r3, r3, r1
 800a9d4:	490f      	ldr	r1, [pc, #60]	; (800aa14 <XPT2046_TouchGetCoordinates+0x368>)
 800a9d6:	8809      	ldrh	r1, [r1, #0]
 800a9d8:	fb01 f303 	mul.w	r3, r1, r3
 800a9dc:	490e      	ldr	r1, [pc, #56]	; (800aa18 <XPT2046_TouchGetCoordinates+0x36c>)
 800a9de:	8809      	ldrh	r1, [r1, #0]
 800a9e0:	4608      	mov	r0, r1
 800a9e2:	490b      	ldr	r1, [pc, #44]	; (800aa10 <XPT2046_TouchGetCoordinates+0x364>)
 800a9e4:	8809      	ldrh	r1, [r1, #0]
 800a9e6:	1a41      	subs	r1, r0, r1
 800a9e8:	fbb3 f3f1 	udiv	r3, r3, r1
 800a9ec:	b29b      	uxth	r3, r3
 800a9ee:	1ad3      	subs	r3, r2, r3
 800a9f0:	b29a      	uxth	r2, r3
 800a9f2:	683b      	ldr	r3, [r7, #0]
 800a9f4:	801a      	strh	r2, [r3, #0]
  			break;
 800a9f6:	bf00      	nop
  	}




    return true;
 800a9f8:	2301      	movs	r3, #1
}
 800a9fa:	4618      	mov	r0, r3
 800a9fc:	3728      	adds	r7, #40	; 0x28
 800a9fe:	46bd      	mov	sp, r7
 800aa00:	bd80      	pop	{r7, pc}
 800aa02:	bf00      	nop
 800aa04:	20000012 	.word	0x20000012
 800aa08:	2000000e 	.word	0x2000000e
 800aa0c:	20000014 	.word	0x20000014
 800aa10:	20000016 	.word	0x20000016
 800aa14:	20000010 	.word	0x20000010
 800aa18:	20000018 	.word	0x20000018

0800aa1c <XPT2046_getOrientation>:
//vrati orientaci obrazovky
uint8_t XPT2046_getOrientation(void)
{
 800aa1c:	b580      	push	{r7, lr}
 800aa1e:	af00      	add	r7, sp, #0
	return TFT9341_getRotation();
 800aa20:	f7ff fdda 	bl	800a5d8 <TFT9341_getRotation>
 800aa24:	4603      	mov	r3, r0
}
 800aa26:	4618      	mov	r0, r3
 800aa28:	bd80      	pop	{r7, pc}
	...

0800aa2c <GUI_page_main>:
extern char str[16];

/* Functions ------------------------------------------------------------------*/
//vykresleni hlavniho menu
void GUI_page_main(void)
{
 800aa2c:	b580      	push	{r7, lr}
 800aa2e:	b082      	sub	sp, #8
 800aa30:	af02      	add	r7, sp, #8
	//pozadí
	TFT9341_FillScreen(COLOR_WHITE);
 800aa32:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800aa36:	f7ff f9d1 	bl	8009ddc <TFT9341_FillScreen>
	TFT9341_FillRect(160, 0, 161 ,240, COLOR_BLUE);
 800aa3a:	231f      	movs	r3, #31
 800aa3c:	9300      	str	r3, [sp, #0]
 800aa3e:	23f0      	movs	r3, #240	; 0xf0
 800aa40:	22a1      	movs	r2, #161	; 0xa1
 800aa42:	2100      	movs	r1, #0
 800aa44:	20a0      	movs	r0, #160	; 0xa0
 800aa46:	f7ff fa25 	bl	8009e94 <TFT9341_FillRect>
	TFT9341_FillRect(0, 60, 320 ,61, COLOR_BLUE);
 800aa4a:	231f      	movs	r3, #31
 800aa4c:	9300      	str	r3, [sp, #0]
 800aa4e:	233d      	movs	r3, #61	; 0x3d
 800aa50:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800aa54:	213c      	movs	r1, #60	; 0x3c
 800aa56:	2000      	movs	r0, #0
 800aa58:	f7ff fa1c 	bl	8009e94 <TFT9341_FillRect>
	TFT9341_FillRect(0, 120, 320 ,121, COLOR_BLUE);
 800aa5c:	231f      	movs	r3, #31
 800aa5e:	9300      	str	r3, [sp, #0]
 800aa60:	2379      	movs	r3, #121	; 0x79
 800aa62:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800aa66:	2178      	movs	r1, #120	; 0x78
 800aa68:	2000      	movs	r0, #0
 800aa6a:	f7ff fa13 	bl	8009e94 <TFT9341_FillRect>
	TFT9341_FillRect(0, 180, 320 ,181, COLOR_BLUE);
 800aa6e:	231f      	movs	r3, #31
 800aa70:	9300      	str	r3, [sp, #0]
 800aa72:	23b5      	movs	r3, #181	; 0xb5
 800aa74:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800aa78:	21b4      	movs	r1, #180	; 0xb4
 800aa7a:	2000      	movs	r0, #0
 800aa7c:	f7ff fa0a 	bl	8009e94 <TFT9341_FillRect>
	//levy sloupec
	TFT9341_printText("MALOVANI",32, 24, COLOR_BLACK, COLOR_WHITE, 2);
 800aa80:	2302      	movs	r3, #2
 800aa82:	9301      	str	r3, [sp, #4]
 800aa84:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800aa88:	9300      	str	r3, [sp, #0]
 800aa8a:	2300      	movs	r3, #0
 800aa8c:	2218      	movs	r2, #24
 800aa8e:	2120      	movs	r1, #32
 800aa90:	483b      	ldr	r0, [pc, #236]	; (800ab80 <GUI_page_main+0x154>)
 800aa92:	f7ff fd5f 	bl	800a554 <TFT9341_printText>
	TFT9341_printText("TEPLOTA",38, 74, COLOR_BLACK, COLOR_WHITE, 2);
 800aa96:	2302      	movs	r3, #2
 800aa98:	9301      	str	r3, [sp, #4]
 800aa9a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800aa9e:	9300      	str	r3, [sp, #0]
 800aaa0:	2300      	movs	r3, #0
 800aaa2:	224a      	movs	r2, #74	; 0x4a
 800aaa4:	2126      	movs	r1, #38	; 0x26
 800aaa6:	4837      	ldr	r0, [pc, #220]	; (800ab84 <GUI_page_main+0x158>)
 800aaa8:	f7ff fd54 	bl	800a554 <TFT9341_printText>
	TFT9341_printText("VLHKOST",38, 94, COLOR_BLACK, COLOR_WHITE, 2);
 800aaac:	2302      	movs	r3, #2
 800aaae:	9301      	str	r3, [sp, #4]
 800aab0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800aab4:	9300      	str	r3, [sp, #0]
 800aab6:	2300      	movs	r3, #0
 800aab8:	225e      	movs	r2, #94	; 0x5e
 800aaba:	2126      	movs	r1, #38	; 0x26
 800aabc:	4832      	ldr	r0, [pc, #200]	; (800ab88 <GUI_page_main+0x15c>)
 800aabe:	f7ff fd49 	bl	800a554 <TFT9341_printText>
	TFT9341_printText("NTC",62, 134, COLOR_BLACK, COLOR_WHITE, 2);
 800aac2:	2302      	movs	r3, #2
 800aac4:	9301      	str	r3, [sp, #4]
 800aac6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800aaca:	9300      	str	r3, [sp, #0]
 800aacc:	2300      	movs	r3, #0
 800aace:	2286      	movs	r2, #134	; 0x86
 800aad0:	213e      	movs	r1, #62	; 0x3e
 800aad2:	482e      	ldr	r0, [pc, #184]	; (800ab8c <GUI_page_main+0x160>)
 800aad4:	f7ff fd3e 	bl	800a554 <TFT9341_printText>
	TFT9341_printText("HEATER",44, 154, COLOR_BLACK, COLOR_WHITE, 2);
 800aad8:	2302      	movs	r3, #2
 800aada:	9301      	str	r3, [sp, #4]
 800aadc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800aae0:	9300      	str	r3, [sp, #0]
 800aae2:	2300      	movs	r3, #0
 800aae4:	229a      	movs	r2, #154	; 0x9a
 800aae6:	212c      	movs	r1, #44	; 0x2c
 800aae8:	4829      	ldr	r0, [pc, #164]	; (800ab90 <GUI_page_main+0x164>)
 800aaea:	f7ff fd33 	bl	800a554 <TFT9341_printText>
	TFT9341_printText("LED DIODY",26, 204, COLOR_BLACK, COLOR_WHITE, 2);
 800aaee:	2302      	movs	r3, #2
 800aaf0:	9301      	str	r3, [sp, #4]
 800aaf2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800aaf6:	9300      	str	r3, [sp, #0]
 800aaf8:	2300      	movs	r3, #0
 800aafa:	22cc      	movs	r2, #204	; 0xcc
 800aafc:	211a      	movs	r1, #26
 800aafe:	4825      	ldr	r0, [pc, #148]	; (800ab94 <GUI_page_main+0x168>)
 800ab00:	f7ff fd28 	bl	800a554 <TFT9341_printText>
	//pravy sloupec
	TFT9341_printText("ENCODER",199, 13, COLOR_BLACK, COLOR_WHITE, 2);
 800ab04:	2302      	movs	r3, #2
 800ab06:	9301      	str	r3, [sp, #4]
 800ab08:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ab0c:	9300      	str	r3, [sp, #0]
 800ab0e:	2300      	movs	r3, #0
 800ab10:	220d      	movs	r2, #13
 800ab12:	21c7      	movs	r1, #199	; 0xc7
 800ab14:	4820      	ldr	r0, [pc, #128]	; (800ab98 <GUI_page_main+0x16c>)
 800ab16:	f7ff fd1d 	bl	800a554 <TFT9341_printText>
	TFT9341_printText("POTENCIOMETR",169, 33, COLOR_BLACK, COLOR_WHITE, 2);
 800ab1a:	2302      	movs	r3, #2
 800ab1c:	9301      	str	r3, [sp, #4]
 800ab1e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ab22:	9300      	str	r3, [sp, #0]
 800ab24:	2300      	movs	r3, #0
 800ab26:	2221      	movs	r2, #33	; 0x21
 800ab28:	21a9      	movs	r1, #169	; 0xa9
 800ab2a:	481c      	ldr	r0, [pc, #112]	; (800ab9c <GUI_page_main+0x170>)
 800ab2c:	f7ff fd12 	bl	800a554 <TFT9341_printText>
	TFT9341_printText("KLAVESNICE",181, 84, COLOR_BLACK, COLOR_WHITE, 2);
 800ab30:	2302      	movs	r3, #2
 800ab32:	9301      	str	r3, [sp, #4]
 800ab34:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ab38:	9300      	str	r3, [sp, #0]
 800ab3a:	2300      	movs	r3, #0
 800ab3c:	2254      	movs	r2, #84	; 0x54
 800ab3e:	21b5      	movs	r1, #181	; 0xb5
 800ab40:	4817      	ldr	r0, [pc, #92]	; (800aba0 <GUI_page_main+0x174>)
 800ab42:	f7ff fd07 	bl	800a554 <TFT9341_printText>
	TFT9341_printText("REPRODUKTOR",175, 144, COLOR_BLACK, COLOR_WHITE, 2);
 800ab46:	2302      	movs	r3, #2
 800ab48:	9301      	str	r3, [sp, #4]
 800ab4a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ab4e:	9300      	str	r3, [sp, #0]
 800ab50:	2300      	movs	r3, #0
 800ab52:	2290      	movs	r2, #144	; 0x90
 800ab54:	21af      	movs	r1, #175	; 0xaf
 800ab56:	4813      	ldr	r0, [pc, #76]	; (800aba4 <GUI_page_main+0x178>)
 800ab58:	f7ff fcfc 	bl	800a554 <TFT9341_printText>
	TFT9341_printText("TLACITKA",193, 204, COLOR_BLACK, COLOR_WHITE, 2);
 800ab5c:	2302      	movs	r3, #2
 800ab5e:	9301      	str	r3, [sp, #4]
 800ab60:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ab64:	9300      	str	r3, [sp, #0]
 800ab66:	2300      	movs	r3, #0
 800ab68:	22cc      	movs	r2, #204	; 0xcc
 800ab6a:	21c1      	movs	r1, #193	; 0xc1
 800ab6c:	480e      	ldr	r0, [pc, #56]	; (800aba8 <GUI_page_main+0x17c>)
 800ab6e:	f7ff fcf1 	bl	800a554 <TFT9341_printText>
	TFTstav=0;
 800ab72:	4b0e      	ldr	r3, [pc, #56]	; (800abac <GUI_page_main+0x180>)
 800ab74:	2200      	movs	r2, #0
 800ab76:	701a      	strb	r2, [r3, #0]
}
 800ab78:	bf00      	nop
 800ab7a:	46bd      	mov	sp, r7
 800ab7c:	bd80      	pop	{r7, pc}
 800ab7e:	bf00      	nop
 800ab80:	080135a0 	.word	0x080135a0
 800ab84:	080135ac 	.word	0x080135ac
 800ab88:	080135b4 	.word	0x080135b4
 800ab8c:	080135bc 	.word	0x080135bc
 800ab90:	080135c0 	.word	0x080135c0
 800ab94:	080135c8 	.word	0x080135c8
 800ab98:	080135d4 	.word	0x080135d4
 800ab9c:	080135dc 	.word	0x080135dc
 800aba0:	080135ec 	.word	0x080135ec
 800aba4:	080135f8 	.word	0x080135f8
 800aba8:	08013604 	.word	0x08013604
 800abac:	200102ca 	.word	0x200102ca

0800abb0 <GUI_touch_main>:
//vyber polozky pri dotyku obrazovky
void GUI_touch_main(uint16_t x, uint16_t y)
{
 800abb0:	b580      	push	{r7, lr}
 800abb2:	b084      	sub	sp, #16
 800abb4:	af02      	add	r7, sp, #8
 800abb6:	4603      	mov	r3, r0
 800abb8:	460a      	mov	r2, r1
 800abba:	80fb      	strh	r3, [r7, #6]
 800abbc:	4613      	mov	r3, r2
 800abbe:	80bb      	strh	r3, [r7, #4]
	   if(x>=0 && x<=160 && y>=0 && y<=60) //malovani
 800abc0:	88fb      	ldrh	r3, [r7, #6]
 800abc2:	2ba0      	cmp	r3, #160	; 0xa0
 800abc4:	d807      	bhi.n	800abd6 <GUI_touch_main+0x26>
 800abc6:	88bb      	ldrh	r3, [r7, #4]
 800abc8:	2b3c      	cmp	r3, #60	; 0x3c
 800abca:	d804      	bhi.n	800abd6 <GUI_touch_main+0x26>
	   {
		   GUI_page_malovani();
 800abcc:	f000 f98c 	bl	800aee8 <GUI_page_malovani>
		   TFTstav=1;
 800abd0:	4bc4      	ldr	r3, [pc, #784]	; (800aee4 <GUI_touch_main+0x334>)
 800abd2:	2201      	movs	r2, #1
 800abd4:	701a      	strb	r2, [r3, #0]
	   }
	   if(x>=161 && x<=320 && y>=0 && y<=60) //encoder/potenciometr
 800abd6:	88fb      	ldrh	r3, [r7, #6]
 800abd8:	2ba0      	cmp	r3, #160	; 0xa0
 800abda:	d934      	bls.n	800ac46 <GUI_touch_main+0x96>
 800abdc:	88fb      	ldrh	r3, [r7, #6]
 800abde:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800abe2:	d830      	bhi.n	800ac46 <GUI_touch_main+0x96>
 800abe4:	88bb      	ldrh	r3, [r7, #4]
 800abe6:	2b3c      	cmp	r3, #60	; 0x3c
 800abe8:	d82d      	bhi.n	800ac46 <GUI_touch_main+0x96>
	   {
		   GUI_zmena(2);
 800abea:	2002      	movs	r0, #2
 800abec:	f000 fa74 	bl	800b0d8 <GUI_zmena>
		   TFT9341_FillRect(162, 0, 319, 5, COLOR_BLUE2);//horni
 800abf0:	f240 531d 	movw	r3, #1309	; 0x51d
 800abf4:	9300      	str	r3, [sp, #0]
 800abf6:	2305      	movs	r3, #5
 800abf8:	f240 123f 	movw	r2, #319	; 0x13f
 800abfc:	2100      	movs	r1, #0
 800abfe:	20a2      	movs	r0, #162	; 0xa2
 800ac00:	f7ff f948 	bl	8009e94 <TFT9341_FillRect>
		   TFT9341_FillRect(162, 0, 167, 59, COLOR_BLUE2);//levy
 800ac04:	f240 531d 	movw	r3, #1309	; 0x51d
 800ac08:	9300      	str	r3, [sp, #0]
 800ac0a:	233b      	movs	r3, #59	; 0x3b
 800ac0c:	22a7      	movs	r2, #167	; 0xa7
 800ac0e:	2100      	movs	r1, #0
 800ac10:	20a2      	movs	r0, #162	; 0xa2
 800ac12:	f7ff f93f 	bl	8009e94 <TFT9341_FillRect>
		   TFT9341_FillRect(314, 0, 319, 59, COLOR_BLUE2);//pravy
 800ac16:	f240 531d 	movw	r3, #1309	; 0x51d
 800ac1a:	9300      	str	r3, [sp, #0]
 800ac1c:	233b      	movs	r3, #59	; 0x3b
 800ac1e:	f240 123f 	movw	r2, #319	; 0x13f
 800ac22:	2100      	movs	r1, #0
 800ac24:	f44f 709d 	mov.w	r0, #314	; 0x13a
 800ac28:	f7ff f934 	bl	8009e94 <TFT9341_FillRect>
		   TFT9341_FillRect(162, 54, 319, 59, COLOR_BLUE2);//spodni
 800ac2c:	f240 531d 	movw	r3, #1309	; 0x51d
 800ac30:	9300      	str	r3, [sp, #0]
 800ac32:	233b      	movs	r3, #59	; 0x3b
 800ac34:	f240 123f 	movw	r2, #319	; 0x13f
 800ac38:	2136      	movs	r1, #54	; 0x36
 800ac3a:	20a2      	movs	r0, #162	; 0xa2
 800ac3c:	f7ff f92a 	bl	8009e94 <TFT9341_FillRect>
		   TFTstav=2;
 800ac40:	4ba8      	ldr	r3, [pc, #672]	; (800aee4 <GUI_touch_main+0x334>)
 800ac42:	2202      	movs	r2, #2
 800ac44:	701a      	strb	r2, [r3, #0]
	   }
	   if(x>=0 && x<=160 && y>=61 && y<=120) //teplota/vlhkost
 800ac46:	88fb      	ldrh	r3, [r7, #6]
 800ac48:	2ba0      	cmp	r3, #160	; 0xa0
 800ac4a:	d82f      	bhi.n	800acac <GUI_touch_main+0xfc>
 800ac4c:	88bb      	ldrh	r3, [r7, #4]
 800ac4e:	2b3c      	cmp	r3, #60	; 0x3c
 800ac50:	d92c      	bls.n	800acac <GUI_touch_main+0xfc>
 800ac52:	88bb      	ldrh	r3, [r7, #4]
 800ac54:	2b78      	cmp	r3, #120	; 0x78
 800ac56:	d829      	bhi.n	800acac <GUI_touch_main+0xfc>
	   {
		   GUI_zmena(3);
 800ac58:	2003      	movs	r0, #3
 800ac5a:	f000 fa3d 	bl	800b0d8 <GUI_zmena>
		   TFT9341_FillRect(0, 62, 159, 67, COLOR_BLUE2);//horni
 800ac5e:	f240 531d 	movw	r3, #1309	; 0x51d
 800ac62:	9300      	str	r3, [sp, #0]
 800ac64:	2343      	movs	r3, #67	; 0x43
 800ac66:	229f      	movs	r2, #159	; 0x9f
 800ac68:	213e      	movs	r1, #62	; 0x3e
 800ac6a:	2000      	movs	r0, #0
 800ac6c:	f7ff f912 	bl	8009e94 <TFT9341_FillRect>
		   TFT9341_FillRect(0, 62, 5, 119, COLOR_BLUE2);//levy
 800ac70:	f240 531d 	movw	r3, #1309	; 0x51d
 800ac74:	9300      	str	r3, [sp, #0]
 800ac76:	2377      	movs	r3, #119	; 0x77
 800ac78:	2205      	movs	r2, #5
 800ac7a:	213e      	movs	r1, #62	; 0x3e
 800ac7c:	2000      	movs	r0, #0
 800ac7e:	f7ff f909 	bl	8009e94 <TFT9341_FillRect>
		   TFT9341_FillRect(154, 62, 159, 119, COLOR_BLUE2);//pravy
 800ac82:	f240 531d 	movw	r3, #1309	; 0x51d
 800ac86:	9300      	str	r3, [sp, #0]
 800ac88:	2377      	movs	r3, #119	; 0x77
 800ac8a:	229f      	movs	r2, #159	; 0x9f
 800ac8c:	213e      	movs	r1, #62	; 0x3e
 800ac8e:	209a      	movs	r0, #154	; 0x9a
 800ac90:	f7ff f900 	bl	8009e94 <TFT9341_FillRect>
		   TFT9341_FillRect(0, 114, 159, 119, COLOR_BLUE2);//spodni
 800ac94:	f240 531d 	movw	r3, #1309	; 0x51d
 800ac98:	9300      	str	r3, [sp, #0]
 800ac9a:	2377      	movs	r3, #119	; 0x77
 800ac9c:	229f      	movs	r2, #159	; 0x9f
 800ac9e:	2172      	movs	r1, #114	; 0x72
 800aca0:	2000      	movs	r0, #0
 800aca2:	f7ff f8f7 	bl	8009e94 <TFT9341_FillRect>
		   TFTstav=3;
 800aca6:	4b8f      	ldr	r3, [pc, #572]	; (800aee4 <GUI_touch_main+0x334>)
 800aca8:	2203      	movs	r2, #3
 800acaa:	701a      	strb	r2, [r3, #0]
	   }
	   if(x>=161 && x<=320 && y>=61 && y<=120) //klavesnice
 800acac:	88fb      	ldrh	r3, [r7, #6]
 800acae:	2ba0      	cmp	r3, #160	; 0xa0
 800acb0:	d937      	bls.n	800ad22 <GUI_touch_main+0x172>
 800acb2:	88fb      	ldrh	r3, [r7, #6]
 800acb4:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800acb8:	d833      	bhi.n	800ad22 <GUI_touch_main+0x172>
 800acba:	88bb      	ldrh	r3, [r7, #4]
 800acbc:	2b3c      	cmp	r3, #60	; 0x3c
 800acbe:	d930      	bls.n	800ad22 <GUI_touch_main+0x172>
 800acc0:	88bb      	ldrh	r3, [r7, #4]
 800acc2:	2b78      	cmp	r3, #120	; 0x78
 800acc4:	d82d      	bhi.n	800ad22 <GUI_touch_main+0x172>
	   {
		   GUI_zmena(4);
 800acc6:	2004      	movs	r0, #4
 800acc8:	f000 fa06 	bl	800b0d8 <GUI_zmena>
		   TFT9341_FillRect(162, 62, 319, 67, COLOR_BLUE2);//horni
 800accc:	f240 531d 	movw	r3, #1309	; 0x51d
 800acd0:	9300      	str	r3, [sp, #0]
 800acd2:	2343      	movs	r3, #67	; 0x43
 800acd4:	f240 123f 	movw	r2, #319	; 0x13f
 800acd8:	213e      	movs	r1, #62	; 0x3e
 800acda:	20a2      	movs	r0, #162	; 0xa2
 800acdc:	f7ff f8da 	bl	8009e94 <TFT9341_FillRect>
		   TFT9341_FillRect(162, 62, 167, 119, COLOR_BLUE2);//levy
 800ace0:	f240 531d 	movw	r3, #1309	; 0x51d
 800ace4:	9300      	str	r3, [sp, #0]
 800ace6:	2377      	movs	r3, #119	; 0x77
 800ace8:	22a7      	movs	r2, #167	; 0xa7
 800acea:	213e      	movs	r1, #62	; 0x3e
 800acec:	20a2      	movs	r0, #162	; 0xa2
 800acee:	f7ff f8d1 	bl	8009e94 <TFT9341_FillRect>
		   TFT9341_FillRect(314, 62, 319, 119, COLOR_BLUE2);//pravy
 800acf2:	f240 531d 	movw	r3, #1309	; 0x51d
 800acf6:	9300      	str	r3, [sp, #0]
 800acf8:	2377      	movs	r3, #119	; 0x77
 800acfa:	f240 123f 	movw	r2, #319	; 0x13f
 800acfe:	213e      	movs	r1, #62	; 0x3e
 800ad00:	f44f 709d 	mov.w	r0, #314	; 0x13a
 800ad04:	f7ff f8c6 	bl	8009e94 <TFT9341_FillRect>
		   TFT9341_FillRect(162, 114, 319, 119, COLOR_BLUE2);//spodni
 800ad08:	f240 531d 	movw	r3, #1309	; 0x51d
 800ad0c:	9300      	str	r3, [sp, #0]
 800ad0e:	2377      	movs	r3, #119	; 0x77
 800ad10:	f240 123f 	movw	r2, #319	; 0x13f
 800ad14:	2172      	movs	r1, #114	; 0x72
 800ad16:	20a2      	movs	r0, #162	; 0xa2
 800ad18:	f7ff f8bc 	bl	8009e94 <TFT9341_FillRect>
		   TFTstav=4;
 800ad1c:	4b71      	ldr	r3, [pc, #452]	; (800aee4 <GUI_touch_main+0x334>)
 800ad1e:	2204      	movs	r2, #4
 800ad20:	701a      	strb	r2, [r3, #0]
	   }
	   if(x>=0 && x<=160 && y>=121 && y<=180) //NTC/heater
 800ad22:	88fb      	ldrh	r3, [r7, #6]
 800ad24:	2ba0      	cmp	r3, #160	; 0xa0
 800ad26:	d82f      	bhi.n	800ad88 <GUI_touch_main+0x1d8>
 800ad28:	88bb      	ldrh	r3, [r7, #4]
 800ad2a:	2b78      	cmp	r3, #120	; 0x78
 800ad2c:	d92c      	bls.n	800ad88 <GUI_touch_main+0x1d8>
 800ad2e:	88bb      	ldrh	r3, [r7, #4]
 800ad30:	2bb4      	cmp	r3, #180	; 0xb4
 800ad32:	d829      	bhi.n	800ad88 <GUI_touch_main+0x1d8>
	   {
		   GUI_zmena(5);
 800ad34:	2005      	movs	r0, #5
 800ad36:	f000 f9cf 	bl	800b0d8 <GUI_zmena>
		   TFT9341_FillRect(0, 122, 159, 127, COLOR_BLUE2);//horni
 800ad3a:	f240 531d 	movw	r3, #1309	; 0x51d
 800ad3e:	9300      	str	r3, [sp, #0]
 800ad40:	237f      	movs	r3, #127	; 0x7f
 800ad42:	229f      	movs	r2, #159	; 0x9f
 800ad44:	217a      	movs	r1, #122	; 0x7a
 800ad46:	2000      	movs	r0, #0
 800ad48:	f7ff f8a4 	bl	8009e94 <TFT9341_FillRect>
		   TFT9341_FillRect(0, 122, 5, 179, COLOR_BLUE2);//levy
 800ad4c:	f240 531d 	movw	r3, #1309	; 0x51d
 800ad50:	9300      	str	r3, [sp, #0]
 800ad52:	23b3      	movs	r3, #179	; 0xb3
 800ad54:	2205      	movs	r2, #5
 800ad56:	217a      	movs	r1, #122	; 0x7a
 800ad58:	2000      	movs	r0, #0
 800ad5a:	f7ff f89b 	bl	8009e94 <TFT9341_FillRect>
		   TFT9341_FillRect(154, 122, 159, 179, COLOR_BLUE2);//pravy
 800ad5e:	f240 531d 	movw	r3, #1309	; 0x51d
 800ad62:	9300      	str	r3, [sp, #0]
 800ad64:	23b3      	movs	r3, #179	; 0xb3
 800ad66:	229f      	movs	r2, #159	; 0x9f
 800ad68:	217a      	movs	r1, #122	; 0x7a
 800ad6a:	209a      	movs	r0, #154	; 0x9a
 800ad6c:	f7ff f892 	bl	8009e94 <TFT9341_FillRect>
		   TFT9341_FillRect(0, 174, 159, 179, COLOR_BLUE2);//spodni
 800ad70:	f240 531d 	movw	r3, #1309	; 0x51d
 800ad74:	9300      	str	r3, [sp, #0]
 800ad76:	23b3      	movs	r3, #179	; 0xb3
 800ad78:	229f      	movs	r2, #159	; 0x9f
 800ad7a:	21ae      	movs	r1, #174	; 0xae
 800ad7c:	2000      	movs	r0, #0
 800ad7e:	f7ff f889 	bl	8009e94 <TFT9341_FillRect>
		   TFTstav=5;
 800ad82:	4b58      	ldr	r3, [pc, #352]	; (800aee4 <GUI_touch_main+0x334>)
 800ad84:	2205      	movs	r2, #5
 800ad86:	701a      	strb	r2, [r3, #0]
	   }
	   if(x>=161 && x<=320 && y>=121 && y<=180) //reproduktor
 800ad88:	88fb      	ldrh	r3, [r7, #6]
 800ad8a:	2ba0      	cmp	r3, #160	; 0xa0
 800ad8c:	d937      	bls.n	800adfe <GUI_touch_main+0x24e>
 800ad8e:	88fb      	ldrh	r3, [r7, #6]
 800ad90:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800ad94:	d833      	bhi.n	800adfe <GUI_touch_main+0x24e>
 800ad96:	88bb      	ldrh	r3, [r7, #4]
 800ad98:	2b78      	cmp	r3, #120	; 0x78
 800ad9a:	d930      	bls.n	800adfe <GUI_touch_main+0x24e>
 800ad9c:	88bb      	ldrh	r3, [r7, #4]
 800ad9e:	2bb4      	cmp	r3, #180	; 0xb4
 800ada0:	d82d      	bhi.n	800adfe <GUI_touch_main+0x24e>
	   {
		   GUI_zmena(6);
 800ada2:	2006      	movs	r0, #6
 800ada4:	f000 f998 	bl	800b0d8 <GUI_zmena>
		   TFT9341_FillRect(162, 122, 319, 127, COLOR_BLUE2);//horni
 800ada8:	f240 531d 	movw	r3, #1309	; 0x51d
 800adac:	9300      	str	r3, [sp, #0]
 800adae:	237f      	movs	r3, #127	; 0x7f
 800adb0:	f240 123f 	movw	r2, #319	; 0x13f
 800adb4:	217a      	movs	r1, #122	; 0x7a
 800adb6:	20a2      	movs	r0, #162	; 0xa2
 800adb8:	f7ff f86c 	bl	8009e94 <TFT9341_FillRect>
		   TFT9341_FillRect(162, 122, 167, 179, COLOR_BLUE2);//levy
 800adbc:	f240 531d 	movw	r3, #1309	; 0x51d
 800adc0:	9300      	str	r3, [sp, #0]
 800adc2:	23b3      	movs	r3, #179	; 0xb3
 800adc4:	22a7      	movs	r2, #167	; 0xa7
 800adc6:	217a      	movs	r1, #122	; 0x7a
 800adc8:	20a2      	movs	r0, #162	; 0xa2
 800adca:	f7ff f863 	bl	8009e94 <TFT9341_FillRect>
		   TFT9341_FillRect(314, 122, 319, 179, COLOR_BLUE2);//pravy
 800adce:	f240 531d 	movw	r3, #1309	; 0x51d
 800add2:	9300      	str	r3, [sp, #0]
 800add4:	23b3      	movs	r3, #179	; 0xb3
 800add6:	f240 123f 	movw	r2, #319	; 0x13f
 800adda:	217a      	movs	r1, #122	; 0x7a
 800addc:	f44f 709d 	mov.w	r0, #314	; 0x13a
 800ade0:	f7ff f858 	bl	8009e94 <TFT9341_FillRect>
		   TFT9341_FillRect(162, 174, 319, 179, COLOR_BLUE2);//spodni
 800ade4:	f240 531d 	movw	r3, #1309	; 0x51d
 800ade8:	9300      	str	r3, [sp, #0]
 800adea:	23b3      	movs	r3, #179	; 0xb3
 800adec:	f240 123f 	movw	r2, #319	; 0x13f
 800adf0:	21ae      	movs	r1, #174	; 0xae
 800adf2:	20a2      	movs	r0, #162	; 0xa2
 800adf4:	f7ff f84e 	bl	8009e94 <TFT9341_FillRect>
		   TFTstav=6;
 800adf8:	4b3a      	ldr	r3, [pc, #232]	; (800aee4 <GUI_touch_main+0x334>)
 800adfa:	2206      	movs	r2, #6
 800adfc:	701a      	strb	r2, [r3, #0]
	   }
	   if(x>=0 && x<=160 && y>=181 && y<=240) //led diody
 800adfe:	88fb      	ldrh	r3, [r7, #6]
 800ae00:	2ba0      	cmp	r3, #160	; 0xa0
 800ae02:	d82f      	bhi.n	800ae64 <GUI_touch_main+0x2b4>
 800ae04:	88bb      	ldrh	r3, [r7, #4]
 800ae06:	2bb4      	cmp	r3, #180	; 0xb4
 800ae08:	d92c      	bls.n	800ae64 <GUI_touch_main+0x2b4>
 800ae0a:	88bb      	ldrh	r3, [r7, #4]
 800ae0c:	2bf0      	cmp	r3, #240	; 0xf0
 800ae0e:	d829      	bhi.n	800ae64 <GUI_touch_main+0x2b4>
	   {
		   GUI_zmena(7);
 800ae10:	2007      	movs	r0, #7
 800ae12:	f000 f961 	bl	800b0d8 <GUI_zmena>
		   TFT9341_FillRect(0, 182, 159, 187, COLOR_BLUE2);//horni
 800ae16:	f240 531d 	movw	r3, #1309	; 0x51d
 800ae1a:	9300      	str	r3, [sp, #0]
 800ae1c:	23bb      	movs	r3, #187	; 0xbb
 800ae1e:	229f      	movs	r2, #159	; 0x9f
 800ae20:	21b6      	movs	r1, #182	; 0xb6
 800ae22:	2000      	movs	r0, #0
 800ae24:	f7ff f836 	bl	8009e94 <TFT9341_FillRect>
		   TFT9341_FillRect(0, 182, 5, 239, COLOR_BLUE2);//levy
 800ae28:	f240 531d 	movw	r3, #1309	; 0x51d
 800ae2c:	9300      	str	r3, [sp, #0]
 800ae2e:	23ef      	movs	r3, #239	; 0xef
 800ae30:	2205      	movs	r2, #5
 800ae32:	21b6      	movs	r1, #182	; 0xb6
 800ae34:	2000      	movs	r0, #0
 800ae36:	f7ff f82d 	bl	8009e94 <TFT9341_FillRect>
		   TFT9341_FillRect(154, 182, 159, 239, COLOR_BLUE2);//pravy
 800ae3a:	f240 531d 	movw	r3, #1309	; 0x51d
 800ae3e:	9300      	str	r3, [sp, #0]
 800ae40:	23ef      	movs	r3, #239	; 0xef
 800ae42:	229f      	movs	r2, #159	; 0x9f
 800ae44:	21b6      	movs	r1, #182	; 0xb6
 800ae46:	209a      	movs	r0, #154	; 0x9a
 800ae48:	f7ff f824 	bl	8009e94 <TFT9341_FillRect>
		   TFT9341_FillRect(0, 234, 159, 239, COLOR_BLUE2);//spodni
 800ae4c:	f240 531d 	movw	r3, #1309	; 0x51d
 800ae50:	9300      	str	r3, [sp, #0]
 800ae52:	23ef      	movs	r3, #239	; 0xef
 800ae54:	229f      	movs	r2, #159	; 0x9f
 800ae56:	21ea      	movs	r1, #234	; 0xea
 800ae58:	2000      	movs	r0, #0
 800ae5a:	f7ff f81b 	bl	8009e94 <TFT9341_FillRect>
		   TFTstav=7;
 800ae5e:	4b21      	ldr	r3, [pc, #132]	; (800aee4 <GUI_touch_main+0x334>)
 800ae60:	2207      	movs	r2, #7
 800ae62:	701a      	strb	r2, [r3, #0]
	   }
	   if(x>=161 && x<=320 && y>=181 && y<=240) //tlacitka
 800ae64:	88fb      	ldrh	r3, [r7, #6]
 800ae66:	2ba0      	cmp	r3, #160	; 0xa0
 800ae68:	d937      	bls.n	800aeda <GUI_touch_main+0x32a>
 800ae6a:	88fb      	ldrh	r3, [r7, #6]
 800ae6c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800ae70:	d833      	bhi.n	800aeda <GUI_touch_main+0x32a>
 800ae72:	88bb      	ldrh	r3, [r7, #4]
 800ae74:	2bb4      	cmp	r3, #180	; 0xb4
 800ae76:	d930      	bls.n	800aeda <GUI_touch_main+0x32a>
 800ae78:	88bb      	ldrh	r3, [r7, #4]
 800ae7a:	2bf0      	cmp	r3, #240	; 0xf0
 800ae7c:	d82d      	bhi.n	800aeda <GUI_touch_main+0x32a>
	   {
		   GUI_zmena(8);
 800ae7e:	2008      	movs	r0, #8
 800ae80:	f000 f92a 	bl	800b0d8 <GUI_zmena>
		   TFT9341_FillRect(162, 182, 319, 187, COLOR_BLUE2);//horni
 800ae84:	f240 531d 	movw	r3, #1309	; 0x51d
 800ae88:	9300      	str	r3, [sp, #0]
 800ae8a:	23bb      	movs	r3, #187	; 0xbb
 800ae8c:	f240 123f 	movw	r2, #319	; 0x13f
 800ae90:	21b6      	movs	r1, #182	; 0xb6
 800ae92:	20a2      	movs	r0, #162	; 0xa2
 800ae94:	f7fe fffe 	bl	8009e94 <TFT9341_FillRect>
		   TFT9341_FillRect(162, 182, 167, 239, COLOR_BLUE2);//levy
 800ae98:	f240 531d 	movw	r3, #1309	; 0x51d
 800ae9c:	9300      	str	r3, [sp, #0]
 800ae9e:	23ef      	movs	r3, #239	; 0xef
 800aea0:	22a7      	movs	r2, #167	; 0xa7
 800aea2:	21b6      	movs	r1, #182	; 0xb6
 800aea4:	20a2      	movs	r0, #162	; 0xa2
 800aea6:	f7fe fff5 	bl	8009e94 <TFT9341_FillRect>
		   TFT9341_FillRect(314, 182, 319, 239, COLOR_BLUE2);//pravy
 800aeaa:	f240 531d 	movw	r3, #1309	; 0x51d
 800aeae:	9300      	str	r3, [sp, #0]
 800aeb0:	23ef      	movs	r3, #239	; 0xef
 800aeb2:	f240 123f 	movw	r2, #319	; 0x13f
 800aeb6:	21b6      	movs	r1, #182	; 0xb6
 800aeb8:	f44f 709d 	mov.w	r0, #314	; 0x13a
 800aebc:	f7fe ffea 	bl	8009e94 <TFT9341_FillRect>
		   TFT9341_FillRect(162, 234, 319, 239, COLOR_BLUE2);//spodni
 800aec0:	f240 531d 	movw	r3, #1309	; 0x51d
 800aec4:	9300      	str	r3, [sp, #0]
 800aec6:	23ef      	movs	r3, #239	; 0xef
 800aec8:	f240 123f 	movw	r2, #319	; 0x13f
 800aecc:	21ea      	movs	r1, #234	; 0xea
 800aece:	20a2      	movs	r0, #162	; 0xa2
 800aed0:	f7fe ffe0 	bl	8009e94 <TFT9341_FillRect>
		   TFTstav=8;
 800aed4:	4b03      	ldr	r3, [pc, #12]	; (800aee4 <GUI_touch_main+0x334>)
 800aed6:	2208      	movs	r2, #8
 800aed8:	701a      	strb	r2, [r3, #0]
	   }
}
 800aeda:	bf00      	nop
 800aedc:	3708      	adds	r7, #8
 800aede:	46bd      	mov	sp, r7
 800aee0:	bd80      	pop	{r7, pc}
 800aee2:	bf00      	nop
 800aee4:	200102ca 	.word	0x200102ca

0800aee8 <GUI_page_malovani>:
//vykresleni polozky MALOVANI
void GUI_page_malovani(void)
{
 800aee8:	b580      	push	{r7, lr}
 800aeea:	b082      	sub	sp, #8
 800aeec:	af02      	add	r7, sp, #8
	TFT9341_FillScreen(COLOR_WHITE);
 800aeee:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800aef2:	f7fe ff73 	bl	8009ddc <TFT9341_FillScreen>
    TFT9341_FillRect(0, 0, 40 ,39, COLOR_RED);
 800aef6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800aefa:	9300      	str	r3, [sp, #0]
 800aefc:	2327      	movs	r3, #39	; 0x27
 800aefe:	2228      	movs	r2, #40	; 0x28
 800af00:	2100      	movs	r1, #0
 800af02:	2000      	movs	r0, #0
 800af04:	f7fe ffc6 	bl	8009e94 <TFT9341_FillRect>
	TFT9341_FillRect(0, 40, 40, 79, COLOR_GREEN);
 800af08:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800af0c:	9300      	str	r3, [sp, #0]
 800af0e:	234f      	movs	r3, #79	; 0x4f
 800af10:	2228      	movs	r2, #40	; 0x28
 800af12:	2128      	movs	r1, #40	; 0x28
 800af14:	2000      	movs	r0, #0
 800af16:	f7fe ffbd 	bl	8009e94 <TFT9341_FillRect>
	TFT9341_FillRect(0, 80, 40, 119, COLOR_BLUE);
 800af1a:	231f      	movs	r3, #31
 800af1c:	9300      	str	r3, [sp, #0]
 800af1e:	2377      	movs	r3, #119	; 0x77
 800af20:	2228      	movs	r2, #40	; 0x28
 800af22:	2150      	movs	r1, #80	; 0x50
 800af24:	2000      	movs	r0, #0
 800af26:	f7fe ffb5 	bl	8009e94 <TFT9341_FillRect>
	TFT9341_FillRect(0, 120, 40, 159, COLOR_YELLOW);
 800af2a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800af2e:	9300      	str	r3, [sp, #0]
 800af30:	239f      	movs	r3, #159	; 0x9f
 800af32:	2228      	movs	r2, #40	; 0x28
 800af34:	2178      	movs	r1, #120	; 0x78
 800af36:	2000      	movs	r0, #0
 800af38:	f7fe ffac 	bl	8009e94 <TFT9341_FillRect>
	TFT9341_FillRect(0, 160, 40, 199, COLOR_BLACK);
 800af3c:	2300      	movs	r3, #0
 800af3e:	9300      	str	r3, [sp, #0]
 800af40:	23c7      	movs	r3, #199	; 0xc7
 800af42:	2228      	movs	r2, #40	; 0x28
 800af44:	21a0      	movs	r1, #160	; 0xa0
 800af46:	2000      	movs	r0, #0
 800af48:	f7fe ffa4 	bl	8009e94 <TFT9341_FillRect>
	TFT9341_FillRect(260, 0, 320, 20, COLOR_LGRAY);
 800af4c:	f24c 6318 	movw	r3, #50712	; 0xc618
 800af50:	9300      	str	r3, [sp, #0]
 800af52:	2314      	movs	r3, #20
 800af54:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800af58:	2100      	movs	r1, #0
 800af5a:	f44f 7082 	mov.w	r0, #260	; 0x104
 800af5e:	f7fe ff99 	bl	8009e94 <TFT9341_FillRect>
	TFT9341_printText("Zpet", 265, 3, COLOR_BLACK, COLOR_LGRAY, 2);
 800af62:	2302      	movs	r3, #2
 800af64:	9301      	str	r3, [sp, #4]
 800af66:	f24c 6318 	movw	r3, #50712	; 0xc618
 800af6a:	9300      	str	r3, [sp, #0]
 800af6c:	2300      	movs	r3, #0
 800af6e:	2203      	movs	r2, #3
 800af70:	f240 1109 	movw	r1, #265	; 0x109
 800af74:	4804      	ldr	r0, [pc, #16]	; (800af88 <GUI_page_malovani+0xa0>)
 800af76:	f7ff faed 	bl	800a554 <TFT9341_printText>
	TFTstav=1;
 800af7a:	4b04      	ldr	r3, [pc, #16]	; (800af8c <GUI_page_malovani+0xa4>)
 800af7c:	2201      	movs	r2, #1
 800af7e:	701a      	strb	r2, [r3, #0]
}
 800af80:	bf00      	nop
 800af82:	46bd      	mov	sp, r7
 800af84:	bd80      	pop	{r7, pc}
 800af86:	bf00      	nop
 800af88:	08013610 	.word	0x08013610
 800af8c:	200102ca 	.word	0x200102ca

0800af90 <GUI_touch_malovani>:
//vykreslovani malych kruznic v MALOVANI a zmena barvy
void GUI_touch_malovani(uint16_t x, uint16_t y)
{
 800af90:	b580      	push	{r7, lr}
 800af92:	b082      	sub	sp, #8
 800af94:	af00      	add	r7, sp, #0
 800af96:	4603      	mov	r3, r0
 800af98:	460a      	mov	r2, r1
 800af9a:	80fb      	strh	r3, [r7, #6]
 800af9c:	4613      	mov	r3, r2
 800af9e:	80bb      	strh	r3, [r7, #4]
	   if(x>=0 && x<=40 && y>=0 && y<=39)
 800afa0:	88fb      	ldrh	r3, [r7, #6]
 800afa2:	2b28      	cmp	r3, #40	; 0x28
 800afa4:	d806      	bhi.n	800afb4 <GUI_touch_malovani+0x24>
 800afa6:	88bb      	ldrh	r3, [r7, #4]
 800afa8:	2b27      	cmp	r3, #39	; 0x27
 800afaa:	d803      	bhi.n	800afb4 <GUI_touch_malovani+0x24>
	   {
		   paint_color=COLOR_RED;
 800afac:	4b2e      	ldr	r3, [pc, #184]	; (800b068 <GUI_touch_malovani+0xd8>)
 800afae:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 800afb2:	801a      	strh	r2, [r3, #0]
	   }
	   if(x>=0 && x<=40 && y>=40 && y<=79)
 800afb4:	88fb      	ldrh	r3, [r7, #6]
 800afb6:	2b28      	cmp	r3, #40	; 0x28
 800afb8:	d809      	bhi.n	800afce <GUI_touch_malovani+0x3e>
 800afba:	88bb      	ldrh	r3, [r7, #4]
 800afbc:	2b27      	cmp	r3, #39	; 0x27
 800afbe:	d906      	bls.n	800afce <GUI_touch_malovani+0x3e>
 800afc0:	88bb      	ldrh	r3, [r7, #4]
 800afc2:	2b4f      	cmp	r3, #79	; 0x4f
 800afc4:	d803      	bhi.n	800afce <GUI_touch_malovani+0x3e>
	   {
		   paint_color=COLOR_GREEN;
 800afc6:	4b28      	ldr	r3, [pc, #160]	; (800b068 <GUI_touch_malovani+0xd8>)
 800afc8:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 800afcc:	801a      	strh	r2, [r3, #0]
	   }
	   if(x>=0 && x<=40 && y>=80 && y<=119)
 800afce:	88fb      	ldrh	r3, [r7, #6]
 800afd0:	2b28      	cmp	r3, #40	; 0x28
 800afd2:	d808      	bhi.n	800afe6 <GUI_touch_malovani+0x56>
 800afd4:	88bb      	ldrh	r3, [r7, #4]
 800afd6:	2b4f      	cmp	r3, #79	; 0x4f
 800afd8:	d905      	bls.n	800afe6 <GUI_touch_malovani+0x56>
 800afda:	88bb      	ldrh	r3, [r7, #4]
 800afdc:	2b77      	cmp	r3, #119	; 0x77
 800afde:	d802      	bhi.n	800afe6 <GUI_touch_malovani+0x56>
	   {
		   paint_color=COLOR_BLUE;
 800afe0:	4b21      	ldr	r3, [pc, #132]	; (800b068 <GUI_touch_malovani+0xd8>)
 800afe2:	221f      	movs	r2, #31
 800afe4:	801a      	strh	r2, [r3, #0]
	   }
	   if(x>=0 && x<=40 && y>=120 && y<=159)
 800afe6:	88fb      	ldrh	r3, [r7, #6]
 800afe8:	2b28      	cmp	r3, #40	; 0x28
 800afea:	d809      	bhi.n	800b000 <GUI_touch_malovani+0x70>
 800afec:	88bb      	ldrh	r3, [r7, #4]
 800afee:	2b77      	cmp	r3, #119	; 0x77
 800aff0:	d906      	bls.n	800b000 <GUI_touch_malovani+0x70>
 800aff2:	88bb      	ldrh	r3, [r7, #4]
 800aff4:	2b9f      	cmp	r3, #159	; 0x9f
 800aff6:	d803      	bhi.n	800b000 <GUI_touch_malovani+0x70>
	   {
		   paint_color=COLOR_YELLOW;
 800aff8:	4b1b      	ldr	r3, [pc, #108]	; (800b068 <GUI_touch_malovani+0xd8>)
 800affa:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 800affe:	801a      	strh	r2, [r3, #0]
	   }
	   if(x>=0 && x<=40 && y>=160 && y<=199)
 800b000:	88fb      	ldrh	r3, [r7, #6]
 800b002:	2b28      	cmp	r3, #40	; 0x28
 800b004:	d808      	bhi.n	800b018 <GUI_touch_malovani+0x88>
 800b006:	88bb      	ldrh	r3, [r7, #4]
 800b008:	2b9f      	cmp	r3, #159	; 0x9f
 800b00a:	d905      	bls.n	800b018 <GUI_touch_malovani+0x88>
 800b00c:	88bb      	ldrh	r3, [r7, #4]
 800b00e:	2bc7      	cmp	r3, #199	; 0xc7
 800b010:	d802      	bhi.n	800b018 <GUI_touch_malovani+0x88>
	   {
		   paint_color=COLOR_BLACK;
 800b012:	4b15      	ldr	r3, [pc, #84]	; (800b068 <GUI_touch_malovani+0xd8>)
 800b014:	2200      	movs	r2, #0
 800b016:	801a      	strh	r2, [r3, #0]
	   }
	   if(x>=0 && x<=40 && y>=200 && y<=240)
 800b018:	88fb      	ldrh	r3, [r7, #6]
 800b01a:	2b28      	cmp	r3, #40	; 0x28
 800b01c:	d808      	bhi.n	800b030 <GUI_touch_malovani+0xa0>
 800b01e:	88bb      	ldrh	r3, [r7, #4]
 800b020:	2bc7      	cmp	r3, #199	; 0xc7
 800b022:	d905      	bls.n	800b030 <GUI_touch_malovani+0xa0>
 800b024:	88bb      	ldrh	r3, [r7, #4]
 800b026:	2bf0      	cmp	r3, #240	; 0xf0
 800b028:	d802      	bhi.n	800b030 <GUI_touch_malovani+0xa0>
	   {
		   GUI_page_malovani();
 800b02a:	f7ff ff5d 	bl	800aee8 <GUI_page_malovani>
		   return;
 800b02e:	e017      	b.n	800b060 <GUI_touch_malovani+0xd0>
	   }
	   if(x>=260 && x<=320 && y>=0 && y<=20)
 800b030:	88fb      	ldrh	r3, [r7, #6]
 800b032:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b036:	d309      	bcc.n	800b04c <GUI_touch_malovani+0xbc>
 800b038:	88fb      	ldrh	r3, [r7, #6]
 800b03a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800b03e:	d805      	bhi.n	800b04c <GUI_touch_malovani+0xbc>
 800b040:	88bb      	ldrh	r3, [r7, #4]
 800b042:	2b14      	cmp	r3, #20
 800b044:	d802      	bhi.n	800b04c <GUI_touch_malovani+0xbc>
	   {
		   //zpet
		   GUI_page_main();
 800b046:	f7ff fcf1 	bl	800aa2c <GUI_page_main>
		   return;
 800b04a:	e009      	b.n	800b060 <GUI_touch_malovani+0xd0>
	   }
	   if(x>40)
 800b04c:	88fb      	ldrh	r3, [r7, #6]
 800b04e:	2b28      	cmp	r3, #40	; 0x28
 800b050:	d906      	bls.n	800b060 <GUI_touch_malovani+0xd0>
	   {
		   TFT9341_DrawCircle(x, y,2, paint_color);
 800b052:	4b05      	ldr	r3, [pc, #20]	; (800b068 <GUI_touch_malovani+0xd8>)
 800b054:	881b      	ldrh	r3, [r3, #0]
 800b056:	88b9      	ldrh	r1, [r7, #4]
 800b058:	88f8      	ldrh	r0, [r7, #6]
 800b05a:	2202      	movs	r2, #2
 800b05c:	f7ff f800 	bl	800a060 <TFT9341_DrawCircle>
	   }
}
 800b060:	3708      	adds	r7, #8
 800b062:	46bd      	mov	sp, r7
 800b064:	bd80      	pop	{r7, pc}
 800b066:	bf00      	nop
 800b068:	2000001a 	.word	0x2000001a

0800b06c <GUI_touch>:
//vyber funkce pri dotyku
void GUI_touch(uint8_t stav, uint16_t x, uint16_t y)
{
 800b06c:	b580      	push	{r7, lr}
 800b06e:	b082      	sub	sp, #8
 800b070:	af00      	add	r7, sp, #0
 800b072:	4603      	mov	r3, r0
 800b074:	71fb      	strb	r3, [r7, #7]
 800b076:	460b      	mov	r3, r1
 800b078:	80bb      	strh	r3, [r7, #4]
 800b07a:	4613      	mov	r3, r2
 800b07c:	807b      	strh	r3, [r7, #2]
	if(stav==1)
 800b07e:	79fb      	ldrb	r3, [r7, #7]
 800b080:	2b01      	cmp	r3, #1
 800b082:	d106      	bne.n	800b092 <GUI_touch+0x26>
	{
		GUI_touch_malovani(x,y);
 800b084:	887a      	ldrh	r2, [r7, #2]
 800b086:	88bb      	ldrh	r3, [r7, #4]
 800b088:	4611      	mov	r1, r2
 800b08a:	4618      	mov	r0, r3
 800b08c:	f7ff ff80 	bl	800af90 <GUI_touch_malovani>
	}
	else if(stav==0 || stav==2 || stav==3 || stav==4 || stav==5 || stav==6 || stav==7 || stav==8)
	{
		GUI_touch_main(x,y);
	}
}
 800b090:	e01d      	b.n	800b0ce <GUI_touch+0x62>
	else if(stav==0 || stav==2 || stav==3 || stav==4 || stav==5 || stav==6 || stav==7 || stav==8)
 800b092:	79fb      	ldrb	r3, [r7, #7]
 800b094:	2b00      	cmp	r3, #0
 800b096:	d014      	beq.n	800b0c2 <GUI_touch+0x56>
 800b098:	79fb      	ldrb	r3, [r7, #7]
 800b09a:	2b02      	cmp	r3, #2
 800b09c:	d011      	beq.n	800b0c2 <GUI_touch+0x56>
 800b09e:	79fb      	ldrb	r3, [r7, #7]
 800b0a0:	2b03      	cmp	r3, #3
 800b0a2:	d00e      	beq.n	800b0c2 <GUI_touch+0x56>
 800b0a4:	79fb      	ldrb	r3, [r7, #7]
 800b0a6:	2b04      	cmp	r3, #4
 800b0a8:	d00b      	beq.n	800b0c2 <GUI_touch+0x56>
 800b0aa:	79fb      	ldrb	r3, [r7, #7]
 800b0ac:	2b05      	cmp	r3, #5
 800b0ae:	d008      	beq.n	800b0c2 <GUI_touch+0x56>
 800b0b0:	79fb      	ldrb	r3, [r7, #7]
 800b0b2:	2b06      	cmp	r3, #6
 800b0b4:	d005      	beq.n	800b0c2 <GUI_touch+0x56>
 800b0b6:	79fb      	ldrb	r3, [r7, #7]
 800b0b8:	2b07      	cmp	r3, #7
 800b0ba:	d002      	beq.n	800b0c2 <GUI_touch+0x56>
 800b0bc:	79fb      	ldrb	r3, [r7, #7]
 800b0be:	2b08      	cmp	r3, #8
 800b0c0:	d105      	bne.n	800b0ce <GUI_touch+0x62>
		GUI_touch_main(x,y);
 800b0c2:	887a      	ldrh	r2, [r7, #2]
 800b0c4:	88bb      	ldrh	r3, [r7, #4]
 800b0c6:	4611      	mov	r1, r2
 800b0c8:	4618      	mov	r0, r3
 800b0ca:	f7ff fd71 	bl	800abb0 <GUI_touch_main>
}
 800b0ce:	bf00      	nop
 800b0d0:	3708      	adds	r7, #8
 800b0d2:	46bd      	mov	sp, r7
 800b0d4:	bd80      	pop	{r7, pc}
	...

0800b0d8 <GUI_zmena>:
//prekresleni GUI pri vyberu jine polozky
void GUI_zmena(uint8_t stav)
{
 800b0d8:	b580      	push	{r7, lr}
 800b0da:	b084      	sub	sp, #16
 800b0dc:	af02      	add	r7, sp, #8
 800b0de:	4603      	mov	r3, r0
 800b0e0:	71fb      	strb	r3, [r7, #7]
	switch(stav)
 800b0e2:	79fb      	ldrb	r3, [r7, #7]
 800b0e4:	3b02      	subs	r3, #2
 800b0e6:	2b06      	cmp	r3, #6
 800b0e8:	f200 8663 	bhi.w	800bdb2 <GUI_zmena+0xcda>
 800b0ec:	a201      	add	r2, pc, #4	; (adr r2, 800b0f4 <GUI_zmena+0x1c>)
 800b0ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0f2:	bf00      	nop
 800b0f4:	0800b111 	.word	0x0800b111
 800b0f8:	0800b2dd 	.word	0x0800b2dd
 800b0fc:	0800b4b1 	.word	0x0800b4b1
 800b100:	0800b67b 	.word	0x0800b67b
 800b104:	0800b84d 	.word	0x0800b84d
 800b108:	0800ba17 	.word	0x0800ba17
 800b10c:	0800bbe9 	.word	0x0800bbe9
	{
	case 2:
		//teplota/vlhkost
		TFT9341_FillRect(0, 62, 159, 67, COLOR_WHITE);//horni
 800b110:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b114:	9300      	str	r3, [sp, #0]
 800b116:	2343      	movs	r3, #67	; 0x43
 800b118:	229f      	movs	r2, #159	; 0x9f
 800b11a:	213e      	movs	r1, #62	; 0x3e
 800b11c:	2000      	movs	r0, #0
 800b11e:	f7fe feb9 	bl	8009e94 <TFT9341_FillRect>
		TFT9341_FillRect(0, 62, 5, 119, COLOR_WHITE);//levy
 800b122:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b126:	9300      	str	r3, [sp, #0]
 800b128:	2377      	movs	r3, #119	; 0x77
 800b12a:	2205      	movs	r2, #5
 800b12c:	213e      	movs	r1, #62	; 0x3e
 800b12e:	2000      	movs	r0, #0
 800b130:	f7fe feb0 	bl	8009e94 <TFT9341_FillRect>
		TFT9341_FillRect(154, 62, 159, 119, COLOR_WHITE);//pravy
 800b134:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b138:	9300      	str	r3, [sp, #0]
 800b13a:	2377      	movs	r3, #119	; 0x77
 800b13c:	229f      	movs	r2, #159	; 0x9f
 800b13e:	213e      	movs	r1, #62	; 0x3e
 800b140:	209a      	movs	r0, #154	; 0x9a
 800b142:	f7fe fea7 	bl	8009e94 <TFT9341_FillRect>
		TFT9341_FillRect(0, 114, 159, 119, COLOR_WHITE);//spodni
 800b146:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b14a:	9300      	str	r3, [sp, #0]
 800b14c:	2377      	movs	r3, #119	; 0x77
 800b14e:	229f      	movs	r2, #159	; 0x9f
 800b150:	2172      	movs	r1, #114	; 0x72
 800b152:	2000      	movs	r0, #0
 800b154:	f7fe fe9e 	bl	8009e94 <TFT9341_FillRect>
		//klavesnice
		TFT9341_FillRect(162, 62, 319, 67, COLOR_WHITE);//horni
 800b158:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b15c:	9300      	str	r3, [sp, #0]
 800b15e:	2343      	movs	r3, #67	; 0x43
 800b160:	f240 123f 	movw	r2, #319	; 0x13f
 800b164:	213e      	movs	r1, #62	; 0x3e
 800b166:	20a2      	movs	r0, #162	; 0xa2
 800b168:	f7fe fe94 	bl	8009e94 <TFT9341_FillRect>
		TFT9341_FillRect(162, 62, 167, 119, COLOR_WHITE);//levy
 800b16c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b170:	9300      	str	r3, [sp, #0]
 800b172:	2377      	movs	r3, #119	; 0x77
 800b174:	22a7      	movs	r2, #167	; 0xa7
 800b176:	213e      	movs	r1, #62	; 0x3e
 800b178:	20a2      	movs	r0, #162	; 0xa2
 800b17a:	f7fe fe8b 	bl	8009e94 <TFT9341_FillRect>
		TFT9341_FillRect(314, 62, 319, 119, COLOR_WHITE);//pravy
 800b17e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b182:	9300      	str	r3, [sp, #0]
 800b184:	2377      	movs	r3, #119	; 0x77
 800b186:	f240 123f 	movw	r2, #319	; 0x13f
 800b18a:	213e      	movs	r1, #62	; 0x3e
 800b18c:	f44f 709d 	mov.w	r0, #314	; 0x13a
 800b190:	f7fe fe80 	bl	8009e94 <TFT9341_FillRect>
		TFT9341_FillRect(162, 114, 319, 119, COLOR_WHITE);//spodni
 800b194:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b198:	9300      	str	r3, [sp, #0]
 800b19a:	2377      	movs	r3, #119	; 0x77
 800b19c:	f240 123f 	movw	r2, #319	; 0x13f
 800b1a0:	2172      	movs	r1, #114	; 0x72
 800b1a2:	20a2      	movs	r0, #162	; 0xa2
 800b1a4:	f7fe fe76 	bl	8009e94 <TFT9341_FillRect>
		//NTC/heater
		TFT9341_FillRect(0, 122, 159, 127, COLOR_WHITE);//horni
 800b1a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b1ac:	9300      	str	r3, [sp, #0]
 800b1ae:	237f      	movs	r3, #127	; 0x7f
 800b1b0:	229f      	movs	r2, #159	; 0x9f
 800b1b2:	217a      	movs	r1, #122	; 0x7a
 800b1b4:	2000      	movs	r0, #0
 800b1b6:	f7fe fe6d 	bl	8009e94 <TFT9341_FillRect>
		TFT9341_FillRect(0, 122, 5, 179, COLOR_WHITE);//levy
 800b1ba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b1be:	9300      	str	r3, [sp, #0]
 800b1c0:	23b3      	movs	r3, #179	; 0xb3
 800b1c2:	2205      	movs	r2, #5
 800b1c4:	217a      	movs	r1, #122	; 0x7a
 800b1c6:	2000      	movs	r0, #0
 800b1c8:	f7fe fe64 	bl	8009e94 <TFT9341_FillRect>
		TFT9341_FillRect(154, 122, 159, 179, COLOR_WHITE);//pravy
 800b1cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b1d0:	9300      	str	r3, [sp, #0]
 800b1d2:	23b3      	movs	r3, #179	; 0xb3
 800b1d4:	229f      	movs	r2, #159	; 0x9f
 800b1d6:	217a      	movs	r1, #122	; 0x7a
 800b1d8:	209a      	movs	r0, #154	; 0x9a
 800b1da:	f7fe fe5b 	bl	8009e94 <TFT9341_FillRect>
		TFT9341_FillRect(0, 174, 159, 179, COLOR_WHITE);//spodni
 800b1de:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b1e2:	9300      	str	r3, [sp, #0]
 800b1e4:	23b3      	movs	r3, #179	; 0xb3
 800b1e6:	229f      	movs	r2, #159	; 0x9f
 800b1e8:	21ae      	movs	r1, #174	; 0xae
 800b1ea:	2000      	movs	r0, #0
 800b1ec:	f7fe fe52 	bl	8009e94 <TFT9341_FillRect>
		//reproduktor
		TFT9341_FillRect(162, 122, 319, 127, COLOR_WHITE);//horni
 800b1f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b1f4:	9300      	str	r3, [sp, #0]
 800b1f6:	237f      	movs	r3, #127	; 0x7f
 800b1f8:	f240 123f 	movw	r2, #319	; 0x13f
 800b1fc:	217a      	movs	r1, #122	; 0x7a
 800b1fe:	20a2      	movs	r0, #162	; 0xa2
 800b200:	f7fe fe48 	bl	8009e94 <TFT9341_FillRect>
		TFT9341_FillRect(162, 122, 167, 179, COLOR_WHITE);//levy
 800b204:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b208:	9300      	str	r3, [sp, #0]
 800b20a:	23b3      	movs	r3, #179	; 0xb3
 800b20c:	22a7      	movs	r2, #167	; 0xa7
 800b20e:	217a      	movs	r1, #122	; 0x7a
 800b210:	20a2      	movs	r0, #162	; 0xa2
 800b212:	f7fe fe3f 	bl	8009e94 <TFT9341_FillRect>
		TFT9341_FillRect(314, 122, 319, 179, COLOR_WHITE);//pravy
 800b216:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b21a:	9300      	str	r3, [sp, #0]
 800b21c:	23b3      	movs	r3, #179	; 0xb3
 800b21e:	f240 123f 	movw	r2, #319	; 0x13f
 800b222:	217a      	movs	r1, #122	; 0x7a
 800b224:	f44f 709d 	mov.w	r0, #314	; 0x13a
 800b228:	f7fe fe34 	bl	8009e94 <TFT9341_FillRect>
		TFT9341_FillRect(162, 174, 319, 179, COLOR_WHITE);//spodni
 800b22c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b230:	9300      	str	r3, [sp, #0]
 800b232:	23b3      	movs	r3, #179	; 0xb3
 800b234:	f240 123f 	movw	r2, #319	; 0x13f
 800b238:	21ae      	movs	r1, #174	; 0xae
 800b23a:	20a2      	movs	r0, #162	; 0xa2
 800b23c:	f7fe fe2a 	bl	8009e94 <TFT9341_FillRect>
		//led diody
		TFT9341_FillRect(0, 182, 159, 187, COLOR_WHITE);//horni
 800b240:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b244:	9300      	str	r3, [sp, #0]
 800b246:	23bb      	movs	r3, #187	; 0xbb
 800b248:	229f      	movs	r2, #159	; 0x9f
 800b24a:	21b6      	movs	r1, #182	; 0xb6
 800b24c:	2000      	movs	r0, #0
 800b24e:	f7fe fe21 	bl	8009e94 <TFT9341_FillRect>
		TFT9341_FillRect(0, 182, 5, 239, COLOR_WHITE);//levy
 800b252:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b256:	9300      	str	r3, [sp, #0]
 800b258:	23ef      	movs	r3, #239	; 0xef
 800b25a:	2205      	movs	r2, #5
 800b25c:	21b6      	movs	r1, #182	; 0xb6
 800b25e:	2000      	movs	r0, #0
 800b260:	f7fe fe18 	bl	8009e94 <TFT9341_FillRect>
		TFT9341_FillRect(154, 182, 159, 239, COLOR_WHITE);//pravy
 800b264:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b268:	9300      	str	r3, [sp, #0]
 800b26a:	23ef      	movs	r3, #239	; 0xef
 800b26c:	229f      	movs	r2, #159	; 0x9f
 800b26e:	21b6      	movs	r1, #182	; 0xb6
 800b270:	209a      	movs	r0, #154	; 0x9a
 800b272:	f7fe fe0f 	bl	8009e94 <TFT9341_FillRect>
		TFT9341_FillRect(0, 234, 159, 239, COLOR_WHITE);//spodni
 800b276:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b27a:	9300      	str	r3, [sp, #0]
 800b27c:	23ef      	movs	r3, #239	; 0xef
 800b27e:	229f      	movs	r2, #159	; 0x9f
 800b280:	21ea      	movs	r1, #234	; 0xea
 800b282:	2000      	movs	r0, #0
 800b284:	f7fe fe06 	bl	8009e94 <TFT9341_FillRect>
		//tlacitka
		TFT9341_FillRect(162, 182, 319, 187, COLOR_WHITE);//horni
 800b288:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b28c:	9300      	str	r3, [sp, #0]
 800b28e:	23bb      	movs	r3, #187	; 0xbb
 800b290:	f240 123f 	movw	r2, #319	; 0x13f
 800b294:	21b6      	movs	r1, #182	; 0xb6
 800b296:	20a2      	movs	r0, #162	; 0xa2
 800b298:	f7fe fdfc 	bl	8009e94 <TFT9341_FillRect>
		TFT9341_FillRect(162, 182, 167, 239, COLOR_WHITE);//levy
 800b29c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b2a0:	9300      	str	r3, [sp, #0]
 800b2a2:	23ef      	movs	r3, #239	; 0xef
 800b2a4:	22a7      	movs	r2, #167	; 0xa7
 800b2a6:	21b6      	movs	r1, #182	; 0xb6
 800b2a8:	20a2      	movs	r0, #162	; 0xa2
 800b2aa:	f7fe fdf3 	bl	8009e94 <TFT9341_FillRect>
		TFT9341_FillRect(314, 182, 319, 239, COLOR_WHITE);//pravy
 800b2ae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b2b2:	9300      	str	r3, [sp, #0]
 800b2b4:	23ef      	movs	r3, #239	; 0xef
 800b2b6:	f240 123f 	movw	r2, #319	; 0x13f
 800b2ba:	21b6      	movs	r1, #182	; 0xb6
 800b2bc:	f44f 709d 	mov.w	r0, #314	; 0x13a
 800b2c0:	f7fe fde8 	bl	8009e94 <TFT9341_FillRect>
		TFT9341_FillRect(162, 234, 319, 239, COLOR_WHITE);//spodni
 800b2c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b2c8:	9300      	str	r3, [sp, #0]
 800b2ca:	23ef      	movs	r3, #239	; 0xef
 800b2cc:	f240 123f 	movw	r2, #319	; 0x13f
 800b2d0:	21ea      	movs	r1, #234	; 0xea
 800b2d2:	20a2      	movs	r0, #162	; 0xa2
 800b2d4:	f7fe fdde 	bl	8009e94 <TFT9341_FillRect>
		break;
 800b2d8:	f000 bd6b 	b.w	800bdb2 <GUI_zmena+0xcda>
	case 3:
		//encoder/potenciometr
		TFT9341_FillRect(162, 0, 319, 5, COLOR_WHITE);//horni
 800b2dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b2e0:	9300      	str	r3, [sp, #0]
 800b2e2:	2305      	movs	r3, #5
 800b2e4:	f240 123f 	movw	r2, #319	; 0x13f
 800b2e8:	2100      	movs	r1, #0
 800b2ea:	20a2      	movs	r0, #162	; 0xa2
 800b2ec:	f7fe fdd2 	bl	8009e94 <TFT9341_FillRect>
		TFT9341_FillRect(162, 0, 167, 59, COLOR_WHITE);//levy
 800b2f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b2f4:	9300      	str	r3, [sp, #0]
 800b2f6:	233b      	movs	r3, #59	; 0x3b
 800b2f8:	22a7      	movs	r2, #167	; 0xa7
 800b2fa:	2100      	movs	r1, #0
 800b2fc:	20a2      	movs	r0, #162	; 0xa2
 800b2fe:	f7fe fdc9 	bl	8009e94 <TFT9341_FillRect>
		TFT9341_FillRect(314, 0, 319, 59, COLOR_WHITE);//pravy
 800b302:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b306:	9300      	str	r3, [sp, #0]
 800b308:	233b      	movs	r3, #59	; 0x3b
 800b30a:	f240 123f 	movw	r2, #319	; 0x13f
 800b30e:	2100      	movs	r1, #0
 800b310:	f44f 709d 	mov.w	r0, #314	; 0x13a
 800b314:	f7fe fdbe 	bl	8009e94 <TFT9341_FillRect>
		TFT9341_FillRect(162, 54, 319, 59, COLOR_WHITE);//spodni
 800b318:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b31c:	9300      	str	r3, [sp, #0]
 800b31e:	233b      	movs	r3, #59	; 0x3b
 800b320:	f240 123f 	movw	r2, #319	; 0x13f
 800b324:	2136      	movs	r1, #54	; 0x36
 800b326:	20a2      	movs	r0, #162	; 0xa2
 800b328:	f7fe fdb4 	bl	8009e94 <TFT9341_FillRect>
		//klavesnice
		TFT9341_FillRect(162, 62, 319, 67, COLOR_WHITE);//horni
 800b32c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b330:	9300      	str	r3, [sp, #0]
 800b332:	2343      	movs	r3, #67	; 0x43
 800b334:	f240 123f 	movw	r2, #319	; 0x13f
 800b338:	213e      	movs	r1, #62	; 0x3e
 800b33a:	20a2      	movs	r0, #162	; 0xa2
 800b33c:	f7fe fdaa 	bl	8009e94 <TFT9341_FillRect>
		TFT9341_FillRect(162, 62, 167, 119, COLOR_WHITE);//levy
 800b340:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b344:	9300      	str	r3, [sp, #0]
 800b346:	2377      	movs	r3, #119	; 0x77
 800b348:	22a7      	movs	r2, #167	; 0xa7
 800b34a:	213e      	movs	r1, #62	; 0x3e
 800b34c:	20a2      	movs	r0, #162	; 0xa2
 800b34e:	f7fe fda1 	bl	8009e94 <TFT9341_FillRect>
		TFT9341_FillRect(314, 62, 319, 119, COLOR_WHITE);//pravy
 800b352:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b356:	9300      	str	r3, [sp, #0]
 800b358:	2377      	movs	r3, #119	; 0x77
 800b35a:	f240 123f 	movw	r2, #319	; 0x13f
 800b35e:	213e      	movs	r1, #62	; 0x3e
 800b360:	f44f 709d 	mov.w	r0, #314	; 0x13a
 800b364:	f7fe fd96 	bl	8009e94 <TFT9341_FillRect>
		TFT9341_FillRect(162, 114, 319, 119, COLOR_WHITE);//spodni
 800b368:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b36c:	9300      	str	r3, [sp, #0]
 800b36e:	2377      	movs	r3, #119	; 0x77
 800b370:	f240 123f 	movw	r2, #319	; 0x13f
 800b374:	2172      	movs	r1, #114	; 0x72
 800b376:	20a2      	movs	r0, #162	; 0xa2
 800b378:	f7fe fd8c 	bl	8009e94 <TFT9341_FillRect>
		//NTC/heater
		TFT9341_FillRect(0, 122, 159, 127, COLOR_WHITE);//horni
 800b37c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b380:	9300      	str	r3, [sp, #0]
 800b382:	237f      	movs	r3, #127	; 0x7f
 800b384:	229f      	movs	r2, #159	; 0x9f
 800b386:	217a      	movs	r1, #122	; 0x7a
 800b388:	2000      	movs	r0, #0
 800b38a:	f7fe fd83 	bl	8009e94 <TFT9341_FillRect>
		TFT9341_FillRect(0, 122, 5, 179, COLOR_WHITE);//levy
 800b38e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b392:	9300      	str	r3, [sp, #0]
 800b394:	23b3      	movs	r3, #179	; 0xb3
 800b396:	2205      	movs	r2, #5
 800b398:	217a      	movs	r1, #122	; 0x7a
 800b39a:	2000      	movs	r0, #0
 800b39c:	f7fe fd7a 	bl	8009e94 <TFT9341_FillRect>
		TFT9341_FillRect(154, 122, 159, 179, COLOR_WHITE);//pravy
 800b3a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b3a4:	9300      	str	r3, [sp, #0]
 800b3a6:	23b3      	movs	r3, #179	; 0xb3
 800b3a8:	229f      	movs	r2, #159	; 0x9f
 800b3aa:	217a      	movs	r1, #122	; 0x7a
 800b3ac:	209a      	movs	r0, #154	; 0x9a
 800b3ae:	f7fe fd71 	bl	8009e94 <TFT9341_FillRect>
		TFT9341_FillRect(0, 174, 159, 179, COLOR_WHITE);//spodni
 800b3b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b3b6:	9300      	str	r3, [sp, #0]
 800b3b8:	23b3      	movs	r3, #179	; 0xb3
 800b3ba:	229f      	movs	r2, #159	; 0x9f
 800b3bc:	21ae      	movs	r1, #174	; 0xae
 800b3be:	2000      	movs	r0, #0
 800b3c0:	f7fe fd68 	bl	8009e94 <TFT9341_FillRect>
		//reproduktor
		TFT9341_FillRect(162, 122, 319, 127, COLOR_WHITE);//horni
 800b3c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b3c8:	9300      	str	r3, [sp, #0]
 800b3ca:	237f      	movs	r3, #127	; 0x7f
 800b3cc:	f240 123f 	movw	r2, #319	; 0x13f
 800b3d0:	217a      	movs	r1, #122	; 0x7a
 800b3d2:	20a2      	movs	r0, #162	; 0xa2
 800b3d4:	f7fe fd5e 	bl	8009e94 <TFT9341_FillRect>
		TFT9341_FillRect(162, 122, 167, 179, COLOR_WHITE);//levy
 800b3d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b3dc:	9300      	str	r3, [sp, #0]
 800b3de:	23b3      	movs	r3, #179	; 0xb3
 800b3e0:	22a7      	movs	r2, #167	; 0xa7
 800b3e2:	217a      	movs	r1, #122	; 0x7a
 800b3e4:	20a2      	movs	r0, #162	; 0xa2
 800b3e6:	f7fe fd55 	bl	8009e94 <TFT9341_FillRect>
		TFT9341_FillRect(314, 122, 319, 179, COLOR_WHITE);//pravy
 800b3ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b3ee:	9300      	str	r3, [sp, #0]
 800b3f0:	23b3      	movs	r3, #179	; 0xb3
 800b3f2:	f240 123f 	movw	r2, #319	; 0x13f
 800b3f6:	217a      	movs	r1, #122	; 0x7a
 800b3f8:	f44f 709d 	mov.w	r0, #314	; 0x13a
 800b3fc:	f7fe fd4a 	bl	8009e94 <TFT9341_FillRect>
		TFT9341_FillRect(162, 174, 319, 179, COLOR_WHITE);//spodni
 800b400:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b404:	9300      	str	r3, [sp, #0]
 800b406:	23b3      	movs	r3, #179	; 0xb3
 800b408:	f240 123f 	movw	r2, #319	; 0x13f
 800b40c:	21ae      	movs	r1, #174	; 0xae
 800b40e:	20a2      	movs	r0, #162	; 0xa2
 800b410:	f7fe fd40 	bl	8009e94 <TFT9341_FillRect>
		//led diody
		TFT9341_FillRect(0, 182, 159, 187, COLOR_WHITE);//horni
 800b414:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b418:	9300      	str	r3, [sp, #0]
 800b41a:	23bb      	movs	r3, #187	; 0xbb
 800b41c:	229f      	movs	r2, #159	; 0x9f
 800b41e:	21b6      	movs	r1, #182	; 0xb6
 800b420:	2000      	movs	r0, #0
 800b422:	f7fe fd37 	bl	8009e94 <TFT9341_FillRect>
		TFT9341_FillRect(0, 182, 5, 239, COLOR_WHITE);//levy
 800b426:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b42a:	9300      	str	r3, [sp, #0]
 800b42c:	23ef      	movs	r3, #239	; 0xef
 800b42e:	2205      	movs	r2, #5
 800b430:	21b6      	movs	r1, #182	; 0xb6
 800b432:	2000      	movs	r0, #0
 800b434:	f7fe fd2e 	bl	8009e94 <TFT9341_FillRect>
		TFT9341_FillRect(154, 182, 159, 239, COLOR_WHITE);//pravy
 800b438:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b43c:	9300      	str	r3, [sp, #0]
 800b43e:	23ef      	movs	r3, #239	; 0xef
 800b440:	229f      	movs	r2, #159	; 0x9f
 800b442:	21b6      	movs	r1, #182	; 0xb6
 800b444:	209a      	movs	r0, #154	; 0x9a
 800b446:	f7fe fd25 	bl	8009e94 <TFT9341_FillRect>
		TFT9341_FillRect(0, 234, 159, 239, COLOR_WHITE);//spodni
 800b44a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b44e:	9300      	str	r3, [sp, #0]
 800b450:	23ef      	movs	r3, #239	; 0xef
 800b452:	229f      	movs	r2, #159	; 0x9f
 800b454:	21ea      	movs	r1, #234	; 0xea
 800b456:	2000      	movs	r0, #0
 800b458:	f7fe fd1c 	bl	8009e94 <TFT9341_FillRect>
		//tlacitka
		TFT9341_FillRect(162, 182, 319, 187, COLOR_WHITE);//horni
 800b45c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b460:	9300      	str	r3, [sp, #0]
 800b462:	23bb      	movs	r3, #187	; 0xbb
 800b464:	f240 123f 	movw	r2, #319	; 0x13f
 800b468:	21b6      	movs	r1, #182	; 0xb6
 800b46a:	20a2      	movs	r0, #162	; 0xa2
 800b46c:	f7fe fd12 	bl	8009e94 <TFT9341_FillRect>
		TFT9341_FillRect(162, 182, 167, 239, COLOR_WHITE);//levy
 800b470:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b474:	9300      	str	r3, [sp, #0]
 800b476:	23ef      	movs	r3, #239	; 0xef
 800b478:	22a7      	movs	r2, #167	; 0xa7
 800b47a:	21b6      	movs	r1, #182	; 0xb6
 800b47c:	20a2      	movs	r0, #162	; 0xa2
 800b47e:	f7fe fd09 	bl	8009e94 <TFT9341_FillRect>
		TFT9341_FillRect(314, 182, 319, 239, COLOR_WHITE);//pravy
 800b482:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b486:	9300      	str	r3, [sp, #0]
 800b488:	23ef      	movs	r3, #239	; 0xef
 800b48a:	f240 123f 	movw	r2, #319	; 0x13f
 800b48e:	21b6      	movs	r1, #182	; 0xb6
 800b490:	f44f 709d 	mov.w	r0, #314	; 0x13a
 800b494:	f7fe fcfe 	bl	8009e94 <TFT9341_FillRect>
		TFT9341_FillRect(162, 234, 319, 239, COLOR_WHITE);//spodni
 800b498:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b49c:	9300      	str	r3, [sp, #0]
 800b49e:	23ef      	movs	r3, #239	; 0xef
 800b4a0:	f240 123f 	movw	r2, #319	; 0x13f
 800b4a4:	21ea      	movs	r1, #234	; 0xea
 800b4a6:	20a2      	movs	r0, #162	; 0xa2
 800b4a8:	f7fe fcf4 	bl	8009e94 <TFT9341_FillRect>
		break;
 800b4ac:	f000 bc81 	b.w	800bdb2 <GUI_zmena+0xcda>
	case 4:
		//encoder/potenciometr
		TFT9341_FillRect(162, 0, 319, 5, COLOR_WHITE);//horni
 800b4b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b4b4:	9300      	str	r3, [sp, #0]
 800b4b6:	2305      	movs	r3, #5
 800b4b8:	f240 123f 	movw	r2, #319	; 0x13f
 800b4bc:	2100      	movs	r1, #0
 800b4be:	20a2      	movs	r0, #162	; 0xa2
 800b4c0:	f7fe fce8 	bl	8009e94 <TFT9341_FillRect>
		TFT9341_FillRect(162, 0, 167, 59, COLOR_WHITE);//levy
 800b4c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b4c8:	9300      	str	r3, [sp, #0]
 800b4ca:	233b      	movs	r3, #59	; 0x3b
 800b4cc:	22a7      	movs	r2, #167	; 0xa7
 800b4ce:	2100      	movs	r1, #0
 800b4d0:	20a2      	movs	r0, #162	; 0xa2
 800b4d2:	f7fe fcdf 	bl	8009e94 <TFT9341_FillRect>
		TFT9341_FillRect(314, 0, 319, 59, COLOR_WHITE);//pravy
 800b4d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b4da:	9300      	str	r3, [sp, #0]
 800b4dc:	233b      	movs	r3, #59	; 0x3b
 800b4de:	f240 123f 	movw	r2, #319	; 0x13f
 800b4e2:	2100      	movs	r1, #0
 800b4e4:	f44f 709d 	mov.w	r0, #314	; 0x13a
 800b4e8:	f7fe fcd4 	bl	8009e94 <TFT9341_FillRect>
		TFT9341_FillRect(162, 54, 319, 59, COLOR_WHITE);//spodni
 800b4ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b4f0:	9300      	str	r3, [sp, #0]
 800b4f2:	233b      	movs	r3, #59	; 0x3b
 800b4f4:	f240 123f 	movw	r2, #319	; 0x13f
 800b4f8:	2136      	movs	r1, #54	; 0x36
 800b4fa:	20a2      	movs	r0, #162	; 0xa2
 800b4fc:	f7fe fcca 	bl	8009e94 <TFT9341_FillRect>
		//teplota/vlhkost
		TFT9341_FillRect(0, 62, 159, 67, COLOR_WHITE);//horni
 800b500:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b504:	9300      	str	r3, [sp, #0]
 800b506:	2343      	movs	r3, #67	; 0x43
 800b508:	229f      	movs	r2, #159	; 0x9f
 800b50a:	213e      	movs	r1, #62	; 0x3e
 800b50c:	2000      	movs	r0, #0
 800b50e:	f7fe fcc1 	bl	8009e94 <TFT9341_FillRect>
		TFT9341_FillRect(0, 62, 5, 119, COLOR_WHITE);//levy
 800b512:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b516:	9300      	str	r3, [sp, #0]
 800b518:	2377      	movs	r3, #119	; 0x77
 800b51a:	2205      	movs	r2, #5
 800b51c:	213e      	movs	r1, #62	; 0x3e
 800b51e:	2000      	movs	r0, #0
 800b520:	f7fe fcb8 	bl	8009e94 <TFT9341_FillRect>
		TFT9341_FillRect(154, 62, 159, 119, COLOR_WHITE);//pravy
 800b524:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b528:	9300      	str	r3, [sp, #0]
 800b52a:	2377      	movs	r3, #119	; 0x77
 800b52c:	229f      	movs	r2, #159	; 0x9f
 800b52e:	213e      	movs	r1, #62	; 0x3e
 800b530:	209a      	movs	r0, #154	; 0x9a
 800b532:	f7fe fcaf 	bl	8009e94 <TFT9341_FillRect>
		TFT9341_FillRect(0, 114, 159, 119, COLOR_WHITE);//spodni
 800b536:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b53a:	9300      	str	r3, [sp, #0]
 800b53c:	2377      	movs	r3, #119	; 0x77
 800b53e:	229f      	movs	r2, #159	; 0x9f
 800b540:	2172      	movs	r1, #114	; 0x72
 800b542:	2000      	movs	r0, #0
 800b544:	f7fe fca6 	bl	8009e94 <TFT9341_FillRect>
		//NTC/heater
		TFT9341_FillRect(0, 122, 159, 127, COLOR_WHITE);//horni
 800b548:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b54c:	9300      	str	r3, [sp, #0]
 800b54e:	237f      	movs	r3, #127	; 0x7f
 800b550:	229f      	movs	r2, #159	; 0x9f
 800b552:	217a      	movs	r1, #122	; 0x7a
 800b554:	2000      	movs	r0, #0
 800b556:	f7fe fc9d 	bl	8009e94 <TFT9341_FillRect>
		TFT9341_FillRect(0, 122, 5, 179, COLOR_WHITE);//levy
 800b55a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b55e:	9300      	str	r3, [sp, #0]
 800b560:	23b3      	movs	r3, #179	; 0xb3
 800b562:	2205      	movs	r2, #5
 800b564:	217a      	movs	r1, #122	; 0x7a
 800b566:	2000      	movs	r0, #0
 800b568:	f7fe fc94 	bl	8009e94 <TFT9341_FillRect>
		TFT9341_FillRect(154, 122, 159, 179, COLOR_WHITE);//pravy
 800b56c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b570:	9300      	str	r3, [sp, #0]
 800b572:	23b3      	movs	r3, #179	; 0xb3
 800b574:	229f      	movs	r2, #159	; 0x9f
 800b576:	217a      	movs	r1, #122	; 0x7a
 800b578:	209a      	movs	r0, #154	; 0x9a
 800b57a:	f7fe fc8b 	bl	8009e94 <TFT9341_FillRect>
		TFT9341_FillRect(0, 174, 159, 179, COLOR_WHITE);//spodni
 800b57e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b582:	9300      	str	r3, [sp, #0]
 800b584:	23b3      	movs	r3, #179	; 0xb3
 800b586:	229f      	movs	r2, #159	; 0x9f
 800b588:	21ae      	movs	r1, #174	; 0xae
 800b58a:	2000      	movs	r0, #0
 800b58c:	f7fe fc82 	bl	8009e94 <TFT9341_FillRect>
		//reproduktor
		TFT9341_FillRect(162, 122, 319, 127, COLOR_WHITE);//horni
 800b590:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b594:	9300      	str	r3, [sp, #0]
 800b596:	237f      	movs	r3, #127	; 0x7f
 800b598:	f240 123f 	movw	r2, #319	; 0x13f
 800b59c:	217a      	movs	r1, #122	; 0x7a
 800b59e:	20a2      	movs	r0, #162	; 0xa2
 800b5a0:	f7fe fc78 	bl	8009e94 <TFT9341_FillRect>
		TFT9341_FillRect(162, 122, 167, 179, COLOR_WHITE);//levy
 800b5a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b5a8:	9300      	str	r3, [sp, #0]
 800b5aa:	23b3      	movs	r3, #179	; 0xb3
 800b5ac:	22a7      	movs	r2, #167	; 0xa7
 800b5ae:	217a      	movs	r1, #122	; 0x7a
 800b5b0:	20a2      	movs	r0, #162	; 0xa2
 800b5b2:	f7fe fc6f 	bl	8009e94 <TFT9341_FillRect>
		TFT9341_FillRect(314, 122, 319, 179, COLOR_WHITE);//pravy
 800b5b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b5ba:	9300      	str	r3, [sp, #0]
 800b5bc:	23b3      	movs	r3, #179	; 0xb3
 800b5be:	f240 123f 	movw	r2, #319	; 0x13f
 800b5c2:	217a      	movs	r1, #122	; 0x7a
 800b5c4:	f44f 709d 	mov.w	r0, #314	; 0x13a
 800b5c8:	f7fe fc64 	bl	8009e94 <TFT9341_FillRect>
		TFT9341_FillRect(162, 174, 319, 179, COLOR_WHITE);//spodni
 800b5cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b5d0:	9300      	str	r3, [sp, #0]
 800b5d2:	23b3      	movs	r3, #179	; 0xb3
 800b5d4:	f240 123f 	movw	r2, #319	; 0x13f
 800b5d8:	21ae      	movs	r1, #174	; 0xae
 800b5da:	20a2      	movs	r0, #162	; 0xa2
 800b5dc:	f7fe fc5a 	bl	8009e94 <TFT9341_FillRect>
		//led diody
		TFT9341_FillRect(0, 182, 159, 187, COLOR_WHITE);//horni
 800b5e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b5e4:	9300      	str	r3, [sp, #0]
 800b5e6:	23bb      	movs	r3, #187	; 0xbb
 800b5e8:	229f      	movs	r2, #159	; 0x9f
 800b5ea:	21b6      	movs	r1, #182	; 0xb6
 800b5ec:	2000      	movs	r0, #0
 800b5ee:	f7fe fc51 	bl	8009e94 <TFT9341_FillRect>
		TFT9341_FillRect(0, 182, 5, 239, COLOR_WHITE);//levy
 800b5f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b5f6:	9300      	str	r3, [sp, #0]
 800b5f8:	23ef      	movs	r3, #239	; 0xef
 800b5fa:	2205      	movs	r2, #5
 800b5fc:	21b6      	movs	r1, #182	; 0xb6
 800b5fe:	2000      	movs	r0, #0
 800b600:	f7fe fc48 	bl	8009e94 <TFT9341_FillRect>
		TFT9341_FillRect(154, 182, 159, 239, COLOR_WHITE);//pravy
 800b604:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b608:	9300      	str	r3, [sp, #0]
 800b60a:	23ef      	movs	r3, #239	; 0xef
 800b60c:	229f      	movs	r2, #159	; 0x9f
 800b60e:	21b6      	movs	r1, #182	; 0xb6
 800b610:	209a      	movs	r0, #154	; 0x9a
 800b612:	f7fe fc3f 	bl	8009e94 <TFT9341_FillRect>
		TFT9341_FillRect(0, 234, 159, 239, COLOR_WHITE);//spodni
 800b616:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b61a:	9300      	str	r3, [sp, #0]
 800b61c:	23ef      	movs	r3, #239	; 0xef
 800b61e:	229f      	movs	r2, #159	; 0x9f
 800b620:	21ea      	movs	r1, #234	; 0xea
 800b622:	2000      	movs	r0, #0
 800b624:	f7fe fc36 	bl	8009e94 <TFT9341_FillRect>
		//tlacitka
		TFT9341_FillRect(162, 182, 319, 187, COLOR_WHITE);//horni
 800b628:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b62c:	9300      	str	r3, [sp, #0]
 800b62e:	23bb      	movs	r3, #187	; 0xbb
 800b630:	f240 123f 	movw	r2, #319	; 0x13f
 800b634:	21b6      	movs	r1, #182	; 0xb6
 800b636:	20a2      	movs	r0, #162	; 0xa2
 800b638:	f7fe fc2c 	bl	8009e94 <TFT9341_FillRect>
		TFT9341_FillRect(162, 182, 167, 239, COLOR_WHITE);//levy
 800b63c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b640:	9300      	str	r3, [sp, #0]
 800b642:	23ef      	movs	r3, #239	; 0xef
 800b644:	22a7      	movs	r2, #167	; 0xa7
 800b646:	21b6      	movs	r1, #182	; 0xb6
 800b648:	20a2      	movs	r0, #162	; 0xa2
 800b64a:	f7fe fc23 	bl	8009e94 <TFT9341_FillRect>
		TFT9341_FillRect(314, 182, 319, 239, COLOR_WHITE);//pravy
 800b64e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b652:	9300      	str	r3, [sp, #0]
 800b654:	23ef      	movs	r3, #239	; 0xef
 800b656:	f240 123f 	movw	r2, #319	; 0x13f
 800b65a:	21b6      	movs	r1, #182	; 0xb6
 800b65c:	f44f 709d 	mov.w	r0, #314	; 0x13a
 800b660:	f7fe fc18 	bl	8009e94 <TFT9341_FillRect>
		TFT9341_FillRect(162, 234, 319, 239, COLOR_WHITE);//spodni
 800b664:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b668:	9300      	str	r3, [sp, #0]
 800b66a:	23ef      	movs	r3, #239	; 0xef
 800b66c:	f240 123f 	movw	r2, #319	; 0x13f
 800b670:	21ea      	movs	r1, #234	; 0xea
 800b672:	20a2      	movs	r0, #162	; 0xa2
 800b674:	f7fe fc0e 	bl	8009e94 <TFT9341_FillRect>
		break;
 800b678:	e39b      	b.n	800bdb2 <GUI_zmena+0xcda>
	case 5:
		//encoder/potenciometr
		TFT9341_FillRect(162, 0, 319, 5, COLOR_WHITE);//horni
 800b67a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b67e:	9300      	str	r3, [sp, #0]
 800b680:	2305      	movs	r3, #5
 800b682:	f240 123f 	movw	r2, #319	; 0x13f
 800b686:	2100      	movs	r1, #0
 800b688:	20a2      	movs	r0, #162	; 0xa2
 800b68a:	f7fe fc03 	bl	8009e94 <TFT9341_FillRect>
		TFT9341_FillRect(162, 0, 167, 59, COLOR_WHITE);//levy
 800b68e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b692:	9300      	str	r3, [sp, #0]
 800b694:	233b      	movs	r3, #59	; 0x3b
 800b696:	22a7      	movs	r2, #167	; 0xa7
 800b698:	2100      	movs	r1, #0
 800b69a:	20a2      	movs	r0, #162	; 0xa2
 800b69c:	f7fe fbfa 	bl	8009e94 <TFT9341_FillRect>
		TFT9341_FillRect(314, 0, 319, 59, COLOR_WHITE);//pravy
 800b6a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b6a4:	9300      	str	r3, [sp, #0]
 800b6a6:	233b      	movs	r3, #59	; 0x3b
 800b6a8:	f240 123f 	movw	r2, #319	; 0x13f
 800b6ac:	2100      	movs	r1, #0
 800b6ae:	f44f 709d 	mov.w	r0, #314	; 0x13a
 800b6b2:	f7fe fbef 	bl	8009e94 <TFT9341_FillRect>
		TFT9341_FillRect(162, 54, 319, 59, COLOR_WHITE);//spodni
 800b6b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b6ba:	9300      	str	r3, [sp, #0]
 800b6bc:	233b      	movs	r3, #59	; 0x3b
 800b6be:	f240 123f 	movw	r2, #319	; 0x13f
 800b6c2:	2136      	movs	r1, #54	; 0x36
 800b6c4:	20a2      	movs	r0, #162	; 0xa2
 800b6c6:	f7fe fbe5 	bl	8009e94 <TFT9341_FillRect>
		//teplota/vlhkost
		TFT9341_FillRect(0, 62, 159, 67, COLOR_WHITE);//horni
 800b6ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b6ce:	9300      	str	r3, [sp, #0]
 800b6d0:	2343      	movs	r3, #67	; 0x43
 800b6d2:	229f      	movs	r2, #159	; 0x9f
 800b6d4:	213e      	movs	r1, #62	; 0x3e
 800b6d6:	2000      	movs	r0, #0
 800b6d8:	f7fe fbdc 	bl	8009e94 <TFT9341_FillRect>
		TFT9341_FillRect(0, 62, 5, 119, COLOR_WHITE);//levy
 800b6dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b6e0:	9300      	str	r3, [sp, #0]
 800b6e2:	2377      	movs	r3, #119	; 0x77
 800b6e4:	2205      	movs	r2, #5
 800b6e6:	213e      	movs	r1, #62	; 0x3e
 800b6e8:	2000      	movs	r0, #0
 800b6ea:	f7fe fbd3 	bl	8009e94 <TFT9341_FillRect>
		TFT9341_FillRect(154, 62, 159, 119, COLOR_WHITE);//pravy
 800b6ee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b6f2:	9300      	str	r3, [sp, #0]
 800b6f4:	2377      	movs	r3, #119	; 0x77
 800b6f6:	229f      	movs	r2, #159	; 0x9f
 800b6f8:	213e      	movs	r1, #62	; 0x3e
 800b6fa:	209a      	movs	r0, #154	; 0x9a
 800b6fc:	f7fe fbca 	bl	8009e94 <TFT9341_FillRect>
		TFT9341_FillRect(0, 114, 159, 119, COLOR_WHITE);//spodni
 800b700:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b704:	9300      	str	r3, [sp, #0]
 800b706:	2377      	movs	r3, #119	; 0x77
 800b708:	229f      	movs	r2, #159	; 0x9f
 800b70a:	2172      	movs	r1, #114	; 0x72
 800b70c:	2000      	movs	r0, #0
 800b70e:	f7fe fbc1 	bl	8009e94 <TFT9341_FillRect>
		//klavesnice
		TFT9341_FillRect(162, 62, 319, 67, COLOR_WHITE);//horni
 800b712:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b716:	9300      	str	r3, [sp, #0]
 800b718:	2343      	movs	r3, #67	; 0x43
 800b71a:	f240 123f 	movw	r2, #319	; 0x13f
 800b71e:	213e      	movs	r1, #62	; 0x3e
 800b720:	20a2      	movs	r0, #162	; 0xa2
 800b722:	f7fe fbb7 	bl	8009e94 <TFT9341_FillRect>
		TFT9341_FillRect(162, 62, 167, 119, COLOR_WHITE);//levy
 800b726:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b72a:	9300      	str	r3, [sp, #0]
 800b72c:	2377      	movs	r3, #119	; 0x77
 800b72e:	22a7      	movs	r2, #167	; 0xa7
 800b730:	213e      	movs	r1, #62	; 0x3e
 800b732:	20a2      	movs	r0, #162	; 0xa2
 800b734:	f7fe fbae 	bl	8009e94 <TFT9341_FillRect>
		TFT9341_FillRect(314, 62, 319, 119, COLOR_WHITE);//pravy
 800b738:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b73c:	9300      	str	r3, [sp, #0]
 800b73e:	2377      	movs	r3, #119	; 0x77
 800b740:	f240 123f 	movw	r2, #319	; 0x13f
 800b744:	213e      	movs	r1, #62	; 0x3e
 800b746:	f44f 709d 	mov.w	r0, #314	; 0x13a
 800b74a:	f7fe fba3 	bl	8009e94 <TFT9341_FillRect>
		TFT9341_FillRect(162, 114, 319, 119, COLOR_WHITE);//spodni
 800b74e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b752:	9300      	str	r3, [sp, #0]
 800b754:	2377      	movs	r3, #119	; 0x77
 800b756:	f240 123f 	movw	r2, #319	; 0x13f
 800b75a:	2172      	movs	r1, #114	; 0x72
 800b75c:	20a2      	movs	r0, #162	; 0xa2
 800b75e:	f7fe fb99 	bl	8009e94 <TFT9341_FillRect>
		//reproduktor
		TFT9341_FillRect(162, 122, 319, 127, COLOR_WHITE);//horni
 800b762:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b766:	9300      	str	r3, [sp, #0]
 800b768:	237f      	movs	r3, #127	; 0x7f
 800b76a:	f240 123f 	movw	r2, #319	; 0x13f
 800b76e:	217a      	movs	r1, #122	; 0x7a
 800b770:	20a2      	movs	r0, #162	; 0xa2
 800b772:	f7fe fb8f 	bl	8009e94 <TFT9341_FillRect>
		TFT9341_FillRect(162, 122, 167, 179, COLOR_WHITE);//levy
 800b776:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b77a:	9300      	str	r3, [sp, #0]
 800b77c:	23b3      	movs	r3, #179	; 0xb3
 800b77e:	22a7      	movs	r2, #167	; 0xa7
 800b780:	217a      	movs	r1, #122	; 0x7a
 800b782:	20a2      	movs	r0, #162	; 0xa2
 800b784:	f7fe fb86 	bl	8009e94 <TFT9341_FillRect>
		TFT9341_FillRect(314, 122, 319, 179, COLOR_WHITE);//pravy
 800b788:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b78c:	9300      	str	r3, [sp, #0]
 800b78e:	23b3      	movs	r3, #179	; 0xb3
 800b790:	f240 123f 	movw	r2, #319	; 0x13f
 800b794:	217a      	movs	r1, #122	; 0x7a
 800b796:	f44f 709d 	mov.w	r0, #314	; 0x13a
 800b79a:	f7fe fb7b 	bl	8009e94 <TFT9341_FillRect>
		TFT9341_FillRect(162, 174, 319, 179, COLOR_WHITE);//spodni
 800b79e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b7a2:	9300      	str	r3, [sp, #0]
 800b7a4:	23b3      	movs	r3, #179	; 0xb3
 800b7a6:	f240 123f 	movw	r2, #319	; 0x13f
 800b7aa:	21ae      	movs	r1, #174	; 0xae
 800b7ac:	20a2      	movs	r0, #162	; 0xa2
 800b7ae:	f7fe fb71 	bl	8009e94 <TFT9341_FillRect>
		//led diody
		TFT9341_FillRect(0, 182, 159, 187, COLOR_WHITE);//horni
 800b7b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b7b6:	9300      	str	r3, [sp, #0]
 800b7b8:	23bb      	movs	r3, #187	; 0xbb
 800b7ba:	229f      	movs	r2, #159	; 0x9f
 800b7bc:	21b6      	movs	r1, #182	; 0xb6
 800b7be:	2000      	movs	r0, #0
 800b7c0:	f7fe fb68 	bl	8009e94 <TFT9341_FillRect>
		TFT9341_FillRect(0, 182, 5, 239, COLOR_WHITE);//levy
 800b7c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b7c8:	9300      	str	r3, [sp, #0]
 800b7ca:	23ef      	movs	r3, #239	; 0xef
 800b7cc:	2205      	movs	r2, #5
 800b7ce:	21b6      	movs	r1, #182	; 0xb6
 800b7d0:	2000      	movs	r0, #0
 800b7d2:	f7fe fb5f 	bl	8009e94 <TFT9341_FillRect>
		TFT9341_FillRect(154, 182, 159, 239, COLOR_WHITE);//pravy
 800b7d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b7da:	9300      	str	r3, [sp, #0]
 800b7dc:	23ef      	movs	r3, #239	; 0xef
 800b7de:	229f      	movs	r2, #159	; 0x9f
 800b7e0:	21b6      	movs	r1, #182	; 0xb6
 800b7e2:	209a      	movs	r0, #154	; 0x9a
 800b7e4:	f7fe fb56 	bl	8009e94 <TFT9341_FillRect>
		TFT9341_FillRect(0, 234, 159, 239, COLOR_WHITE);//spodni
 800b7e8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b7ec:	9300      	str	r3, [sp, #0]
 800b7ee:	23ef      	movs	r3, #239	; 0xef
 800b7f0:	229f      	movs	r2, #159	; 0x9f
 800b7f2:	21ea      	movs	r1, #234	; 0xea
 800b7f4:	2000      	movs	r0, #0
 800b7f6:	f7fe fb4d 	bl	8009e94 <TFT9341_FillRect>
		//tlacitka
		TFT9341_FillRect(162, 182, 319, 187, COLOR_WHITE);//horni
 800b7fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b7fe:	9300      	str	r3, [sp, #0]
 800b800:	23bb      	movs	r3, #187	; 0xbb
 800b802:	f240 123f 	movw	r2, #319	; 0x13f
 800b806:	21b6      	movs	r1, #182	; 0xb6
 800b808:	20a2      	movs	r0, #162	; 0xa2
 800b80a:	f7fe fb43 	bl	8009e94 <TFT9341_FillRect>
		TFT9341_FillRect(162, 182, 167, 239, COLOR_WHITE);//levy
 800b80e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b812:	9300      	str	r3, [sp, #0]
 800b814:	23ef      	movs	r3, #239	; 0xef
 800b816:	22a7      	movs	r2, #167	; 0xa7
 800b818:	21b6      	movs	r1, #182	; 0xb6
 800b81a:	20a2      	movs	r0, #162	; 0xa2
 800b81c:	f7fe fb3a 	bl	8009e94 <TFT9341_FillRect>
		TFT9341_FillRect(314, 182, 319, 239, COLOR_WHITE);//pravy
 800b820:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b824:	9300      	str	r3, [sp, #0]
 800b826:	23ef      	movs	r3, #239	; 0xef
 800b828:	f240 123f 	movw	r2, #319	; 0x13f
 800b82c:	21b6      	movs	r1, #182	; 0xb6
 800b82e:	f44f 709d 	mov.w	r0, #314	; 0x13a
 800b832:	f7fe fb2f 	bl	8009e94 <TFT9341_FillRect>
		TFT9341_FillRect(162, 234, 319, 239, COLOR_WHITE);//spodni
 800b836:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b83a:	9300      	str	r3, [sp, #0]
 800b83c:	23ef      	movs	r3, #239	; 0xef
 800b83e:	f240 123f 	movw	r2, #319	; 0x13f
 800b842:	21ea      	movs	r1, #234	; 0xea
 800b844:	20a2      	movs	r0, #162	; 0xa2
 800b846:	f7fe fb25 	bl	8009e94 <TFT9341_FillRect>
		break;
 800b84a:	e2b2      	b.n	800bdb2 <GUI_zmena+0xcda>
	case 6:
		//encoder/potenciometr
		TFT9341_FillRect(162, 0, 319, 5, COLOR_WHITE);//horni
 800b84c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b850:	9300      	str	r3, [sp, #0]
 800b852:	2305      	movs	r3, #5
 800b854:	f240 123f 	movw	r2, #319	; 0x13f
 800b858:	2100      	movs	r1, #0
 800b85a:	20a2      	movs	r0, #162	; 0xa2
 800b85c:	f7fe fb1a 	bl	8009e94 <TFT9341_FillRect>
		TFT9341_FillRect(162, 0, 167, 59, COLOR_WHITE);//levy
 800b860:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b864:	9300      	str	r3, [sp, #0]
 800b866:	233b      	movs	r3, #59	; 0x3b
 800b868:	22a7      	movs	r2, #167	; 0xa7
 800b86a:	2100      	movs	r1, #0
 800b86c:	20a2      	movs	r0, #162	; 0xa2
 800b86e:	f7fe fb11 	bl	8009e94 <TFT9341_FillRect>
		TFT9341_FillRect(314, 0, 319, 59, COLOR_WHITE);//pravy
 800b872:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b876:	9300      	str	r3, [sp, #0]
 800b878:	233b      	movs	r3, #59	; 0x3b
 800b87a:	f240 123f 	movw	r2, #319	; 0x13f
 800b87e:	2100      	movs	r1, #0
 800b880:	f44f 709d 	mov.w	r0, #314	; 0x13a
 800b884:	f7fe fb06 	bl	8009e94 <TFT9341_FillRect>
		TFT9341_FillRect(162, 54, 319, 59, COLOR_WHITE);//spodni
 800b888:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b88c:	9300      	str	r3, [sp, #0]
 800b88e:	233b      	movs	r3, #59	; 0x3b
 800b890:	f240 123f 	movw	r2, #319	; 0x13f
 800b894:	2136      	movs	r1, #54	; 0x36
 800b896:	20a2      	movs	r0, #162	; 0xa2
 800b898:	f7fe fafc 	bl	8009e94 <TFT9341_FillRect>
		//teplota/vlhkost
		TFT9341_FillRect(0, 62, 159, 67, COLOR_WHITE);//horni
 800b89c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b8a0:	9300      	str	r3, [sp, #0]
 800b8a2:	2343      	movs	r3, #67	; 0x43
 800b8a4:	229f      	movs	r2, #159	; 0x9f
 800b8a6:	213e      	movs	r1, #62	; 0x3e
 800b8a8:	2000      	movs	r0, #0
 800b8aa:	f7fe faf3 	bl	8009e94 <TFT9341_FillRect>
		TFT9341_FillRect(0, 62, 5, 119, COLOR_WHITE);//levy
 800b8ae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b8b2:	9300      	str	r3, [sp, #0]
 800b8b4:	2377      	movs	r3, #119	; 0x77
 800b8b6:	2205      	movs	r2, #5
 800b8b8:	213e      	movs	r1, #62	; 0x3e
 800b8ba:	2000      	movs	r0, #0
 800b8bc:	f7fe faea 	bl	8009e94 <TFT9341_FillRect>
		TFT9341_FillRect(154, 62, 159, 119, COLOR_WHITE);//pravy
 800b8c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b8c4:	9300      	str	r3, [sp, #0]
 800b8c6:	2377      	movs	r3, #119	; 0x77
 800b8c8:	229f      	movs	r2, #159	; 0x9f
 800b8ca:	213e      	movs	r1, #62	; 0x3e
 800b8cc:	209a      	movs	r0, #154	; 0x9a
 800b8ce:	f7fe fae1 	bl	8009e94 <TFT9341_FillRect>
		TFT9341_FillRect(0, 114, 159, 119, COLOR_WHITE);//spodni
 800b8d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b8d6:	9300      	str	r3, [sp, #0]
 800b8d8:	2377      	movs	r3, #119	; 0x77
 800b8da:	229f      	movs	r2, #159	; 0x9f
 800b8dc:	2172      	movs	r1, #114	; 0x72
 800b8de:	2000      	movs	r0, #0
 800b8e0:	f7fe fad8 	bl	8009e94 <TFT9341_FillRect>
		//klavesnice
		TFT9341_FillRect(162, 62, 319, 67, COLOR_WHITE);//horni
 800b8e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b8e8:	9300      	str	r3, [sp, #0]
 800b8ea:	2343      	movs	r3, #67	; 0x43
 800b8ec:	f240 123f 	movw	r2, #319	; 0x13f
 800b8f0:	213e      	movs	r1, #62	; 0x3e
 800b8f2:	20a2      	movs	r0, #162	; 0xa2
 800b8f4:	f7fe face 	bl	8009e94 <TFT9341_FillRect>
		TFT9341_FillRect(162, 62, 167, 119, COLOR_WHITE);//levy
 800b8f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b8fc:	9300      	str	r3, [sp, #0]
 800b8fe:	2377      	movs	r3, #119	; 0x77
 800b900:	22a7      	movs	r2, #167	; 0xa7
 800b902:	213e      	movs	r1, #62	; 0x3e
 800b904:	20a2      	movs	r0, #162	; 0xa2
 800b906:	f7fe fac5 	bl	8009e94 <TFT9341_FillRect>
		TFT9341_FillRect(314, 62, 319, 119, COLOR_WHITE);//pravy
 800b90a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b90e:	9300      	str	r3, [sp, #0]
 800b910:	2377      	movs	r3, #119	; 0x77
 800b912:	f240 123f 	movw	r2, #319	; 0x13f
 800b916:	213e      	movs	r1, #62	; 0x3e
 800b918:	f44f 709d 	mov.w	r0, #314	; 0x13a
 800b91c:	f7fe faba 	bl	8009e94 <TFT9341_FillRect>
		TFT9341_FillRect(162, 114, 319, 119, COLOR_WHITE);//spodni
 800b920:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b924:	9300      	str	r3, [sp, #0]
 800b926:	2377      	movs	r3, #119	; 0x77
 800b928:	f240 123f 	movw	r2, #319	; 0x13f
 800b92c:	2172      	movs	r1, #114	; 0x72
 800b92e:	20a2      	movs	r0, #162	; 0xa2
 800b930:	f7fe fab0 	bl	8009e94 <TFT9341_FillRect>
		//NTC/heater
		TFT9341_FillRect(0, 122, 159, 127, COLOR_WHITE);//horni
 800b934:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b938:	9300      	str	r3, [sp, #0]
 800b93a:	237f      	movs	r3, #127	; 0x7f
 800b93c:	229f      	movs	r2, #159	; 0x9f
 800b93e:	217a      	movs	r1, #122	; 0x7a
 800b940:	2000      	movs	r0, #0
 800b942:	f7fe faa7 	bl	8009e94 <TFT9341_FillRect>
		TFT9341_FillRect(0, 122, 5, 179, COLOR_WHITE);//levy
 800b946:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b94a:	9300      	str	r3, [sp, #0]
 800b94c:	23b3      	movs	r3, #179	; 0xb3
 800b94e:	2205      	movs	r2, #5
 800b950:	217a      	movs	r1, #122	; 0x7a
 800b952:	2000      	movs	r0, #0
 800b954:	f7fe fa9e 	bl	8009e94 <TFT9341_FillRect>
		TFT9341_FillRect(154, 122, 159, 179, COLOR_WHITE);//pravy
 800b958:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b95c:	9300      	str	r3, [sp, #0]
 800b95e:	23b3      	movs	r3, #179	; 0xb3
 800b960:	229f      	movs	r2, #159	; 0x9f
 800b962:	217a      	movs	r1, #122	; 0x7a
 800b964:	209a      	movs	r0, #154	; 0x9a
 800b966:	f7fe fa95 	bl	8009e94 <TFT9341_FillRect>
		TFT9341_FillRect(0, 174, 159, 179, COLOR_WHITE);//spodni
 800b96a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b96e:	9300      	str	r3, [sp, #0]
 800b970:	23b3      	movs	r3, #179	; 0xb3
 800b972:	229f      	movs	r2, #159	; 0x9f
 800b974:	21ae      	movs	r1, #174	; 0xae
 800b976:	2000      	movs	r0, #0
 800b978:	f7fe fa8c 	bl	8009e94 <TFT9341_FillRect>
		//led diody
		TFT9341_FillRect(0, 182, 159, 187, COLOR_WHITE);//horni
 800b97c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b980:	9300      	str	r3, [sp, #0]
 800b982:	23bb      	movs	r3, #187	; 0xbb
 800b984:	229f      	movs	r2, #159	; 0x9f
 800b986:	21b6      	movs	r1, #182	; 0xb6
 800b988:	2000      	movs	r0, #0
 800b98a:	f7fe fa83 	bl	8009e94 <TFT9341_FillRect>
		TFT9341_FillRect(0, 182, 5, 239, COLOR_WHITE);//levy
 800b98e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b992:	9300      	str	r3, [sp, #0]
 800b994:	23ef      	movs	r3, #239	; 0xef
 800b996:	2205      	movs	r2, #5
 800b998:	21b6      	movs	r1, #182	; 0xb6
 800b99a:	2000      	movs	r0, #0
 800b99c:	f7fe fa7a 	bl	8009e94 <TFT9341_FillRect>
		TFT9341_FillRect(154, 182, 159, 239, COLOR_WHITE);//pravy
 800b9a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b9a4:	9300      	str	r3, [sp, #0]
 800b9a6:	23ef      	movs	r3, #239	; 0xef
 800b9a8:	229f      	movs	r2, #159	; 0x9f
 800b9aa:	21b6      	movs	r1, #182	; 0xb6
 800b9ac:	209a      	movs	r0, #154	; 0x9a
 800b9ae:	f7fe fa71 	bl	8009e94 <TFT9341_FillRect>
		TFT9341_FillRect(0, 234, 159, 239, COLOR_WHITE);//spodni
 800b9b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b9b6:	9300      	str	r3, [sp, #0]
 800b9b8:	23ef      	movs	r3, #239	; 0xef
 800b9ba:	229f      	movs	r2, #159	; 0x9f
 800b9bc:	21ea      	movs	r1, #234	; 0xea
 800b9be:	2000      	movs	r0, #0
 800b9c0:	f7fe fa68 	bl	8009e94 <TFT9341_FillRect>
		//tlacitka
		TFT9341_FillRect(162, 182, 319, 187, COLOR_WHITE);//horni
 800b9c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b9c8:	9300      	str	r3, [sp, #0]
 800b9ca:	23bb      	movs	r3, #187	; 0xbb
 800b9cc:	f240 123f 	movw	r2, #319	; 0x13f
 800b9d0:	21b6      	movs	r1, #182	; 0xb6
 800b9d2:	20a2      	movs	r0, #162	; 0xa2
 800b9d4:	f7fe fa5e 	bl	8009e94 <TFT9341_FillRect>
		TFT9341_FillRect(162, 182, 167, 239, COLOR_WHITE);//levy
 800b9d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b9dc:	9300      	str	r3, [sp, #0]
 800b9de:	23ef      	movs	r3, #239	; 0xef
 800b9e0:	22a7      	movs	r2, #167	; 0xa7
 800b9e2:	21b6      	movs	r1, #182	; 0xb6
 800b9e4:	20a2      	movs	r0, #162	; 0xa2
 800b9e6:	f7fe fa55 	bl	8009e94 <TFT9341_FillRect>
		TFT9341_FillRect(314, 182, 319, 239, COLOR_WHITE);//pravy
 800b9ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b9ee:	9300      	str	r3, [sp, #0]
 800b9f0:	23ef      	movs	r3, #239	; 0xef
 800b9f2:	f240 123f 	movw	r2, #319	; 0x13f
 800b9f6:	21b6      	movs	r1, #182	; 0xb6
 800b9f8:	f44f 709d 	mov.w	r0, #314	; 0x13a
 800b9fc:	f7fe fa4a 	bl	8009e94 <TFT9341_FillRect>
		TFT9341_FillRect(162, 234, 319, 239, COLOR_WHITE);//spodni
 800ba00:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ba04:	9300      	str	r3, [sp, #0]
 800ba06:	23ef      	movs	r3, #239	; 0xef
 800ba08:	f240 123f 	movw	r2, #319	; 0x13f
 800ba0c:	21ea      	movs	r1, #234	; 0xea
 800ba0e:	20a2      	movs	r0, #162	; 0xa2
 800ba10:	f7fe fa40 	bl	8009e94 <TFT9341_FillRect>
		break;
 800ba14:	e1cd      	b.n	800bdb2 <GUI_zmena+0xcda>
	case 7:
		//encoder/potenciometr
		TFT9341_FillRect(162, 0, 319, 5, COLOR_WHITE);//horni
 800ba16:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ba1a:	9300      	str	r3, [sp, #0]
 800ba1c:	2305      	movs	r3, #5
 800ba1e:	f240 123f 	movw	r2, #319	; 0x13f
 800ba22:	2100      	movs	r1, #0
 800ba24:	20a2      	movs	r0, #162	; 0xa2
 800ba26:	f7fe fa35 	bl	8009e94 <TFT9341_FillRect>
		TFT9341_FillRect(162, 0, 167, 59, COLOR_WHITE);//levy
 800ba2a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ba2e:	9300      	str	r3, [sp, #0]
 800ba30:	233b      	movs	r3, #59	; 0x3b
 800ba32:	22a7      	movs	r2, #167	; 0xa7
 800ba34:	2100      	movs	r1, #0
 800ba36:	20a2      	movs	r0, #162	; 0xa2
 800ba38:	f7fe fa2c 	bl	8009e94 <TFT9341_FillRect>
		TFT9341_FillRect(314, 0, 319, 59, COLOR_WHITE);//pravy
 800ba3c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ba40:	9300      	str	r3, [sp, #0]
 800ba42:	233b      	movs	r3, #59	; 0x3b
 800ba44:	f240 123f 	movw	r2, #319	; 0x13f
 800ba48:	2100      	movs	r1, #0
 800ba4a:	f44f 709d 	mov.w	r0, #314	; 0x13a
 800ba4e:	f7fe fa21 	bl	8009e94 <TFT9341_FillRect>
		TFT9341_FillRect(162, 54, 319, 59, COLOR_WHITE);//spodni
 800ba52:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ba56:	9300      	str	r3, [sp, #0]
 800ba58:	233b      	movs	r3, #59	; 0x3b
 800ba5a:	f240 123f 	movw	r2, #319	; 0x13f
 800ba5e:	2136      	movs	r1, #54	; 0x36
 800ba60:	20a2      	movs	r0, #162	; 0xa2
 800ba62:	f7fe fa17 	bl	8009e94 <TFT9341_FillRect>
		//teplota/vlhkost
		TFT9341_FillRect(0, 62, 159, 67, COLOR_WHITE);//horni
 800ba66:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ba6a:	9300      	str	r3, [sp, #0]
 800ba6c:	2343      	movs	r3, #67	; 0x43
 800ba6e:	229f      	movs	r2, #159	; 0x9f
 800ba70:	213e      	movs	r1, #62	; 0x3e
 800ba72:	2000      	movs	r0, #0
 800ba74:	f7fe fa0e 	bl	8009e94 <TFT9341_FillRect>
		TFT9341_FillRect(0, 62, 5, 119, COLOR_WHITE);//levy
 800ba78:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ba7c:	9300      	str	r3, [sp, #0]
 800ba7e:	2377      	movs	r3, #119	; 0x77
 800ba80:	2205      	movs	r2, #5
 800ba82:	213e      	movs	r1, #62	; 0x3e
 800ba84:	2000      	movs	r0, #0
 800ba86:	f7fe fa05 	bl	8009e94 <TFT9341_FillRect>
		TFT9341_FillRect(154, 62, 159, 119, COLOR_WHITE);//pravy
 800ba8a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ba8e:	9300      	str	r3, [sp, #0]
 800ba90:	2377      	movs	r3, #119	; 0x77
 800ba92:	229f      	movs	r2, #159	; 0x9f
 800ba94:	213e      	movs	r1, #62	; 0x3e
 800ba96:	209a      	movs	r0, #154	; 0x9a
 800ba98:	f7fe f9fc 	bl	8009e94 <TFT9341_FillRect>
		TFT9341_FillRect(0, 114, 159, 119, COLOR_WHITE);//spodni
 800ba9c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800baa0:	9300      	str	r3, [sp, #0]
 800baa2:	2377      	movs	r3, #119	; 0x77
 800baa4:	229f      	movs	r2, #159	; 0x9f
 800baa6:	2172      	movs	r1, #114	; 0x72
 800baa8:	2000      	movs	r0, #0
 800baaa:	f7fe f9f3 	bl	8009e94 <TFT9341_FillRect>
		//klavesnice
		TFT9341_FillRect(162, 62, 319, 67, COLOR_WHITE);//horni
 800baae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bab2:	9300      	str	r3, [sp, #0]
 800bab4:	2343      	movs	r3, #67	; 0x43
 800bab6:	f240 123f 	movw	r2, #319	; 0x13f
 800baba:	213e      	movs	r1, #62	; 0x3e
 800babc:	20a2      	movs	r0, #162	; 0xa2
 800babe:	f7fe f9e9 	bl	8009e94 <TFT9341_FillRect>
		TFT9341_FillRect(162, 62, 167, 119, COLOR_WHITE);//levy
 800bac2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bac6:	9300      	str	r3, [sp, #0]
 800bac8:	2377      	movs	r3, #119	; 0x77
 800baca:	22a7      	movs	r2, #167	; 0xa7
 800bacc:	213e      	movs	r1, #62	; 0x3e
 800bace:	20a2      	movs	r0, #162	; 0xa2
 800bad0:	f7fe f9e0 	bl	8009e94 <TFT9341_FillRect>
		TFT9341_FillRect(314, 62, 319, 119, COLOR_WHITE);//pravy
 800bad4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bad8:	9300      	str	r3, [sp, #0]
 800bada:	2377      	movs	r3, #119	; 0x77
 800badc:	f240 123f 	movw	r2, #319	; 0x13f
 800bae0:	213e      	movs	r1, #62	; 0x3e
 800bae2:	f44f 709d 	mov.w	r0, #314	; 0x13a
 800bae6:	f7fe f9d5 	bl	8009e94 <TFT9341_FillRect>
		TFT9341_FillRect(162, 114, 319, 119, COLOR_WHITE);//spodni
 800baea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800baee:	9300      	str	r3, [sp, #0]
 800baf0:	2377      	movs	r3, #119	; 0x77
 800baf2:	f240 123f 	movw	r2, #319	; 0x13f
 800baf6:	2172      	movs	r1, #114	; 0x72
 800baf8:	20a2      	movs	r0, #162	; 0xa2
 800bafa:	f7fe f9cb 	bl	8009e94 <TFT9341_FillRect>
		//NTC/heater
		TFT9341_FillRect(0, 122, 159, 127, COLOR_WHITE);//horni
 800bafe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bb02:	9300      	str	r3, [sp, #0]
 800bb04:	237f      	movs	r3, #127	; 0x7f
 800bb06:	229f      	movs	r2, #159	; 0x9f
 800bb08:	217a      	movs	r1, #122	; 0x7a
 800bb0a:	2000      	movs	r0, #0
 800bb0c:	f7fe f9c2 	bl	8009e94 <TFT9341_FillRect>
		TFT9341_FillRect(0, 122, 5, 179, COLOR_WHITE);//levy
 800bb10:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bb14:	9300      	str	r3, [sp, #0]
 800bb16:	23b3      	movs	r3, #179	; 0xb3
 800bb18:	2205      	movs	r2, #5
 800bb1a:	217a      	movs	r1, #122	; 0x7a
 800bb1c:	2000      	movs	r0, #0
 800bb1e:	f7fe f9b9 	bl	8009e94 <TFT9341_FillRect>
		TFT9341_FillRect(154, 122, 159, 179, COLOR_WHITE);//pravy
 800bb22:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bb26:	9300      	str	r3, [sp, #0]
 800bb28:	23b3      	movs	r3, #179	; 0xb3
 800bb2a:	229f      	movs	r2, #159	; 0x9f
 800bb2c:	217a      	movs	r1, #122	; 0x7a
 800bb2e:	209a      	movs	r0, #154	; 0x9a
 800bb30:	f7fe f9b0 	bl	8009e94 <TFT9341_FillRect>
		TFT9341_FillRect(0, 174, 159, 179, COLOR_WHITE);//spodni
 800bb34:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bb38:	9300      	str	r3, [sp, #0]
 800bb3a:	23b3      	movs	r3, #179	; 0xb3
 800bb3c:	229f      	movs	r2, #159	; 0x9f
 800bb3e:	21ae      	movs	r1, #174	; 0xae
 800bb40:	2000      	movs	r0, #0
 800bb42:	f7fe f9a7 	bl	8009e94 <TFT9341_FillRect>
		//reproduktor
		TFT9341_FillRect(162, 122, 319, 127, COLOR_WHITE);//horni
 800bb46:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bb4a:	9300      	str	r3, [sp, #0]
 800bb4c:	237f      	movs	r3, #127	; 0x7f
 800bb4e:	f240 123f 	movw	r2, #319	; 0x13f
 800bb52:	217a      	movs	r1, #122	; 0x7a
 800bb54:	20a2      	movs	r0, #162	; 0xa2
 800bb56:	f7fe f99d 	bl	8009e94 <TFT9341_FillRect>
		TFT9341_FillRect(162, 122, 167, 179, COLOR_WHITE);//levy
 800bb5a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bb5e:	9300      	str	r3, [sp, #0]
 800bb60:	23b3      	movs	r3, #179	; 0xb3
 800bb62:	22a7      	movs	r2, #167	; 0xa7
 800bb64:	217a      	movs	r1, #122	; 0x7a
 800bb66:	20a2      	movs	r0, #162	; 0xa2
 800bb68:	f7fe f994 	bl	8009e94 <TFT9341_FillRect>
		TFT9341_FillRect(314, 122, 319, 179, COLOR_WHITE);//pravy
 800bb6c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bb70:	9300      	str	r3, [sp, #0]
 800bb72:	23b3      	movs	r3, #179	; 0xb3
 800bb74:	f240 123f 	movw	r2, #319	; 0x13f
 800bb78:	217a      	movs	r1, #122	; 0x7a
 800bb7a:	f44f 709d 	mov.w	r0, #314	; 0x13a
 800bb7e:	f7fe f989 	bl	8009e94 <TFT9341_FillRect>
		TFT9341_FillRect(162, 174, 319, 179, COLOR_WHITE);//spodni
 800bb82:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bb86:	9300      	str	r3, [sp, #0]
 800bb88:	23b3      	movs	r3, #179	; 0xb3
 800bb8a:	f240 123f 	movw	r2, #319	; 0x13f
 800bb8e:	21ae      	movs	r1, #174	; 0xae
 800bb90:	20a2      	movs	r0, #162	; 0xa2
 800bb92:	f7fe f97f 	bl	8009e94 <TFT9341_FillRect>
		//tlacitka
		TFT9341_FillRect(162, 182, 319, 187, COLOR_WHITE);//horni
 800bb96:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bb9a:	9300      	str	r3, [sp, #0]
 800bb9c:	23bb      	movs	r3, #187	; 0xbb
 800bb9e:	f240 123f 	movw	r2, #319	; 0x13f
 800bba2:	21b6      	movs	r1, #182	; 0xb6
 800bba4:	20a2      	movs	r0, #162	; 0xa2
 800bba6:	f7fe f975 	bl	8009e94 <TFT9341_FillRect>
		TFT9341_FillRect(162, 182, 167, 239, COLOR_WHITE);//levy
 800bbaa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bbae:	9300      	str	r3, [sp, #0]
 800bbb0:	23ef      	movs	r3, #239	; 0xef
 800bbb2:	22a7      	movs	r2, #167	; 0xa7
 800bbb4:	21b6      	movs	r1, #182	; 0xb6
 800bbb6:	20a2      	movs	r0, #162	; 0xa2
 800bbb8:	f7fe f96c 	bl	8009e94 <TFT9341_FillRect>
		TFT9341_FillRect(314, 182, 319, 239, COLOR_WHITE);//pravy
 800bbbc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bbc0:	9300      	str	r3, [sp, #0]
 800bbc2:	23ef      	movs	r3, #239	; 0xef
 800bbc4:	f240 123f 	movw	r2, #319	; 0x13f
 800bbc8:	21b6      	movs	r1, #182	; 0xb6
 800bbca:	f44f 709d 	mov.w	r0, #314	; 0x13a
 800bbce:	f7fe f961 	bl	8009e94 <TFT9341_FillRect>
		TFT9341_FillRect(162, 234, 319, 239, COLOR_WHITE);//spodni
 800bbd2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bbd6:	9300      	str	r3, [sp, #0]
 800bbd8:	23ef      	movs	r3, #239	; 0xef
 800bbda:	f240 123f 	movw	r2, #319	; 0x13f
 800bbde:	21ea      	movs	r1, #234	; 0xea
 800bbe0:	20a2      	movs	r0, #162	; 0xa2
 800bbe2:	f7fe f957 	bl	8009e94 <TFT9341_FillRect>
		break;
 800bbe6:	e0e4      	b.n	800bdb2 <GUI_zmena+0xcda>
	case 8:
		//encoder/potenciometr
		TFT9341_FillRect(162, 0, 319, 5, COLOR_WHITE);//horni
 800bbe8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bbec:	9300      	str	r3, [sp, #0]
 800bbee:	2305      	movs	r3, #5
 800bbf0:	f240 123f 	movw	r2, #319	; 0x13f
 800bbf4:	2100      	movs	r1, #0
 800bbf6:	20a2      	movs	r0, #162	; 0xa2
 800bbf8:	f7fe f94c 	bl	8009e94 <TFT9341_FillRect>
		TFT9341_FillRect(162, 0, 167, 59, COLOR_WHITE);//levy
 800bbfc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bc00:	9300      	str	r3, [sp, #0]
 800bc02:	233b      	movs	r3, #59	; 0x3b
 800bc04:	22a7      	movs	r2, #167	; 0xa7
 800bc06:	2100      	movs	r1, #0
 800bc08:	20a2      	movs	r0, #162	; 0xa2
 800bc0a:	f7fe f943 	bl	8009e94 <TFT9341_FillRect>
		TFT9341_FillRect(314, 0, 319, 59, COLOR_WHITE);//pravy
 800bc0e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bc12:	9300      	str	r3, [sp, #0]
 800bc14:	233b      	movs	r3, #59	; 0x3b
 800bc16:	f240 123f 	movw	r2, #319	; 0x13f
 800bc1a:	2100      	movs	r1, #0
 800bc1c:	f44f 709d 	mov.w	r0, #314	; 0x13a
 800bc20:	f7fe f938 	bl	8009e94 <TFT9341_FillRect>
		TFT9341_FillRect(162, 54, 319, 59, COLOR_WHITE);//spodni
 800bc24:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bc28:	9300      	str	r3, [sp, #0]
 800bc2a:	233b      	movs	r3, #59	; 0x3b
 800bc2c:	f240 123f 	movw	r2, #319	; 0x13f
 800bc30:	2136      	movs	r1, #54	; 0x36
 800bc32:	20a2      	movs	r0, #162	; 0xa2
 800bc34:	f7fe f92e 	bl	8009e94 <TFT9341_FillRect>
		//teplota/vlhkost
		TFT9341_FillRect(0, 62, 159, 67, COLOR_WHITE);//horni
 800bc38:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bc3c:	9300      	str	r3, [sp, #0]
 800bc3e:	2343      	movs	r3, #67	; 0x43
 800bc40:	229f      	movs	r2, #159	; 0x9f
 800bc42:	213e      	movs	r1, #62	; 0x3e
 800bc44:	2000      	movs	r0, #0
 800bc46:	f7fe f925 	bl	8009e94 <TFT9341_FillRect>
		TFT9341_FillRect(0, 62, 5, 119, COLOR_WHITE);//levy
 800bc4a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bc4e:	9300      	str	r3, [sp, #0]
 800bc50:	2377      	movs	r3, #119	; 0x77
 800bc52:	2205      	movs	r2, #5
 800bc54:	213e      	movs	r1, #62	; 0x3e
 800bc56:	2000      	movs	r0, #0
 800bc58:	f7fe f91c 	bl	8009e94 <TFT9341_FillRect>
		TFT9341_FillRect(154, 62, 159, 119, COLOR_WHITE);//pravy
 800bc5c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bc60:	9300      	str	r3, [sp, #0]
 800bc62:	2377      	movs	r3, #119	; 0x77
 800bc64:	229f      	movs	r2, #159	; 0x9f
 800bc66:	213e      	movs	r1, #62	; 0x3e
 800bc68:	209a      	movs	r0, #154	; 0x9a
 800bc6a:	f7fe f913 	bl	8009e94 <TFT9341_FillRect>
		TFT9341_FillRect(0, 114, 159, 119, COLOR_WHITE);//spodni
 800bc6e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bc72:	9300      	str	r3, [sp, #0]
 800bc74:	2377      	movs	r3, #119	; 0x77
 800bc76:	229f      	movs	r2, #159	; 0x9f
 800bc78:	2172      	movs	r1, #114	; 0x72
 800bc7a:	2000      	movs	r0, #0
 800bc7c:	f7fe f90a 	bl	8009e94 <TFT9341_FillRect>
		//klavesnice
		TFT9341_FillRect(162, 62, 319, 67, COLOR_WHITE);//horni
 800bc80:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bc84:	9300      	str	r3, [sp, #0]
 800bc86:	2343      	movs	r3, #67	; 0x43
 800bc88:	f240 123f 	movw	r2, #319	; 0x13f
 800bc8c:	213e      	movs	r1, #62	; 0x3e
 800bc8e:	20a2      	movs	r0, #162	; 0xa2
 800bc90:	f7fe f900 	bl	8009e94 <TFT9341_FillRect>
		TFT9341_FillRect(162, 62, 167, 119, COLOR_WHITE);//levy
 800bc94:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bc98:	9300      	str	r3, [sp, #0]
 800bc9a:	2377      	movs	r3, #119	; 0x77
 800bc9c:	22a7      	movs	r2, #167	; 0xa7
 800bc9e:	213e      	movs	r1, #62	; 0x3e
 800bca0:	20a2      	movs	r0, #162	; 0xa2
 800bca2:	f7fe f8f7 	bl	8009e94 <TFT9341_FillRect>
		TFT9341_FillRect(314, 62, 319, 119, COLOR_WHITE);//pravy
 800bca6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bcaa:	9300      	str	r3, [sp, #0]
 800bcac:	2377      	movs	r3, #119	; 0x77
 800bcae:	f240 123f 	movw	r2, #319	; 0x13f
 800bcb2:	213e      	movs	r1, #62	; 0x3e
 800bcb4:	f44f 709d 	mov.w	r0, #314	; 0x13a
 800bcb8:	f7fe f8ec 	bl	8009e94 <TFT9341_FillRect>
		TFT9341_FillRect(162, 114, 319, 119, COLOR_WHITE);//spodni
 800bcbc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bcc0:	9300      	str	r3, [sp, #0]
 800bcc2:	2377      	movs	r3, #119	; 0x77
 800bcc4:	f240 123f 	movw	r2, #319	; 0x13f
 800bcc8:	2172      	movs	r1, #114	; 0x72
 800bcca:	20a2      	movs	r0, #162	; 0xa2
 800bccc:	f7fe f8e2 	bl	8009e94 <TFT9341_FillRect>
		//NTC/heater
		TFT9341_FillRect(0, 122, 159, 127, COLOR_WHITE);//horni
 800bcd0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bcd4:	9300      	str	r3, [sp, #0]
 800bcd6:	237f      	movs	r3, #127	; 0x7f
 800bcd8:	229f      	movs	r2, #159	; 0x9f
 800bcda:	217a      	movs	r1, #122	; 0x7a
 800bcdc:	2000      	movs	r0, #0
 800bcde:	f7fe f8d9 	bl	8009e94 <TFT9341_FillRect>
		TFT9341_FillRect(0, 122, 5, 179, COLOR_WHITE);//levy
 800bce2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bce6:	9300      	str	r3, [sp, #0]
 800bce8:	23b3      	movs	r3, #179	; 0xb3
 800bcea:	2205      	movs	r2, #5
 800bcec:	217a      	movs	r1, #122	; 0x7a
 800bcee:	2000      	movs	r0, #0
 800bcf0:	f7fe f8d0 	bl	8009e94 <TFT9341_FillRect>
		TFT9341_FillRect(154, 122, 159, 179, COLOR_WHITE);//pravy
 800bcf4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bcf8:	9300      	str	r3, [sp, #0]
 800bcfa:	23b3      	movs	r3, #179	; 0xb3
 800bcfc:	229f      	movs	r2, #159	; 0x9f
 800bcfe:	217a      	movs	r1, #122	; 0x7a
 800bd00:	209a      	movs	r0, #154	; 0x9a
 800bd02:	f7fe f8c7 	bl	8009e94 <TFT9341_FillRect>
		TFT9341_FillRect(0, 174, 159, 179, COLOR_WHITE);//spodni
 800bd06:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bd0a:	9300      	str	r3, [sp, #0]
 800bd0c:	23b3      	movs	r3, #179	; 0xb3
 800bd0e:	229f      	movs	r2, #159	; 0x9f
 800bd10:	21ae      	movs	r1, #174	; 0xae
 800bd12:	2000      	movs	r0, #0
 800bd14:	f7fe f8be 	bl	8009e94 <TFT9341_FillRect>
		//reproduktor
		TFT9341_FillRect(162, 122, 319, 127, COLOR_WHITE);//horni
 800bd18:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bd1c:	9300      	str	r3, [sp, #0]
 800bd1e:	237f      	movs	r3, #127	; 0x7f
 800bd20:	f240 123f 	movw	r2, #319	; 0x13f
 800bd24:	217a      	movs	r1, #122	; 0x7a
 800bd26:	20a2      	movs	r0, #162	; 0xa2
 800bd28:	f7fe f8b4 	bl	8009e94 <TFT9341_FillRect>
		TFT9341_FillRect(162, 122, 167, 179, COLOR_WHITE);//levy
 800bd2c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bd30:	9300      	str	r3, [sp, #0]
 800bd32:	23b3      	movs	r3, #179	; 0xb3
 800bd34:	22a7      	movs	r2, #167	; 0xa7
 800bd36:	217a      	movs	r1, #122	; 0x7a
 800bd38:	20a2      	movs	r0, #162	; 0xa2
 800bd3a:	f7fe f8ab 	bl	8009e94 <TFT9341_FillRect>
		TFT9341_FillRect(314, 122, 319, 179, COLOR_WHITE);//pravy
 800bd3e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bd42:	9300      	str	r3, [sp, #0]
 800bd44:	23b3      	movs	r3, #179	; 0xb3
 800bd46:	f240 123f 	movw	r2, #319	; 0x13f
 800bd4a:	217a      	movs	r1, #122	; 0x7a
 800bd4c:	f44f 709d 	mov.w	r0, #314	; 0x13a
 800bd50:	f7fe f8a0 	bl	8009e94 <TFT9341_FillRect>
		TFT9341_FillRect(162, 174, 319, 179, COLOR_WHITE);//spodni
 800bd54:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bd58:	9300      	str	r3, [sp, #0]
 800bd5a:	23b3      	movs	r3, #179	; 0xb3
 800bd5c:	f240 123f 	movw	r2, #319	; 0x13f
 800bd60:	21ae      	movs	r1, #174	; 0xae
 800bd62:	20a2      	movs	r0, #162	; 0xa2
 800bd64:	f7fe f896 	bl	8009e94 <TFT9341_FillRect>
		//led diody
		TFT9341_FillRect(0, 182, 159, 187, COLOR_WHITE);//horni
 800bd68:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bd6c:	9300      	str	r3, [sp, #0]
 800bd6e:	23bb      	movs	r3, #187	; 0xbb
 800bd70:	229f      	movs	r2, #159	; 0x9f
 800bd72:	21b6      	movs	r1, #182	; 0xb6
 800bd74:	2000      	movs	r0, #0
 800bd76:	f7fe f88d 	bl	8009e94 <TFT9341_FillRect>
		TFT9341_FillRect(0, 182, 5, 239, COLOR_WHITE);//levy
 800bd7a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bd7e:	9300      	str	r3, [sp, #0]
 800bd80:	23ef      	movs	r3, #239	; 0xef
 800bd82:	2205      	movs	r2, #5
 800bd84:	21b6      	movs	r1, #182	; 0xb6
 800bd86:	2000      	movs	r0, #0
 800bd88:	f7fe f884 	bl	8009e94 <TFT9341_FillRect>
		TFT9341_FillRect(154, 182, 159, 239, COLOR_WHITE);//pravy
 800bd8c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bd90:	9300      	str	r3, [sp, #0]
 800bd92:	23ef      	movs	r3, #239	; 0xef
 800bd94:	229f      	movs	r2, #159	; 0x9f
 800bd96:	21b6      	movs	r1, #182	; 0xb6
 800bd98:	209a      	movs	r0, #154	; 0x9a
 800bd9a:	f7fe f87b 	bl	8009e94 <TFT9341_FillRect>
		TFT9341_FillRect(0, 234, 159, 239, COLOR_WHITE);//spodni
 800bd9e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bda2:	9300      	str	r3, [sp, #0]
 800bda4:	23ef      	movs	r3, #239	; 0xef
 800bda6:	229f      	movs	r2, #159	; 0x9f
 800bda8:	21ea      	movs	r1, #234	; 0xea
 800bdaa:	2000      	movs	r0, #0
 800bdac:	f7fe f872 	bl	8009e94 <TFT9341_FillRect>
		break;
 800bdb0:	bf00      	nop
	}
}
 800bdb2:	bf00      	nop
 800bdb4:	3708      	adds	r7, #8
 800bdb6:	46bd      	mov	sp, r7
 800bdb8:	bd80      	pop	{r7, pc}
 800bdba:	bf00      	nop

0800bdbc <set_rgb>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
//metoda pro nastaveni RGB ledky
void set_rgb (uint8_t red, uint8_t green, uint8_t blue) //0 je nejvetsi intenzita
{
 800bdbc:	b480      	push	{r7}
 800bdbe:	b083      	sub	sp, #12
 800bdc0:	af00      	add	r7, sp, #0
 800bdc2:	4603      	mov	r3, r0
 800bdc4:	71fb      	strb	r3, [r7, #7]
 800bdc6:	460b      	mov	r3, r1
 800bdc8:	71bb      	strb	r3, [r7, #6]
 800bdca:	4613      	mov	r3, r2
 800bdcc:	717b      	strb	r3, [r7, #5]
	htim1.Instance->CCR1 = green;
 800bdce:	4b09      	ldr	r3, [pc, #36]	; (800bdf4 <set_rgb+0x38>)
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	79ba      	ldrb	r2, [r7, #6]
 800bdd4:	635a      	str	r2, [r3, #52]	; 0x34
	htim1.Instance->CCR2 = red;
 800bdd6:	4b07      	ldr	r3, [pc, #28]	; (800bdf4 <set_rgb+0x38>)
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	79fa      	ldrb	r2, [r7, #7]
 800bddc:	639a      	str	r2, [r3, #56]	; 0x38
	htim1.Instance->CCR3 = blue;
 800bdde:	4b05      	ldr	r3, [pc, #20]	; (800bdf4 <set_rgb+0x38>)
 800bde0:	681b      	ldr	r3, [r3, #0]
 800bde2:	797a      	ldrb	r2, [r7, #5]
 800bde4:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800bde6:	bf00      	nop
 800bde8:	370c      	adds	r7, #12
 800bdea:	46bd      	mov	sp, r7
 800bdec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdf0:	4770      	bx	lr
 800bdf2:	bf00      	nop
 800bdf4:	20010790 	.word	0x20010790

0800bdf8 <StavSwitch>:
//metoda volana pri zmene stavu menu
void StavSwitch(void)
{
 800bdf8:	b580      	push	{r7, lr}
 800bdfa:	af00      	add	r7, sp, #0
	  LCD1602_clear();
 800bdfc:	f001 fe36 	bl	800da6c <LCD1602_clear>
	  HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 800be00:	2100      	movs	r1, #0
 800be02:	4819      	ldr	r0, [pc, #100]	; (800be68 <StavSwitch+0x70>)
 800be04:	f7fa fedc 	bl	8006bc0 <HAL_TIM_PWM_Stop>
	  HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 800be08:	2104      	movs	r1, #4
 800be0a:	4817      	ldr	r0, [pc, #92]	; (800be68 <StavSwitch+0x70>)
 800be0c:	f7fa fed8 	bl	8006bc0 <HAL_TIM_PWM_Stop>
	  HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 800be10:	2108      	movs	r1, #8
 800be12:	4815      	ldr	r0, [pc, #84]	; (800be68 <StavSwitch+0x70>)
 800be14:	f7fa fed4 	bl	8006bc0 <HAL_TIM_PWM_Stop>
	  HAL_TIM_Encoder_Stop_IT(&htim3, TIM_CHANNEL_1);
 800be18:	2100      	movs	r1, #0
 800be1a:	4814      	ldr	r0, [pc, #80]	; (800be6c <StavSwitch+0x74>)
 800be1c:	f7fb f828 	bl	8006e70 <HAL_TIM_Encoder_Stop_IT>
	  HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_1);
 800be20:	2100      	movs	r1, #0
 800be22:	4813      	ldr	r0, [pc, #76]	; (800be70 <StavSwitch+0x78>)
 800be24:	f7fa fecc 	bl	8006bc0 <HAL_TIM_PWM_Stop>
	  HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 800be28:	2100      	movs	r1, #0
 800be2a:	4812      	ldr	r0, [pc, #72]	; (800be74 <StavSwitch+0x7c>)
 800be2c:	f7fa fec8 	bl	8006bc0 <HAL_TIM_PWM_Stop>
	  HAL_TIM_Base_Stop_IT(&htim4);
 800be30:	4811      	ldr	r0, [pc, #68]	; (800be78 <StavSwitch+0x80>)
 800be32:	f7fa fe0d 	bl	8006a50 <HAL_TIM_Base_Stop_IT>
	  HAL_TIM_Base_Stop_IT(&htim5);
 800be36:	4811      	ldr	r0, [pc, #68]	; (800be7c <StavSwitch+0x84>)
 800be38:	f7fa fe0a 	bl	8006a50 <HAL_TIM_Base_Stop_IT>
	  HAL_TIM_Base_Stop_IT(&htim6);
 800be3c:	4810      	ldr	r0, [pc, #64]	; (800be80 <StavSwitch+0x88>)
 800be3e:	f7fa fe07 	bl	8006a50 <HAL_TIM_Base_Stop_IT>
	  HAL_GPIO_WritePin(OUT_LED2_GPIO_Port, OUT_LED2_Pin, RESET);
 800be42:	2200      	movs	r2, #0
 800be44:	f44f 7180 	mov.w	r1, #256	; 0x100
 800be48:	480e      	ldr	r0, [pc, #56]	; (800be84 <StavSwitch+0x8c>)
 800be4a:	f7f7 fc01 	bl	8003650 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUT_LED1_GPIO_Port, OUT_LED1_Pin, RESET);
 800be4e:	2200      	movs	r2, #0
 800be50:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800be54:	480b      	ldr	r0, [pc, #44]	; (800be84 <StavSwitch+0x8c>)
 800be56:	f7f7 fbfb 	bl	8003650 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUT_LED3_GPIO_Port, OUT_LED3_Pin, RESET);
 800be5a:	2200      	movs	r2, #0
 800be5c:	2180      	movs	r1, #128	; 0x80
 800be5e:	4809      	ldr	r0, [pc, #36]	; (800be84 <StavSwitch+0x8c>)
 800be60:	f7f7 fbf6 	bl	8003650 <HAL_GPIO_WritePin>
}
 800be64:	bf00      	nop
 800be66:	bd80      	pop	{r7, pc}
 800be68:	20010790 	.word	0x20010790
 800be6c:	2001052c 	.word	0x2001052c
 800be70:	20010384 	.word	0x20010384
 800be74:	2001084c 	.word	0x2001084c
 800be78:	200103c4 	.word	0x200103c4
 800be7c:	200104ec 	.word	0x200104ec
 800be80:	20010750 	.word	0x20010750
 800be84:	48001000 	.word	0x48001000

0800be88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800be88:	b590      	push	{r4, r7, lr}
 800be8a:	b08d      	sub	sp, #52	; 0x34
 800be8c:	af06      	add	r7, sp, #24
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800be8e:	f7f5 f8c5 	bl	800101c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800be92:	f000 fad5 	bl	800c440 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800be96:	f001 f83f 	bl	800cf18 <MX_GPIO_Init>
  MX_DMA_Init();
 800be9a:	f001 f80b 	bl	800ceb4 <MX_DMA_Init>
  MX_SPI1_Init();
 800be9e:	f000 fc2d 	bl	800c6fc <MX_SPI1_Init>
  MX_SPI3_Init();
 800bea2:	f000 fc69 	bl	800c778 <MX_SPI3_Init>
  MX_TIM3_Init();
 800bea6:	f000 fddf 	bl	800ca68 <MX_TIM3_Init>
  MX_ADC1_Init();
 800beaa:	f000 fb5b 	bl	800c564 <MX_ADC1_Init>
  MX_USART3_UART_Init();
 800beae:	f000 ffb5 	bl	800ce1c <MX_USART3_UART_Init>
  MX_I2C1_Init();
 800beb2:	f000 fbcd 	bl	800c650 <MX_I2C1_Init>
  MX_RNG_Init();
 800beb6:	f000 fc0b 	bl	800c6d0 <MX_RNG_Init>
  MX_TIM1_Init();
 800beba:	f000 fc9b 	bl	800c7f4 <MX_TIM1_Init>
  MX_TIM2_Init();
 800bebe:	f000 fd5d 	bl	800c97c <MX_TIM2_Init>
  MX_TIM8_Init();
 800bec2:	f000 fefd 	bl	800ccc0 <MX_TIM8_Init>
  MX_TIM4_Init();
 800bec6:	f000 fe23 	bl	800cb10 <MX_TIM4_Init>
  MX_TIM5_Init();
 800beca:	f000 fe71 	bl	800cbb0 <MX_TIM5_Init>
  MX_TIM6_Init();
 800bece:	f000 febf 	bl	800cc50 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  //nastaveni promenne myKeypadStruct pro klavesnici 4x4
  myKeypadStruct.OUT0_Port = OUT_MK1_GPIO_Port;
 800bed2:	4bb7      	ldr	r3, [pc, #732]	; (800c1b0 <main+0x328>)
 800bed4:	4ab7      	ldr	r2, [pc, #732]	; (800c1b4 <main+0x32c>)
 800bed6:	611a      	str	r2, [r3, #16]
  myKeypadStruct.OUT1_Port = OUT_MK2_GPIO_Port;
 800bed8:	4bb5      	ldr	r3, [pc, #724]	; (800c1b0 <main+0x328>)
 800beda:	4ab6      	ldr	r2, [pc, #728]	; (800c1b4 <main+0x32c>)
 800bedc:	615a      	str	r2, [r3, #20]
  myKeypadStruct.OUT2_Port = OUT_MK3_GPIO_Port;
 800bede:	4bb4      	ldr	r3, [pc, #720]	; (800c1b0 <main+0x328>)
 800bee0:	4ab5      	ldr	r2, [pc, #724]	; (800c1b8 <main+0x330>)
 800bee2:	619a      	str	r2, [r3, #24]
  myKeypadStruct.OUT3_Port = OUT_MK4_GPIO_Port;
 800bee4:	4bb2      	ldr	r3, [pc, #712]	; (800c1b0 <main+0x328>)
 800bee6:	4ab4      	ldr	r2, [pc, #720]	; (800c1b8 <main+0x330>)
 800bee8:	61da      	str	r2, [r3, #28]
  myKeypadStruct.OUT0pin=OUT_MK1_Pin;
 800beea:	4bb1      	ldr	r3, [pc, #708]	; (800c1b0 <main+0x328>)
 800beec:	2201      	movs	r2, #1
 800beee:	851a      	strh	r2, [r3, #40]	; 0x28
  myKeypadStruct.OUT1pin=OUT_MK2_Pin;
 800bef0:	4baf      	ldr	r3, [pc, #700]	; (800c1b0 <main+0x328>)
 800bef2:	2202      	movs	r2, #2
 800bef4:	855a      	strh	r2, [r3, #42]	; 0x2a
  myKeypadStruct.OUT2pin=OUT_MK3_Pin;
 800bef6:	4bae      	ldr	r3, [pc, #696]	; (800c1b0 <main+0x328>)
 800bef8:	2280      	movs	r2, #128	; 0x80
 800befa:	859a      	strh	r2, [r3, #44]	; 0x2c
  myKeypadStruct.OUT3pin=OUT_MK4_Pin;
 800befc:	4bac      	ldr	r3, [pc, #688]	; (800c1b0 <main+0x328>)
 800befe:	f44f 7280 	mov.w	r2, #256	; 0x100
 800bf02:	85da      	strh	r2, [r3, #46]	; 0x2e
  myKeypadStruct.IN0_Port = IN_MK5_GPIO_Port;
 800bf04:	4baa      	ldr	r3, [pc, #680]	; (800c1b0 <main+0x328>)
 800bf06:	4aad      	ldr	r2, [pc, #692]	; (800c1bc <main+0x334>)
 800bf08:	601a      	str	r2, [r3, #0]
  myKeypadStruct.IN1_Port = IN_MK6_GPIO_Port;
 800bf0a:	4ba9      	ldr	r3, [pc, #676]	; (800c1b0 <main+0x328>)
 800bf0c:	4aac      	ldr	r2, [pc, #688]	; (800c1c0 <main+0x338>)
 800bf0e:	605a      	str	r2, [r3, #4]
  myKeypadStruct.IN2_Port = IN_MK7_GPIO_Port;
 800bf10:	4ba7      	ldr	r3, [pc, #668]	; (800c1b0 <main+0x328>)
 800bf12:	4aaa      	ldr	r2, [pc, #680]	; (800c1bc <main+0x334>)
 800bf14:	609a      	str	r2, [r3, #8]
  myKeypadStruct.IN3_Port = IN_MK8_GPIO_Port;
 800bf16:	4ba6      	ldr	r3, [pc, #664]	; (800c1b0 <main+0x328>)
 800bf18:	4aa8      	ldr	r2, [pc, #672]	; (800c1bc <main+0x334>)
 800bf1a:	60da      	str	r2, [r3, #12]
  myKeypadStruct.IN0pin=IN_MK5_Pin;
 800bf1c:	4ba4      	ldr	r3, [pc, #656]	; (800c1b0 <main+0x328>)
 800bf1e:	2201      	movs	r2, #1
 800bf20:	841a      	strh	r2, [r3, #32]
  myKeypadStruct.IN1pin=IN_MK6_Pin;
 800bf22:	4ba3      	ldr	r3, [pc, #652]	; (800c1b0 <main+0x328>)
 800bf24:	2201      	movs	r2, #1
 800bf26:	845a      	strh	r2, [r3, #34]	; 0x22
  myKeypadStruct.IN2pin=IN_MK7_Pin;
 800bf28:	4ba1      	ldr	r3, [pc, #644]	; (800c1b0 <main+0x328>)
 800bf2a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800bf2e:	849a      	strh	r2, [r3, #36]	; 0x24
  myKeypadStruct.IN3pin=IN_MK8_Pin;
 800bf30:	4b9f      	ldr	r3, [pc, #636]	; (800c1b0 <main+0x328>)
 800bf32:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800bf36:	84da      	strh	r2, [r3, #38]	; 0x26
  //inicializace vsech periferií
  Keypad4x4_Init(&myKeypadStruct);//klavesnice 4x4
 800bf38:	489d      	ldr	r0, [pc, #628]	; (800c1b0 <main+0x328>)
 800bf3a:	f001 ff0b 	bl	800dd54 <Keypad4x4_Init>
  HAL_GPIO_WritePin(LCD_RW_GPIO_Port, LCD_RW_Pin, RESET);
 800bf3e:	2200      	movs	r2, #0
 800bf40:	2104      	movs	r1, #4
 800bf42:	489f      	ldr	r0, [pc, #636]	; (800c1c0 <main+0x338>)
 800bf44:	f7f7 fb84 	bl	8003650 <HAL_GPIO_WritePin>
  LCD1602_Begin4BIT(LCD_RS_GPIO_Port,LCD_RS_Pin,LCD_E_GPIO_Port,LCD_E_Pin,LCD_D4_GPIO_Port,LCD_D4_Pin,LCD_D5_Pin,LCD_D6_Pin,LCD_D7_Pin); //LCD dvouradkovy displej
 800bf48:	2380      	movs	r3, #128	; 0x80
 800bf4a:	9304      	str	r3, [sp, #16]
 800bf4c:	2340      	movs	r3, #64	; 0x40
 800bf4e:	9303      	str	r3, [sp, #12]
 800bf50:	2320      	movs	r3, #32
 800bf52:	9302      	str	r3, [sp, #8]
 800bf54:	2310      	movs	r3, #16
 800bf56:	9301      	str	r3, [sp, #4]
 800bf58:	4b9a      	ldr	r3, [pc, #616]	; (800c1c4 <main+0x33c>)
 800bf5a:	9300      	str	r3, [sp, #0]
 800bf5c:	2320      	movs	r3, #32
 800bf5e:	4a98      	ldr	r2, [pc, #608]	; (800c1c0 <main+0x338>)
 800bf60:	2108      	movs	r1, #8
 800bf62:	4898      	ldr	r0, [pc, #608]	; (800c1c4 <main+0x33c>)
 800bf64:	f001 fcaa 	bl	800d8bc <LCD1602_Begin4BIT>
  LCD1602_noCursor();
 800bf68:	f001 fd6e 	bl	800da48 <LCD1602_noCursor>
  LCD1602_noBlink();
 800bf6c:	f001 fd88 	bl	800da80 <LCD1602_noBlink>
  SHT20_Init(&hi2c1);//SHT20 environmentalni cidlo
 800bf70:	4895      	ldr	r0, [pc, #596]	; (800c1c8 <main+0x340>)
 800bf72:	f001 fd97 	bl	800daa4 <SHT20_Init>
  TFT9341_Init(TFT_CS_GPIO_Port, TFT_CS_Pin, TFT_DC_GPIO_Port, TFT_DC_Pin, TFT_RESET_GPIO_Port, TFT_RESET_Pin); //TFT displej
 800bf76:	2320      	movs	r3, #32
 800bf78:	9301      	str	r3, [sp, #4]
 800bf7a:	4b8f      	ldr	r3, [pc, #572]	; (800c1b8 <main+0x330>)
 800bf7c:	9300      	str	r3, [sp, #0]
 800bf7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bf82:	4a8e      	ldr	r2, [pc, #568]	; (800c1bc <main+0x334>)
 800bf84:	2110      	movs	r1, #16
 800bf86:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800bf8a:	f7fd fd57 	bl	8009a3c <TFT9341_Init>
  TFT9341_SetRotation(4);
 800bf8e:	2004      	movs	r0, #4
 800bf90:	f7fe f912 	bl	800a1b8 <TFT9341_SetRotation>
  GUI_page_main();
 800bf94:	f7fe fd4a 	bl	800aa2c <GUI_page_main>
  XPT2046_Init(&hspi1, TP_CS_GPIO_Port, TP_CS_Pin, TP_IRQ_GPIO_Port, TP_IRQ_Pin); //touch screen
 800bf98:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800bf9c:	9300      	str	r3, [sp, #0]
 800bf9e:	4b87      	ldr	r3, [pc, #540]	; (800c1bc <main+0x334>)
 800bfa0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800bfa4:	4986      	ldr	r1, [pc, #536]	; (800c1c0 <main+0x338>)
 800bfa6:	4889      	ldr	r0, [pc, #548]	; (800c1cc <main+0x344>)
 800bfa8:	f7fe fb22 	bl	800a5f0 <XPT2046_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //pokud bylo vyvoláno přerušení dotykem obrazovky
	  if(IRQ_flag==true)
 800bfac:	4b88      	ldr	r3, [pc, #544]	; (800c1d0 <main+0x348>)
 800bfae:	781b      	ldrb	r3, [r3, #0]
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	d004      	beq.n	800bfbe <main+0x136>
	  {
		  StavSwitch();
 800bfb4:	f7ff ff20 	bl	800bdf8 <StavSwitch>
		  IRQ_flag=false;
 800bfb8:	4b85      	ldr	r3, [pc, #532]	; (800c1d0 <main+0x348>)
 800bfba:	2200      	movs	r2, #0
 800bfbc:	701a      	strb	r2, [r3, #0]
	  }
	  switch(TFTstav)
 800bfbe:	4b85      	ldr	r3, [pc, #532]	; (800c1d4 <main+0x34c>)
 800bfc0:	781b      	ldrb	r3, [r3, #0]
 800bfc2:	3b01      	subs	r3, #1
 800bfc4:	2b07      	cmp	r3, #7
 800bfc6:	d8f1      	bhi.n	800bfac <main+0x124>
 800bfc8:	a201      	add	r2, pc, #4	; (adr r2, 800bfd0 <main+0x148>)
 800bfca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bfce:	bf00      	nop
 800bfd0:	0800bfad 	.word	0x0800bfad
 800bfd4:	0800bff1 	.word	0x0800bff1
 800bfd8:	0800c131 	.word	0x0800c131
 800bfdc:	0800c18b 	.word	0x0800c18b
 800bfe0:	0800c289 	.word	0x0800c289
 800bfe4:	0800c321 	.word	0x0800c321
 800bfe8:	0800c3a1 	.word	0x0800c3a1
 800bfec:	0800c3c1 	.word	0x0800c3c1
	  {
	  	  	case 1://malovani
	  	  		break;
			case 2: //encoder zmena rgb plus hodnota na displej a potak na displej
				HAL_TIM_PWM_Start (&htim1, TIM_CHANNEL_1);
 800bff0:	2100      	movs	r1, #0
 800bff2:	4879      	ldr	r0, [pc, #484]	; (800c1d8 <main+0x350>)
 800bff4:	f7fa fd8c 	bl	8006b10 <HAL_TIM_PWM_Start>
				HAL_TIM_PWM_Start (&htim1, TIM_CHANNEL_2);
 800bff8:	2104      	movs	r1, #4
 800bffa:	4877      	ldr	r0, [pc, #476]	; (800c1d8 <main+0x350>)
 800bffc:	f7fa fd88 	bl	8006b10 <HAL_TIM_PWM_Start>
				HAL_TIM_PWM_Start (&htim1, TIM_CHANNEL_3);
 800c000:	2108      	movs	r1, #8
 800c002:	4875      	ldr	r0, [pc, #468]	; (800c1d8 <main+0x350>)
 800c004:	f7fa fd84 	bl	8006b10 <HAL_TIM_PWM_Start>
				HAL_TIM_Encoder_Start_IT(&htim3, TIM_CHANNEL_1);
 800c008:	2100      	movs	r1, #0
 800c00a:	4874      	ldr	r0, [pc, #464]	; (800c1dc <main+0x354>)
 800c00c:	f7fa fed8 	bl	8006dc0 <HAL_TIM_Encoder_Start_IT>
				RGBcounter=TIM3->CNT;
 800c010:	4b73      	ldr	r3, [pc, #460]	; (800c1e0 <main+0x358>)
 800c012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c014:	b2da      	uxtb	r2, r3
 800c016:	4b73      	ldr	r3, [pc, #460]	; (800c1e4 <main+0x35c>)
 800c018:	701a      	strb	r2, [r3, #0]
				LCD1602_1stLine();
 800c01a:	f001 fd05 	bl	800da28 <LCD1602_1stLine>
				sprintf(strENC,"Encoder:%3d",RGBcounter);
 800c01e:	4b71      	ldr	r3, [pc, #452]	; (800c1e4 <main+0x35c>)
 800c020:	781b      	ldrb	r3, [r3, #0]
 800c022:	461a      	mov	r2, r3
 800c024:	4970      	ldr	r1, [pc, #448]	; (800c1e8 <main+0x360>)
 800c026:	4871      	ldr	r0, [pc, #452]	; (800c1ec <main+0x364>)
 800c028:	f003 fc8a 	bl	800f940 <siprintf>
				LCD1602_print(strENC);
 800c02c:	486f      	ldr	r0, [pc, #444]	; (800c1ec <main+0x364>)
 800c02e:	f001 fcb7 	bl	800d9a0 <LCD1602_print>
				RGBcounter=RGBcounter%6;
 800c032:	4b6c      	ldr	r3, [pc, #432]	; (800c1e4 <main+0x35c>)
 800c034:	781a      	ldrb	r2, [r3, #0]
 800c036:	4b6e      	ldr	r3, [pc, #440]	; (800c1f0 <main+0x368>)
 800c038:	fba3 1302 	umull	r1, r3, r3, r2
 800c03c:	0899      	lsrs	r1, r3, #2
 800c03e:	460b      	mov	r3, r1
 800c040:	005b      	lsls	r3, r3, #1
 800c042:	440b      	add	r3, r1
 800c044:	005b      	lsls	r3, r3, #1
 800c046:	1ad3      	subs	r3, r2, r3
 800c048:	b2da      	uxtb	r2, r3
 800c04a:	4b66      	ldr	r3, [pc, #408]	; (800c1e4 <main+0x35c>)
 800c04c:	701a      	strb	r2, [r3, #0]
				switch(RGBcounter)
 800c04e:	4b65      	ldr	r3, [pc, #404]	; (800c1e4 <main+0x35c>)
 800c050:	781b      	ldrb	r3, [r3, #0]
 800c052:	2b05      	cmp	r3, #5
 800c054:	d832      	bhi.n	800c0bc <main+0x234>
 800c056:	a201      	add	r2, pc, #4	; (adr r2, 800c05c <main+0x1d4>)
 800c058:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c05c:	0800c075 	.word	0x0800c075
 800c060:	0800c081 	.word	0x0800c081
 800c064:	0800c08d 	.word	0x0800c08d
 800c068:	0800c099 	.word	0x0800c099
 800c06c:	0800c0a5 	.word	0x0800c0a5
 800c070:	0800c0b1 	.word	0x0800c0b1
				{
						case 0: //red
							set_rgb (0,255,255);
 800c074:	22ff      	movs	r2, #255	; 0xff
 800c076:	21ff      	movs	r1, #255	; 0xff
 800c078:	2000      	movs	r0, #0
 800c07a:	f7ff fe9f 	bl	800bdbc <set_rgb>
							break;
 800c07e:	e01d      	b.n	800c0bc <main+0x234>
						case 1: //green
							set_rgb (255,0,255);
 800c080:	22ff      	movs	r2, #255	; 0xff
 800c082:	2100      	movs	r1, #0
 800c084:	20ff      	movs	r0, #255	; 0xff
 800c086:	f7ff fe99 	bl	800bdbc <set_rgb>
							break;
 800c08a:	e017      	b.n	800c0bc <main+0x234>
						case 2: //blue
							set_rgb (255,255,0);
 800c08c:	2200      	movs	r2, #0
 800c08e:	21ff      	movs	r1, #255	; 0xff
 800c090:	20ff      	movs	r0, #255	; 0xff
 800c092:	f7ff fe93 	bl	800bdbc <set_rgb>
							break;
 800c096:	e011      	b.n	800c0bc <main+0x234>
						case 3: //yellow
							set_rgb (0,0,255);
 800c098:	22ff      	movs	r2, #255	; 0xff
 800c09a:	2100      	movs	r1, #0
 800c09c:	2000      	movs	r0, #0
 800c09e:	f7ff fe8d 	bl	800bdbc <set_rgb>
							break;
 800c0a2:	e00b      	b.n	800c0bc <main+0x234>
						case 4: //Cyan
							set_rgb (255,0,0);
 800c0a4:	2200      	movs	r2, #0
 800c0a6:	2100      	movs	r1, #0
 800c0a8:	20ff      	movs	r0, #255	; 0xff
 800c0aa:	f7ff fe87 	bl	800bdbc <set_rgb>
							break;
 800c0ae:	e005      	b.n	800c0bc <main+0x234>
						case 5: //Magenta
							set_rgb (0,255,0);
 800c0b0:	2200      	movs	r2, #0
 800c0b2:	21ff      	movs	r1, #255	; 0xff
 800c0b4:	2000      	movs	r0, #0
 800c0b6:	f7ff fe81 	bl	800bdbc <set_rgb>
							break;
 800c0ba:	bf00      	nop
				  }
				  HAL_ADC_Start(&hadc1);
 800c0bc:	484d      	ldr	r0, [pc, #308]	; (800c1f4 <main+0x36c>)
 800c0be:	f7f5 fbb7 	bl	8001830 <HAL_ADC_Start>
			      HAL_ADC_PollForConversion(&hadc1,100);
 800c0c2:	2164      	movs	r1, #100	; 0x64
 800c0c4:	484b      	ldr	r0, [pc, #300]	; (800c1f4 <main+0x36c>)
 800c0c6:	f7f5 fc49 	bl	800195c <HAL_ADC_PollForConversion>
			      POTvalue = ceil(((float)HAL_ADC_GetValue(&hadc1))/40.3);
 800c0ca:	484a      	ldr	r0, [pc, #296]	; (800c1f4 <main+0x36c>)
 800c0cc:	f7f5 fdb3 	bl	8001c36 <HAL_ADC_GetValue>
 800c0d0:	ee07 0a90 	vmov	s15, r0
 800c0d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c0d8:	ee17 0a90 	vmov	r0, s15
 800c0dc:	f7f4 fa4c 	bl	8000578 <__aeabi_f2d>
 800c0e0:	a331      	add	r3, pc, #196	; (adr r3, 800c1a8 <main+0x320>)
 800c0e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0e6:	f7f4 fbc9 	bl	800087c <__aeabi_ddiv>
 800c0ea:	4602      	mov	r2, r0
 800c0ec:	460b      	mov	r3, r1
 800c0ee:	ec43 2b17 	vmov	d7, r2, r3
 800c0f2:	eeb0 0a47 	vmov.f32	s0, s14
 800c0f6:	eef0 0a67 	vmov.f32	s1, s15
 800c0fa:	f007 f9b9 	bl	8013470 <ceil>
 800c0fe:	ec53 2b10 	vmov	r2, r3, d0
 800c102:	4610      	mov	r0, r2
 800c104:	4619      	mov	r1, r3
 800c106:	f7f4 fd67 	bl	8000bd8 <__aeabi_d2uiz>
 800c10a:	4603      	mov	r3, r0
 800c10c:	4a3a      	ldr	r2, [pc, #232]	; (800c1f8 <main+0x370>)
 800c10e:	6013      	str	r3, [r2, #0]
			      HAL_ADC_Stop (&hadc1);
 800c110:	4838      	ldr	r0, [pc, #224]	; (800c1f4 <main+0x36c>)
 800c112:	f7f5 fbf0 	bl	80018f6 <HAL_ADC_Stop>
			      LCD1602_2ndLine();
 800c116:	f001 fc8f 	bl	800da38 <LCD1602_2ndLine>
			      sprintf(strPOT,"Potak:%3d", POTvalue);
 800c11a:	4b37      	ldr	r3, [pc, #220]	; (800c1f8 <main+0x370>)
 800c11c:	681b      	ldr	r3, [r3, #0]
 800c11e:	461a      	mov	r2, r3
 800c120:	4936      	ldr	r1, [pc, #216]	; (800c1fc <main+0x374>)
 800c122:	4837      	ldr	r0, [pc, #220]	; (800c200 <main+0x378>)
 800c124:	f003 fc0c 	bl	800f940 <siprintf>
			      LCD1602_print(strPOT);
 800c128:	4835      	ldr	r0, [pc, #212]	; (800c200 <main+0x378>)
 800c12a:	f001 fc39 	bl	800d9a0 <LCD1602_print>

				break;
 800c12e:	e164      	b.n	800c3fa <main+0x572>
			case 3: //teplota a vlhkost
				SHT20_GetValue();
 800c130:	f001 fdf0 	bl	800dd14 <SHT20_GetValue>
				LCD1602_1stLine();
 800c134:	f001 fc78 	bl	800da28 <LCD1602_1stLine>
				sprintf(str,"Teplota:%.*f",2,sht20_info.tempreture);
 800c138:	4b32      	ldr	r3, [pc, #200]	; (800c204 <main+0x37c>)
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	4618      	mov	r0, r3
 800c13e:	f7f4 fa1b 	bl	8000578 <__aeabi_f2d>
 800c142:	4602      	mov	r2, r0
 800c144:	460b      	mov	r3, r1
 800c146:	e9cd 2300 	strd	r2, r3, [sp]
 800c14a:	2202      	movs	r2, #2
 800c14c:	492e      	ldr	r1, [pc, #184]	; (800c208 <main+0x380>)
 800c14e:	482f      	ldr	r0, [pc, #188]	; (800c20c <main+0x384>)
 800c150:	f003 fbf6 	bl	800f940 <siprintf>
				LCD1602_print(str);
 800c154:	482d      	ldr	r0, [pc, #180]	; (800c20c <main+0x384>)
 800c156:	f001 fc23 	bl	800d9a0 <LCD1602_print>
				LCD1602_2ndLine();
 800c15a:	f001 fc6d 	bl	800da38 <LCD1602_2ndLine>
				sprintf(str2,"Vlhkost:%.*f",2, sht20_info.humidity);
 800c15e:	4b29      	ldr	r3, [pc, #164]	; (800c204 <main+0x37c>)
 800c160:	685b      	ldr	r3, [r3, #4]
 800c162:	4618      	mov	r0, r3
 800c164:	f7f4 fa08 	bl	8000578 <__aeabi_f2d>
 800c168:	4602      	mov	r2, r0
 800c16a:	460b      	mov	r3, r1
 800c16c:	e9cd 2300 	strd	r2, r3, [sp]
 800c170:	2202      	movs	r2, #2
 800c172:	4927      	ldr	r1, [pc, #156]	; (800c210 <main+0x388>)
 800c174:	4827      	ldr	r0, [pc, #156]	; (800c214 <main+0x38c>)
 800c176:	f003 fbe3 	bl	800f940 <siprintf>
				LCD1602_print(str2);
 800c17a:	4826      	ldr	r0, [pc, #152]	; (800c214 <main+0x38c>)
 800c17c:	f001 fc10 	bl	800d9a0 <LCD1602_print>
				HAL_Delay(1000);
 800c180:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800c184:	f7f4 ffba 	bl	80010fc <HAL_Delay>
				break;
 800c188:	e137      	b.n	800c3fa <main+0x572>
			case 4://klavesnice
				LCD1602_1stLine();
 800c18a:	f001 fc4d 	bl	800da28 <LCD1602_1stLine>
				LCD1602_print("Stisknuto:");
 800c18e:	4822      	ldr	r0, [pc, #136]	; (800c218 <main+0x390>)
 800c190:	f001 fc06 	bl	800d9a0 <LCD1602_print>
				Keypad4x4_ReadKeypad(mySwitches);
 800c194:	4821      	ldr	r0, [pc, #132]	; (800c21c <main+0x394>)
 800c196:	f001 fead 	bl	800def4 <Keypad4x4_ReadKeypad>
				LCD1602_2ndLine();
 800c19a:	f001 fc4d 	bl	800da38 <LCD1602_2ndLine>
				uint8_t strIndex=0;
 800c19e:	2300      	movs	r3, #0
 800c1a0:	753b      	strb	r3, [r7, #20]
				char data_keys[16];
				for(uint8_t j=0;j<16;j++)
 800c1a2:	2300      	movs	r3, #0
 800c1a4:	75fb      	strb	r3, [r7, #23]
 800c1a6:	e045      	b.n	800c234 <main+0x3ac>
 800c1a8:	66666666 	.word	0x66666666
 800c1ac:	40442666 	.word	0x40442666
 800c1b0:	20010630 	.word	0x20010630
 800c1b4:	48001800 	.word	0x48001800
 800c1b8:	48001400 	.word	0x48001400
 800c1bc:	48000400 	.word	0x48000400
 800c1c0:	48001000 	.word	0x48001000
 800c1c4:	48000c00 	.word	0x48000c00
 800c1c8:	20010490 	.word	0x20010490
 800c1cc:	200107e8 	.word	0x200107e8
 800c1d0:	200102cc 	.word	0x200102cc
 800c1d4:	200102ca 	.word	0x200102ca
 800c1d8:	20010790 	.word	0x20010790
 800c1dc:	2001052c 	.word	0x2001052c
 800c1e0:	40000400 	.word	0x40000400
 800c1e4:	200107d0 	.word	0x200107d0
 800c1e8:	08013618 	.word	0x08013618
 800c1ec:	20010740 	.word	0x20010740
 800c1f0:	aaaaaaab 	.word	0xaaaaaaab
 800c1f4:	20010660 	.word	0x20010660
 800c1f8:	200102d0 	.word	0x200102d0
 800c1fc:	08013624 	.word	0x08013624
 800c200:	200106d0 	.word	0x200106d0
 800c204:	200108ac 	.word	0x200108ac
 800c208:	08013630 	.word	0x08013630
 800c20c:	2001088c 	.word	0x2001088c
 800c210:	08013640 	.word	0x08013640
 800c214:	2001089c 	.word	0x2001089c
 800c218:	08013650 	.word	0x08013650
 800c21c:	200104dc 	.word	0x200104dc
				{
					data_keys[j]=' ';
 800c220:	7dfb      	ldrb	r3, [r7, #23]
 800c222:	f107 0218 	add.w	r2, r7, #24
 800c226:	4413      	add	r3, r2
 800c228:	2220      	movs	r2, #32
 800c22a:	f803 2c14 	strb.w	r2, [r3, #-20]
				for(uint8_t j=0;j<16;j++)
 800c22e:	7dfb      	ldrb	r3, [r7, #23]
 800c230:	3301      	adds	r3, #1
 800c232:	75fb      	strb	r3, [r7, #23]
 800c234:	7dfb      	ldrb	r3, [r7, #23]
 800c236:	2b0f      	cmp	r3, #15
 800c238:	d9f2      	bls.n	800c220 <main+0x398>
				}
				uint8_t k=0;
 800c23a:	2300      	movs	r3, #0
 800c23c:	75bb      	strb	r3, [r7, #22]
				for(uint8_t i=0;i<16;i++)
 800c23e:	2300      	movs	r3, #0
 800c240:	757b      	strb	r3, [r7, #21]
 800c242:	e019      	b.n	800c278 <main+0x3f0>
				{
					if(!mySwitches[i])
 800c244:	7d7b      	ldrb	r3, [r7, #21]
 800c246:	4a70      	ldr	r2, [pc, #448]	; (800c408 <main+0x580>)
 800c248:	5cd3      	ldrb	r3, [r2, r3]
 800c24a:	f083 0301 	eor.w	r3, r3, #1
 800c24e:	b2db      	uxtb	r3, r3
 800c250:	2b00      	cmp	r3, #0
 800c252:	d00e      	beq.n	800c272 <main+0x3ea>
					{
						data_keys[k]=Keypad4x4_GetChar(i);
 800c254:	7dbc      	ldrb	r4, [r7, #22]
 800c256:	7d7b      	ldrb	r3, [r7, #21]
 800c258:	4618      	mov	r0, r3
 800c25a:	f001 ff7f 	bl	800e15c <Keypad4x4_GetChar>
 800c25e:	4603      	mov	r3, r0
 800c260:	461a      	mov	r2, r3
 800c262:	f107 0318 	add.w	r3, r7, #24
 800c266:	4423      	add	r3, r4
 800c268:	f803 2c14 	strb.w	r2, [r3, #-20]
						k++;
 800c26c:	7dbb      	ldrb	r3, [r7, #22]
 800c26e:	3301      	adds	r3, #1
 800c270:	75bb      	strb	r3, [r7, #22]
				for(uint8_t i=0;i<16;i++)
 800c272:	7d7b      	ldrb	r3, [r7, #21]
 800c274:	3301      	adds	r3, #1
 800c276:	757b      	strb	r3, [r7, #21]
 800c278:	7d7b      	ldrb	r3, [r7, #21]
 800c27a:	2b0f      	cmp	r3, #15
 800c27c:	d9e2      	bls.n	800c244 <main+0x3bc>
					}
				}
				LCD1602_print(data_keys);
 800c27e:	1d3b      	adds	r3, r7, #4
 800c280:	4618      	mov	r0, r3
 800c282:	f001 fb8d 	bl	800d9a0 <LCD1602_print>
				break;
 800c286:	e0b8      	b.n	800c3fa <main+0x572>
			case 5://NTC/heater
				HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);   //heater
 800c288:	2100      	movs	r1, #0
 800c28a:	4860      	ldr	r0, [pc, #384]	; (800c40c <main+0x584>)
 800c28c:	f7fa fc40 	bl	8006b10 <HAL_TIM_PWM_Start>
				HAL_ADC_Start_DMA(&hadc1, ADCvalues, 2);
 800c290:	2202      	movs	r2, #2
 800c292:	495f      	ldr	r1, [pc, #380]	; (800c410 <main+0x588>)
 800c294:	485f      	ldr	r0, [pc, #380]	; (800c414 <main+0x58c>)
 800c296:	f7f5 fbe9 	bl	8001a6c <HAL_ADC_Start_DMA>
				LCD1602_1stLine();
 800c29a:	f001 fbc5 	bl	800da28 <LCD1602_1stLine>
				POTvalue=ceil(((float)ADCvalues[0])/40.3);
 800c29e:	4b5c      	ldr	r3, [pc, #368]	; (800c410 <main+0x588>)
 800c2a0:	681b      	ldr	r3, [r3, #0]
 800c2a2:	ee07 3a90 	vmov	s15, r3
 800c2a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c2aa:	ee17 0a90 	vmov	r0, s15
 800c2ae:	f7f4 f963 	bl	8000578 <__aeabi_f2d>
 800c2b2:	a353      	add	r3, pc, #332	; (adr r3, 800c400 <main+0x578>)
 800c2b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2b8:	f7f4 fae0 	bl	800087c <__aeabi_ddiv>
 800c2bc:	4602      	mov	r2, r0
 800c2be:	460b      	mov	r3, r1
 800c2c0:	ec43 2b17 	vmov	d7, r2, r3
 800c2c4:	eeb0 0a47 	vmov.f32	s0, s14
 800c2c8:	eef0 0a67 	vmov.f32	s1, s15
 800c2cc:	f007 f8d0 	bl	8013470 <ceil>
 800c2d0:	ec53 2b10 	vmov	r2, r3, d0
 800c2d4:	4610      	mov	r0, r2
 800c2d6:	4619      	mov	r1, r3
 800c2d8:	f7f4 fc7e 	bl	8000bd8 <__aeabi_d2uiz>
 800c2dc:	4603      	mov	r3, r0
 800c2de:	4a4e      	ldr	r2, [pc, #312]	; (800c418 <main+0x590>)
 800c2e0:	6013      	str	r3, [r2, #0]
				sprintf(str,"HEATER:%3d",POTvalue);
 800c2e2:	4b4d      	ldr	r3, [pc, #308]	; (800c418 <main+0x590>)
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	461a      	mov	r2, r3
 800c2e8:	494c      	ldr	r1, [pc, #304]	; (800c41c <main+0x594>)
 800c2ea:	484d      	ldr	r0, [pc, #308]	; (800c420 <main+0x598>)
 800c2ec:	f003 fb28 	bl	800f940 <siprintf>
				LCD1602_print(str);
 800c2f0:	484b      	ldr	r0, [pc, #300]	; (800c420 <main+0x598>)
 800c2f2:	f001 fb55 	bl	800d9a0 <LCD1602_print>
				LCD1602_2ndLine();
 800c2f6:	f001 fb9f 	bl	800da38 <LCD1602_2ndLine>
				sprintf(str2,"NTC:%3d", ADCvalues[1]);
 800c2fa:	4b45      	ldr	r3, [pc, #276]	; (800c410 <main+0x588>)
 800c2fc:	685b      	ldr	r3, [r3, #4]
 800c2fe:	461a      	mov	r2, r3
 800c300:	4948      	ldr	r1, [pc, #288]	; (800c424 <main+0x59c>)
 800c302:	4849      	ldr	r0, [pc, #292]	; (800c428 <main+0x5a0>)
 800c304:	f003 fb1c 	bl	800f940 <siprintf>
				LCD1602_print(str2);
 800c308:	4847      	ldr	r0, [pc, #284]	; (800c428 <main+0x5a0>)
 800c30a:	f001 fb49 	bl	800d9a0 <LCD1602_print>
				HAL_ADC_Stop_DMA(&hadc1);
 800c30e:	4841      	ldr	r0, [pc, #260]	; (800c414 <main+0x58c>)
 800c310:	f7f5 fc30 	bl	8001b74 <HAL_ADC_Stop_DMA>
				htim8.Instance->CCR1=POTvalue;
 800c314:	4b3d      	ldr	r3, [pc, #244]	; (800c40c <main+0x584>)
 800c316:	681b      	ldr	r3, [r3, #0]
 800c318:	4a3f      	ldr	r2, [pc, #252]	; (800c418 <main+0x590>)
 800c31a:	6812      	ldr	r2, [r2, #0]
 800c31c:	635a      	str	r2, [r3, #52]	; 0x34
				break;
 800c31e:	e06c      	b.n	800c3fa <main+0x572>
			case 6://reproduktor
				HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);   //reproduktor
 800c320:	2100      	movs	r1, #0
 800c322:	4842      	ldr	r0, [pc, #264]	; (800c42c <main+0x5a4>)
 800c324:	f7fa fbf4 	bl	8006b10 <HAL_TIM_PWM_Start>
				HAL_ADC_Start_DMA(&hadc1, ADCvalues, 2);
 800c328:	2202      	movs	r2, #2
 800c32a:	4939      	ldr	r1, [pc, #228]	; (800c410 <main+0x588>)
 800c32c:	4839      	ldr	r0, [pc, #228]	; (800c414 <main+0x58c>)
 800c32e:	f7f5 fb9d 	bl	8001a6c <HAL_ADC_Start_DMA>
				LCD1602_1stLine();
 800c332:	f001 fb79 	bl	800da28 <LCD1602_1stLine>
				POTvalue=ceil(((float)ADCvalues[0])/40.3);
 800c336:	4b36      	ldr	r3, [pc, #216]	; (800c410 <main+0x588>)
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	ee07 3a90 	vmov	s15, r3
 800c33e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c342:	ee17 0a90 	vmov	r0, s15
 800c346:	f7f4 f917 	bl	8000578 <__aeabi_f2d>
 800c34a:	a32d      	add	r3, pc, #180	; (adr r3, 800c400 <main+0x578>)
 800c34c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c350:	f7f4 fa94 	bl	800087c <__aeabi_ddiv>
 800c354:	4602      	mov	r2, r0
 800c356:	460b      	mov	r3, r1
 800c358:	ec43 2b17 	vmov	d7, r2, r3
 800c35c:	eeb0 0a47 	vmov.f32	s0, s14
 800c360:	eef0 0a67 	vmov.f32	s1, s15
 800c364:	f007 f884 	bl	8013470 <ceil>
 800c368:	ec53 2b10 	vmov	r2, r3, d0
 800c36c:	4610      	mov	r0, r2
 800c36e:	4619      	mov	r1, r3
 800c370:	f7f4 fc32 	bl	8000bd8 <__aeabi_d2uiz>
 800c374:	4603      	mov	r3, r0
 800c376:	4a28      	ldr	r2, [pc, #160]	; (800c418 <main+0x590>)
 800c378:	6013      	str	r3, [r2, #0]
				sprintf(str,"REPRO:%3d",POTvalue);
 800c37a:	4b27      	ldr	r3, [pc, #156]	; (800c418 <main+0x590>)
 800c37c:	681b      	ldr	r3, [r3, #0]
 800c37e:	461a      	mov	r2, r3
 800c380:	492b      	ldr	r1, [pc, #172]	; (800c430 <main+0x5a8>)
 800c382:	4827      	ldr	r0, [pc, #156]	; (800c420 <main+0x598>)
 800c384:	f003 fadc 	bl	800f940 <siprintf>
				LCD1602_print(str);
 800c388:	4825      	ldr	r0, [pc, #148]	; (800c420 <main+0x598>)
 800c38a:	f001 fb09 	bl	800d9a0 <LCD1602_print>
				HAL_ADC_Stop_DMA(&hadc1);
 800c38e:	4821      	ldr	r0, [pc, #132]	; (800c414 <main+0x58c>)
 800c390:	f7f5 fbf0 	bl	8001b74 <HAL_ADC_Stop_DMA>
				htim2.Instance->CCR1=POTvalue;
 800c394:	4b25      	ldr	r3, [pc, #148]	; (800c42c <main+0x5a4>)
 800c396:	681b      	ldr	r3, [r3, #0]
 800c398:	4a1f      	ldr	r2, [pc, #124]	; (800c418 <main+0x590>)
 800c39a:	6812      	ldr	r2, [r2, #0]
 800c39c:	635a      	str	r2, [r3, #52]	; 0x34
				break;
 800c39e:	e02c      	b.n	800c3fa <main+0x572>
			case 7://semafor
				HAL_TIM_PWM_Start (&htim1, TIM_CHANNEL_1);
 800c3a0:	2100      	movs	r1, #0
 800c3a2:	4824      	ldr	r0, [pc, #144]	; (800c434 <main+0x5ac>)
 800c3a4:	f7fa fbb4 	bl	8006b10 <HAL_TIM_PWM_Start>
				HAL_TIM_PWM_Start (&htim1, TIM_CHANNEL_2);
 800c3a8:	2104      	movs	r1, #4
 800c3aa:	4822      	ldr	r0, [pc, #136]	; (800c434 <main+0x5ac>)
 800c3ac:	f7fa fbb0 	bl	8006b10 <HAL_TIM_PWM_Start>
				HAL_TIM_PWM_Start (&htim1, TIM_CHANNEL_3);
 800c3b0:	2108      	movs	r1, #8
 800c3b2:	4820      	ldr	r0, [pc, #128]	; (800c434 <main+0x5ac>)
 800c3b4:	f7fa fbac 	bl	8006b10 <HAL_TIM_PWM_Start>
				HAL_TIM_Base_Start_IT(&htim6);
 800c3b8:	481f      	ldr	r0, [pc, #124]	; (800c438 <main+0x5b0>)
 800c3ba:	f7fa fb1f 	bl	80069fc <HAL_TIM_Base_Start_IT>
				break;
 800c3be:	e01c      	b.n	800c3fa <main+0x572>
			case 8://tlacitka
					// osetrani tlacitka metodou polling reaguje na sestupnou hranu
				  if(HAL_GPIO_ReadPin(ENC_BUT_GPIO_Port, ENC_BUT_Pin)==RESET)
 800c3c0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800c3c4:	481d      	ldr	r0, [pc, #116]	; (800c43c <main+0x5b4>)
 800c3c6:	f7f7 f92b 	bl	8003620 <HAL_GPIO_ReadPin>
 800c3ca:	4603      	mov	r3, r0
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	d110      	bne.n	800c3f2 <main+0x56a>
				  {
					  while(HAL_GPIO_ReadPin(ENC_BUT_GPIO_Port, ENC_BUT_Pin)!=SET)
 800c3d0:	e002      	b.n	800c3d8 <main+0x550>
					  {
						  HAL_Delay(30);
 800c3d2:	201e      	movs	r0, #30
 800c3d4:	f7f4 fe92 	bl	80010fc <HAL_Delay>
					  while(HAL_GPIO_ReadPin(ENC_BUT_GPIO_Port, ENC_BUT_Pin)!=SET)
 800c3d8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800c3dc:	4817      	ldr	r0, [pc, #92]	; (800c43c <main+0x5b4>)
 800c3de:	f7f7 f91f 	bl	8003620 <HAL_GPIO_ReadPin>
 800c3e2:	4603      	mov	r3, r0
 800c3e4:	2b01      	cmp	r3, #1
 800c3e6:	d1f4      	bne.n	800c3d2 <main+0x54a>
					  }
					  HAL_GPIO_TogglePin(OUT_LED1_GPIO_Port, OUT_LED1_Pin);
 800c3e8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800c3ec:	4813      	ldr	r0, [pc, #76]	; (800c43c <main+0x5b4>)
 800c3ee:	f7f7 f947 	bl	8003680 <HAL_GPIO_TogglePin>
				  }
				  HAL_Delay(10);
 800c3f2:	200a      	movs	r0, #10
 800c3f4:	f7f4 fe82 	bl	80010fc <HAL_Delay>
				break;
 800c3f8:	bf00      	nop
	  if(IRQ_flag==true)
 800c3fa:	e5d7      	b.n	800bfac <main+0x124>
 800c3fc:	f3af 8000 	nop.w
 800c400:	66666666 	.word	0x66666666
 800c404:	40442666 	.word	0x40442666
 800c408:	200104dc 	.word	0x200104dc
 800c40c:	20010384 	.word	0x20010384
 800c410:	200106c8 	.word	0x200106c8
 800c414:	20010660 	.word	0x20010660
 800c418:	200102d0 	.word	0x200102d0
 800c41c:	0801365c 	.word	0x0801365c
 800c420:	2001088c 	.word	0x2001088c
 800c424:	08013668 	.word	0x08013668
 800c428:	2001089c 	.word	0x2001089c
 800c42c:	2001084c 	.word	0x2001084c
 800c430:	08013670 	.word	0x08013670
 800c434:	20010790 	.word	0x20010790
 800c438:	20010750 	.word	0x20010750
 800c43c:	48001000 	.word	0x48001000

0800c440 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800c440:	b580      	push	{r7, lr}
 800c442:	b0bc      	sub	sp, #240	; 0xf0
 800c444:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800c446:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800c44a:	2244      	movs	r2, #68	; 0x44
 800c44c:	2100      	movs	r1, #0
 800c44e:	4618      	mov	r0, r3
 800c450:	f002 fbee 	bl	800ec30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800c454:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800c458:	2200      	movs	r2, #0
 800c45a:	601a      	str	r2, [r3, #0]
 800c45c:	605a      	str	r2, [r3, #4]
 800c45e:	609a      	str	r2, [r3, #8]
 800c460:	60da      	str	r2, [r3, #12]
 800c462:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800c464:	1d3b      	adds	r3, r7, #4
 800c466:	2294      	movs	r2, #148	; 0x94
 800c468:	2100      	movs	r1, #0
 800c46a:	4618      	mov	r0, r3
 800c46c:	f002 fbe0 	bl	800ec30 <memset>

  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800c470:	f44f 7000 	mov.w	r0, #512	; 0x200
 800c474:	f7f7 fec8 	bl	8004208 <HAL_PWREx_ControlVoltageScaling>
 800c478:	4603      	mov	r3, r0
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	d001      	beq.n	800c482 <SystemClock_Config+0x42>
  {
    Error_Handler();
 800c47e:	f001 f83b 	bl	800d4f8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800c482:	2310      	movs	r3, #16
 800c484:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800c488:	2301      	movs	r3, #1
 800c48a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800c48e:	2300      	movs	r3, #0
 800c490:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800c494:	2360      	movs	r3, #96	; 0x60
 800c496:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800c49a:	2302      	movs	r3, #2
 800c49c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800c4a0:	2301      	movs	r3, #1
 800c4a2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLM = 1;
 800c4a6:	2301      	movs	r3, #1
 800c4a8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_OscInitStruct.PLL.PLLN = 40;
 800c4ac:	2328      	movs	r3, #40	; 0x28
 800c4ae:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800c4b2:	2302      	movs	r3, #2
 800c4b4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800c4b8:	2302      	movs	r3, #2
 800c4ba:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800c4be:	2302      	movs	r3, #2
 800c4c0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800c4c4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800c4c8:	4618      	mov	r0, r3
 800c4ca:	f7f7 ff41 	bl	8004350 <HAL_RCC_OscConfig>
 800c4ce:	4603      	mov	r3, r0
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	d001      	beq.n	800c4d8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800c4d4:	f001 f810 	bl	800d4f8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800c4d8:	230f      	movs	r3, #15
 800c4da:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800c4de:	2303      	movs	r3, #3
 800c4e0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800c4e4:	2300      	movs	r3, #0
 800c4e6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800c4ea:	2300      	movs	r3, #0
 800c4ec:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800c4f0:	2300      	movs	r3, #0
 800c4f2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800c4f6:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800c4fa:	2103      	movs	r1, #3
 800c4fc:	4618      	mov	r0, r3
 800c4fe:	f7f8 fb4d 	bl	8004b9c <HAL_RCC_ClockConfig>
 800c502:	4603      	mov	r3, r0
 800c504:	2b00      	cmp	r3, #0
 800c506:	d001      	beq.n	800c50c <SystemClock_Config+0xcc>
  {
    Error_Handler();
 800c508:	f000 fff6 	bl	800d4f8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_I2C1
 800c50c:	4b14      	ldr	r3, [pc, #80]	; (800c560 <SystemClock_Config+0x120>)
 800c50e:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_RNG|RCC_PERIPHCLK_ADC;
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800c510:	2300      	movs	r3, #0
 800c512:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800c514:	2300      	movs	r3, #0
 800c516:	65bb      	str	r3, [r7, #88]	; 0x58
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800c518:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800c51c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_PLLSAI1;
 800c520:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800c524:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800c528:	2301      	movs	r3, #1
 800c52a:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800c52c:	2301      	movs	r3, #1
 800c52e:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 800c530:	2310      	movs	r3, #16
 800c532:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 800c534:	2302      	movs	r3, #2
 800c536:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800c538:	2302      	movs	r3, #2
 800c53a:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800c53c:	2302      	movs	r3, #2
 800c53e:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK|RCC_PLLSAI1_ADC1CLK;
 800c540:	f04f 7388 	mov.w	r3, #17825792	; 0x1100000
 800c544:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800c546:	1d3b      	adds	r3, r7, #4
 800c548:	4618      	mov	r0, r3
 800c54a:	f7f8 fdd9 	bl	8005100 <HAL_RCCEx_PeriphCLKConfig>
 800c54e:	4603      	mov	r3, r0
 800c550:	2b00      	cmp	r3, #0
 800c552:	d001      	beq.n	800c558 <SystemClock_Config+0x118>
  {
    Error_Handler();
 800c554:	f000 ffd0 	bl	800d4f8 <Error_Handler>
  }
}
 800c558:	bf00      	nop
 800c55a:	37f0      	adds	r7, #240	; 0xf0
 800c55c:	46bd      	mov	sp, r7
 800c55e:	bd80      	pop	{r7, pc}
 800c560:	00044044 	.word	0x00044044

0800c564 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800c564:	b580      	push	{r7, lr}
 800c566:	b086      	sub	sp, #24
 800c568:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800c56a:	463b      	mov	r3, r7
 800c56c:	2200      	movs	r2, #0
 800c56e:	601a      	str	r2, [r3, #0]
 800c570:	605a      	str	r2, [r3, #4]
 800c572:	609a      	str	r2, [r3, #8]
 800c574:	60da      	str	r2, [r3, #12]
 800c576:	611a      	str	r2, [r3, #16]
 800c578:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 800c57a:	4b31      	ldr	r3, [pc, #196]	; (800c640 <MX_ADC1_Init+0xdc>)
 800c57c:	4a31      	ldr	r2, [pc, #196]	; (800c644 <MX_ADC1_Init+0xe0>)
 800c57e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800c580:	4b2f      	ldr	r3, [pc, #188]	; (800c640 <MX_ADC1_Init+0xdc>)
 800c582:	2200      	movs	r2, #0
 800c584:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800c586:	4b2e      	ldr	r3, [pc, #184]	; (800c640 <MX_ADC1_Init+0xdc>)
 800c588:	2200      	movs	r2, #0
 800c58a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800c58c:	4b2c      	ldr	r3, [pc, #176]	; (800c640 <MX_ADC1_Init+0xdc>)
 800c58e:	2200      	movs	r2, #0
 800c590:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800c592:	4b2b      	ldr	r3, [pc, #172]	; (800c640 <MX_ADC1_Init+0xdc>)
 800c594:	2201      	movs	r2, #1
 800c596:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800c598:	4b29      	ldr	r3, [pc, #164]	; (800c640 <MX_ADC1_Init+0xdc>)
 800c59a:	2204      	movs	r2, #4
 800c59c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800c59e:	4b28      	ldr	r3, [pc, #160]	; (800c640 <MX_ADC1_Init+0xdc>)
 800c5a0:	2200      	movs	r2, #0
 800c5a2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800c5a4:	4b26      	ldr	r3, [pc, #152]	; (800c640 <MX_ADC1_Init+0xdc>)
 800c5a6:	2201      	movs	r2, #1
 800c5a8:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 2;
 800c5aa:	4b25      	ldr	r3, [pc, #148]	; (800c640 <MX_ADC1_Init+0xdc>)
 800c5ac:	2202      	movs	r2, #2
 800c5ae:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800c5b0:	4b23      	ldr	r3, [pc, #140]	; (800c640 <MX_ADC1_Init+0xdc>)
 800c5b2:	2200      	movs	r2, #0
 800c5b4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.NbrOfDiscConversion = 1;
 800c5b8:	4b21      	ldr	r3, [pc, #132]	; (800c640 <MX_ADC1_Init+0xdc>)
 800c5ba:	2201      	movs	r2, #1
 800c5bc:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800c5be:	4b20      	ldr	r3, [pc, #128]	; (800c640 <MX_ADC1_Init+0xdc>)
 800c5c0:	2200      	movs	r2, #0
 800c5c2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800c5c4:	4b1e      	ldr	r3, [pc, #120]	; (800c640 <MX_ADC1_Init+0xdc>)
 800c5c6:	2200      	movs	r2, #0
 800c5c8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800c5ca:	4b1d      	ldr	r3, [pc, #116]	; (800c640 <MX_ADC1_Init+0xdc>)
 800c5cc:	2200      	movs	r2, #0
 800c5ce:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800c5d2:	4b1b      	ldr	r3, [pc, #108]	; (800c640 <MX_ADC1_Init+0xdc>)
 800c5d4:	2200      	movs	r2, #0
 800c5d6:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800c5d8:	4b19      	ldr	r3, [pc, #100]	; (800c640 <MX_ADC1_Init+0xdc>)
 800c5da:	2200      	movs	r2, #0
 800c5dc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800c5e0:	4817      	ldr	r0, [pc, #92]	; (800c640 <MX_ADC1_Init+0xdc>)
 800c5e2:	f7f4 ffdb 	bl	800159c <HAL_ADC_Init>
 800c5e6:	4603      	mov	r3, r0
 800c5e8:	2b00      	cmp	r3, #0
 800c5ea:	d001      	beq.n	800c5f0 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 800c5ec:	f000 ff84 	bl	800d4f8 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800c5f0:	4b15      	ldr	r3, [pc, #84]	; (800c648 <MX_ADC1_Init+0xe4>)
 800c5f2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800c5f4:	2306      	movs	r3, #6
 800c5f6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800c5f8:	2300      	movs	r3, #0
 800c5fa:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800c5fc:	237f      	movs	r3, #127	; 0x7f
 800c5fe:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800c600:	2304      	movs	r3, #4
 800c602:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800c604:	2300      	movs	r3, #0
 800c606:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800c608:	463b      	mov	r3, r7
 800c60a:	4619      	mov	r1, r3
 800c60c:	480c      	ldr	r0, [pc, #48]	; (800c640 <MX_ADC1_Init+0xdc>)
 800c60e:	f7f5 fcfb 	bl	8002008 <HAL_ADC_ConfigChannel>
 800c612:	4603      	mov	r3, r0
 800c614:	2b00      	cmp	r3, #0
 800c616:	d001      	beq.n	800c61c <MX_ADC1_Init+0xb8>
  {
    Error_Handler();
 800c618:	f000 ff6e 	bl	800d4f8 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800c61c:	4b0b      	ldr	r3, [pc, #44]	; (800c64c <MX_ADC1_Init+0xe8>)
 800c61e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800c620:	230c      	movs	r3, #12
 800c622:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800c624:	463b      	mov	r3, r7
 800c626:	4619      	mov	r1, r3
 800c628:	4805      	ldr	r0, [pc, #20]	; (800c640 <MX_ADC1_Init+0xdc>)
 800c62a:	f7f5 fced 	bl	8002008 <HAL_ADC_ConfigChannel>
 800c62e:	4603      	mov	r3, r0
 800c630:	2b00      	cmp	r3, #0
 800c632:	d001      	beq.n	800c638 <MX_ADC1_Init+0xd4>
  {
    Error_Handler();
 800c634:	f000 ff60 	bl	800d4f8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800c638:	bf00      	nop
 800c63a:	3718      	adds	r7, #24
 800c63c:	46bd      	mov	sp, r7
 800c63e:	bd80      	pop	{r7, pc}
 800c640:	20010660 	.word	0x20010660
 800c644:	50040000 	.word	0x50040000
 800c648:	10c00010 	.word	0x10c00010
 800c64c:	04300002 	.word	0x04300002

0800c650 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800c650:	b580      	push	{r7, lr}
 800c652:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800c654:	4b1b      	ldr	r3, [pc, #108]	; (800c6c4 <MX_I2C1_Init+0x74>)
 800c656:	4a1c      	ldr	r2, [pc, #112]	; (800c6c8 <MX_I2C1_Init+0x78>)
 800c658:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 800c65a:	4b1a      	ldr	r3, [pc, #104]	; (800c6c4 <MX_I2C1_Init+0x74>)
 800c65c:	4a1b      	ldr	r2, [pc, #108]	; (800c6cc <MX_I2C1_Init+0x7c>)
 800c65e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800c660:	4b18      	ldr	r3, [pc, #96]	; (800c6c4 <MX_I2C1_Init+0x74>)
 800c662:	2200      	movs	r2, #0
 800c664:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800c666:	4b17      	ldr	r3, [pc, #92]	; (800c6c4 <MX_I2C1_Init+0x74>)
 800c668:	2201      	movs	r2, #1
 800c66a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800c66c:	4b15      	ldr	r3, [pc, #84]	; (800c6c4 <MX_I2C1_Init+0x74>)
 800c66e:	2200      	movs	r2, #0
 800c670:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800c672:	4b14      	ldr	r3, [pc, #80]	; (800c6c4 <MX_I2C1_Init+0x74>)
 800c674:	2200      	movs	r2, #0
 800c676:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800c678:	4b12      	ldr	r3, [pc, #72]	; (800c6c4 <MX_I2C1_Init+0x74>)
 800c67a:	2200      	movs	r2, #0
 800c67c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800c67e:	4b11      	ldr	r3, [pc, #68]	; (800c6c4 <MX_I2C1_Init+0x74>)
 800c680:	2200      	movs	r2, #0
 800c682:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800c684:	4b0f      	ldr	r3, [pc, #60]	; (800c6c4 <MX_I2C1_Init+0x74>)
 800c686:	2200      	movs	r2, #0
 800c688:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800c68a:	480e      	ldr	r0, [pc, #56]	; (800c6c4 <MX_I2C1_Init+0x74>)
 800c68c:	f7f7 f82a 	bl	80036e4 <HAL_I2C_Init>
 800c690:	4603      	mov	r3, r0
 800c692:	2b00      	cmp	r3, #0
 800c694:	d001      	beq.n	800c69a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800c696:	f000 ff2f 	bl	800d4f8 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800c69a:	2100      	movs	r1, #0
 800c69c:	4809      	ldr	r0, [pc, #36]	; (800c6c4 <MX_I2C1_Init+0x74>)
 800c69e:	f7f7 fcfb 	bl	8004098 <HAL_I2CEx_ConfigAnalogFilter>
 800c6a2:	4603      	mov	r3, r0
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	d001      	beq.n	800c6ac <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800c6a8:	f000 ff26 	bl	800d4f8 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800c6ac:	2100      	movs	r1, #0
 800c6ae:	4805      	ldr	r0, [pc, #20]	; (800c6c4 <MX_I2C1_Init+0x74>)
 800c6b0:	f7f7 fd3d 	bl	800412e <HAL_I2CEx_ConfigDigitalFilter>
 800c6b4:	4603      	mov	r3, r0
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	d001      	beq.n	800c6be <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800c6ba:	f000 ff1d 	bl	800d4f8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800c6be:	bf00      	nop
 800c6c0:	bd80      	pop	{r7, pc}
 800c6c2:	bf00      	nop
 800c6c4:	20010490 	.word	0x20010490
 800c6c8:	40005400 	.word	0x40005400
 800c6cc:	10909cec 	.word	0x10909cec

0800c6d0 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 800c6d0:	b580      	push	{r7, lr}
 800c6d2:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 800c6d4:	4b07      	ldr	r3, [pc, #28]	; (800c6f4 <MX_RNG_Init+0x24>)
 800c6d6:	4a08      	ldr	r2, [pc, #32]	; (800c6f8 <MX_RNG_Init+0x28>)
 800c6d8:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 800c6da:	4b06      	ldr	r3, [pc, #24]	; (800c6f4 <MX_RNG_Init+0x24>)
 800c6dc:	2200      	movs	r2, #0
 800c6de:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 800c6e0:	4804      	ldr	r0, [pc, #16]	; (800c6f4 <MX_RNG_Init+0x24>)
 800c6e2:	f7f9 fa25 	bl	8005b30 <HAL_RNG_Init>
 800c6e6:	4603      	mov	r3, r0
 800c6e8:	2b00      	cmp	r3, #0
 800c6ea:	d001      	beq.n	800c6f0 <MX_RNG_Init+0x20>
  {
    Error_Handler();
 800c6ec:	f000 ff04 	bl	800d4f8 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 800c6f0:	bf00      	nop
 800c6f2:	bd80      	pop	{r7, pc}
 800c6f4:	200107d4 	.word	0x200107d4
 800c6f8:	50060800 	.word	0x50060800

0800c6fc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800c6fc:	b580      	push	{r7, lr}
 800c6fe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800c700:	4b1b      	ldr	r3, [pc, #108]	; (800c770 <MX_SPI1_Init+0x74>)
 800c702:	4a1c      	ldr	r2, [pc, #112]	; (800c774 <MX_SPI1_Init+0x78>)
 800c704:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800c706:	4b1a      	ldr	r3, [pc, #104]	; (800c770 <MX_SPI1_Init+0x74>)
 800c708:	f44f 7282 	mov.w	r2, #260	; 0x104
 800c70c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800c70e:	4b18      	ldr	r3, [pc, #96]	; (800c770 <MX_SPI1_Init+0x74>)
 800c710:	2200      	movs	r2, #0
 800c712:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800c714:	4b16      	ldr	r3, [pc, #88]	; (800c770 <MX_SPI1_Init+0x74>)
 800c716:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800c71a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800c71c:	4b14      	ldr	r3, [pc, #80]	; (800c770 <MX_SPI1_Init+0x74>)
 800c71e:	2200      	movs	r2, #0
 800c720:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800c722:	4b13      	ldr	r3, [pc, #76]	; (800c770 <MX_SPI1_Init+0x74>)
 800c724:	2200      	movs	r2, #0
 800c726:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800c728:	4b11      	ldr	r3, [pc, #68]	; (800c770 <MX_SPI1_Init+0x74>)
 800c72a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c72e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800c730:	4b0f      	ldr	r3, [pc, #60]	; (800c770 <MX_SPI1_Init+0x74>)
 800c732:	2220      	movs	r2, #32
 800c734:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800c736:	4b0e      	ldr	r3, [pc, #56]	; (800c770 <MX_SPI1_Init+0x74>)
 800c738:	2200      	movs	r2, #0
 800c73a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800c73c:	4b0c      	ldr	r3, [pc, #48]	; (800c770 <MX_SPI1_Init+0x74>)
 800c73e:	2200      	movs	r2, #0
 800c740:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c742:	4b0b      	ldr	r3, [pc, #44]	; (800c770 <MX_SPI1_Init+0x74>)
 800c744:	2200      	movs	r2, #0
 800c746:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800c748:	4b09      	ldr	r3, [pc, #36]	; (800c770 <MX_SPI1_Init+0x74>)
 800c74a:	2207      	movs	r2, #7
 800c74c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800c74e:	4b08      	ldr	r3, [pc, #32]	; (800c770 <MX_SPI1_Init+0x74>)
 800c750:	2200      	movs	r2, #0
 800c752:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800c754:	4b06      	ldr	r3, [pc, #24]	; (800c770 <MX_SPI1_Init+0x74>)
 800c756:	2208      	movs	r2, #8
 800c758:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800c75a:	4805      	ldr	r0, [pc, #20]	; (800c770 <MX_SPI1_Init+0x74>)
 800c75c:	f7f9 fa43 	bl	8005be6 <HAL_SPI_Init>
 800c760:	4603      	mov	r3, r0
 800c762:	2b00      	cmp	r3, #0
 800c764:	d001      	beq.n	800c76a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800c766:	f000 fec7 	bl	800d4f8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800c76a:	bf00      	nop
 800c76c:	bd80      	pop	{r7, pc}
 800c76e:	bf00      	nop
 800c770:	200107e8 	.word	0x200107e8
 800c774:	40013000 	.word	0x40013000

0800c778 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 800c778:	b580      	push	{r7, lr}
 800c77a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 800c77c:	4b1b      	ldr	r3, [pc, #108]	; (800c7ec <MX_SPI3_Init+0x74>)
 800c77e:	4a1c      	ldr	r2, [pc, #112]	; (800c7f0 <MX_SPI3_Init+0x78>)
 800c780:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800c782:	4b1a      	ldr	r3, [pc, #104]	; (800c7ec <MX_SPI3_Init+0x74>)
 800c784:	f44f 7282 	mov.w	r2, #260	; 0x104
 800c788:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800c78a:	4b18      	ldr	r3, [pc, #96]	; (800c7ec <MX_SPI3_Init+0x74>)
 800c78c:	2200      	movs	r2, #0
 800c78e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800c790:	4b16      	ldr	r3, [pc, #88]	; (800c7ec <MX_SPI3_Init+0x74>)
 800c792:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800c796:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800c798:	4b14      	ldr	r3, [pc, #80]	; (800c7ec <MX_SPI3_Init+0x74>)
 800c79a:	2200      	movs	r2, #0
 800c79c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800c79e:	4b13      	ldr	r3, [pc, #76]	; (800c7ec <MX_SPI3_Init+0x74>)
 800c7a0:	2200      	movs	r2, #0
 800c7a2:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800c7a4:	4b11      	ldr	r3, [pc, #68]	; (800c7ec <MX_SPI3_Init+0x74>)
 800c7a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c7aa:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800c7ac:	4b0f      	ldr	r3, [pc, #60]	; (800c7ec <MX_SPI3_Init+0x74>)
 800c7ae:	2210      	movs	r2, #16
 800c7b0:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800c7b2:	4b0e      	ldr	r3, [pc, #56]	; (800c7ec <MX_SPI3_Init+0x74>)
 800c7b4:	2200      	movs	r2, #0
 800c7b6:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800c7b8:	4b0c      	ldr	r3, [pc, #48]	; (800c7ec <MX_SPI3_Init+0x74>)
 800c7ba:	2200      	movs	r2, #0
 800c7bc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c7be:	4b0b      	ldr	r3, [pc, #44]	; (800c7ec <MX_SPI3_Init+0x74>)
 800c7c0:	2200      	movs	r2, #0
 800c7c2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 800c7c4:	4b09      	ldr	r3, [pc, #36]	; (800c7ec <MX_SPI3_Init+0x74>)
 800c7c6:	2207      	movs	r2, #7
 800c7c8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800c7ca:	4b08      	ldr	r3, [pc, #32]	; (800c7ec <MX_SPI3_Init+0x74>)
 800c7cc:	2200      	movs	r2, #0
 800c7ce:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800c7d0:	4b06      	ldr	r3, [pc, #24]	; (800c7ec <MX_SPI3_Init+0x74>)
 800c7d2:	2208      	movs	r2, #8
 800c7d4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800c7d6:	4805      	ldr	r0, [pc, #20]	; (800c7ec <MX_SPI3_Init+0x74>)
 800c7d8:	f7f9 fa05 	bl	8005be6 <HAL_SPI_Init>
 800c7dc:	4603      	mov	r3, r0
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	d001      	beq.n	800c7e6 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800c7e2:	f000 fe89 	bl	800d4f8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800c7e6:	bf00      	nop
 800c7e8:	bd80      	pop	{r7, pc}
 800c7ea:	bf00      	nop
 800c7ec:	2001056c 	.word	0x2001056c
 800c7f0:	40003c00 	.word	0x40003c00

0800c7f4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800c7f4:	b580      	push	{r7, lr}
 800c7f6:	b09a      	sub	sp, #104	; 0x68
 800c7f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800c7fa:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800c7fe:	2200      	movs	r2, #0
 800c800:	601a      	str	r2, [r3, #0]
 800c802:	605a      	str	r2, [r3, #4]
 800c804:	609a      	str	r2, [r3, #8]
 800c806:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800c808:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800c80c:	2200      	movs	r2, #0
 800c80e:	601a      	str	r2, [r3, #0]
 800c810:	605a      	str	r2, [r3, #4]
 800c812:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800c814:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800c818:	2200      	movs	r2, #0
 800c81a:	601a      	str	r2, [r3, #0]
 800c81c:	605a      	str	r2, [r3, #4]
 800c81e:	609a      	str	r2, [r3, #8]
 800c820:	60da      	str	r2, [r3, #12]
 800c822:	611a      	str	r2, [r3, #16]
 800c824:	615a      	str	r2, [r3, #20]
 800c826:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800c828:	1d3b      	adds	r3, r7, #4
 800c82a:	222c      	movs	r2, #44	; 0x2c
 800c82c:	2100      	movs	r1, #0
 800c82e:	4618      	mov	r0, r3
 800c830:	f002 f9fe 	bl	800ec30 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800c834:	4b4f      	ldr	r3, [pc, #316]	; (800c974 <MX_TIM1_Init+0x180>)
 800c836:	4a50      	ldr	r2, [pc, #320]	; (800c978 <MX_TIM1_Init+0x184>)
 800c838:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1845-1;
 800c83a:	4b4e      	ldr	r3, [pc, #312]	; (800c974 <MX_TIM1_Init+0x180>)
 800c83c:	f240 7234 	movw	r2, #1844	; 0x734
 800c840:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800c842:	4b4c      	ldr	r3, [pc, #304]	; (800c974 <MX_TIM1_Init+0x180>)
 800c844:	2200      	movs	r2, #0
 800c846:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 255-1;
 800c848:	4b4a      	ldr	r3, [pc, #296]	; (800c974 <MX_TIM1_Init+0x180>)
 800c84a:	22fe      	movs	r2, #254	; 0xfe
 800c84c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800c84e:	4b49      	ldr	r3, [pc, #292]	; (800c974 <MX_TIM1_Init+0x180>)
 800c850:	2200      	movs	r2, #0
 800c852:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800c854:	4b47      	ldr	r3, [pc, #284]	; (800c974 <MX_TIM1_Init+0x180>)
 800c856:	2200      	movs	r2, #0
 800c858:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800c85a:	4b46      	ldr	r3, [pc, #280]	; (800c974 <MX_TIM1_Init+0x180>)
 800c85c:	2200      	movs	r2, #0
 800c85e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800c860:	4844      	ldr	r0, [pc, #272]	; (800c974 <MX_TIM1_Init+0x180>)
 800c862:	f7fa f8a0 	bl	80069a6 <HAL_TIM_Base_Init>
 800c866:	4603      	mov	r3, r0
 800c868:	2b00      	cmp	r3, #0
 800c86a:	d001      	beq.n	800c870 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 800c86c:	f000 fe44 	bl	800d4f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800c870:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c874:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800c876:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800c87a:	4619      	mov	r1, r3
 800c87c:	483d      	ldr	r0, [pc, #244]	; (800c974 <MX_TIM1_Init+0x180>)
 800c87e:	f7fa fd99 	bl	80073b4 <HAL_TIM_ConfigClockSource>
 800c882:	4603      	mov	r3, r0
 800c884:	2b00      	cmp	r3, #0
 800c886:	d001      	beq.n	800c88c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 800c888:	f000 fe36 	bl	800d4f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800c88c:	4839      	ldr	r0, [pc, #228]	; (800c974 <MX_TIM1_Init+0x180>)
 800c88e:	f7fa f90a 	bl	8006aa6 <HAL_TIM_PWM_Init>
 800c892:	4603      	mov	r3, r0
 800c894:	2b00      	cmp	r3, #0
 800c896:	d001      	beq.n	800c89c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 800c898:	f000 fe2e 	bl	800d4f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800c89c:	2300      	movs	r3, #0
 800c89e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800c8a0:	2300      	movs	r3, #0
 800c8a2:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800c8a4:	2300      	movs	r3, #0
 800c8a6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800c8a8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800c8ac:	4619      	mov	r1, r3
 800c8ae:	4831      	ldr	r0, [pc, #196]	; (800c974 <MX_TIM1_Init+0x180>)
 800c8b0:	f7fb fa9e 	bl	8007df0 <HAL_TIMEx_MasterConfigSynchronization>
 800c8b4:	4603      	mov	r3, r0
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	d001      	beq.n	800c8be <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800c8ba:	f000 fe1d 	bl	800d4f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800c8be:	2360      	movs	r3, #96	; 0x60
 800c8c0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 800c8c2:	2300      	movs	r3, #0
 800c8c4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800c8c6:	2300      	movs	r3, #0
 800c8c8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800c8ca:	2300      	movs	r3, #0
 800c8cc:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800c8ce:	2300      	movs	r3, #0
 800c8d0:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800c8d2:	2300      	movs	r3, #0
 800c8d4:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800c8d6:	2300      	movs	r3, #0
 800c8d8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800c8da:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800c8de:	2200      	movs	r2, #0
 800c8e0:	4619      	mov	r1, r3
 800c8e2:	4824      	ldr	r0, [pc, #144]	; (800c974 <MX_TIM1_Init+0x180>)
 800c8e4:	f7fa fc4e 	bl	8007184 <HAL_TIM_PWM_ConfigChannel>
 800c8e8:	4603      	mov	r3, r0
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	d001      	beq.n	800c8f2 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 800c8ee:	f000 fe03 	bl	800d4f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800c8f2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800c8f6:	2204      	movs	r2, #4
 800c8f8:	4619      	mov	r1, r3
 800c8fa:	481e      	ldr	r0, [pc, #120]	; (800c974 <MX_TIM1_Init+0x180>)
 800c8fc:	f7fa fc42 	bl	8007184 <HAL_TIM_PWM_ConfigChannel>
 800c900:	4603      	mov	r3, r0
 800c902:	2b00      	cmp	r3, #0
 800c904:	d001      	beq.n	800c90a <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 800c906:	f000 fdf7 	bl	800d4f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800c90a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800c90e:	2208      	movs	r2, #8
 800c910:	4619      	mov	r1, r3
 800c912:	4818      	ldr	r0, [pc, #96]	; (800c974 <MX_TIM1_Init+0x180>)
 800c914:	f7fa fc36 	bl	8007184 <HAL_TIM_PWM_ConfigChannel>
 800c918:	4603      	mov	r3, r0
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	d001      	beq.n	800c922 <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 800c91e:	f000 fdeb 	bl	800d4f8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800c922:	2300      	movs	r3, #0
 800c924:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800c926:	2300      	movs	r3, #0
 800c928:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800c92a:	2300      	movs	r3, #0
 800c92c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800c92e:	2300      	movs	r3, #0
 800c930:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800c932:	2300      	movs	r3, #0
 800c934:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800c936:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c93a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800c93c:	2300      	movs	r3, #0
 800c93e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800c940:	2300      	movs	r3, #0
 800c942:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800c944:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c948:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800c94a:	2300      	movs	r3, #0
 800c94c:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800c94e:	2300      	movs	r3, #0
 800c950:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800c952:	1d3b      	adds	r3, r7, #4
 800c954:	4619      	mov	r1, r3
 800c956:	4807      	ldr	r0, [pc, #28]	; (800c974 <MX_TIM1_Init+0x180>)
 800c958:	f7fb fad2 	bl	8007f00 <HAL_TIMEx_ConfigBreakDeadTime>
 800c95c:	4603      	mov	r3, r0
 800c95e:	2b00      	cmp	r3, #0
 800c960:	d001      	beq.n	800c966 <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 800c962:	f000 fdc9 	bl	800d4f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800c966:	4803      	ldr	r0, [pc, #12]	; (800c974 <MX_TIM1_Init+0x180>)
 800c968:	f001 fec4 	bl	800e6f4 <HAL_TIM_MspPostInit>

}
 800c96c:	bf00      	nop
 800c96e:	3768      	adds	r7, #104	; 0x68
 800c970:	46bd      	mov	sp, r7
 800c972:	bd80      	pop	{r7, pc}
 800c974:	20010790 	.word	0x20010790
 800c978:	40012c00 	.word	0x40012c00

0800c97c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800c97c:	b580      	push	{r7, lr}
 800c97e:	b08e      	sub	sp, #56	; 0x38
 800c980:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800c982:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c986:	2200      	movs	r2, #0
 800c988:	601a      	str	r2, [r3, #0]
 800c98a:	605a      	str	r2, [r3, #4]
 800c98c:	609a      	str	r2, [r3, #8]
 800c98e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800c990:	f107 031c 	add.w	r3, r7, #28
 800c994:	2200      	movs	r2, #0
 800c996:	601a      	str	r2, [r3, #0]
 800c998:	605a      	str	r2, [r3, #4]
 800c99a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800c99c:	463b      	mov	r3, r7
 800c99e:	2200      	movs	r2, #0
 800c9a0:	601a      	str	r2, [r3, #0]
 800c9a2:	605a      	str	r2, [r3, #4]
 800c9a4:	609a      	str	r2, [r3, #8]
 800c9a6:	60da      	str	r2, [r3, #12]
 800c9a8:	611a      	str	r2, [r3, #16]
 800c9aa:	615a      	str	r2, [r3, #20]
 800c9ac:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800c9ae:	4b2d      	ldr	r3, [pc, #180]	; (800ca64 <MX_TIM2_Init+0xe8>)
 800c9b0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800c9b4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1280-1;
 800c9b6:	4b2b      	ldr	r3, [pc, #172]	; (800ca64 <MX_TIM2_Init+0xe8>)
 800c9b8:	f240 42ff 	movw	r2, #1279	; 0x4ff
 800c9bc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800c9be:	4b29      	ldr	r3, [pc, #164]	; (800ca64 <MX_TIM2_Init+0xe8>)
 800c9c0:	2200      	movs	r2, #0
 800c9c2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 250-1;
 800c9c4:	4b27      	ldr	r3, [pc, #156]	; (800ca64 <MX_TIM2_Init+0xe8>)
 800c9c6:	22f9      	movs	r2, #249	; 0xf9
 800c9c8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800c9ca:	4b26      	ldr	r3, [pc, #152]	; (800ca64 <MX_TIM2_Init+0xe8>)
 800c9cc:	2200      	movs	r2, #0
 800c9ce:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800c9d0:	4b24      	ldr	r3, [pc, #144]	; (800ca64 <MX_TIM2_Init+0xe8>)
 800c9d2:	2200      	movs	r2, #0
 800c9d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800c9d6:	4823      	ldr	r0, [pc, #140]	; (800ca64 <MX_TIM2_Init+0xe8>)
 800c9d8:	f7f9 ffe5 	bl	80069a6 <HAL_TIM_Base_Init>
 800c9dc:	4603      	mov	r3, r0
 800c9de:	2b00      	cmp	r3, #0
 800c9e0:	d001      	beq.n	800c9e6 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800c9e2:	f000 fd89 	bl	800d4f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800c9e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c9ea:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800c9ec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c9f0:	4619      	mov	r1, r3
 800c9f2:	481c      	ldr	r0, [pc, #112]	; (800ca64 <MX_TIM2_Init+0xe8>)
 800c9f4:	f7fa fcde 	bl	80073b4 <HAL_TIM_ConfigClockSource>
 800c9f8:	4603      	mov	r3, r0
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	d001      	beq.n	800ca02 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800c9fe:	f000 fd7b 	bl	800d4f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800ca02:	4818      	ldr	r0, [pc, #96]	; (800ca64 <MX_TIM2_Init+0xe8>)
 800ca04:	f7fa f84f 	bl	8006aa6 <HAL_TIM_PWM_Init>
 800ca08:	4603      	mov	r3, r0
 800ca0a:	2b00      	cmp	r3, #0
 800ca0c:	d001      	beq.n	800ca12 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800ca0e:	f000 fd73 	bl	800d4f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800ca12:	2320      	movs	r3, #32
 800ca14:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800ca16:	2300      	movs	r3, #0
 800ca18:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800ca1a:	f107 031c 	add.w	r3, r7, #28
 800ca1e:	4619      	mov	r1, r3
 800ca20:	4810      	ldr	r0, [pc, #64]	; (800ca64 <MX_TIM2_Init+0xe8>)
 800ca22:	f7fb f9e5 	bl	8007df0 <HAL_TIMEx_MasterConfigSynchronization>
 800ca26:	4603      	mov	r3, r0
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	d001      	beq.n	800ca30 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 800ca2c:	f000 fd64 	bl	800d4f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800ca30:	2360      	movs	r3, #96	; 0x60
 800ca32:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800ca34:	2300      	movs	r3, #0
 800ca36:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800ca38:	2300      	movs	r3, #0
 800ca3a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800ca3c:	2300      	movs	r3, #0
 800ca3e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800ca40:	463b      	mov	r3, r7
 800ca42:	2200      	movs	r2, #0
 800ca44:	4619      	mov	r1, r3
 800ca46:	4807      	ldr	r0, [pc, #28]	; (800ca64 <MX_TIM2_Init+0xe8>)
 800ca48:	f7fa fb9c 	bl	8007184 <HAL_TIM_PWM_ConfigChannel>
 800ca4c:	4603      	mov	r3, r0
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	d001      	beq.n	800ca56 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800ca52:	f000 fd51 	bl	800d4f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800ca56:	4803      	ldr	r0, [pc, #12]	; (800ca64 <MX_TIM2_Init+0xe8>)
 800ca58:	f001 fe4c 	bl	800e6f4 <HAL_TIM_MspPostInit>

}
 800ca5c:	bf00      	nop
 800ca5e:	3738      	adds	r7, #56	; 0x38
 800ca60:	46bd      	mov	sp, r7
 800ca62:	bd80      	pop	{r7, pc}
 800ca64:	2001084c 	.word	0x2001084c

0800ca68 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800ca68:	b580      	push	{r7, lr}
 800ca6a:	b08c      	sub	sp, #48	; 0x30
 800ca6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800ca6e:	f107 030c 	add.w	r3, r7, #12
 800ca72:	2224      	movs	r2, #36	; 0x24
 800ca74:	2100      	movs	r1, #0
 800ca76:	4618      	mov	r0, r3
 800ca78:	f002 f8da 	bl	800ec30 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800ca7c:	463b      	mov	r3, r7
 800ca7e:	2200      	movs	r2, #0
 800ca80:	601a      	str	r2, [r3, #0]
 800ca82:	605a      	str	r2, [r3, #4]
 800ca84:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800ca86:	4b20      	ldr	r3, [pc, #128]	; (800cb08 <MX_TIM3_Init+0xa0>)
 800ca88:	4a20      	ldr	r2, [pc, #128]	; (800cb0c <MX_TIM3_Init+0xa4>)
 800ca8a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800ca8c:	4b1e      	ldr	r3, [pc, #120]	; (800cb08 <MX_TIM3_Init+0xa0>)
 800ca8e:	2200      	movs	r2, #0
 800ca90:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800ca92:	4b1d      	ldr	r3, [pc, #116]	; (800cb08 <MX_TIM3_Init+0xa0>)
 800ca94:	2200      	movs	r2, #0
 800ca96:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 255;
 800ca98:	4b1b      	ldr	r3, [pc, #108]	; (800cb08 <MX_TIM3_Init+0xa0>)
 800ca9a:	22ff      	movs	r2, #255	; 0xff
 800ca9c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800ca9e:	4b1a      	ldr	r3, [pc, #104]	; (800cb08 <MX_TIM3_Init+0xa0>)
 800caa0:	2200      	movs	r2, #0
 800caa2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800caa4:	4b18      	ldr	r3, [pc, #96]	; (800cb08 <MX_TIM3_Init+0xa0>)
 800caa6:	2200      	movs	r2, #0
 800caa8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800caaa:	2301      	movs	r3, #1
 800caac:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800caae:	2300      	movs	r3, #0
 800cab0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800cab2:	2301      	movs	r3, #1
 800cab4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800cab6:	2300      	movs	r3, #0
 800cab8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800caba:	2300      	movs	r3, #0
 800cabc:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800cabe:	2300      	movs	r3, #0
 800cac0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800cac2:	2301      	movs	r3, #1
 800cac4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800cac6:	2300      	movs	r3, #0
 800cac8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800caca:	2300      	movs	r3, #0
 800cacc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800cace:	f107 030c 	add.w	r3, r7, #12
 800cad2:	4619      	mov	r1, r3
 800cad4:	480c      	ldr	r0, [pc, #48]	; (800cb08 <MX_TIM3_Init+0xa0>)
 800cad6:	f7fa f8e1 	bl	8006c9c <HAL_TIM_Encoder_Init>
 800cada:	4603      	mov	r3, r0
 800cadc:	2b00      	cmp	r3, #0
 800cade:	d001      	beq.n	800cae4 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 800cae0:	f000 fd0a 	bl	800d4f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800cae4:	2300      	movs	r3, #0
 800cae6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800cae8:	2300      	movs	r3, #0
 800caea:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800caec:	463b      	mov	r3, r7
 800caee:	4619      	mov	r1, r3
 800caf0:	4805      	ldr	r0, [pc, #20]	; (800cb08 <MX_TIM3_Init+0xa0>)
 800caf2:	f7fb f97d 	bl	8007df0 <HAL_TIMEx_MasterConfigSynchronization>
 800caf6:	4603      	mov	r3, r0
 800caf8:	2b00      	cmp	r3, #0
 800cafa:	d001      	beq.n	800cb00 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 800cafc:	f000 fcfc 	bl	800d4f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800cb00:	bf00      	nop
 800cb02:	3730      	adds	r7, #48	; 0x30
 800cb04:	46bd      	mov	sp, r7
 800cb06:	bd80      	pop	{r7, pc}
 800cb08:	2001052c 	.word	0x2001052c
 800cb0c:	40000400 	.word	0x40000400

0800cb10 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800cb10:	b580      	push	{r7, lr}
 800cb12:	b088      	sub	sp, #32
 800cb14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800cb16:	f107 0310 	add.w	r3, r7, #16
 800cb1a:	2200      	movs	r2, #0
 800cb1c:	601a      	str	r2, [r3, #0]
 800cb1e:	605a      	str	r2, [r3, #4]
 800cb20:	609a      	str	r2, [r3, #8]
 800cb22:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800cb24:	1d3b      	adds	r3, r7, #4
 800cb26:	2200      	movs	r2, #0
 800cb28:	601a      	str	r2, [r3, #0]
 800cb2a:	605a      	str	r2, [r3, #4]
 800cb2c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800cb2e:	4b1e      	ldr	r3, [pc, #120]	; (800cba8 <MX_TIM4_Init+0x98>)
 800cb30:	4a1e      	ldr	r2, [pc, #120]	; (800cbac <MX_TIM4_Init+0x9c>)
 800cb32:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 8000-1;
 800cb34:	4b1c      	ldr	r3, [pc, #112]	; (800cba8 <MX_TIM4_Init+0x98>)
 800cb36:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800cb3a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800cb3c:	4b1a      	ldr	r3, [pc, #104]	; (800cba8 <MX_TIM4_Init+0x98>)
 800cb3e:	2200      	movs	r2, #0
 800cb40:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 500-1;
 800cb42:	4b19      	ldr	r3, [pc, #100]	; (800cba8 <MX_TIM4_Init+0x98>)
 800cb44:	f240 12f3 	movw	r2, #499	; 0x1f3
 800cb48:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800cb4a:	4b17      	ldr	r3, [pc, #92]	; (800cba8 <MX_TIM4_Init+0x98>)
 800cb4c:	2200      	movs	r2, #0
 800cb4e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800cb50:	4b15      	ldr	r3, [pc, #84]	; (800cba8 <MX_TIM4_Init+0x98>)
 800cb52:	2200      	movs	r2, #0
 800cb54:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800cb56:	4814      	ldr	r0, [pc, #80]	; (800cba8 <MX_TIM4_Init+0x98>)
 800cb58:	f7f9 ff25 	bl	80069a6 <HAL_TIM_Base_Init>
 800cb5c:	4603      	mov	r3, r0
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	d001      	beq.n	800cb66 <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 800cb62:	f000 fcc9 	bl	800d4f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800cb66:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cb6a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800cb6c:	f107 0310 	add.w	r3, r7, #16
 800cb70:	4619      	mov	r1, r3
 800cb72:	480d      	ldr	r0, [pc, #52]	; (800cba8 <MX_TIM4_Init+0x98>)
 800cb74:	f7fa fc1e 	bl	80073b4 <HAL_TIM_ConfigClockSource>
 800cb78:	4603      	mov	r3, r0
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	d001      	beq.n	800cb82 <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 800cb7e:	f000 fcbb 	bl	800d4f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800cb82:	2300      	movs	r3, #0
 800cb84:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800cb86:	2300      	movs	r3, #0
 800cb88:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800cb8a:	1d3b      	adds	r3, r7, #4
 800cb8c:	4619      	mov	r1, r3
 800cb8e:	4806      	ldr	r0, [pc, #24]	; (800cba8 <MX_TIM4_Init+0x98>)
 800cb90:	f7fb f92e 	bl	8007df0 <HAL_TIMEx_MasterConfigSynchronization>
 800cb94:	4603      	mov	r3, r0
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	d001      	beq.n	800cb9e <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 800cb9a:	f000 fcad 	bl	800d4f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800cb9e:	bf00      	nop
 800cba0:	3720      	adds	r7, #32
 800cba2:	46bd      	mov	sp, r7
 800cba4:	bd80      	pop	{r7, pc}
 800cba6:	bf00      	nop
 800cba8:	200103c4 	.word	0x200103c4
 800cbac:	40000800 	.word	0x40000800

0800cbb0 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800cbb0:	b580      	push	{r7, lr}
 800cbb2:	b088      	sub	sp, #32
 800cbb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800cbb6:	f107 0310 	add.w	r3, r7, #16
 800cbba:	2200      	movs	r2, #0
 800cbbc:	601a      	str	r2, [r3, #0]
 800cbbe:	605a      	str	r2, [r3, #4]
 800cbc0:	609a      	str	r2, [r3, #8]
 800cbc2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800cbc4:	1d3b      	adds	r3, r7, #4
 800cbc6:	2200      	movs	r2, #0
 800cbc8:	601a      	str	r2, [r3, #0]
 800cbca:	605a      	str	r2, [r3, #4]
 800cbcc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800cbce:	4b1e      	ldr	r3, [pc, #120]	; (800cc48 <MX_TIM5_Init+0x98>)
 800cbd0:	4a1e      	ldr	r2, [pc, #120]	; (800cc4c <MX_TIM5_Init+0x9c>)
 800cbd2:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 8000-1;
 800cbd4:	4b1c      	ldr	r3, [pc, #112]	; (800cc48 <MX_TIM5_Init+0x98>)
 800cbd6:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800cbda:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800cbdc:	4b1a      	ldr	r3, [pc, #104]	; (800cc48 <MX_TIM5_Init+0x98>)
 800cbde:	2200      	movs	r2, #0
 800cbe0:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 500-1;
 800cbe2:	4b19      	ldr	r3, [pc, #100]	; (800cc48 <MX_TIM5_Init+0x98>)
 800cbe4:	f240 12f3 	movw	r2, #499	; 0x1f3
 800cbe8:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800cbea:	4b17      	ldr	r3, [pc, #92]	; (800cc48 <MX_TIM5_Init+0x98>)
 800cbec:	2200      	movs	r2, #0
 800cbee:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800cbf0:	4b15      	ldr	r3, [pc, #84]	; (800cc48 <MX_TIM5_Init+0x98>)
 800cbf2:	2200      	movs	r2, #0
 800cbf4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800cbf6:	4814      	ldr	r0, [pc, #80]	; (800cc48 <MX_TIM5_Init+0x98>)
 800cbf8:	f7f9 fed5 	bl	80069a6 <HAL_TIM_Base_Init>
 800cbfc:	4603      	mov	r3, r0
 800cbfe:	2b00      	cmp	r3, #0
 800cc00:	d001      	beq.n	800cc06 <MX_TIM5_Init+0x56>
  {
    Error_Handler();
 800cc02:	f000 fc79 	bl	800d4f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800cc06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cc0a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800cc0c:	f107 0310 	add.w	r3, r7, #16
 800cc10:	4619      	mov	r1, r3
 800cc12:	480d      	ldr	r0, [pc, #52]	; (800cc48 <MX_TIM5_Init+0x98>)
 800cc14:	f7fa fbce 	bl	80073b4 <HAL_TIM_ConfigClockSource>
 800cc18:	4603      	mov	r3, r0
 800cc1a:	2b00      	cmp	r3, #0
 800cc1c:	d001      	beq.n	800cc22 <MX_TIM5_Init+0x72>
  {
    Error_Handler();
 800cc1e:	f000 fc6b 	bl	800d4f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800cc22:	2300      	movs	r3, #0
 800cc24:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800cc26:	2300      	movs	r3, #0
 800cc28:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800cc2a:	1d3b      	adds	r3, r7, #4
 800cc2c:	4619      	mov	r1, r3
 800cc2e:	4806      	ldr	r0, [pc, #24]	; (800cc48 <MX_TIM5_Init+0x98>)
 800cc30:	f7fb f8de 	bl	8007df0 <HAL_TIMEx_MasterConfigSynchronization>
 800cc34:	4603      	mov	r3, r0
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	d001      	beq.n	800cc3e <MX_TIM5_Init+0x8e>
  {
    Error_Handler();
 800cc3a:	f000 fc5d 	bl	800d4f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800cc3e:	bf00      	nop
 800cc40:	3720      	adds	r7, #32
 800cc42:	46bd      	mov	sp, r7
 800cc44:	bd80      	pop	{r7, pc}
 800cc46:	bf00      	nop
 800cc48:	200104ec 	.word	0x200104ec
 800cc4c:	40000c00 	.word	0x40000c00

0800cc50 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800cc50:	b580      	push	{r7, lr}
 800cc52:	b084      	sub	sp, #16
 800cc54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800cc56:	1d3b      	adds	r3, r7, #4
 800cc58:	2200      	movs	r2, #0
 800cc5a:	601a      	str	r2, [r3, #0]
 800cc5c:	605a      	str	r2, [r3, #4]
 800cc5e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800cc60:	4b15      	ldr	r3, [pc, #84]	; (800ccb8 <MX_TIM6_Init+0x68>)
 800cc62:	4a16      	ldr	r2, [pc, #88]	; (800ccbc <MX_TIM6_Init+0x6c>)
 800cc64:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 8000-1;
 800cc66:	4b14      	ldr	r3, [pc, #80]	; (800ccb8 <MX_TIM6_Init+0x68>)
 800cc68:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800cc6c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800cc6e:	4b12      	ldr	r3, [pc, #72]	; (800ccb8 <MX_TIM6_Init+0x68>)
 800cc70:	2200      	movs	r2, #0
 800cc72:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 5000-1;
 800cc74:	4b10      	ldr	r3, [pc, #64]	; (800ccb8 <MX_TIM6_Init+0x68>)
 800cc76:	f241 3287 	movw	r2, #4999	; 0x1387
 800cc7a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800cc7c:	4b0e      	ldr	r3, [pc, #56]	; (800ccb8 <MX_TIM6_Init+0x68>)
 800cc7e:	2200      	movs	r2, #0
 800cc80:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800cc82:	480d      	ldr	r0, [pc, #52]	; (800ccb8 <MX_TIM6_Init+0x68>)
 800cc84:	f7f9 fe8f 	bl	80069a6 <HAL_TIM_Base_Init>
 800cc88:	4603      	mov	r3, r0
 800cc8a:	2b00      	cmp	r3, #0
 800cc8c:	d001      	beq.n	800cc92 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 800cc8e:	f000 fc33 	bl	800d4f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800cc92:	2300      	movs	r3, #0
 800cc94:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800cc96:	2300      	movs	r3, #0
 800cc98:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800cc9a:	1d3b      	adds	r3, r7, #4
 800cc9c:	4619      	mov	r1, r3
 800cc9e:	4806      	ldr	r0, [pc, #24]	; (800ccb8 <MX_TIM6_Init+0x68>)
 800cca0:	f7fb f8a6 	bl	8007df0 <HAL_TIMEx_MasterConfigSynchronization>
 800cca4:	4603      	mov	r3, r0
 800cca6:	2b00      	cmp	r3, #0
 800cca8:	d001      	beq.n	800ccae <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 800ccaa:	f000 fc25 	bl	800d4f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800ccae:	bf00      	nop
 800ccb0:	3710      	adds	r7, #16
 800ccb2:	46bd      	mov	sp, r7
 800ccb4:	bd80      	pop	{r7, pc}
 800ccb6:	bf00      	nop
 800ccb8:	20010750 	.word	0x20010750
 800ccbc:	40001000 	.word	0x40001000

0800ccc0 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800ccc0:	b580      	push	{r7, lr}
 800ccc2:	b09a      	sub	sp, #104	; 0x68
 800ccc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800ccc6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800ccca:	2200      	movs	r2, #0
 800cccc:	601a      	str	r2, [r3, #0]
 800ccce:	605a      	str	r2, [r3, #4]
 800ccd0:	609a      	str	r2, [r3, #8]
 800ccd2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800ccd4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800ccd8:	2200      	movs	r2, #0
 800ccda:	601a      	str	r2, [r3, #0]
 800ccdc:	605a      	str	r2, [r3, #4]
 800ccde:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800cce0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800cce4:	2200      	movs	r2, #0
 800cce6:	601a      	str	r2, [r3, #0]
 800cce8:	605a      	str	r2, [r3, #4]
 800ccea:	609a      	str	r2, [r3, #8]
 800ccec:	60da      	str	r2, [r3, #12]
 800ccee:	611a      	str	r2, [r3, #16]
 800ccf0:	615a      	str	r2, [r3, #20]
 800ccf2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800ccf4:	1d3b      	adds	r3, r7, #4
 800ccf6:	222c      	movs	r2, #44	; 0x2c
 800ccf8:	2100      	movs	r1, #0
 800ccfa:	4618      	mov	r0, r3
 800ccfc:	f001 ff98 	bl	800ec30 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800cd00:	4b44      	ldr	r3, [pc, #272]	; (800ce14 <MX_TIM8_Init+0x154>)
 800cd02:	4a45      	ldr	r2, [pc, #276]	; (800ce18 <MX_TIM8_Init+0x158>)
 800cd04:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 1280-1;
 800cd06:	4b43      	ldr	r3, [pc, #268]	; (800ce14 <MX_TIM8_Init+0x154>)
 800cd08:	f240 42ff 	movw	r2, #1279	; 0x4ff
 800cd0c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800cd0e:	4b41      	ldr	r3, [pc, #260]	; (800ce14 <MX_TIM8_Init+0x154>)
 800cd10:	2200      	movs	r2, #0
 800cd12:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 250-1;
 800cd14:	4b3f      	ldr	r3, [pc, #252]	; (800ce14 <MX_TIM8_Init+0x154>)
 800cd16:	22f9      	movs	r2, #249	; 0xf9
 800cd18:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800cd1a:	4b3e      	ldr	r3, [pc, #248]	; (800ce14 <MX_TIM8_Init+0x154>)
 800cd1c:	2200      	movs	r2, #0
 800cd1e:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800cd20:	4b3c      	ldr	r3, [pc, #240]	; (800ce14 <MX_TIM8_Init+0x154>)
 800cd22:	2200      	movs	r2, #0
 800cd24:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800cd26:	4b3b      	ldr	r3, [pc, #236]	; (800ce14 <MX_TIM8_Init+0x154>)
 800cd28:	2200      	movs	r2, #0
 800cd2a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800cd2c:	4839      	ldr	r0, [pc, #228]	; (800ce14 <MX_TIM8_Init+0x154>)
 800cd2e:	f7f9 fe3a 	bl	80069a6 <HAL_TIM_Base_Init>
 800cd32:	4603      	mov	r3, r0
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	d001      	beq.n	800cd3c <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 800cd38:	f000 fbde 	bl	800d4f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800cd3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cd40:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800cd42:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800cd46:	4619      	mov	r1, r3
 800cd48:	4832      	ldr	r0, [pc, #200]	; (800ce14 <MX_TIM8_Init+0x154>)
 800cd4a:	f7fa fb33 	bl	80073b4 <HAL_TIM_ConfigClockSource>
 800cd4e:	4603      	mov	r3, r0
 800cd50:	2b00      	cmp	r3, #0
 800cd52:	d001      	beq.n	800cd58 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 800cd54:	f000 fbd0 	bl	800d4f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800cd58:	482e      	ldr	r0, [pc, #184]	; (800ce14 <MX_TIM8_Init+0x154>)
 800cd5a:	f7f9 fea4 	bl	8006aa6 <HAL_TIM_PWM_Init>
 800cd5e:	4603      	mov	r3, r0
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	d001      	beq.n	800cd68 <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 800cd64:	f000 fbc8 	bl	800d4f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800cd68:	2320      	movs	r3, #32
 800cd6a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_UPDATE;
 800cd6c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800cd70:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800cd72:	2300      	movs	r3, #0
 800cd74:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800cd76:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800cd7a:	4619      	mov	r1, r3
 800cd7c:	4825      	ldr	r0, [pc, #148]	; (800ce14 <MX_TIM8_Init+0x154>)
 800cd7e:	f7fb f837 	bl	8007df0 <HAL_TIMEx_MasterConfigSynchronization>
 800cd82:	4603      	mov	r3, r0
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	d001      	beq.n	800cd8c <MX_TIM8_Init+0xcc>
  {
    Error_Handler();
 800cd88:	f000 fbb6 	bl	800d4f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800cd8c:	2360      	movs	r3, #96	; 0x60
 800cd8e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 800cd90:	2300      	movs	r3, #0
 800cd92:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800cd94:	2300      	movs	r3, #0
 800cd96:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800cd98:	2300      	movs	r3, #0
 800cd9a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800cd9c:	2300      	movs	r3, #0
 800cd9e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800cda0:	2300      	movs	r3, #0
 800cda2:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800cda4:	2300      	movs	r3, #0
 800cda6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800cda8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800cdac:	2200      	movs	r2, #0
 800cdae:	4619      	mov	r1, r3
 800cdb0:	4818      	ldr	r0, [pc, #96]	; (800ce14 <MX_TIM8_Init+0x154>)
 800cdb2:	f7fa f9e7 	bl	8007184 <HAL_TIM_PWM_ConfigChannel>
 800cdb6:	4603      	mov	r3, r0
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	d001      	beq.n	800cdc0 <MX_TIM8_Init+0x100>
  {
    Error_Handler();
 800cdbc:	f000 fb9c 	bl	800d4f8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800cdc0:	2300      	movs	r3, #0
 800cdc2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800cdc4:	2300      	movs	r3, #0
 800cdc6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800cdc8:	2300      	movs	r3, #0
 800cdca:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800cdcc:	2300      	movs	r3, #0
 800cdce:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800cdd0:	2300      	movs	r3, #0
 800cdd2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800cdd4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800cdd8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800cdda:	2300      	movs	r3, #0
 800cddc:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800cdde:	2300      	movs	r3, #0
 800cde0:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800cde2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800cde6:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800cde8:	2300      	movs	r3, #0
 800cdea:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800cdec:	2300      	movs	r3, #0
 800cdee:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800cdf0:	1d3b      	adds	r3, r7, #4
 800cdf2:	4619      	mov	r1, r3
 800cdf4:	4807      	ldr	r0, [pc, #28]	; (800ce14 <MX_TIM8_Init+0x154>)
 800cdf6:	f7fb f883 	bl	8007f00 <HAL_TIMEx_ConfigBreakDeadTime>
 800cdfa:	4603      	mov	r3, r0
 800cdfc:	2b00      	cmp	r3, #0
 800cdfe:	d001      	beq.n	800ce04 <MX_TIM8_Init+0x144>
  {
    Error_Handler();
 800ce00:	f000 fb7a 	bl	800d4f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 800ce04:	4803      	ldr	r0, [pc, #12]	; (800ce14 <MX_TIM8_Init+0x154>)
 800ce06:	f001 fc75 	bl	800e6f4 <HAL_TIM_MspPostInit>

}
 800ce0a:	bf00      	nop
 800ce0c:	3768      	adds	r7, #104	; 0x68
 800ce0e:	46bd      	mov	sp, r7
 800ce10:	bd80      	pop	{r7, pc}
 800ce12:	bf00      	nop
 800ce14:	20010384 	.word	0x20010384
 800ce18:	40013400 	.word	0x40013400

0800ce1c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800ce1c:	b580      	push	{r7, lr}
 800ce1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800ce20:	4b22      	ldr	r3, [pc, #136]	; (800ceac <MX_USART3_UART_Init+0x90>)
 800ce22:	4a23      	ldr	r2, [pc, #140]	; (800ceb0 <MX_USART3_UART_Init+0x94>)
 800ce24:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800ce26:	4b21      	ldr	r3, [pc, #132]	; (800ceac <MX_USART3_UART_Init+0x90>)
 800ce28:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800ce2c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800ce2e:	4b1f      	ldr	r3, [pc, #124]	; (800ceac <MX_USART3_UART_Init+0x90>)
 800ce30:	2200      	movs	r2, #0
 800ce32:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800ce34:	4b1d      	ldr	r3, [pc, #116]	; (800ceac <MX_USART3_UART_Init+0x90>)
 800ce36:	2200      	movs	r2, #0
 800ce38:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800ce3a:	4b1c      	ldr	r3, [pc, #112]	; (800ceac <MX_USART3_UART_Init+0x90>)
 800ce3c:	2200      	movs	r2, #0
 800ce3e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800ce40:	4b1a      	ldr	r3, [pc, #104]	; (800ceac <MX_USART3_UART_Init+0x90>)
 800ce42:	220c      	movs	r2, #12
 800ce44:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800ce46:	4b19      	ldr	r3, [pc, #100]	; (800ceac <MX_USART3_UART_Init+0x90>)
 800ce48:	2200      	movs	r2, #0
 800ce4a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800ce4c:	4b17      	ldr	r3, [pc, #92]	; (800ceac <MX_USART3_UART_Init+0x90>)
 800ce4e:	2200      	movs	r2, #0
 800ce50:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800ce52:	4b16      	ldr	r3, [pc, #88]	; (800ceac <MX_USART3_UART_Init+0x90>)
 800ce54:	2200      	movs	r2, #0
 800ce56:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800ce58:	4b14      	ldr	r3, [pc, #80]	; (800ceac <MX_USART3_UART_Init+0x90>)
 800ce5a:	2200      	movs	r2, #0
 800ce5c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800ce5e:	4b13      	ldr	r3, [pc, #76]	; (800ceac <MX_USART3_UART_Init+0x90>)
 800ce60:	2200      	movs	r2, #0
 800ce62:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800ce64:	4811      	ldr	r0, [pc, #68]	; (800ceac <MX_USART3_UART_Init+0x90>)
 800ce66:	f7fb f8e7 	bl	8008038 <HAL_UART_Init>
 800ce6a:	4603      	mov	r3, r0
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	d001      	beq.n	800ce74 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 800ce70:	f000 fb42 	bl	800d4f8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800ce74:	2100      	movs	r1, #0
 800ce76:	480d      	ldr	r0, [pc, #52]	; (800ceac <MX_USART3_UART_Init+0x90>)
 800ce78:	f7fc fc8d 	bl	8009796 <HAL_UARTEx_SetTxFifoThreshold>
 800ce7c:	4603      	mov	r3, r0
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	d001      	beq.n	800ce86 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800ce82:	f000 fb39 	bl	800d4f8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800ce86:	2100      	movs	r1, #0
 800ce88:	4808      	ldr	r0, [pc, #32]	; (800ceac <MX_USART3_UART_Init+0x90>)
 800ce8a:	f7fc fcc2 	bl	8009812 <HAL_UARTEx_SetRxFifoThreshold>
 800ce8e:	4603      	mov	r3, r0
 800ce90:	2b00      	cmp	r3, #0
 800ce92:	d001      	beq.n	800ce98 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800ce94:	f000 fb30 	bl	800d4f8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800ce98:	4804      	ldr	r0, [pc, #16]	; (800ceac <MX_USART3_UART_Init+0x90>)
 800ce9a:	f7fc fc43 	bl	8009724 <HAL_UARTEx_DisableFifoMode>
 800ce9e:	4603      	mov	r3, r0
 800cea0:	2b00      	cmp	r3, #0
 800cea2:	d001      	beq.n	800cea8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800cea4:	f000 fb28 	bl	800d4f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800cea8:	bf00      	nop
 800ceaa:	bd80      	pop	{r7, pc}
 800ceac:	20010404 	.word	0x20010404
 800ceb0:	40004800 	.word	0x40004800

0800ceb4 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 800ceb4:	b580      	push	{r7, lr}
 800ceb6:	b082      	sub	sp, #8
 800ceb8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800ceba:	4b16      	ldr	r3, [pc, #88]	; (800cf14 <MX_DMA_Init+0x60>)
 800cebc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cebe:	4a15      	ldr	r2, [pc, #84]	; (800cf14 <MX_DMA_Init+0x60>)
 800cec0:	f043 0304 	orr.w	r3, r3, #4
 800cec4:	6493      	str	r3, [r2, #72]	; 0x48
 800cec6:	4b13      	ldr	r3, [pc, #76]	; (800cf14 <MX_DMA_Init+0x60>)
 800cec8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ceca:	f003 0304 	and.w	r3, r3, #4
 800cece:	607b      	str	r3, [r7, #4]
 800ced0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800ced2:	4b10      	ldr	r3, [pc, #64]	; (800cf14 <MX_DMA_Init+0x60>)
 800ced4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ced6:	4a0f      	ldr	r2, [pc, #60]	; (800cf14 <MX_DMA_Init+0x60>)
 800ced8:	f043 0301 	orr.w	r3, r3, #1
 800cedc:	6493      	str	r3, [r2, #72]	; 0x48
 800cede:	4b0d      	ldr	r3, [pc, #52]	; (800cf14 <MX_DMA_Init+0x60>)
 800cee0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cee2:	f003 0301 	and.w	r3, r3, #1
 800cee6:	603b      	str	r3, [r7, #0]
 800cee8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800ceea:	2200      	movs	r2, #0
 800ceec:	2100      	movs	r1, #0
 800ceee:	200b      	movs	r0, #11
 800cef0:	f7f5 feff 	bl	8002cf2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800cef4:	200b      	movs	r0, #11
 800cef6:	f7f5 ff18 	bl	8002d2a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800cefa:	2200      	movs	r2, #0
 800cefc:	2100      	movs	r1, #0
 800cefe:	200c      	movs	r0, #12
 800cf00:	f7f5 fef7 	bl	8002cf2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800cf04:	200c      	movs	r0, #12
 800cf06:	f7f5 ff10 	bl	8002d2a <HAL_NVIC_EnableIRQ>

}
 800cf0a:	bf00      	nop
 800cf0c:	3708      	adds	r7, #8
 800cf0e:	46bd      	mov	sp, r7
 800cf10:	bd80      	pop	{r7, pc}
 800cf12:	bf00      	nop
 800cf14:	40021000 	.word	0x40021000

0800cf18 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800cf18:	b580      	push	{r7, lr}
 800cf1a:	b08e      	sub	sp, #56	; 0x38
 800cf1c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cf1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cf22:	2200      	movs	r2, #0
 800cf24:	601a      	str	r2, [r3, #0]
 800cf26:	605a      	str	r2, [r3, #4]
 800cf28:	609a      	str	r2, [r3, #8]
 800cf2a:	60da      	str	r2, [r3, #12]
 800cf2c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800cf2e:	4bb6      	ldr	r3, [pc, #728]	; (800d208 <MX_GPIO_Init+0x2f0>)
 800cf30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cf32:	4ab5      	ldr	r2, [pc, #724]	; (800d208 <MX_GPIO_Init+0x2f0>)
 800cf34:	f043 0310 	orr.w	r3, r3, #16
 800cf38:	64d3      	str	r3, [r2, #76]	; 0x4c
 800cf3a:	4bb3      	ldr	r3, [pc, #716]	; (800d208 <MX_GPIO_Init+0x2f0>)
 800cf3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cf3e:	f003 0310 	and.w	r3, r3, #16
 800cf42:	623b      	str	r3, [r7, #32]
 800cf44:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800cf46:	4bb0      	ldr	r3, [pc, #704]	; (800d208 <MX_GPIO_Init+0x2f0>)
 800cf48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cf4a:	4aaf      	ldr	r2, [pc, #700]	; (800d208 <MX_GPIO_Init+0x2f0>)
 800cf4c:	f043 0320 	orr.w	r3, r3, #32
 800cf50:	64d3      	str	r3, [r2, #76]	; 0x4c
 800cf52:	4bad      	ldr	r3, [pc, #692]	; (800d208 <MX_GPIO_Init+0x2f0>)
 800cf54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cf56:	f003 0320 	and.w	r3, r3, #32
 800cf5a:	61fb      	str	r3, [r7, #28]
 800cf5c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800cf5e:	4baa      	ldr	r3, [pc, #680]	; (800d208 <MX_GPIO_Init+0x2f0>)
 800cf60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cf62:	4aa9      	ldr	r2, [pc, #676]	; (800d208 <MX_GPIO_Init+0x2f0>)
 800cf64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cf68:	64d3      	str	r3, [r2, #76]	; 0x4c
 800cf6a:	4ba7      	ldr	r3, [pc, #668]	; (800d208 <MX_GPIO_Init+0x2f0>)
 800cf6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cf6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cf72:	61bb      	str	r3, [r7, #24]
 800cf74:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800cf76:	4ba4      	ldr	r3, [pc, #656]	; (800d208 <MX_GPIO_Init+0x2f0>)
 800cf78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cf7a:	4aa3      	ldr	r2, [pc, #652]	; (800d208 <MX_GPIO_Init+0x2f0>)
 800cf7c:	f043 0304 	orr.w	r3, r3, #4
 800cf80:	64d3      	str	r3, [r2, #76]	; 0x4c
 800cf82:	4ba1      	ldr	r3, [pc, #644]	; (800d208 <MX_GPIO_Init+0x2f0>)
 800cf84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cf86:	f003 0304 	and.w	r3, r3, #4
 800cf8a:	617b      	str	r3, [r7, #20]
 800cf8c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800cf8e:	4b9e      	ldr	r3, [pc, #632]	; (800d208 <MX_GPIO_Init+0x2f0>)
 800cf90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cf92:	4a9d      	ldr	r2, [pc, #628]	; (800d208 <MX_GPIO_Init+0x2f0>)
 800cf94:	f043 0301 	orr.w	r3, r3, #1
 800cf98:	64d3      	str	r3, [r2, #76]	; 0x4c
 800cf9a:	4b9b      	ldr	r3, [pc, #620]	; (800d208 <MX_GPIO_Init+0x2f0>)
 800cf9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cf9e:	f003 0301 	and.w	r3, r3, #1
 800cfa2:	613b      	str	r3, [r7, #16]
 800cfa4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800cfa6:	4b98      	ldr	r3, [pc, #608]	; (800d208 <MX_GPIO_Init+0x2f0>)
 800cfa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cfaa:	4a97      	ldr	r2, [pc, #604]	; (800d208 <MX_GPIO_Init+0x2f0>)
 800cfac:	f043 0302 	orr.w	r3, r3, #2
 800cfb0:	64d3      	str	r3, [r2, #76]	; 0x4c
 800cfb2:	4b95      	ldr	r3, [pc, #596]	; (800d208 <MX_GPIO_Init+0x2f0>)
 800cfb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cfb6:	f003 0302 	and.w	r3, r3, #2
 800cfba:	60fb      	str	r3, [r7, #12]
 800cfbc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800cfbe:	4b92      	ldr	r3, [pc, #584]	; (800d208 <MX_GPIO_Init+0x2f0>)
 800cfc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cfc2:	4a91      	ldr	r2, [pc, #580]	; (800d208 <MX_GPIO_Init+0x2f0>)
 800cfc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cfc8:	64d3      	str	r3, [r2, #76]	; 0x4c
 800cfca:	4b8f      	ldr	r3, [pc, #572]	; (800d208 <MX_GPIO_Init+0x2f0>)
 800cfcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cfce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cfd2:	60bb      	str	r3, [r7, #8]
 800cfd4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800cfd6:	4b8c      	ldr	r3, [pc, #560]	; (800d208 <MX_GPIO_Init+0x2f0>)
 800cfd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cfda:	4a8b      	ldr	r2, [pc, #556]	; (800d208 <MX_GPIO_Init+0x2f0>)
 800cfdc:	f043 0308 	orr.w	r3, r3, #8
 800cfe0:	64d3      	str	r3, [r2, #76]	; 0x4c
 800cfe2:	4b89      	ldr	r3, [pc, #548]	; (800d208 <MX_GPIO_Init+0x2f0>)
 800cfe4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cfe6:	f003 0308 	and.w	r3, r3, #8
 800cfea:	607b      	str	r3, [r7, #4]
 800cfec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LCD_RW_Pin|LCD_E_Pin|GPIO_PE6_Pin|OUT_LED3_Pin 
 800cfee:	2200      	movs	r2, #0
 800cff0:	f245 51e4 	movw	r1, #21988	; 0x55e4
 800cff4:	4885      	ldr	r0, [pc, #532]	; (800d20c <MX_GPIO_Init+0x2f4>)
 800cff6:	f7f6 fb2b 	bl	8003650 <HAL_GPIO_WritePin>
                          |OUT_LED2_Pin|OUT_LED1_Pin|TP_CS_Pin|GPIO_PIN_14, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, I2C2_SDA_Pin|GPIO_PF2_Pin|TFT_RESET_Pin|OUT_MK3_Pin 
 800cffa:	2200      	movs	r2, #0
 800cffc:	f242 31a5 	movw	r1, #9125	; 0x23a5
 800d000:	4883      	ldr	r0, [pc, #524]	; (800d210 <MX_GPIO_Init+0x2f8>)
 800d002:	f7f6 fb25 	bl	8003650 <HAL_GPIO_WritePin>
                          |OUT_MK4_Pin|GPIO_PF9_Pin|GPIO_PF13_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RS232_TxD_Pin|TFT_CS_Pin, GPIO_PIN_RESET);
 800d006:	2200      	movs	r2, #0
 800d008:	2111      	movs	r1, #17
 800d00a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800d00e:	f7f6 fb1f 	bl	8003650 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PB2_Pin|RTC_CS_Pin|TFT_DC_Pin|GPIO_PIN_3 
 800d012:	2200      	movs	r2, #0
 800d014:	f249 014c 	movw	r1, #36940	; 0x904c
 800d018:	487e      	ldr	r0, [pc, #504]	; (800d214 <MX_GPIO_Init+0x2fc>)
 800d01a:	f7f6 fb19 	bl	8003650 <HAL_GPIO_WritePin>
                          |GPIO_PB6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, OUT_MK1_Pin|OUT_MK2_Pin, GPIO_PIN_RESET);
 800d01e:	2200      	movs	r2, #0
 800d020:	2103      	movs	r1, #3
 800d022:	487d      	ldr	r0, [pc, #500]	; (800d218 <MX_GPIO_Init+0x300>)
 800d024:	f7f6 fb14 	bl	8003650 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, SD_CS_Pin|GPIO_PD15_Pin|CAN_TxD_Pin|LCD_RS_Pin 
 800d028:	2200      	movs	r2, #0
 800d02a:	f24c 01fa 	movw	r1, #49402	; 0xc0fa
 800d02e:	487b      	ldr	r0, [pc, #492]	; (800d21c <MX_GPIO_Init+0x304>)
 800d030:	f7f6 fb0e 	bl	8003650 <HAL_GPIO_WritePin>
                          |LCD_D4_Pin|LCD_D5_Pin|LCD_D6_Pin|LCD_D7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LCD_LED_Pin|TFT_LED_Pin|_485_TxD_Pin, GPIO_PIN_RESET);
 800d034:	2200      	movs	r2, #0
 800d036:	f44f 5198 	mov.w	r1, #4864	; 0x1300
 800d03a:	4879      	ldr	r0, [pc, #484]	; (800d220 <MX_GPIO_Init+0x308>)
 800d03c:	f7f6 fb08 	bl	8003650 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LCD_RW_Pin LCD_E_Pin GPIO_PE6_Pin OUT_LED3_Pin 
                           OUT_LED2_Pin OUT_LED1_Pin PE14 */
  GPIO_InitStruct.Pin = LCD_RW_Pin|LCD_E_Pin|GPIO_PE6_Pin|OUT_LED3_Pin 
 800d040:	f244 53e4 	movw	r3, #17892	; 0x45e4
 800d044:	627b      	str	r3, [r7, #36]	; 0x24
                          |OUT_LED2_Pin|OUT_LED1_Pin|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d046:	2301      	movs	r3, #1
 800d048:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d04a:	2300      	movs	r3, #0
 800d04c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d04e:	2300      	movs	r3, #0
 800d050:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800d052:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d056:	4619      	mov	r1, r3
 800d058:	486c      	ldr	r0, [pc, #432]	; (800d20c <MX_GPIO_Init+0x2f4>)
 800d05a:	f7f6 f94f 	bl	80032fc <HAL_GPIO_Init>

  /*Configure GPIO pins : I2C2_SDA_Pin GPIO_PF2_Pin GPIO_PF9_Pin GPIO_PF13_Pin */
  GPIO_InitStruct.Pin = I2C2_SDA_Pin|GPIO_PF2_Pin|GPIO_PF9_Pin|GPIO_PF13_Pin;
 800d05e:	f242 2305 	movw	r3, #8709	; 0x2205
 800d062:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d064:	2301      	movs	r3, #1
 800d066:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d068:	2300      	movs	r3, #0
 800d06a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d06c:	2300      	movs	r3, #0
 800d06e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800d070:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d074:	4619      	mov	r1, r3
 800d076:	4866      	ldr	r0, [pc, #408]	; (800d210 <MX_GPIO_Init+0x2f8>)
 800d078:	f7f6 f940 	bl	80032fc <HAL_GPIO_Init>

  /*Configure GPIO pins : I2C2_SCL_Pin _485_DIR_Pin */
  GPIO_InitStruct.Pin = I2C2_SCL_Pin|_485_DIR_Pin;
 800d07c:	230a      	movs	r3, #10
 800d07e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800d080:	2300      	movs	r3, #0
 800d082:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d084:	2300      	movs	r3, #0
 800d086:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800d088:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d08c:	4619      	mov	r1, r3
 800d08e:	4860      	ldr	r0, [pc, #384]	; (800d210 <MX_GPIO_Init+0x2f8>)
 800d090:	f7f6 f934 	bl	80032fc <HAL_GPIO_Init>

  /*Configure GPIO pin : TFT_RESET_Pin */
  GPIO_InitStruct.Pin = TFT_RESET_Pin;
 800d094:	2320      	movs	r3, #32
 800d096:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d098:	2301      	movs	r3, #1
 800d09a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d09c:	2300      	movs	r3, #0
 800d09e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800d0a0:	2302      	movs	r3, #2
 800d0a2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(TFT_RESET_GPIO_Port, &GPIO_InitStruct);
 800d0a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d0a8:	4619      	mov	r1, r3
 800d0aa:	4859      	ldr	r0, [pc, #356]	; (800d210 <MX_GPIO_Init+0x2f8>)
 800d0ac:	f7f6 f926 	bl	80032fc <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT_MK3_Pin OUT_MK4_Pin */
  GPIO_InitStruct.Pin = OUT_MK3_Pin|OUT_MK4_Pin;
 800d0b0:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800d0b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800d0b6:	2311      	movs	r3, #17
 800d0b8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d0ba:	2300      	movs	r3, #0
 800d0bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d0be:	2300      	movs	r3, #0
 800d0c0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800d0c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d0c6:	4619      	mov	r1, r3
 800d0c8:	4851      	ldr	r0, [pc, #324]	; (800d210 <MX_GPIO_Init+0x2f8>)
 800d0ca:	f7f6 f917 	bl	80032fc <HAL_GPIO_Init>

  /*Configure GPIO pin : RS232_TxD_Pin */
  GPIO_InitStruct.Pin = RS232_TxD_Pin;
 800d0ce:	2301      	movs	r3, #1
 800d0d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d0d2:	2301      	movs	r3, #1
 800d0d4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d0d6:	2300      	movs	r3, #0
 800d0d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d0da:	2300      	movs	r3, #0
 800d0dc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(RS232_TxD_GPIO_Port, &GPIO_InitStruct);
 800d0de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d0e2:	4619      	mov	r1, r3
 800d0e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800d0e8:	f7f6 f908 	bl	80032fc <HAL_GPIO_Init>

  /*Configure GPIO pins : USART2_TX_Pin USART2_RX_Pin */
  GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 800d0ec:	230c      	movs	r3, #12
 800d0ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800d0f0:	2300      	movs	r3, #0
 800d0f2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d0f4:	2300      	movs	r3, #0
 800d0f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d0f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d0fc:	4619      	mov	r1, r3
 800d0fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800d102:	f7f6 f8fb 	bl	80032fc <HAL_GPIO_Init>

  /*Configure GPIO pin : TFT_CS_Pin */
  GPIO_InitStruct.Pin = TFT_CS_Pin;
 800d106:	2310      	movs	r3, #16
 800d108:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d10a:	2301      	movs	r3, #1
 800d10c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d10e:	2300      	movs	r3, #0
 800d110:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800d112:	2302      	movs	r3, #2
 800d114:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(TFT_CS_GPIO_Port, &GPIO_InitStruct);
 800d116:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d11a:	4619      	mov	r1, r3
 800d11c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800d120:	f7f6 f8ec 	bl	80032fc <HAL_GPIO_Init>

  /*Configure GPIO pins : ADC1_IN13_Pin ADC1_IN14_Pin RS232_xD_Pin */
  GPIO_InitStruct.Pin = ADC1_IN13_Pin|ADC1_IN14_Pin|RS232_xD_Pin;
 800d124:	f44f 6303 	mov.w	r3, #2096	; 0x830
 800d128:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800d12a:	2300      	movs	r3, #0
 800d12c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d12e:	2300      	movs	r3, #0
 800d130:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800d132:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d136:	4619      	mov	r1, r3
 800d138:	4839      	ldr	r0, [pc, #228]	; (800d220 <MX_GPIO_Init+0x308>)
 800d13a:	f7f6 f8df 	bl	80032fc <HAL_GPIO_Init>

  /*Configure GPIO pins : IN_MK5_Pin IN_MK7_Pin IN_MK8_Pin */
  GPIO_InitStruct.Pin = IN_MK5_Pin|IN_MK7_Pin|IN_MK8_Pin;
 800d13e:	f640 4301 	movw	r3, #3073	; 0xc01
 800d142:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800d144:	2300      	movs	r3, #0
 800d146:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d148:	2300      	movs	r3, #0
 800d14a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d14c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d150:	4619      	mov	r1, r3
 800d152:	4830      	ldr	r0, [pc, #192]	; (800d214 <MX_GPIO_Init+0x2fc>)
 800d154:	f7f6 f8d2 	bl	80032fc <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_PB2_Pin PB3 GPIO_PB6_Pin */
  GPIO_InitStruct.Pin = GPIO_PB2_Pin|GPIO_PIN_3|GPIO_PB6_Pin;
 800d158:	234c      	movs	r3, #76	; 0x4c
 800d15a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d15c:	2301      	movs	r3, #1
 800d15e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d160:	2300      	movs	r3, #0
 800d162:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d164:	2300      	movs	r3, #0
 800d166:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d168:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d16c:	4619      	mov	r1, r3
 800d16e:	4829      	ldr	r0, [pc, #164]	; (800d214 <MX_GPIO_Init+0x2fc>)
 800d170:	f7f6 f8c4 	bl	80032fc <HAL_GPIO_Init>

  /*Configure GPIO pins : IN_TL2_Pin IN_TL1_Pin */
  GPIO_InitStruct.Pin = IN_TL2_Pin|IN_TL1_Pin;
 800d174:	f44f 4310 	mov.w	r3, #36864	; 0x9000
 800d178:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800d17a:	4b2a      	ldr	r3, [pc, #168]	; (800d224 <MX_GPIO_Init+0x30c>)
 800d17c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d17e:	2300      	movs	r3, #0
 800d180:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800d182:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d186:	4619      	mov	r1, r3
 800d188:	4821      	ldr	r0, [pc, #132]	; (800d210 <MX_GPIO_Init+0x2f8>)
 800d18a:	f7f6 f8b7 	bl	80032fc <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT_MK1_Pin OUT_MK2_Pin */
  GPIO_InitStruct.Pin = OUT_MK1_Pin|OUT_MK2_Pin;
 800d18e:	2303      	movs	r3, #3
 800d190:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800d192:	2311      	movs	r3, #17
 800d194:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d196:	2300      	movs	r3, #0
 800d198:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d19a:	2300      	movs	r3, #0
 800d19c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800d19e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d1a2:	4619      	mov	r1, r3
 800d1a4:	481c      	ldr	r0, [pc, #112]	; (800d218 <MX_GPIO_Init+0x300>)
 800d1a6:	f7f6 f8a9 	bl	80032fc <HAL_GPIO_Init>

  /*Configure GPIO pin : TP_CS_Pin */
  GPIO_InitStruct.Pin = TP_CS_Pin;
 800d1aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d1ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d1b0:	2301      	movs	r3, #1
 800d1b2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d1b4:	2300      	movs	r3, #0
 800d1b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800d1b8:	2302      	movs	r3, #2
 800d1ba:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(TP_CS_GPIO_Port, &GPIO_InitStruct);
 800d1bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d1c0:	4619      	mov	r1, r3
 800d1c2:	4812      	ldr	r0, [pc, #72]	; (800d20c <MX_GPIO_Init+0x2f4>)
 800d1c4:	f7f6 f89a 	bl	80032fc <HAL_GPIO_Init>

  /*Configure GPIO pins : ENC_BUT_Pin IN_MK6_Pin */
  GPIO_InitStruct.Pin = ENC_BUT_Pin|IN_MK6_Pin;
 800d1c8:	f248 0301 	movw	r3, #32769	; 0x8001
 800d1cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800d1ce:	2300      	movs	r3, #0
 800d1d0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d1d2:	2300      	movs	r3, #0
 800d1d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800d1d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d1da:	4619      	mov	r1, r3
 800d1dc:	480b      	ldr	r0, [pc, #44]	; (800d20c <MX_GPIO_Init+0x2f4>)
 800d1de:	f7f6 f88d 	bl	80032fc <HAL_GPIO_Init>

  /*Configure GPIO pins : RTC_CS_Pin TFT_DC_Pin */
  GPIO_InitStruct.Pin = RTC_CS_Pin|TFT_DC_Pin;
 800d1e2:	f44f 4310 	mov.w	r3, #36864	; 0x9000
 800d1e6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d1e8:	2301      	movs	r3, #1
 800d1ea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d1ec:	2300      	movs	r3, #0
 800d1ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800d1f0:	2302      	movs	r3, #2
 800d1f2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d1f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d1f8:	4619      	mov	r1, r3
 800d1fa:	4806      	ldr	r0, [pc, #24]	; (800d214 <MX_GPIO_Init+0x2fc>)
 800d1fc:	f7f6 f87e 	bl	80032fc <HAL_GPIO_Init>

  /*Configure GPIO pin : TP_IRQ_Pin */
  GPIO_InitStruct.Pin = TP_IRQ_Pin;
 800d200:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800d204:	627b      	str	r3, [r7, #36]	; 0x24
 800d206:	e00f      	b.n	800d228 <MX_GPIO_Init+0x310>
 800d208:	40021000 	.word	0x40021000
 800d20c:	48001000 	.word	0x48001000
 800d210:	48001400 	.word	0x48001400
 800d214:	48000400 	.word	0x48000400
 800d218:	48001800 	.word	0x48001800
 800d21c:	48000c00 	.word	0x48000c00
 800d220:	48000800 	.word	0x48000800
 800d224:	10110000 	.word	0x10110000
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800d228:	4b27      	ldr	r3, [pc, #156]	; (800d2c8 <MX_GPIO_Init+0x3b0>)
 800d22a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d22c:	2301      	movs	r3, #1
 800d22e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TP_IRQ_GPIO_Port, &GPIO_InitStruct);
 800d230:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d234:	4619      	mov	r1, r3
 800d236:	4825      	ldr	r0, [pc, #148]	; (800d2cc <MX_GPIO_Init+0x3b4>)
 800d238:	f7f6 f860 	bl	80032fc <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 800d23c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800d240:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d242:	2301      	movs	r3, #1
 800d244:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d246:	2300      	movs	r3, #0
 800d248:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800d24a:	2302      	movs	r3, #2
 800d24c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 800d24e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d252:	4619      	mov	r1, r3
 800d254:	481e      	ldr	r0, [pc, #120]	; (800d2d0 <MX_GPIO_Init+0x3b8>)
 800d256:	f7f6 f851 	bl	80032fc <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_PD15_Pin CAN_TxD_Pin LCD_RS_Pin LCD_D4_Pin 
                           LCD_D5_Pin LCD_D6_Pin LCD_D7_Pin */
  GPIO_InitStruct.Pin = GPIO_PD15_Pin|CAN_TxD_Pin|LCD_RS_Pin|LCD_D4_Pin 
 800d25a:	f248 03fa 	movw	r3, #33018	; 0x80fa
 800d25e:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_D5_Pin|LCD_D6_Pin|LCD_D7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d260:	2301      	movs	r3, #1
 800d262:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d264:	2300      	movs	r3, #0
 800d266:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d268:	2300      	movs	r3, #0
 800d26a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800d26c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d270:	4619      	mov	r1, r3
 800d272:	4817      	ldr	r0, [pc, #92]	; (800d2d0 <MX_GPIO_Init+0x3b8>)
 800d274:	f7f6 f842 	bl	80032fc <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_LED_Pin TFT_LED_Pin _485_TxD_Pin */
  GPIO_InitStruct.Pin = LCD_LED_Pin|TFT_LED_Pin|_485_TxD_Pin;
 800d278:	f44f 5398 	mov.w	r3, #4864	; 0x1300
 800d27c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d27e:	2301      	movs	r3, #1
 800d280:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d282:	2300      	movs	r3, #0
 800d284:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d286:	2300      	movs	r3, #0
 800d288:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800d28a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d28e:	4619      	mov	r1, r3
 800d290:	4810      	ldr	r0, [pc, #64]	; (800d2d4 <MX_GPIO_Init+0x3bc>)
 800d292:	f7f6 f833 	bl	80032fc <HAL_GPIO_Init>

  /*Configure GPIO pins : CAN_RxD_Pin _485_RxD_Pin */
  GPIO_InitStruct.Pin = CAN_RxD_Pin|_485_RxD_Pin;
 800d296:	2305      	movs	r3, #5
 800d298:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800d29a:	2300      	movs	r3, #0
 800d29c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d29e:	2300      	movs	r3, #0
 800d2a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800d2a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d2a6:	4619      	mov	r1, r3
 800d2a8:	4809      	ldr	r0, [pc, #36]	; (800d2d0 <MX_GPIO_Init+0x3b8>)
 800d2aa:	f7f6 f827 	bl	80032fc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 800d2ae:	2200      	movs	r2, #0
 800d2b0:	2101      	movs	r1, #1
 800d2b2:	2028      	movs	r0, #40	; 0x28
 800d2b4:	f7f5 fd1d 	bl	8002cf2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800d2b8:	2028      	movs	r0, #40	; 0x28
 800d2ba:	f7f5 fd36 	bl	8002d2a <HAL_NVIC_EnableIRQ>

}
 800d2be:	bf00      	nop
 800d2c0:	3738      	adds	r7, #56	; 0x38
 800d2c2:	46bd      	mov	sp, r7
 800d2c4:	bd80      	pop	{r7, pc}
 800d2c6:	bf00      	nop
 800d2c8:	10310000 	.word	0x10310000
 800d2cc:	48000400 	.word	0x48000400
 800d2d0:	48000c00 	.word	0x48000c00
 800d2d4:	48000800 	.word	0x48000800

0800d2d8 <HAL_SPI_TxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800d2d8:	b580      	push	{r7, lr}
 800d2da:	b082      	sub	sp, #8
 800d2dc:	af00      	add	r7, sp, #0
 800d2de:	6078      	str	r0, [r7, #4]
  if(hspi == &hspi3)
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	4a0c      	ldr	r2, [pc, #48]	; (800d314 <HAL_SPI_TxCpltCallback+0x3c>)
 800d2e4:	4293      	cmp	r3, r2
 800d2e6:	d111      	bne.n	800d30c <HAL_SPI_TxCpltCallback+0x34>
  {
    dma_spi_cnt--;
 800d2e8:	4b0b      	ldr	r3, [pc, #44]	; (800d318 <HAL_SPI_TxCpltCallback+0x40>)
 800d2ea:	681b      	ldr	r3, [r3, #0]
 800d2ec:	3b01      	subs	r3, #1
 800d2ee:	4a0a      	ldr	r2, [pc, #40]	; (800d318 <HAL_SPI_TxCpltCallback+0x40>)
 800d2f0:	6013      	str	r3, [r2, #0]
    if(dma_spi_cnt==0)
 800d2f2:	4b09      	ldr	r3, [pc, #36]	; (800d318 <HAL_SPI_TxCpltCallback+0x40>)
 800d2f4:	681b      	ldr	r3, [r3, #0]
 800d2f6:	2b00      	cmp	r3, #0
 800d2f8:	d108      	bne.n	800d30c <HAL_SPI_TxCpltCallback+0x34>
    {
      HAL_SPI_DMAStop(&hspi3);
 800d2fa:	4806      	ldr	r0, [pc, #24]	; (800d314 <HAL_SPI_TxCpltCallback+0x3c>)
 800d2fc:	f7f9 f962 	bl	80065c4 <HAL_SPI_DMAStop>
      dma_spi_cnt=1;
 800d300:	4b05      	ldr	r3, [pc, #20]	; (800d318 <HAL_SPI_TxCpltCallback+0x40>)
 800d302:	2201      	movs	r2, #1
 800d304:	601a      	str	r2, [r3, #0]
      dma_spi_fl=1;
 800d306:	4b05      	ldr	r3, [pc, #20]	; (800d31c <HAL_SPI_TxCpltCallback+0x44>)
 800d308:	2201      	movs	r2, #1
 800d30a:	701a      	strb	r2, [r3, #0]
    }
  }
}
 800d30c:	bf00      	nop
 800d30e:	3708      	adds	r7, #8
 800d310:	46bd      	mov	sp, r7
 800d312:	bd80      	pop	{r7, pc}
 800d314:	2001056c 	.word	0x2001056c
 800d318:	2000001c 	.word	0x2000001c
 800d31c:	200102c9 	.word	0x200102c9

0800d320 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback (uint16_t GPIO_Pin)
{
 800d320:	b580      	push	{r7, lr}
 800d322:	b084      	sub	sp, #16
 800d324:	af00      	add	r7, sp, #0
 800d326:	4603      	mov	r3, r0
 800d328:	80fb      	strh	r3, [r7, #6]
	  switch(GPIO_Pin)
 800d32a:	88fb      	ldrh	r3, [r7, #6]
 800d32c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d330:	d027      	beq.n	800d382 <HAL_GPIO_EXTI_Callback+0x62>
 800d332:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d336:	dc39      	bgt.n	800d3ac <HAL_GPIO_EXTI_Callback+0x8c>
 800d338:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d33c:	d029      	beq.n	800d392 <HAL_GPIO_EXTI_Callback+0x72>
 800d33e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d342:	d133      	bne.n	800d3ac <HAL_GPIO_EXTI_Callback+0x8c>
	  {
	  	  	case TP_IRQ_Pin:
				if(XPT2046_TouchPressed())
 800d344:	f7fd f99c 	bl	800a680 <XPT2046_TouchPressed>
 800d348:	4603      	mov	r3, r0
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	d029      	beq.n	800d3a2 <HAL_GPIO_EXTI_Callback+0x82>
				{
					 uint16_t x = 0, y = 0;
 800d34e:	2300      	movs	r3, #0
 800d350:	81fb      	strh	r3, [r7, #14]
 800d352:	2300      	movs	r3, #0
 800d354:	81bb      	strh	r3, [r7, #12]
					 if(XPT2046_TouchGetCoordinates(&x, &y))
 800d356:	f107 020c 	add.w	r2, r7, #12
 800d35a:	f107 030e 	add.w	r3, r7, #14
 800d35e:	4611      	mov	r1, r2
 800d360:	4618      	mov	r0, r3
 800d362:	f7fd f9a3 	bl	800a6ac <XPT2046_TouchGetCoordinates>
 800d366:	4603      	mov	r3, r0
 800d368:	2b00      	cmp	r3, #0
 800d36a:	d01a      	beq.n	800d3a2 <HAL_GPIO_EXTI_Callback+0x82>
					 {
						 GUI_touch(TFTstav,x,y);
 800d36c:	4b11      	ldr	r3, [pc, #68]	; (800d3b4 <HAL_GPIO_EXTI_Callback+0x94>)
 800d36e:	781b      	ldrb	r3, [r3, #0]
 800d370:	89f9      	ldrh	r1, [r7, #14]
 800d372:	89ba      	ldrh	r2, [r7, #12]
 800d374:	4618      	mov	r0, r3
 800d376:	f7fd fe79 	bl	800b06c <GUI_touch>
						 IRQ_flag=true;
 800d37a:	4b0f      	ldr	r3, [pc, #60]	; (800d3b8 <HAL_GPIO_EXTI_Callback+0x98>)
 800d37c:	2201      	movs	r2, #1
 800d37e:	701a      	strb	r2, [r3, #0]
					 }
				}
	  	  		break;
 800d380:	e00f      	b.n	800d3a2 <HAL_GPIO_EXTI_Callback+0x82>
	  	  	case IN_TL1_Pin:
	  	  		if(TFTstav==8)
 800d382:	4b0c      	ldr	r3, [pc, #48]	; (800d3b4 <HAL_GPIO_EXTI_Callback+0x94>)
 800d384:	781b      	ldrb	r3, [r3, #0]
 800d386:	2b08      	cmp	r3, #8
 800d388:	d10d      	bne.n	800d3a6 <HAL_GPIO_EXTI_Callback+0x86>
	  	  		{
		  			HAL_TIM_Base_Start_IT(&htim4);
 800d38a:	480c      	ldr	r0, [pc, #48]	; (800d3bc <HAL_GPIO_EXTI_Callback+0x9c>)
 800d38c:	f7f9 fb36 	bl	80069fc <HAL_TIM_Base_Start_IT>
	  	  		}
	  	  		break;
 800d390:	e009      	b.n	800d3a6 <HAL_GPIO_EXTI_Callback+0x86>
	  	  	case IN_TL2_Pin:
	  	  		if(TFTstav==8)
 800d392:	4b08      	ldr	r3, [pc, #32]	; (800d3b4 <HAL_GPIO_EXTI_Callback+0x94>)
 800d394:	781b      	ldrb	r3, [r3, #0]
 800d396:	2b08      	cmp	r3, #8
 800d398:	d107      	bne.n	800d3aa <HAL_GPIO_EXTI_Callback+0x8a>
	  	  		{
		  			HAL_TIM_Base_Start_IT(&htim5);
 800d39a:	4809      	ldr	r0, [pc, #36]	; (800d3c0 <HAL_GPIO_EXTI_Callback+0xa0>)
 800d39c:	f7f9 fb2e 	bl	80069fc <HAL_TIM_Base_Start_IT>
	  	  		}
	  	  		break;
 800d3a0:	e003      	b.n	800d3aa <HAL_GPIO_EXTI_Callback+0x8a>
	  	  		break;
 800d3a2:	bf00      	nop
 800d3a4:	e002      	b.n	800d3ac <HAL_GPIO_EXTI_Callback+0x8c>
	  	  		break;
 800d3a6:	bf00      	nop
 800d3a8:	e000      	b.n	800d3ac <HAL_GPIO_EXTI_Callback+0x8c>
	  	  		break;
 800d3aa:	bf00      	nop
	  }
}
 800d3ac:	bf00      	nop
 800d3ae:	3710      	adds	r7, #16
 800d3b0:	46bd      	mov	sp, r7
 800d3b2:	bd80      	pop	{r7, pc}
 800d3b4:	200102ca 	.word	0x200102ca
 800d3b8:	200102cc 	.word	0x200102cc
 800d3bc:	200103c4 	.word	0x200103c4
 800d3c0:	200104ec 	.word	0x200104ec

0800d3c4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d3c4:	b580      	push	{r7, lr}
 800d3c6:	b082      	sub	sp, #8
 800d3c8:	af00      	add	r7, sp, #0
 800d3ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
	UNUSED(htim);
	if(htim == &htim4)
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	4a44      	ldr	r2, [pc, #272]	; (800d4e0 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 800d3d0:	4293      	cmp	r3, r2
 800d3d2:	d10f      	bne.n	800d3f4 <HAL_TIM_PeriodElapsedCallback+0x30>
	{
		if(HAL_GPIO_ReadPin(IN_TL1_GPIO_Port, IN_TL1_Pin)==RESET)
 800d3d4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800d3d8:	4842      	ldr	r0, [pc, #264]	; (800d4e4 <HAL_TIM_PeriodElapsedCallback+0x120>)
 800d3da:	f7f6 f921 	bl	8003620 <HAL_GPIO_ReadPin>
 800d3de:	4603      	mov	r3, r0
 800d3e0:	2b00      	cmp	r3, #0
 800d3e2:	d107      	bne.n	800d3f4 <HAL_TIM_PeriodElapsedCallback+0x30>
		{
	    	HAL_GPIO_TogglePin(OUT_LED2_GPIO_Port, OUT_LED2_Pin);
 800d3e4:	f44f 7180 	mov.w	r1, #256	; 0x100
 800d3e8:	483f      	ldr	r0, [pc, #252]	; (800d4e8 <HAL_TIM_PeriodElapsedCallback+0x124>)
 800d3ea:	f7f6 f949 	bl	8003680 <HAL_GPIO_TogglePin>
			HAL_TIM_Base_Stop_IT(&htim4);
 800d3ee:	483c      	ldr	r0, [pc, #240]	; (800d4e0 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 800d3f0:	f7f9 fb2e 	bl	8006a50 <HAL_TIM_Base_Stop_IT>
		}
	}
	if(htim == &htim5)
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	4a3d      	ldr	r2, [pc, #244]	; (800d4ec <HAL_TIM_PeriodElapsedCallback+0x128>)
 800d3f8:	4293      	cmp	r3, r2
 800d3fa:	d10e      	bne.n	800d41a <HAL_TIM_PeriodElapsedCallback+0x56>
	{
		if(HAL_GPIO_ReadPin(IN_TL2_GPIO_Port, IN_TL2_Pin)==RESET)
 800d3fc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800d400:	4838      	ldr	r0, [pc, #224]	; (800d4e4 <HAL_TIM_PeriodElapsedCallback+0x120>)
 800d402:	f7f6 f90d 	bl	8003620 <HAL_GPIO_ReadPin>
 800d406:	4603      	mov	r3, r0
 800d408:	2b00      	cmp	r3, #0
 800d40a:	d106      	bne.n	800d41a <HAL_TIM_PeriodElapsedCallback+0x56>
		{
			HAL_GPIO_TogglePin(OUT_LED3_GPIO_Port, OUT_LED3_Pin);
 800d40c:	2180      	movs	r1, #128	; 0x80
 800d40e:	4836      	ldr	r0, [pc, #216]	; (800d4e8 <HAL_TIM_PeriodElapsedCallback+0x124>)
 800d410:	f7f6 f936 	bl	8003680 <HAL_GPIO_TogglePin>
			HAL_TIM_Base_Stop_IT(&htim5);
 800d414:	4835      	ldr	r0, [pc, #212]	; (800d4ec <HAL_TIM_PeriodElapsedCallback+0x128>)
 800d416:	f7f9 fb1b 	bl	8006a50 <HAL_TIM_Base_Stop_IT>
		}
	}
	if(htim == &htim6)
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	4a34      	ldr	r2, [pc, #208]	; (800d4f0 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 800d41e:	4293      	cmp	r3, r2
 800d420:	d158      	bne.n	800d4d4 <HAL_TIM_PeriodElapsedCallback+0x110>
	{
		switch(semafor)
 800d422:	4b34      	ldr	r3, [pc, #208]	; (800d4f4 <HAL_TIM_PeriodElapsedCallback+0x130>)
 800d424:	781b      	ldrb	r3, [r3, #0]
 800d426:	2b02      	cmp	r3, #2
 800d428:	d03a      	beq.n	800d4a0 <HAL_TIM_PeriodElapsedCallback+0xdc>
 800d42a:	2b02      	cmp	r3, #2
 800d42c:	dc53      	bgt.n	800d4d6 <HAL_TIM_PeriodElapsedCallback+0x112>
 800d42e:	2b00      	cmp	r3, #0
 800d430:	d002      	beq.n	800d438 <HAL_TIM_PeriodElapsedCallback+0x74>
 800d432:	2b01      	cmp	r3, #1
 800d434:	d01a      	beq.n	800d46c <HAL_TIM_PeriodElapsedCallback+0xa8>
			set_rgb (255,0,255);
			semafor=0;
			break;
		}
	}
}
 800d436:	e04e      	b.n	800d4d6 <HAL_TIM_PeriodElapsedCallback+0x112>
			HAL_GPIO_WritePin(OUT_LED2_GPIO_Port, OUT_LED2_Pin, SET);
 800d438:	2201      	movs	r2, #1
 800d43a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800d43e:	482a      	ldr	r0, [pc, #168]	; (800d4e8 <HAL_TIM_PeriodElapsedCallback+0x124>)
 800d440:	f7f6 f906 	bl	8003650 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_LED1_GPIO_Port, OUT_LED1_Pin, RESET);
 800d444:	2200      	movs	r2, #0
 800d446:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800d44a:	4827      	ldr	r0, [pc, #156]	; (800d4e8 <HAL_TIM_PeriodElapsedCallback+0x124>)
 800d44c:	f7f6 f900 	bl	8003650 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_LED3_GPIO_Port, OUT_LED3_Pin, RESET);
 800d450:	2200      	movs	r2, #0
 800d452:	2180      	movs	r1, #128	; 0x80
 800d454:	4824      	ldr	r0, [pc, #144]	; (800d4e8 <HAL_TIM_PeriodElapsedCallback+0x124>)
 800d456:	f7f6 f8fb 	bl	8003650 <HAL_GPIO_WritePin>
			set_rgb (0,255,255);
 800d45a:	22ff      	movs	r2, #255	; 0xff
 800d45c:	21ff      	movs	r1, #255	; 0xff
 800d45e:	2000      	movs	r0, #0
 800d460:	f7fe fcac 	bl	800bdbc <set_rgb>
			semafor=1;
 800d464:	4b23      	ldr	r3, [pc, #140]	; (800d4f4 <HAL_TIM_PeriodElapsedCallback+0x130>)
 800d466:	2201      	movs	r2, #1
 800d468:	701a      	strb	r2, [r3, #0]
			break;
 800d46a:	e034      	b.n	800d4d6 <HAL_TIM_PeriodElapsedCallback+0x112>
			HAL_GPIO_WritePin(OUT_LED2_GPIO_Port, OUT_LED2_Pin, RESET);
 800d46c:	2200      	movs	r2, #0
 800d46e:	f44f 7180 	mov.w	r1, #256	; 0x100
 800d472:	481d      	ldr	r0, [pc, #116]	; (800d4e8 <HAL_TIM_PeriodElapsedCallback+0x124>)
 800d474:	f7f6 f8ec 	bl	8003650 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_LED1_GPIO_Port, OUT_LED1_Pin, RESET);
 800d478:	2200      	movs	r2, #0
 800d47a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800d47e:	481a      	ldr	r0, [pc, #104]	; (800d4e8 <HAL_TIM_PeriodElapsedCallback+0x124>)
 800d480:	f7f6 f8e6 	bl	8003650 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_LED3_GPIO_Port, OUT_LED3_Pin, SET);
 800d484:	2201      	movs	r2, #1
 800d486:	2180      	movs	r1, #128	; 0x80
 800d488:	4817      	ldr	r0, [pc, #92]	; (800d4e8 <HAL_TIM_PeriodElapsedCallback+0x124>)
 800d48a:	f7f6 f8e1 	bl	8003650 <HAL_GPIO_WritePin>
			set_rgb (0,0,255);
 800d48e:	22ff      	movs	r2, #255	; 0xff
 800d490:	2100      	movs	r1, #0
 800d492:	2000      	movs	r0, #0
 800d494:	f7fe fc92 	bl	800bdbc <set_rgb>
			semafor=2;
 800d498:	4b16      	ldr	r3, [pc, #88]	; (800d4f4 <HAL_TIM_PeriodElapsedCallback+0x130>)
 800d49a:	2202      	movs	r2, #2
 800d49c:	701a      	strb	r2, [r3, #0]
			break;
 800d49e:	e01a      	b.n	800d4d6 <HAL_TIM_PeriodElapsedCallback+0x112>
			HAL_GPIO_WritePin(OUT_LED2_GPIO_Port, OUT_LED2_Pin, RESET);
 800d4a0:	2200      	movs	r2, #0
 800d4a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 800d4a6:	4810      	ldr	r0, [pc, #64]	; (800d4e8 <HAL_TIM_PeriodElapsedCallback+0x124>)
 800d4a8:	f7f6 f8d2 	bl	8003650 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_LED1_GPIO_Port, OUT_LED1_Pin, SET);
 800d4ac:	2201      	movs	r2, #1
 800d4ae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800d4b2:	480d      	ldr	r0, [pc, #52]	; (800d4e8 <HAL_TIM_PeriodElapsedCallback+0x124>)
 800d4b4:	f7f6 f8cc 	bl	8003650 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_LED3_GPIO_Port, OUT_LED3_Pin, RESET);
 800d4b8:	2200      	movs	r2, #0
 800d4ba:	2180      	movs	r1, #128	; 0x80
 800d4bc:	480a      	ldr	r0, [pc, #40]	; (800d4e8 <HAL_TIM_PeriodElapsedCallback+0x124>)
 800d4be:	f7f6 f8c7 	bl	8003650 <HAL_GPIO_WritePin>
			set_rgb (255,0,255);
 800d4c2:	22ff      	movs	r2, #255	; 0xff
 800d4c4:	2100      	movs	r1, #0
 800d4c6:	20ff      	movs	r0, #255	; 0xff
 800d4c8:	f7fe fc78 	bl	800bdbc <set_rgb>
			semafor=0;
 800d4cc:	4b09      	ldr	r3, [pc, #36]	; (800d4f4 <HAL_TIM_PeriodElapsedCallback+0x130>)
 800d4ce:	2200      	movs	r2, #0
 800d4d0:	701a      	strb	r2, [r3, #0]
			break;
 800d4d2:	e000      	b.n	800d4d6 <HAL_TIM_PeriodElapsedCallback+0x112>
	}
 800d4d4:	bf00      	nop
}
 800d4d6:	bf00      	nop
 800d4d8:	3708      	adds	r7, #8
 800d4da:	46bd      	mov	sp, r7
 800d4dc:	bd80      	pop	{r7, pc}
 800d4de:	bf00      	nop
 800d4e0:	200103c4 	.word	0x200103c4
 800d4e4:	48001400 	.word	0x48001400
 800d4e8:	48001000 	.word	0x48001000
 800d4ec:	200104ec 	.word	0x200104ec
 800d4f0:	20010750 	.word	0x20010750
 800d4f4:	200102cb 	.word	0x200102cb

0800d4f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800d4f8:	b480      	push	{r7}
 800d4fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800d4fc:	bf00      	nop
 800d4fe:	46bd      	mov	sp, r7
 800d500:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d504:	4770      	bx	lr
	...

0800d508 <LCD1602_EnablePulse>:
volatile unsigned int *DWT_CONTROL = (volatile unsigned int *)0xE0001000;  //address of the register
volatile unsigned int *SCB_DEMCR = (volatile unsigned int *)0xE000EDFC;    //address of the register
/* Functions ------------------------------------------------------------------*/
//enable pulz
static void LCD1602_EnablePulse(void)
{
 800d508:	b580      	push	{r7, lr}
 800d50a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PORT_E, PIN_E, GPIO_PIN_SET);
 800d50c:	4b0c      	ldr	r3, [pc, #48]	; (800d540 <LCD1602_EnablePulse+0x38>)
 800d50e:	681b      	ldr	r3, [r3, #0]
 800d510:	4a0c      	ldr	r2, [pc, #48]	; (800d544 <LCD1602_EnablePulse+0x3c>)
 800d512:	8811      	ldrh	r1, [r2, #0]
 800d514:	2201      	movs	r2, #1
 800d516:	4618      	mov	r0, r3
 800d518:	f7f6 f89a 	bl	8003650 <HAL_GPIO_WritePin>
	TimingDelay(10);
 800d51c:	200a      	movs	r0, #10
 800d51e:	f000 f945 	bl	800d7ac <TimingDelay>
	HAL_GPIO_WritePin(PORT_E, PIN_E, GPIO_PIN_RESET);
 800d522:	4b07      	ldr	r3, [pc, #28]	; (800d540 <LCD1602_EnablePulse+0x38>)
 800d524:	681b      	ldr	r3, [r3, #0]
 800d526:	4a07      	ldr	r2, [pc, #28]	; (800d544 <LCD1602_EnablePulse+0x3c>)
 800d528:	8811      	ldrh	r1, [r2, #0]
 800d52a:	2200      	movs	r2, #0
 800d52c:	4618      	mov	r0, r3
 800d52e:	f7f6 f88f 	bl	8003650 <HAL_GPIO_WritePin>
	TimingDelay(600);
 800d532:	f44f 7016 	mov.w	r0, #600	; 0x258
 800d536:	f000 f939 	bl	800d7ac <TimingDelay>
}
 800d53a:	bf00      	nop
 800d53c:	bd80      	pop	{r7, pc}
 800d53e:	bf00      	nop
 800d540:	200102d8 	.word	0x200102d8
 800d544:	200102de 	.word	0x200102de

0800d548 <LCD1602_RS>:
//RS ovladani
static void LCD1602_RS(bool state)
{
 800d548:	b580      	push	{r7, lr}
 800d54a:	b082      	sub	sp, #8
 800d54c:	af00      	add	r7, sp, #0
 800d54e:	4603      	mov	r3, r0
 800d550:	71fb      	strb	r3, [r7, #7]
	if(state) HAL_GPIO_WritePin(PORT_RS, PIN_RS, GPIO_PIN_SET);
 800d552:	79fb      	ldrb	r3, [r7, #7]
 800d554:	2b00      	cmp	r3, #0
 800d556:	d008      	beq.n	800d56a <LCD1602_RS+0x22>
 800d558:	4b0a      	ldr	r3, [pc, #40]	; (800d584 <LCD1602_RS+0x3c>)
 800d55a:	681b      	ldr	r3, [r3, #0]
 800d55c:	4a0a      	ldr	r2, [pc, #40]	; (800d588 <LCD1602_RS+0x40>)
 800d55e:	8811      	ldrh	r1, [r2, #0]
 800d560:	2201      	movs	r2, #1
 800d562:	4618      	mov	r0, r3
 800d564:	f7f6 f874 	bl	8003650 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(PORT_RS, PIN_RS, GPIO_PIN_RESET);
}
 800d568:	e007      	b.n	800d57a <LCD1602_RS+0x32>
	else HAL_GPIO_WritePin(PORT_RS, PIN_RS, GPIO_PIN_RESET);
 800d56a:	4b06      	ldr	r3, [pc, #24]	; (800d584 <LCD1602_RS+0x3c>)
 800d56c:	681b      	ldr	r3, [r3, #0]
 800d56e:	4a06      	ldr	r2, [pc, #24]	; (800d588 <LCD1602_RS+0x40>)
 800d570:	8811      	ldrh	r1, [r2, #0]
 800d572:	2200      	movs	r2, #0
 800d574:	4618      	mov	r0, r3
 800d576:	f7f6 f86b 	bl	8003650 <HAL_GPIO_WritePin>
}
 800d57a:	bf00      	nop
 800d57c:	3708      	adds	r7, #8
 800d57e:	46bd      	mov	sp, r7
 800d580:	bd80      	pop	{r7, pc}
 800d582:	bf00      	nop
 800d584:	200102d4 	.word	0x200102d4
 800d588:	200102dc 	.word	0x200102dc

0800d58c <LCD1602_write>:

//paralelni rozhrani
static void LCD1602_write(uint8_t byte)
{
 800d58c:	b580      	push	{r7, lr}
 800d58e:	b084      	sub	sp, #16
 800d590:	af00      	add	r7, sp, #0
 800d592:	4603      	mov	r3, r0
 800d594:	71fb      	strb	r3, [r7, #7]
	uint8_t LSB_nibble = byte&0xF, MSB_nibble = (byte>>4)&0xF;
 800d596:	79fb      	ldrb	r3, [r7, #7]
 800d598:	f003 030f 	and.w	r3, r3, #15
 800d59c:	73fb      	strb	r3, [r7, #15]
 800d59e:	79fb      	ldrb	r3, [r7, #7]
 800d5a0:	091b      	lsrs	r3, r3, #4
 800d5a2:	73bb      	strb	r3, [r7, #14]
	 
	if(mode_8_4_I2C == 1)		//8bits mode
 800d5a4:	4b65      	ldr	r3, [pc, #404]	; (800d73c <LCD1602_write+0x1b0>)
 800d5a6:	781b      	ldrb	r3, [r3, #0]
 800d5a8:	2b01      	cmp	r3, #1
 800d5aa:	d15d      	bne.n	800d668 <LCD1602_write+0xdc>
	{
		//LSB data
		HAL_GPIO_WritePin(PORT_LSB, D0_PIN, (GPIO_PinState)(LSB_nibble&0x1));
 800d5ac:	4b64      	ldr	r3, [pc, #400]	; (800d740 <LCD1602_write+0x1b4>)
 800d5ae:	6818      	ldr	r0, [r3, #0]
 800d5b0:	4b64      	ldr	r3, [pc, #400]	; (800d744 <LCD1602_write+0x1b8>)
 800d5b2:	8819      	ldrh	r1, [r3, #0]
 800d5b4:	7bfb      	ldrb	r3, [r7, #15]
 800d5b6:	f003 0301 	and.w	r3, r3, #1
 800d5ba:	b2db      	uxtb	r3, r3
 800d5bc:	461a      	mov	r2, r3
 800d5be:	f7f6 f847 	bl	8003650 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_LSB, D1_PIN, (GPIO_PinState)(LSB_nibble&0x2));
 800d5c2:	4b5f      	ldr	r3, [pc, #380]	; (800d740 <LCD1602_write+0x1b4>)
 800d5c4:	6818      	ldr	r0, [r3, #0]
 800d5c6:	4b60      	ldr	r3, [pc, #384]	; (800d748 <LCD1602_write+0x1bc>)
 800d5c8:	8819      	ldrh	r1, [r3, #0]
 800d5ca:	7bfb      	ldrb	r3, [r7, #15]
 800d5cc:	f003 0302 	and.w	r3, r3, #2
 800d5d0:	b2db      	uxtb	r3, r3
 800d5d2:	461a      	mov	r2, r3
 800d5d4:	f7f6 f83c 	bl	8003650 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_LSB, D2_PIN, (GPIO_PinState)(LSB_nibble&0x4));
 800d5d8:	4b59      	ldr	r3, [pc, #356]	; (800d740 <LCD1602_write+0x1b4>)
 800d5da:	6818      	ldr	r0, [r3, #0]
 800d5dc:	4b5b      	ldr	r3, [pc, #364]	; (800d74c <LCD1602_write+0x1c0>)
 800d5de:	8819      	ldrh	r1, [r3, #0]
 800d5e0:	7bfb      	ldrb	r3, [r7, #15]
 800d5e2:	f003 0304 	and.w	r3, r3, #4
 800d5e6:	b2db      	uxtb	r3, r3
 800d5e8:	461a      	mov	r2, r3
 800d5ea:	f7f6 f831 	bl	8003650 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_LSB, D3_PIN, (GPIO_PinState)(LSB_nibble&0x8));
 800d5ee:	4b54      	ldr	r3, [pc, #336]	; (800d740 <LCD1602_write+0x1b4>)
 800d5f0:	6818      	ldr	r0, [r3, #0]
 800d5f2:	4b57      	ldr	r3, [pc, #348]	; (800d750 <LCD1602_write+0x1c4>)
 800d5f4:	8819      	ldrh	r1, [r3, #0]
 800d5f6:	7bfb      	ldrb	r3, [r7, #15]
 800d5f8:	f003 0308 	and.w	r3, r3, #8
 800d5fc:	b2db      	uxtb	r3, r3
 800d5fe:	461a      	mov	r2, r3
 800d600:	f7f6 f826 	bl	8003650 <HAL_GPIO_WritePin>
		//MSB data
		HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(MSB_nibble&0x1));
 800d604:	4b53      	ldr	r3, [pc, #332]	; (800d754 <LCD1602_write+0x1c8>)
 800d606:	6818      	ldr	r0, [r3, #0]
 800d608:	4b53      	ldr	r3, [pc, #332]	; (800d758 <LCD1602_write+0x1cc>)
 800d60a:	8819      	ldrh	r1, [r3, #0]
 800d60c:	7bbb      	ldrb	r3, [r7, #14]
 800d60e:	f003 0301 	and.w	r3, r3, #1
 800d612:	b2db      	uxtb	r3, r3
 800d614:	461a      	mov	r2, r3
 800d616:	f7f6 f81b 	bl	8003650 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(MSB_nibble&0x2));
 800d61a:	4b4e      	ldr	r3, [pc, #312]	; (800d754 <LCD1602_write+0x1c8>)
 800d61c:	6818      	ldr	r0, [r3, #0]
 800d61e:	4b4f      	ldr	r3, [pc, #316]	; (800d75c <LCD1602_write+0x1d0>)
 800d620:	8819      	ldrh	r1, [r3, #0]
 800d622:	7bbb      	ldrb	r3, [r7, #14]
 800d624:	f003 0302 	and.w	r3, r3, #2
 800d628:	b2db      	uxtb	r3, r3
 800d62a:	461a      	mov	r2, r3
 800d62c:	f7f6 f810 	bl	8003650 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(MSB_nibble&0x4));
 800d630:	4b48      	ldr	r3, [pc, #288]	; (800d754 <LCD1602_write+0x1c8>)
 800d632:	6818      	ldr	r0, [r3, #0]
 800d634:	4b4a      	ldr	r3, [pc, #296]	; (800d760 <LCD1602_write+0x1d4>)
 800d636:	8819      	ldrh	r1, [r3, #0]
 800d638:	7bbb      	ldrb	r3, [r7, #14]
 800d63a:	f003 0304 	and.w	r3, r3, #4
 800d63e:	b2db      	uxtb	r3, r3
 800d640:	461a      	mov	r2, r3
 800d642:	f7f6 f805 	bl	8003650 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(MSB_nibble&0x8));
 800d646:	4b43      	ldr	r3, [pc, #268]	; (800d754 <LCD1602_write+0x1c8>)
 800d648:	6818      	ldr	r0, [r3, #0]
 800d64a:	4b46      	ldr	r3, [pc, #280]	; (800d764 <LCD1602_write+0x1d8>)
 800d64c:	8819      	ldrh	r1, [r3, #0]
 800d64e:	7bbb      	ldrb	r3, [r7, #14]
 800d650:	f003 0308 	and.w	r3, r3, #8
 800d654:	b2db      	uxtb	r3, r3
 800d656:	461a      	mov	r2, r3
 800d658:	f7f5 fffa 	bl	8003650 <HAL_GPIO_WritePin>
		LCD1602_EnablePulse();
 800d65c:	f7ff ff54 	bl	800d508 <LCD1602_EnablePulse>
		HAL_Delay(5);
 800d660:	2005      	movs	r0, #5
 800d662:	f7f3 fd4b 	bl	80010fc <HAL_Delay>
		HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(LSB_nibble&0x4));
		HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(LSB_nibble&0x8));
		LCD1602_EnablePulse();
		HAL_Delay(5);
	}
}
 800d666:	e065      	b.n	800d734 <LCD1602_write+0x1a8>
	else if(mode_8_4_I2C == 2)	//4 bits mode
 800d668:	4b34      	ldr	r3, [pc, #208]	; (800d73c <LCD1602_write+0x1b0>)
 800d66a:	781b      	ldrb	r3, [r3, #0]
 800d66c:	2b02      	cmp	r3, #2
 800d66e:	d161      	bne.n	800d734 <LCD1602_write+0x1a8>
		HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(MSB_nibble&0x1));
 800d670:	4b38      	ldr	r3, [pc, #224]	; (800d754 <LCD1602_write+0x1c8>)
 800d672:	6818      	ldr	r0, [r3, #0]
 800d674:	4b38      	ldr	r3, [pc, #224]	; (800d758 <LCD1602_write+0x1cc>)
 800d676:	8819      	ldrh	r1, [r3, #0]
 800d678:	7bbb      	ldrb	r3, [r7, #14]
 800d67a:	f003 0301 	and.w	r3, r3, #1
 800d67e:	b2db      	uxtb	r3, r3
 800d680:	461a      	mov	r2, r3
 800d682:	f7f5 ffe5 	bl	8003650 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(MSB_nibble&0x2));
 800d686:	4b33      	ldr	r3, [pc, #204]	; (800d754 <LCD1602_write+0x1c8>)
 800d688:	6818      	ldr	r0, [r3, #0]
 800d68a:	4b34      	ldr	r3, [pc, #208]	; (800d75c <LCD1602_write+0x1d0>)
 800d68c:	8819      	ldrh	r1, [r3, #0]
 800d68e:	7bbb      	ldrb	r3, [r7, #14]
 800d690:	f003 0302 	and.w	r3, r3, #2
 800d694:	b2db      	uxtb	r3, r3
 800d696:	461a      	mov	r2, r3
 800d698:	f7f5 ffda 	bl	8003650 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(MSB_nibble&0x4));
 800d69c:	4b2d      	ldr	r3, [pc, #180]	; (800d754 <LCD1602_write+0x1c8>)
 800d69e:	6818      	ldr	r0, [r3, #0]
 800d6a0:	4b2f      	ldr	r3, [pc, #188]	; (800d760 <LCD1602_write+0x1d4>)
 800d6a2:	8819      	ldrh	r1, [r3, #0]
 800d6a4:	7bbb      	ldrb	r3, [r7, #14]
 800d6a6:	f003 0304 	and.w	r3, r3, #4
 800d6aa:	b2db      	uxtb	r3, r3
 800d6ac:	461a      	mov	r2, r3
 800d6ae:	f7f5 ffcf 	bl	8003650 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(MSB_nibble&0x8));
 800d6b2:	4b28      	ldr	r3, [pc, #160]	; (800d754 <LCD1602_write+0x1c8>)
 800d6b4:	6818      	ldr	r0, [r3, #0]
 800d6b6:	4b2b      	ldr	r3, [pc, #172]	; (800d764 <LCD1602_write+0x1d8>)
 800d6b8:	8819      	ldrh	r1, [r3, #0]
 800d6ba:	7bbb      	ldrb	r3, [r7, #14]
 800d6bc:	f003 0308 	and.w	r3, r3, #8
 800d6c0:	b2db      	uxtb	r3, r3
 800d6c2:	461a      	mov	r2, r3
 800d6c4:	f7f5 ffc4 	bl	8003650 <HAL_GPIO_WritePin>
		LCD1602_EnablePulse();
 800d6c8:	f7ff ff1e 	bl	800d508 <LCD1602_EnablePulse>
		HAL_Delay(5);
 800d6cc:	2005      	movs	r0, #5
 800d6ce:	f7f3 fd15 	bl	80010fc <HAL_Delay>
		HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(LSB_nibble&0x1));
 800d6d2:	4b20      	ldr	r3, [pc, #128]	; (800d754 <LCD1602_write+0x1c8>)
 800d6d4:	6818      	ldr	r0, [r3, #0]
 800d6d6:	4b20      	ldr	r3, [pc, #128]	; (800d758 <LCD1602_write+0x1cc>)
 800d6d8:	8819      	ldrh	r1, [r3, #0]
 800d6da:	7bfb      	ldrb	r3, [r7, #15]
 800d6dc:	f003 0301 	and.w	r3, r3, #1
 800d6e0:	b2db      	uxtb	r3, r3
 800d6e2:	461a      	mov	r2, r3
 800d6e4:	f7f5 ffb4 	bl	8003650 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(LSB_nibble&0x2));
 800d6e8:	4b1a      	ldr	r3, [pc, #104]	; (800d754 <LCD1602_write+0x1c8>)
 800d6ea:	6818      	ldr	r0, [r3, #0]
 800d6ec:	4b1b      	ldr	r3, [pc, #108]	; (800d75c <LCD1602_write+0x1d0>)
 800d6ee:	8819      	ldrh	r1, [r3, #0]
 800d6f0:	7bfb      	ldrb	r3, [r7, #15]
 800d6f2:	f003 0302 	and.w	r3, r3, #2
 800d6f6:	b2db      	uxtb	r3, r3
 800d6f8:	461a      	mov	r2, r3
 800d6fa:	f7f5 ffa9 	bl	8003650 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(LSB_nibble&0x4));
 800d6fe:	4b15      	ldr	r3, [pc, #84]	; (800d754 <LCD1602_write+0x1c8>)
 800d700:	6818      	ldr	r0, [r3, #0]
 800d702:	4b17      	ldr	r3, [pc, #92]	; (800d760 <LCD1602_write+0x1d4>)
 800d704:	8819      	ldrh	r1, [r3, #0]
 800d706:	7bfb      	ldrb	r3, [r7, #15]
 800d708:	f003 0304 	and.w	r3, r3, #4
 800d70c:	b2db      	uxtb	r3, r3
 800d70e:	461a      	mov	r2, r3
 800d710:	f7f5 ff9e 	bl	8003650 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(LSB_nibble&0x8));
 800d714:	4b0f      	ldr	r3, [pc, #60]	; (800d754 <LCD1602_write+0x1c8>)
 800d716:	6818      	ldr	r0, [r3, #0]
 800d718:	4b12      	ldr	r3, [pc, #72]	; (800d764 <LCD1602_write+0x1d8>)
 800d71a:	8819      	ldrh	r1, [r3, #0]
 800d71c:	7bfb      	ldrb	r3, [r7, #15]
 800d71e:	f003 0308 	and.w	r3, r3, #8
 800d722:	b2db      	uxtb	r3, r3
 800d724:	461a      	mov	r2, r3
 800d726:	f7f5 ff93 	bl	8003650 <HAL_GPIO_WritePin>
		LCD1602_EnablePulse();
 800d72a:	f7ff feed 	bl	800d508 <LCD1602_EnablePulse>
		HAL_Delay(5);
 800d72e:	2005      	movs	r0, #5
 800d730:	f7f3 fce4 	bl	80010fc <HAL_Delay>
}
 800d734:	bf00      	nop
 800d736:	3710      	adds	r7, #16
 800d738:	46bd      	mov	sp, r7
 800d73a:	bd80      	pop	{r7, pc}
 800d73c:	20000020 	.word	0x20000020
 800d740:	200102e0 	.word	0x200102e0
 800d744:	200102e4 	.word	0x200102e4
 800d748:	200102e6 	.word	0x200102e6
 800d74c:	200102e8 	.word	0x200102e8
 800d750:	200102ea 	.word	0x200102ea
 800d754:	200102ec 	.word	0x200102ec
 800d758:	200102f0 	.word	0x200102f0
 800d75c:	200102f2 	.word	0x200102f2
 800d760:	200102f4 	.word	0x200102f4
 800d764:	200102f6 	.word	0x200102f6

0800d768 <EnableTiming>:
//povoleni casovani
void EnableTiming(void)
{
 800d768:	b480      	push	{r7}
 800d76a:	af00      	add	r7, sp, #0
*SCB_DEMCR = *SCB_DEMCR | 0x01000000;
 800d76c:	4b0c      	ldr	r3, [pc, #48]	; (800d7a0 <EnableTiming+0x38>)
 800d76e:	681b      	ldr	r3, [r3, #0]
 800d770:	681a      	ldr	r2, [r3, #0]
 800d772:	4b0b      	ldr	r3, [pc, #44]	; (800d7a0 <EnableTiming+0x38>)
 800d774:	681b      	ldr	r3, [r3, #0]
 800d776:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800d77a:	601a      	str	r2, [r3, #0]
*DWT_CYCCNT = 0;                      // reset the counter
 800d77c:	4b09      	ldr	r3, [pc, #36]	; (800d7a4 <EnableTiming+0x3c>)
 800d77e:	681b      	ldr	r3, [r3, #0]
 800d780:	2200      	movs	r2, #0
 800d782:	601a      	str	r2, [r3, #0]
*DWT_CONTROL = *DWT_CONTROL | 1 ;     // enable the counter
 800d784:	4b08      	ldr	r3, [pc, #32]	; (800d7a8 <EnableTiming+0x40>)
 800d786:	681b      	ldr	r3, [r3, #0]
 800d788:	681a      	ldr	r2, [r3, #0]
 800d78a:	4b07      	ldr	r3, [pc, #28]	; (800d7a8 <EnableTiming+0x40>)
 800d78c:	681b      	ldr	r3, [r3, #0]
 800d78e:	f042 0201 	orr.w	r2, r2, #1
 800d792:	601a      	str	r2, [r3, #0]
}
 800d794:	bf00      	nop
 800d796:	46bd      	mov	sp, r7
 800d798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d79c:	4770      	bx	lr
 800d79e:	bf00      	nop
 800d7a0:	2000002c 	.word	0x2000002c
 800d7a4:	20000024 	.word	0x20000024
 800d7a8:	20000028 	.word	0x20000028

0800d7ac <TimingDelay>:
//zpozdeni
void TimingDelay(unsigned int tick)
{
 800d7ac:	b580      	push	{r7, lr}
 800d7ae:	b084      	sub	sp, #16
 800d7b0:	af00      	add	r7, sp, #0
 800d7b2:	6078      	str	r0, [r7, #4]
	EnableTiming();
 800d7b4:	f7ff ffd8 	bl	800d768 <EnableTiming>
	unsigned int start, current;
	start = *DWT_CYCCNT;
 800d7b8:	4b09      	ldr	r3, [pc, #36]	; (800d7e0 <TimingDelay+0x34>)
 800d7ba:	681b      	ldr	r3, [r3, #0]
 800d7bc:	681b      	ldr	r3, [r3, #0]
 800d7be:	60fb      	str	r3, [r7, #12]
	do
	{
	current = *DWT_CYCCNT;
 800d7c0:	4b07      	ldr	r3, [pc, #28]	; (800d7e0 <TimingDelay+0x34>)
 800d7c2:	681b      	ldr	r3, [r3, #0]
 800d7c4:	681b      	ldr	r3, [r3, #0]
 800d7c6:	60bb      	str	r3, [r7, #8]
	} while((current - start) < tick);
 800d7c8:	68ba      	ldr	r2, [r7, #8]
 800d7ca:	68fb      	ldr	r3, [r7, #12]
 800d7cc:	1ad3      	subs	r3, r2, r3
 800d7ce:	687a      	ldr	r2, [r7, #4]
 800d7d0:	429a      	cmp	r2, r3
 800d7d2:	d8f5      	bhi.n	800d7c0 <TimingDelay+0x14>
}
 800d7d4:	bf00      	nop
 800d7d6:	bf00      	nop
 800d7d8:	3710      	adds	r7, #16
 800d7da:	46bd      	mov	sp, r7
 800d7dc:	bd80      	pop	{r7, pc}
 800d7de:	bf00      	nop
 800d7e0:	20000024 	.word	0x20000024

0800d7e4 <LCD1602_writeCommand>:
//zapis prikaz
static void LCD1602_writeCommand(uint8_t command)
{
 800d7e4:	b580      	push	{r7, lr}
 800d7e6:	b082      	sub	sp, #8
 800d7e8:	af00      	add	r7, sp, #0
 800d7ea:	4603      	mov	r3, r0
 800d7ec:	71fb      	strb	r3, [r7, #7]
	LCD1602_RS(false);
 800d7ee:	2000      	movs	r0, #0
 800d7f0:	f7ff feaa 	bl	800d548 <LCD1602_RS>
	LCD1602_write(command);
 800d7f4:	79fb      	ldrb	r3, [r7, #7]
 800d7f6:	4618      	mov	r0, r3
 800d7f8:	f7ff fec8 	bl	800d58c <LCD1602_write>
}
 800d7fc:	bf00      	nop
 800d7fe:	3708      	adds	r7, #8
 800d800:	46bd      	mov	sp, r7
 800d802:	bd80      	pop	{r7, pc}

0800d804 <LCD1602_writeData>:
//zapis 8bit data
static void LCD1602_writeData(uint8_t data)
{
 800d804:	b580      	push	{r7, lr}
 800d806:	b082      	sub	sp, #8
 800d808:	af00      	add	r7, sp, #0
 800d80a:	4603      	mov	r3, r0
 800d80c:	71fb      	strb	r3, [r7, #7]
	LCD1602_RS(true);
 800d80e:	2001      	movs	r0, #1
 800d810:	f7ff fe9a 	bl	800d548 <LCD1602_RS>
	LCD1602_write(data);
 800d814:	79fb      	ldrb	r3, [r7, #7]
 800d816:	4618      	mov	r0, r3
 800d818:	f7ff feb8 	bl	800d58c <LCD1602_write>
}
 800d81c:	bf00      	nop
 800d81e:	3708      	adds	r7, #8
 800d820:	46bd      	mov	sp, r7
 800d822:	bd80      	pop	{r7, pc}

0800d824 <LCD1602_write4bitCommand>:
//zapis 4bit prikaz
static void LCD1602_write4bitCommand(uint8_t nibble)
{
 800d824:	b580      	push	{r7, lr}
 800d826:	b084      	sub	sp, #16
 800d828:	af00      	add	r7, sp, #0
 800d82a:	4603      	mov	r3, r0
 800d82c:	71fb      	strb	r3, [r7, #7]
	uint8_t LSB_nibble = nibble&0xF;
 800d82e:	79fb      	ldrb	r3, [r7, #7]
 800d830:	f003 030f 	and.w	r3, r3, #15
 800d834:	73fb      	strb	r3, [r7, #15]
	LCD1602_RS(false);
 800d836:	2000      	movs	r0, #0
 800d838:	f7ff fe86 	bl	800d548 <LCD1602_RS>
	//LSB data
	HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(LSB_nibble&0x1));
 800d83c:	4b1a      	ldr	r3, [pc, #104]	; (800d8a8 <LCD1602_write4bitCommand+0x84>)
 800d83e:	6818      	ldr	r0, [r3, #0]
 800d840:	4b1a      	ldr	r3, [pc, #104]	; (800d8ac <LCD1602_write4bitCommand+0x88>)
 800d842:	8819      	ldrh	r1, [r3, #0]
 800d844:	7bfb      	ldrb	r3, [r7, #15]
 800d846:	f003 0301 	and.w	r3, r3, #1
 800d84a:	b2db      	uxtb	r3, r3
 800d84c:	461a      	mov	r2, r3
 800d84e:	f7f5 feff 	bl	8003650 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(LSB_nibble&0x2));
 800d852:	4b15      	ldr	r3, [pc, #84]	; (800d8a8 <LCD1602_write4bitCommand+0x84>)
 800d854:	6818      	ldr	r0, [r3, #0]
 800d856:	4b16      	ldr	r3, [pc, #88]	; (800d8b0 <LCD1602_write4bitCommand+0x8c>)
 800d858:	8819      	ldrh	r1, [r3, #0]
 800d85a:	7bfb      	ldrb	r3, [r7, #15]
 800d85c:	f003 0302 	and.w	r3, r3, #2
 800d860:	b2db      	uxtb	r3, r3
 800d862:	461a      	mov	r2, r3
 800d864:	f7f5 fef4 	bl	8003650 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(LSB_nibble&0x4));
 800d868:	4b0f      	ldr	r3, [pc, #60]	; (800d8a8 <LCD1602_write4bitCommand+0x84>)
 800d86a:	6818      	ldr	r0, [r3, #0]
 800d86c:	4b11      	ldr	r3, [pc, #68]	; (800d8b4 <LCD1602_write4bitCommand+0x90>)
 800d86e:	8819      	ldrh	r1, [r3, #0]
 800d870:	7bfb      	ldrb	r3, [r7, #15]
 800d872:	f003 0304 	and.w	r3, r3, #4
 800d876:	b2db      	uxtb	r3, r3
 800d878:	461a      	mov	r2, r3
 800d87a:	f7f5 fee9 	bl	8003650 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(LSB_nibble&0x8));
 800d87e:	4b0a      	ldr	r3, [pc, #40]	; (800d8a8 <LCD1602_write4bitCommand+0x84>)
 800d880:	6818      	ldr	r0, [r3, #0]
 800d882:	4b0d      	ldr	r3, [pc, #52]	; (800d8b8 <LCD1602_write4bitCommand+0x94>)
 800d884:	8819      	ldrh	r1, [r3, #0]
 800d886:	7bfb      	ldrb	r3, [r7, #15]
 800d888:	f003 0308 	and.w	r3, r3, #8
 800d88c:	b2db      	uxtb	r3, r3
 800d88e:	461a      	mov	r2, r3
 800d890:	f7f5 fede 	bl	8003650 <HAL_GPIO_WritePin>
	LCD1602_EnablePulse();
 800d894:	f7ff fe38 	bl	800d508 <LCD1602_EnablePulse>
	HAL_Delay(5);
 800d898:	2005      	movs	r0, #5
 800d89a:	f7f3 fc2f 	bl	80010fc <HAL_Delay>
}
 800d89e:	bf00      	nop
 800d8a0:	3710      	adds	r7, #16
 800d8a2:	46bd      	mov	sp, r7
 800d8a4:	bd80      	pop	{r7, pc}
 800d8a6:	bf00      	nop
 800d8a8:	200102ec 	.word	0x200102ec
 800d8ac:	200102f0 	.word	0x200102f0
 800d8b0:	200102f2 	.word	0x200102f2
 800d8b4:	200102f4 	.word	0x200102f4
 800d8b8:	200102f6 	.word	0x200102f6

0800d8bc <LCD1602_Begin4BIT>:
//inicializace pro 4bit rozhrani
void LCD1602_Begin4BIT(GPIO_TypeDef* PORTp_RS, uint16_t RS,GPIO_TypeDef* PORTp_E, uint16_t E, GPIO_TypeDef* PORT_MSBs4to7, uint16_t D4, uint16_t D5, uint16_t D6, uint16_t D7)
{
 800d8bc:	b580      	push	{r7, lr}
 800d8be:	b084      	sub	sp, #16
 800d8c0:	af00      	add	r7, sp, #0
 800d8c2:	60f8      	str	r0, [r7, #12]
 800d8c4:	607a      	str	r2, [r7, #4]
 800d8c6:	461a      	mov	r2, r3
 800d8c8:	460b      	mov	r3, r1
 800d8ca:	817b      	strh	r3, [r7, #10]
 800d8cc:	4613      	mov	r3, r2
 800d8ce:	813b      	strh	r3, [r7, #8]
	//Set GPIO Ports and Pins data
	PORT_RS = PORTp_RS;
 800d8d0:	4a28      	ldr	r2, [pc, #160]	; (800d974 <LCD1602_Begin4BIT+0xb8>)
 800d8d2:	68fb      	ldr	r3, [r7, #12]
 800d8d4:	6013      	str	r3, [r2, #0]
	PIN_RS = RS;
 800d8d6:	4a28      	ldr	r2, [pc, #160]	; (800d978 <LCD1602_Begin4BIT+0xbc>)
 800d8d8:	897b      	ldrh	r3, [r7, #10]
 800d8da:	8013      	strh	r3, [r2, #0]
	PORT_E=PORTp_E;
 800d8dc:	4a27      	ldr	r2, [pc, #156]	; (800d97c <LCD1602_Begin4BIT+0xc0>)
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	6013      	str	r3, [r2, #0]
	PIN_E = E;
 800d8e2:	4a27      	ldr	r2, [pc, #156]	; (800d980 <LCD1602_Begin4BIT+0xc4>)
 800d8e4:	893b      	ldrh	r3, [r7, #8]
 800d8e6:	8013      	strh	r3, [r2, #0]
	PORT_MSB = PORT_MSBs4to7;
 800d8e8:	4a26      	ldr	r2, [pc, #152]	; (800d984 <LCD1602_Begin4BIT+0xc8>)
 800d8ea:	69bb      	ldr	r3, [r7, #24]
 800d8ec:	6013      	str	r3, [r2, #0]
	D4_PIN = D4;
 800d8ee:	4a26      	ldr	r2, [pc, #152]	; (800d988 <LCD1602_Begin4BIT+0xcc>)
 800d8f0:	8bbb      	ldrh	r3, [r7, #28]
 800d8f2:	8013      	strh	r3, [r2, #0]
	D5_PIN = D5;
 800d8f4:	4a25      	ldr	r2, [pc, #148]	; (800d98c <LCD1602_Begin4BIT+0xd0>)
 800d8f6:	8c3b      	ldrh	r3, [r7, #32]
 800d8f8:	8013      	strh	r3, [r2, #0]
	D6_PIN = D6;
 800d8fa:	4a25      	ldr	r2, [pc, #148]	; (800d990 <LCD1602_Begin4BIT+0xd4>)
 800d8fc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d8fe:	8013      	strh	r3, [r2, #0]
	D7_PIN = D7;
 800d900:	4a24      	ldr	r2, [pc, #144]	; (800d994 <LCD1602_Begin4BIT+0xd8>)
 800d902:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800d904:	8013      	strh	r3, [r2, #0]
	mode_8_4_I2C = 2;
 800d906:	4b24      	ldr	r3, [pc, #144]	; (800d998 <LCD1602_Begin4BIT+0xdc>)
 800d908:	2202      	movs	r2, #2
 800d90a:	701a      	strb	r2, [r3, #0]
	FunctionSet = 0x28;
 800d90c:	4b23      	ldr	r3, [pc, #140]	; (800d99c <LCD1602_Begin4BIT+0xe0>)
 800d90e:	2228      	movs	r2, #40	; 0x28
 800d910:	701a      	strb	r2, [r3, #0]
	//Initialise LCD
	//1. Wait at least 15ms
	HAL_Delay(20);
 800d912:	2014      	movs	r0, #20
 800d914:	f7f3 fbf2 	bl	80010fc <HAL_Delay>
	//2. Attentions sequence
	LCD1602_write4bitCommand(0x3);
 800d918:	2003      	movs	r0, #3
 800d91a:	f7ff ff83 	bl	800d824 <LCD1602_write4bitCommand>
	HAL_Delay(5);
 800d91e:	2005      	movs	r0, #5
 800d920:	f7f3 fbec 	bl	80010fc <HAL_Delay>
	LCD1602_write4bitCommand(0x3);
 800d924:	2003      	movs	r0, #3
 800d926:	f7ff ff7d 	bl	800d824 <LCD1602_write4bitCommand>
	HAL_Delay(1);
 800d92a:	2001      	movs	r0, #1
 800d92c:	f7f3 fbe6 	bl	80010fc <HAL_Delay>
	LCD1602_write4bitCommand(0x3);
 800d930:	2003      	movs	r0, #3
 800d932:	f7ff ff77 	bl	800d824 <LCD1602_write4bitCommand>
	HAL_Delay(1);
 800d936:	2001      	movs	r0, #1
 800d938:	f7f3 fbe0 	bl	80010fc <HAL_Delay>
	LCD1602_write4bitCommand(0x2);  //4 bit mode
 800d93c:	2002      	movs	r0, #2
 800d93e:	f7ff ff71 	bl	800d824 <LCD1602_write4bitCommand>
	HAL_Delay(1);
 800d942:	2001      	movs	r0, #1
 800d944:	f7f3 fbda 	bl	80010fc <HAL_Delay>
	//3. Display control (Display ON, Cursor ON, blink cursor)
	LCD1602_writeCommand(LCD_DISPLAYCONTROL | LCD_DISPLAY_B | LCD_DISPLAY_C | LCD_DISPLAY_D);
 800d948:	200f      	movs	r0, #15
 800d94a:	f7ff ff4b 	bl	800d7e4 <LCD1602_writeCommand>
	//4. Clear LCD and return home
	LCD1602_writeCommand(LCD_CLEARDISPLAY);
 800d94e:	2001      	movs	r0, #1
 800d950:	f7ff ff48 	bl	800d7e4 <LCD1602_writeCommand>
	HAL_Delay(3);
 800d954:	2003      	movs	r0, #3
 800d956:	f7f3 fbd1 	bl	80010fc <HAL_Delay>
	//4. Function set; Enable 2 lines, Data length to 8 bits
	LCD1602_writeCommand(LCD_FUNCTIONSET | LCD_FUNCTION_N);
 800d95a:	2028      	movs	r0, #40	; 0x28
 800d95c:	f7ff ff42 	bl	800d7e4 <LCD1602_writeCommand>
	HAL_Delay(3);
 800d960:	2003      	movs	r0, #3
 800d962:	f7f3 fbcb 	bl	80010fc <HAL_Delay>
	LCD1602_clear();
 800d966:	f000 f881 	bl	800da6c <LCD1602_clear>
}
 800d96a:	bf00      	nop
 800d96c:	3710      	adds	r7, #16
 800d96e:	46bd      	mov	sp, r7
 800d970:	bd80      	pop	{r7, pc}
 800d972:	bf00      	nop
 800d974:	200102d4 	.word	0x200102d4
 800d978:	200102dc 	.word	0x200102dc
 800d97c:	200102d8 	.word	0x200102d8
 800d980:	200102de 	.word	0x200102de
 800d984:	200102ec 	.word	0x200102ec
 800d988:	200102f0 	.word	0x200102f0
 800d98c:	200102f2 	.word	0x200102f2
 800d990:	200102f4 	.word	0x200102f4
 800d994:	200102f6 	.word	0x200102f6
 800d998:	20000020 	.word	0x20000020
 800d99c:	20000022 	.word	0x20000022

0800d9a0 <LCD1602_print>:
//vypis string
void LCD1602_print(char string[])
{
 800d9a0:	b580      	push	{r7, lr}
 800d9a2:	b084      	sub	sp, #16
 800d9a4:	af00      	add	r7, sp, #0
 800d9a6:	6078      	str	r0, [r7, #4]
	for(uint8_t i=0;  i< 16 && string[i]!=NULL; i++)
 800d9a8:	2300      	movs	r3, #0
 800d9aa:	73fb      	strb	r3, [r7, #15]
 800d9ac:	e009      	b.n	800d9c2 <LCD1602_print+0x22>
	{
		LCD1602_writeData((uint8_t)string[i]);
 800d9ae:	7bfb      	ldrb	r3, [r7, #15]
 800d9b0:	687a      	ldr	r2, [r7, #4]
 800d9b2:	4413      	add	r3, r2
 800d9b4:	781b      	ldrb	r3, [r3, #0]
 800d9b6:	4618      	mov	r0, r3
 800d9b8:	f7ff ff24 	bl	800d804 <LCD1602_writeData>
	for(uint8_t i=0;  i< 16 && string[i]!=NULL; i++)
 800d9bc:	7bfb      	ldrb	r3, [r7, #15]
 800d9be:	3301      	adds	r3, #1
 800d9c0:	73fb      	strb	r3, [r7, #15]
 800d9c2:	7bfb      	ldrb	r3, [r7, #15]
 800d9c4:	2b0f      	cmp	r3, #15
 800d9c6:	d805      	bhi.n	800d9d4 <LCD1602_print+0x34>
 800d9c8:	7bfb      	ldrb	r3, [r7, #15]
 800d9ca:	687a      	ldr	r2, [r7, #4]
 800d9cc:	4413      	add	r3, r2
 800d9ce:	781b      	ldrb	r3, [r3, #0]
 800d9d0:	2b00      	cmp	r3, #0
 800d9d2:	d1ec      	bne.n	800d9ae <LCD1602_print+0xe>
	}
}
 800d9d4:	bf00      	nop
 800d9d6:	3710      	adds	r7, #16
 800d9d8:	46bd      	mov	sp, r7
 800d9da:	bd80      	pop	{r7, pc}

0800d9dc <LCD1602_setCursor>:
//nastaveni pozice kurzoru
void LCD1602_setCursor(uint8_t row, uint8_t col)
{
 800d9dc:	b580      	push	{r7, lr}
 800d9de:	b084      	sub	sp, #16
 800d9e0:	af00      	add	r7, sp, #0
 800d9e2:	4603      	mov	r3, r0
 800d9e4:	460a      	mov	r2, r1
 800d9e6:	71fb      	strb	r3, [r7, #7]
 800d9e8:	4613      	mov	r3, r2
 800d9ea:	71bb      	strb	r3, [r7, #6]
	uint8_t maskData;
	maskData = (col-1)&0x0F;
 800d9ec:	79bb      	ldrb	r3, [r7, #6]
 800d9ee:	3b01      	subs	r3, #1
 800d9f0:	b2db      	uxtb	r3, r3
 800d9f2:	f003 030f 	and.w	r3, r3, #15
 800d9f6:	73fb      	strb	r3, [r7, #15]
	if(row==1)
 800d9f8:	79fb      	ldrb	r3, [r7, #7]
 800d9fa:	2b01      	cmp	r3, #1
 800d9fc:	d108      	bne.n	800da10 <LCD1602_setCursor+0x34>
	{
		maskData |= (0x80);
 800d9fe:	7bfb      	ldrb	r3, [r7, #15]
 800da00:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800da04:	73fb      	strb	r3, [r7, #15]
		LCD1602_writeCommand(maskData);
 800da06:	7bfb      	ldrb	r3, [r7, #15]
 800da08:	4618      	mov	r0, r3
 800da0a:	f7ff feeb 	bl	800d7e4 <LCD1602_writeCommand>
	else
	{
		maskData |= (0xc0);
		LCD1602_writeCommand(maskData);
	}
}	
 800da0e:	e007      	b.n	800da20 <LCD1602_setCursor+0x44>
		maskData |= (0xc0);
 800da10:	7bfb      	ldrb	r3, [r7, #15]
 800da12:	f063 033f 	orn	r3, r3, #63	; 0x3f
 800da16:	73fb      	strb	r3, [r7, #15]
		LCD1602_writeCommand(maskData);
 800da18:	7bfb      	ldrb	r3, [r7, #15]
 800da1a:	4618      	mov	r0, r3
 800da1c:	f7ff fee2 	bl	800d7e4 <LCD1602_writeCommand>
}	
 800da20:	bf00      	nop
 800da22:	3710      	adds	r7, #16
 800da24:	46bd      	mov	sp, r7
 800da26:	bd80      	pop	{r7, pc}

0800da28 <LCD1602_1stLine>:
//prvni radek
void LCD1602_1stLine(void)
{
 800da28:	b580      	push	{r7, lr}
 800da2a:	af00      	add	r7, sp, #0
	LCD1602_setCursor(1,1);
 800da2c:	2101      	movs	r1, #1
 800da2e:	2001      	movs	r0, #1
 800da30:	f7ff ffd4 	bl	800d9dc <LCD1602_setCursor>
}
 800da34:	bf00      	nop
 800da36:	bd80      	pop	{r7, pc}

0800da38 <LCD1602_2ndLine>:
//druhy radek
void LCD1602_2ndLine(void)
{
 800da38:	b580      	push	{r7, lr}
 800da3a:	af00      	add	r7, sp, #0
	LCD1602_setCursor(2,1);
 800da3c:	2101      	movs	r1, #1
 800da3e:	2002      	movs	r0, #2
 800da40:	f7ff ffcc 	bl	800d9dc <LCD1602_setCursor>
}
 800da44:	bf00      	nop
 800da46:	bd80      	pop	{r7, pc}

0800da48 <LCD1602_noCursor>:
	FunctionSet &= ~(0x08);
	LCD1602_writeCommand(FunctionSet);
}
//skrytí kurzoru
void LCD1602_noCursor(void)
{
 800da48:	b580      	push	{r7, lr}
 800da4a:	af00      	add	r7, sp, #0
	DisplayControl &= ~(0x02);
 800da4c:	4b06      	ldr	r3, [pc, #24]	; (800da68 <LCD1602_noCursor+0x20>)
 800da4e:	781b      	ldrb	r3, [r3, #0]
 800da50:	f023 0302 	bic.w	r3, r3, #2
 800da54:	b2da      	uxtb	r2, r3
 800da56:	4b04      	ldr	r3, [pc, #16]	; (800da68 <LCD1602_noCursor+0x20>)
 800da58:	701a      	strb	r2, [r3, #0]
	LCD1602_writeCommand(DisplayControl);
 800da5a:	4b03      	ldr	r3, [pc, #12]	; (800da68 <LCD1602_noCursor+0x20>)
 800da5c:	781b      	ldrb	r3, [r3, #0]
 800da5e:	4618      	mov	r0, r3
 800da60:	f7ff fec0 	bl	800d7e4 <LCD1602_writeCommand>
}
 800da64:	bf00      	nop
 800da66:	bd80      	pop	{r7, pc}
 800da68:	20000021 	.word	0x20000021

0800da6c <LCD1602_clear>:
	DisplayControl |= (0x02);
	LCD1602_writeCommand(DisplayControl);
}
//vymaž obsah displeje
void LCD1602_clear(void)
{
 800da6c:	b580      	push	{r7, lr}
 800da6e:	af00      	add	r7, sp, #0
	LCD1602_writeCommand(LCD_CLEARDISPLAY);
 800da70:	2001      	movs	r0, #1
 800da72:	f7ff feb7 	bl	800d7e4 <LCD1602_writeCommand>
	HAL_Delay(3);
 800da76:	2003      	movs	r0, #3
 800da78:	f7f3 fb40 	bl	80010fc <HAL_Delay>
}
 800da7c:	bf00      	nop
 800da7e:	bd80      	pop	{r7, pc}

0800da80 <LCD1602_noBlink>:
void LCD1602_noBlink(void)
{
 800da80:	b580      	push	{r7, lr}
 800da82:	af00      	add	r7, sp, #0
	DisplayControl &= ~(0x01);
 800da84:	4b06      	ldr	r3, [pc, #24]	; (800daa0 <LCD1602_noBlink+0x20>)
 800da86:	781b      	ldrb	r3, [r3, #0]
 800da88:	f023 0301 	bic.w	r3, r3, #1
 800da8c:	b2da      	uxtb	r2, r3
 800da8e:	4b04      	ldr	r3, [pc, #16]	; (800daa0 <LCD1602_noBlink+0x20>)
 800da90:	701a      	strb	r2, [r3, #0]
	LCD1602_writeCommand(DisplayControl);
 800da92:	4b03      	ldr	r3, [pc, #12]	; (800daa0 <LCD1602_noBlink+0x20>)
 800da94:	781b      	ldrb	r3, [r3, #0]
 800da96:	4618      	mov	r0, r3
 800da98:	f7ff fea4 	bl	800d7e4 <LCD1602_writeCommand>
}
 800da9c:	bf00      	nop
 800da9e:	bd80      	pop	{r7, pc}
 800daa0:	20000021 	.word	0x20000021

0800daa4 <SHT20_Init>:
SHT20_INFO sht20_info;

/* Functions ------------------------------------------------------------------*/
//inicializace
void SHT20_Init(I2C_HandleTypeDef *I2CshtHandle)
{
 800daa4:	b580      	push	{r7, lr}
 800daa6:	b082      	sub	sp, #8
 800daa8:	af00      	add	r7, sp, #0
 800daaa:	6078      	str	r0, [r7, #4]
	 memcpy(&shtI2Chandle, I2CshtHandle, sizeof(*I2CshtHandle));
 800daac:	224c      	movs	r2, #76	; 0x4c
 800daae:	6879      	ldr	r1, [r7, #4]
 800dab0:	4803      	ldr	r0, [pc, #12]	; (800dac0 <SHT20_Init+0x1c>)
 800dab2:	f001 f8af 	bl	800ec14 <memcpy>
}
 800dab6:	bf00      	nop
 800dab8:	3708      	adds	r7, #8
 800daba:	46bd      	mov	sp, r7
 800dabc:	bd80      	pop	{r7, pc}
 800dabe:	bf00      	nop
 800dac0:	200102f8 	.word	0x200102f8

0800dac4 <SHT20_reset>:
//reset
void SHT20_reset(void)
{
 800dac4:	b580      	push	{r7, lr}
 800dac6:	b084      	sub	sp, #16
 800dac8:	af04      	add	r7, sp, #16
    HAL_I2C_Mem_Write(&shtI2Chandle, SHT20_Write_Add, SHT20_SOFT_RESET, I2C_MEMADD_SIZE_8BIT,(void*)0, 1, 1000);
 800daca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800dace:	9302      	str	r3, [sp, #8]
 800dad0:	2301      	movs	r3, #1
 800dad2:	9301      	str	r3, [sp, #4]
 800dad4:	2300      	movs	r3, #0
 800dad6:	9300      	str	r3, [sp, #0]
 800dad8:	2301      	movs	r3, #1
 800dada:	22fe      	movs	r2, #254	; 0xfe
 800dadc:	2180      	movs	r1, #128	; 0x80
 800dade:	4804      	ldr	r0, [pc, #16]	; (800daf0 <SHT20_reset+0x2c>)
 800dae0:	f7f5 fe90 	bl	8003804 <HAL_I2C_Mem_Write>
    HAL_Delay(15);
 800dae4:	200f      	movs	r0, #15
 800dae6:	f7f3 fb09 	bl	80010fc <HAL_Delay>
}
 800daea:	bf00      	nop
 800daec:	46bd      	mov	sp, r7
 800daee:	bd80      	pop	{r7, pc}
 800daf0:	200102f8 	.word	0x200102f8

0800daf4 <SHT2x_CheckCrc>:
    HAL_I2C_Mem_Read(&shtI2Chandle, SHT20_Read_Add, SHT20_READ_REG, I2C_MEMADD_SIZE_8BIT,&val, 1, 1000);
    return val;
}
//vypocet crc
char SHT2x_CheckCrc(char data[], char nbrOfBytes, char checksum)
{
 800daf4:	b480      	push	{r7}
 800daf6:	b085      	sub	sp, #20
 800daf8:	af00      	add	r7, sp, #0
 800dafa:	6078      	str	r0, [r7, #4]
 800dafc:	460b      	mov	r3, r1
 800dafe:	70fb      	strb	r3, [r7, #3]
 800db00:	4613      	mov	r3, r2
 800db02:	70bb      	strb	r3, [r7, #2]
    char crc = 0;
 800db04:	2300      	movs	r3, #0
 800db06:	73fb      	strb	r3, [r7, #15]
    char bit = 0;
 800db08:	2300      	movs	r3, #0
 800db0a:	73bb      	strb	r3, [r7, #14]
    char byteCtr = 0;
 800db0c:	2300      	movs	r3, #0
 800db0e:	737b      	strb	r3, [r7, #13]
    //calculates 8-Bit checksum with given polynomial
    for(byteCtr = 0; byteCtr < nbrOfBytes; ++byteCtr)
 800db10:	2300      	movs	r3, #0
 800db12:	737b      	strb	r3, [r7, #13]
 800db14:	e023      	b.n	800db5e <SHT2x_CheckCrc+0x6a>
    {
        crc ^= (data[byteCtr]);
 800db16:	7b7b      	ldrb	r3, [r7, #13]
 800db18:	687a      	ldr	r2, [r7, #4]
 800db1a:	4413      	add	r3, r2
 800db1c:	781a      	ldrb	r2, [r3, #0]
 800db1e:	7bfb      	ldrb	r3, [r7, #15]
 800db20:	4053      	eors	r3, r2
 800db22:	73fb      	strb	r3, [r7, #15]
        for ( bit = 8; bit > 0; --bit)
 800db24:	2308      	movs	r3, #8
 800db26:	73bb      	strb	r3, [r7, #14]
 800db28:	e013      	b.n	800db52 <SHT2x_CheckCrc+0x5e>
        {
            if (crc & 0x80) crc = (crc << 1) ^ POLYNOMIAL;
 800db2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800db2e:	2b00      	cmp	r3, #0
 800db30:	da09      	bge.n	800db46 <SHT2x_CheckCrc+0x52>
 800db32:	7bfb      	ldrb	r3, [r7, #15]
 800db34:	005b      	lsls	r3, r3, #1
 800db36:	b25a      	sxtb	r2, r3
 800db38:	f240 1331 	movw	r3, #305	; 0x131
 800db3c:	b25b      	sxtb	r3, r3
 800db3e:	4053      	eors	r3, r2
 800db40:	b25b      	sxtb	r3, r3
 800db42:	73fb      	strb	r3, [r7, #15]
 800db44:	e002      	b.n	800db4c <SHT2x_CheckCrc+0x58>
            else crc = (crc << 1);
 800db46:	7bfb      	ldrb	r3, [r7, #15]
 800db48:	005b      	lsls	r3, r3, #1
 800db4a:	73fb      	strb	r3, [r7, #15]
        for ( bit = 8; bit > 0; --bit)
 800db4c:	7bbb      	ldrb	r3, [r7, #14]
 800db4e:	3b01      	subs	r3, #1
 800db50:	73bb      	strb	r3, [r7, #14]
 800db52:	7bbb      	ldrb	r3, [r7, #14]
 800db54:	2b00      	cmp	r3, #0
 800db56:	d1e8      	bne.n	800db2a <SHT2x_CheckCrc+0x36>
    for(byteCtr = 0; byteCtr < nbrOfBytes; ++byteCtr)
 800db58:	7b7b      	ldrb	r3, [r7, #13]
 800db5a:	3301      	adds	r3, #1
 800db5c:	737b      	strb	r3, [r7, #13]
 800db5e:	7b7a      	ldrb	r2, [r7, #13]
 800db60:	78fb      	ldrb	r3, [r7, #3]
 800db62:	429a      	cmp	r2, r3
 800db64:	d3d7      	bcc.n	800db16 <SHT2x_CheckCrc+0x22>
        }
    }
    if(crc != checksum)
 800db66:	7bfa      	ldrb	r2, [r7, #15]
 800db68:	78bb      	ldrb	r3, [r7, #2]
 800db6a:	429a      	cmp	r2, r3
 800db6c:	d001      	beq.n	800db72 <SHT2x_CheckCrc+0x7e>
		return 1;
 800db6e:	2301      	movs	r3, #1
 800db70:	e000      	b.n	800db74 <SHT2x_CheckCrc+0x80>
    else
		return 0;
 800db72:	2300      	movs	r3, #0
}
 800db74:	4618      	mov	r0, r3
 800db76:	3714      	adds	r7, #20
 800db78:	46bd      	mov	sp, r7
 800db7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db7e:	4770      	bx	lr

0800db80 <SHT2x_CalcTemperatureC>:
//vypocet teploty
float SHT2x_CalcTemperatureC(unsigned short u16sT)
{
 800db80:	b580      	push	{r7, lr}
 800db82:	b084      	sub	sp, #16
 800db84:	af00      	add	r7, sp, #0
 800db86:	4603      	mov	r3, r0
 800db88:	80fb      	strh	r3, [r7, #6]
    float temperatureC = 0;
 800db8a:	f04f 0300 	mov.w	r3, #0
 800db8e:	60fb      	str	r3, [r7, #12]
    u16sT &= ~0x0003;
 800db90:	88fb      	ldrh	r3, [r7, #6]
 800db92:	f023 0303 	bic.w	r3, r3, #3
 800db96:	80fb      	strh	r3, [r7, #6]
    temperatureC = -46.85 + 175.72 / 65536 * (float)u16sT; //T= -46.85 + 175.72 * ST/2^16
 800db98:	88fb      	ldrh	r3, [r7, #6]
 800db9a:	ee07 3a90 	vmov	s15, r3
 800db9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dba2:	ee17 0a90 	vmov	r0, s15
 800dba6:	f7f2 fce7 	bl	8000578 <__aeabi_f2d>
 800dbaa:	a30f      	add	r3, pc, #60	; (adr r3, 800dbe8 <SHT2x_CalcTemperatureC+0x68>)
 800dbac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbb0:	f7f2 fd3a 	bl	8000628 <__aeabi_dmul>
 800dbb4:	4602      	mov	r2, r0
 800dbb6:	460b      	mov	r3, r1
 800dbb8:	4610      	mov	r0, r2
 800dbba:	4619      	mov	r1, r3
 800dbbc:	a30c      	add	r3, pc, #48	; (adr r3, 800dbf0 <SHT2x_CalcTemperatureC+0x70>)
 800dbbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbc2:	f7f2 fb79 	bl	80002b8 <__aeabi_dsub>
 800dbc6:	4602      	mov	r2, r0
 800dbc8:	460b      	mov	r3, r1
 800dbca:	4610      	mov	r0, r2
 800dbcc:	4619      	mov	r1, r3
 800dbce:	f7f3 f823 	bl	8000c18 <__aeabi_d2f>
 800dbd2:	4603      	mov	r3, r0
 800dbd4:	60fb      	str	r3, [r7, #12]
    return temperatureC;
 800dbd6:	68fb      	ldr	r3, [r7, #12]
 800dbd8:	ee07 3a90 	vmov	s15, r3
}
 800dbdc:	eeb0 0a67 	vmov.f32	s0, s15
 800dbe0:	3710      	adds	r7, #16
 800dbe2:	46bd      	mov	sp, r7
 800dbe4:	bd80      	pop	{r7, pc}
 800dbe6:	bf00      	nop
 800dbe8:	3d70a3d7 	.word	0x3d70a3d7
 800dbec:	3f65f70a 	.word	0x3f65f70a
 800dbf0:	cccccccd 	.word	0xcccccccd
 800dbf4:	40476ccc 	.word	0x40476ccc

0800dbf8 <SHT2x_CalcRH>:
//vypocet vlhkosti
float SHT2x_CalcRH(unsigned short u16sRH)
{
 800dbf8:	b580      	push	{r7, lr}
 800dbfa:	b084      	sub	sp, #16
 800dbfc:	af00      	add	r7, sp, #0
 800dbfe:	4603      	mov	r3, r0
 800dc00:	80fb      	strh	r3, [r7, #6]
    float humidityRH = 0;
 800dc02:	f04f 0300 	mov.w	r3, #0
 800dc06:	60fb      	str	r3, [r7, #12]
    u16sRH &= ~0x0003;
 800dc08:	88fb      	ldrh	r3, [r7, #6]
 800dc0a:	f023 0303 	bic.w	r3, r3, #3
 800dc0e:	80fb      	strh	r3, [r7, #6]
    //humidityRH = -6.0 + 125.0/65536 * (float)u16sRH; // RH= -6 + 125 * SRH/2^16
    humidityRH = ((float)u16sRH * 0.00190735) - 6;
 800dc10:	88fb      	ldrh	r3, [r7, #6]
 800dc12:	ee07 3a90 	vmov	s15, r3
 800dc16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dc1a:	ee17 0a90 	vmov	r0, s15
 800dc1e:	f7f2 fcab 	bl	8000578 <__aeabi_f2d>
 800dc22:	a310      	add	r3, pc, #64	; (adr r3, 800dc64 <SHT2x_CalcRH+0x6c>)
 800dc24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc28:	f7f2 fcfe 	bl	8000628 <__aeabi_dmul>
 800dc2c:	4602      	mov	r2, r0
 800dc2e:	460b      	mov	r3, r1
 800dc30:	4610      	mov	r0, r2
 800dc32:	4619      	mov	r1, r3
 800dc34:	f04f 0200 	mov.w	r2, #0
 800dc38:	4b09      	ldr	r3, [pc, #36]	; (800dc60 <SHT2x_CalcRH+0x68>)
 800dc3a:	f7f2 fb3d 	bl	80002b8 <__aeabi_dsub>
 800dc3e:	4602      	mov	r2, r0
 800dc40:	460b      	mov	r3, r1
 800dc42:	4610      	mov	r0, r2
 800dc44:	4619      	mov	r1, r3
 800dc46:	f7f2 ffe7 	bl	8000c18 <__aeabi_d2f>
 800dc4a:	4603      	mov	r3, r0
 800dc4c:	60fb      	str	r3, [r7, #12]
    return humidityRH;
 800dc4e:	68fb      	ldr	r3, [r7, #12]
 800dc50:	ee07 3a90 	vmov	s15, r3
}
 800dc54:	eeb0 0a67 	vmov.f32	s0, s15
 800dc58:	3710      	adds	r7, #16
 800dc5a:	46bd      	mov	sp, r7
 800dc5c:	bd80      	pop	{r7, pc}
 800dc5e:	bf00      	nop
 800dc60:	40180000 	.word	0x40180000
 800dc64:	77cf4476 	.word	0x77cf4476
 800dc68:	3f5f4001 	.word	0x3f5f4001

0800dc6c <SHT2x_MeasureHM>:
//mereni
float SHT2x_MeasureHM(unsigned char cmd, unsigned short *pMeasurand)
{
 800dc6c:	b580      	push	{r7, lr}
 800dc6e:	b08a      	sub	sp, #40	; 0x28
 800dc70:	af04      	add	r7, sp, #16
 800dc72:	4603      	mov	r3, r0
 800dc74:	6039      	str	r1, [r7, #0]
 800dc76:	71fb      	strb	r3, [r7, #7]
    char  checksum = 0;
 800dc78:	2300      	movs	r3, #0
 800dc7a:	74fb      	strb	r3, [r7, #19]
    char  data[2];
	unsigned char addr = 0;
 800dc7c:	2300      	movs	r3, #0
 800dc7e:	74bb      	strb	r3, [r7, #18]
    unsigned short tmp = 0;
 800dc80:	2300      	movs	r3, #0
 800dc82:	823b      	strh	r3, [r7, #16]
    float t = 0;
 800dc84:	f04f 0300 	mov.w	r3, #0
 800dc88:	617b      	str	r3, [r7, #20]
	HAL_I2C_Mem_Read(&shtI2Chandle, SHT20_Read_Add, cmd, I2C_MEMADD_SIZE_8BIT,data,2, 0xFFFF);
 800dc8a:	79fb      	ldrb	r3, [r7, #7]
 800dc8c:	b29a      	uxth	r2, r3
 800dc8e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800dc92:	9302      	str	r3, [sp, #8]
 800dc94:	2302      	movs	r3, #2
 800dc96:	9301      	str	r3, [sp, #4]
 800dc98:	f107 030c 	add.w	r3, r7, #12
 800dc9c:	9300      	str	r3, [sp, #0]
 800dc9e:	2301      	movs	r3, #1
 800dca0:	2181      	movs	r1, #129	; 0x81
 800dca2:	481b      	ldr	r0, [pc, #108]	; (800dd10 <SHT2x_MeasureHM+0xa4>)
 800dca4:	f7f5 fec2 	bl	8003a2c <HAL_I2C_Mem_Read>
	
	SHT2x_CheckCrc(data, 2, checksum);
 800dca8:	7cfa      	ldrb	r2, [r7, #19]
 800dcaa:	f107 030c 	add.w	r3, r7, #12
 800dcae:	2102      	movs	r1, #2
 800dcb0:	4618      	mov	r0, r3
 800dcb2:	f7ff ff1f 	bl	800daf4 <SHT2x_CheckCrc>
    tmp = (data[0] << 8) + data[1];
 800dcb6:	7b3b      	ldrb	r3, [r7, #12]
 800dcb8:	b29b      	uxth	r3, r3
 800dcba:	021b      	lsls	r3, r3, #8
 800dcbc:	b29a      	uxth	r2, r3
 800dcbe:	7b7b      	ldrb	r3, [r7, #13]
 800dcc0:	b29b      	uxth	r3, r3
 800dcc2:	4413      	add	r3, r2
 800dcc4:	823b      	strh	r3, [r7, #16]
    if(cmd == SHT20_Measurement_T_HM)
 800dcc6:	79fb      	ldrb	r3, [r7, #7]
 800dcc8:	2be3      	cmp	r3, #227	; 0xe3
 800dcca:	d106      	bne.n	800dcda <SHT2x_MeasureHM+0x6e>
    {
        t = SHT2x_CalcTemperatureC(tmp);
 800dccc:	8a3b      	ldrh	r3, [r7, #16]
 800dcce:	4618      	mov	r0, r3
 800dcd0:	f7ff ff56 	bl	800db80 <SHT2x_CalcTemperatureC>
 800dcd4:	ed87 0a05 	vstr	s0, [r7, #20]
 800dcd8:	e005      	b.n	800dce6 <SHT2x_MeasureHM+0x7a>
    }
    else
    {
        t = SHT2x_CalcRH(tmp);
 800dcda:	8a3b      	ldrh	r3, [r7, #16]
 800dcdc:	4618      	mov	r0, r3
 800dcde:	f7ff ff8b 	bl	800dbf8 <SHT2x_CalcRH>
 800dce2:	ed87 0a05 	vstr	s0, [r7, #20]
    }
    if(pMeasurand)
 800dce6:	683b      	ldr	r3, [r7, #0]
 800dce8:	2b00      	cmp	r3, #0
 800dcea:	d008      	beq.n	800dcfe <SHT2x_MeasureHM+0x92>
    {
        *pMeasurand = (unsigned short)t;
 800dcec:	edd7 7a05 	vldr	s15, [r7, #20]
 800dcf0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800dcf4:	ee17 3a90 	vmov	r3, s15
 800dcf8:	b29a      	uxth	r2, r3
 800dcfa:	683b      	ldr	r3, [r7, #0]
 800dcfc:	801a      	strh	r2, [r3, #0]
    }
    return t;
 800dcfe:	697b      	ldr	r3, [r7, #20]
 800dd00:	ee07 3a90 	vmov	s15, r3
}
 800dd04:	eeb0 0a67 	vmov.f32	s0, s15
 800dd08:	3718      	adds	r7, #24
 800dd0a:	46bd      	mov	sp, r7
 800dd0c:	bd80      	pop	{r7, pc}
 800dd0e:	bf00      	nop
 800dd10:	200102f8 	.word	0x200102f8

0800dd14 <SHT20_GetValue>:
//získání hodnoty
void SHT20_GetValue(void)
{
 800dd14:	b580      	push	{r7, lr}
 800dd16:	af00      	add	r7, sp, #0
	sht20_info.tempreture = SHT2x_MeasureHM(SHT20_Measurement_T_HM, (void *)0);
 800dd18:	2100      	movs	r1, #0
 800dd1a:	20e3      	movs	r0, #227	; 0xe3
 800dd1c:	f7ff ffa6 	bl	800dc6c <SHT2x_MeasureHM>
 800dd20:	eef0 7a40 	vmov.f32	s15, s0
 800dd24:	4b0a      	ldr	r3, [pc, #40]	; (800dd50 <SHT20_GetValue+0x3c>)
 800dd26:	edc3 7a00 	vstr	s15, [r3]
	HAL_Delay(70);
 800dd2a:	2046      	movs	r0, #70	; 0x46
 800dd2c:	f7f3 f9e6 	bl	80010fc <HAL_Delay>
	sht20_info.humidity = SHT2x_MeasureHM(SHT20_Measurement_RH_HM, (void *)0);
 800dd30:	2100      	movs	r1, #0
 800dd32:	20e5      	movs	r0, #229	; 0xe5
 800dd34:	f7ff ff9a 	bl	800dc6c <SHT2x_MeasureHM>
 800dd38:	eef0 7a40 	vmov.f32	s15, s0
 800dd3c:	4b04      	ldr	r3, [pc, #16]	; (800dd50 <SHT20_GetValue+0x3c>)
 800dd3e:	edc3 7a01 	vstr	s15, [r3, #4]
	HAL_Delay(25);
 800dd42:	2019      	movs	r0, #25
 800dd44:	f7f3 f9da 	bl	80010fc <HAL_Delay>
	SHT20_reset();
 800dd48:	f7ff febc 	bl	800dac4 <SHT20_reset>
}
 800dd4c:	bf00      	nop
 800dd4e:	bd80      	pop	{r7, pc}
 800dd50:	200108ac 	.word	0x200108ac

0800dd54 <Keypad4x4_Init>:
	'D'
};
/* Functions ------------------------------------------------------------------*/
//inicializace
void Keypad4x4_Init(Keypad_WiresTypeDef  *KeypadWiringStruct)
{
 800dd54:	b5b0      	push	{r4, r5, r7, lr}
 800dd56:	b082      	sub	sp, #8
 800dd58:	af00      	add	r7, sp, #0
 800dd5a:	6078      	str	r0, [r7, #4]
	//Step(1): Copy the Keypad wirings to the library
	KeypadStruct = *KeypadWiringStruct;
 800dd5c:	4a17      	ldr	r2, [pc, #92]	; (800ddbc <Keypad4x4_Init+0x68>)
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	4614      	mov	r4, r2
 800dd62:	461d      	mov	r5, r3
 800dd64:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800dd66:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800dd68:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800dd6a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800dd6c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800dd70:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	
	HAL_GPIO_WritePin(KeypadStruct.OUT0_Port, KeypadStruct.OUT0pin, SET);
 800dd74:	4b11      	ldr	r3, [pc, #68]	; (800ddbc <Keypad4x4_Init+0x68>)
 800dd76:	691b      	ldr	r3, [r3, #16]
 800dd78:	4a10      	ldr	r2, [pc, #64]	; (800ddbc <Keypad4x4_Init+0x68>)
 800dd7a:	8d11      	ldrh	r1, [r2, #40]	; 0x28
 800dd7c:	2201      	movs	r2, #1
 800dd7e:	4618      	mov	r0, r3
 800dd80:	f7f5 fc66 	bl	8003650 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(KeypadStruct.OUT1_Port, KeypadStruct.OUT1pin, SET);
 800dd84:	4b0d      	ldr	r3, [pc, #52]	; (800ddbc <Keypad4x4_Init+0x68>)
 800dd86:	695b      	ldr	r3, [r3, #20]
 800dd88:	4a0c      	ldr	r2, [pc, #48]	; (800ddbc <Keypad4x4_Init+0x68>)
 800dd8a:	8d51      	ldrh	r1, [r2, #42]	; 0x2a
 800dd8c:	2201      	movs	r2, #1
 800dd8e:	4618      	mov	r0, r3
 800dd90:	f7f5 fc5e 	bl	8003650 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(KeypadStruct.OUT2_Port, KeypadStruct.OUT2pin, SET);
 800dd94:	4b09      	ldr	r3, [pc, #36]	; (800ddbc <Keypad4x4_Init+0x68>)
 800dd96:	699b      	ldr	r3, [r3, #24]
 800dd98:	4a08      	ldr	r2, [pc, #32]	; (800ddbc <Keypad4x4_Init+0x68>)
 800dd9a:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 800dd9c:	2201      	movs	r2, #1
 800dd9e:	4618      	mov	r0, r3
 800dda0:	f7f5 fc56 	bl	8003650 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(KeypadStruct.OUT3_Port, KeypadStruct.OUT3pin, SET);
 800dda4:	4b05      	ldr	r3, [pc, #20]	; (800ddbc <Keypad4x4_Init+0x68>)
 800dda6:	69db      	ldr	r3, [r3, #28]
 800dda8:	4a04      	ldr	r2, [pc, #16]	; (800ddbc <Keypad4x4_Init+0x68>)
 800ddaa:	8dd1      	ldrh	r1, [r2, #46]	; 0x2e
 800ddac:	2201      	movs	r2, #1
 800ddae:	4618      	mov	r0, r3
 800ddb0:	f7f5 fc4e 	bl	8003650 <HAL_GPIO_WritePin>
}
 800ddb4:	bf00      	nop
 800ddb6:	3708      	adds	r7, #8
 800ddb8:	46bd      	mov	sp, r7
 800ddba:	bdb0      	pop	{r4, r5, r7, pc}
 800ddbc:	20010344 	.word	0x20010344

0800ddc0 <Keypad4x4_ChangeColomn>:
//zmena sloupce
void Keypad4x4_ChangeColomn(uint8_t colNum_0_to_3)
{
 800ddc0:	b580      	push	{r7, lr}
 800ddc2:	b082      	sub	sp, #8
 800ddc4:	af00      	add	r7, sp, #0
 800ddc6:	4603      	mov	r3, r0
 800ddc8:	71fb      	strb	r3, [r7, #7]
	if(colNum_0_to_3==0)
 800ddca:	79fb      	ldrb	r3, [r7, #7]
 800ddcc:	2b00      	cmp	r3, #0
 800ddce:	d120      	bne.n	800de12 <Keypad4x4_ChangeColomn+0x52>
	{
		HAL_GPIO_WritePin(KeypadStruct.OUT0_Port, KeypadStruct.OUT0pin, RESET);
 800ddd0:	4b47      	ldr	r3, [pc, #284]	; (800def0 <Keypad4x4_ChangeColomn+0x130>)
 800ddd2:	691b      	ldr	r3, [r3, #16]
 800ddd4:	4a46      	ldr	r2, [pc, #280]	; (800def0 <Keypad4x4_ChangeColomn+0x130>)
 800ddd6:	8d11      	ldrh	r1, [r2, #40]	; 0x28
 800ddd8:	2200      	movs	r2, #0
 800ddda:	4618      	mov	r0, r3
 800dddc:	f7f5 fc38 	bl	8003650 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(KeypadStruct.OUT1_Port, KeypadStruct.OUT1pin, SET);
 800dde0:	4b43      	ldr	r3, [pc, #268]	; (800def0 <Keypad4x4_ChangeColomn+0x130>)
 800dde2:	695b      	ldr	r3, [r3, #20]
 800dde4:	4a42      	ldr	r2, [pc, #264]	; (800def0 <Keypad4x4_ChangeColomn+0x130>)
 800dde6:	8d51      	ldrh	r1, [r2, #42]	; 0x2a
 800dde8:	2201      	movs	r2, #1
 800ddea:	4618      	mov	r0, r3
 800ddec:	f7f5 fc30 	bl	8003650 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(KeypadStruct.OUT2_Port, KeypadStruct.OUT2pin, SET);
 800ddf0:	4b3f      	ldr	r3, [pc, #252]	; (800def0 <Keypad4x4_ChangeColomn+0x130>)
 800ddf2:	699b      	ldr	r3, [r3, #24]
 800ddf4:	4a3e      	ldr	r2, [pc, #248]	; (800def0 <Keypad4x4_ChangeColomn+0x130>)
 800ddf6:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 800ddf8:	2201      	movs	r2, #1
 800ddfa:	4618      	mov	r0, r3
 800ddfc:	f7f5 fc28 	bl	8003650 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(KeypadStruct.OUT3_Port, KeypadStruct.OUT3pin, SET);
 800de00:	4b3b      	ldr	r3, [pc, #236]	; (800def0 <Keypad4x4_ChangeColomn+0x130>)
 800de02:	69db      	ldr	r3, [r3, #28]
 800de04:	4a3a      	ldr	r2, [pc, #232]	; (800def0 <Keypad4x4_ChangeColomn+0x130>)
 800de06:	8dd1      	ldrh	r1, [r2, #46]	; 0x2e
 800de08:	2201      	movs	r2, #1
 800de0a:	4618      	mov	r0, r3
 800de0c:	f7f5 fc20 	bl	8003650 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(KeypadStruct.OUT0_Port, KeypadStruct.OUT0pin, SET);
		HAL_GPIO_WritePin(KeypadStruct.OUT1_Port, KeypadStruct.OUT1pin, SET);
		HAL_GPIO_WritePin(KeypadStruct.OUT2_Port, KeypadStruct.OUT2pin, SET);
		HAL_GPIO_WritePin(KeypadStruct.OUT3_Port, KeypadStruct.OUT3pin, RESET);
	}
}
 800de10:	e06a      	b.n	800dee8 <Keypad4x4_ChangeColomn+0x128>
	else if(colNum_0_to_3==1)
 800de12:	79fb      	ldrb	r3, [r7, #7]
 800de14:	2b01      	cmp	r3, #1
 800de16:	d120      	bne.n	800de5a <Keypad4x4_ChangeColomn+0x9a>
		HAL_GPIO_WritePin(KeypadStruct.OUT0_Port, KeypadStruct.OUT0pin, SET);
 800de18:	4b35      	ldr	r3, [pc, #212]	; (800def0 <Keypad4x4_ChangeColomn+0x130>)
 800de1a:	691b      	ldr	r3, [r3, #16]
 800de1c:	4a34      	ldr	r2, [pc, #208]	; (800def0 <Keypad4x4_ChangeColomn+0x130>)
 800de1e:	8d11      	ldrh	r1, [r2, #40]	; 0x28
 800de20:	2201      	movs	r2, #1
 800de22:	4618      	mov	r0, r3
 800de24:	f7f5 fc14 	bl	8003650 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(KeypadStruct.OUT1_Port, KeypadStruct.OUT1pin, RESET);
 800de28:	4b31      	ldr	r3, [pc, #196]	; (800def0 <Keypad4x4_ChangeColomn+0x130>)
 800de2a:	695b      	ldr	r3, [r3, #20]
 800de2c:	4a30      	ldr	r2, [pc, #192]	; (800def0 <Keypad4x4_ChangeColomn+0x130>)
 800de2e:	8d51      	ldrh	r1, [r2, #42]	; 0x2a
 800de30:	2200      	movs	r2, #0
 800de32:	4618      	mov	r0, r3
 800de34:	f7f5 fc0c 	bl	8003650 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(KeypadStruct.OUT2_Port, KeypadStruct.OUT2pin, SET);
 800de38:	4b2d      	ldr	r3, [pc, #180]	; (800def0 <Keypad4x4_ChangeColomn+0x130>)
 800de3a:	699b      	ldr	r3, [r3, #24]
 800de3c:	4a2c      	ldr	r2, [pc, #176]	; (800def0 <Keypad4x4_ChangeColomn+0x130>)
 800de3e:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 800de40:	2201      	movs	r2, #1
 800de42:	4618      	mov	r0, r3
 800de44:	f7f5 fc04 	bl	8003650 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(KeypadStruct.OUT3_Port, KeypadStruct.OUT3pin, SET);
 800de48:	4b29      	ldr	r3, [pc, #164]	; (800def0 <Keypad4x4_ChangeColomn+0x130>)
 800de4a:	69db      	ldr	r3, [r3, #28]
 800de4c:	4a28      	ldr	r2, [pc, #160]	; (800def0 <Keypad4x4_ChangeColomn+0x130>)
 800de4e:	8dd1      	ldrh	r1, [r2, #46]	; 0x2e
 800de50:	2201      	movs	r2, #1
 800de52:	4618      	mov	r0, r3
 800de54:	f7f5 fbfc 	bl	8003650 <HAL_GPIO_WritePin>
}
 800de58:	e046      	b.n	800dee8 <Keypad4x4_ChangeColomn+0x128>
	else if(colNum_0_to_3==2)
 800de5a:	79fb      	ldrb	r3, [r7, #7]
 800de5c:	2b02      	cmp	r3, #2
 800de5e:	d120      	bne.n	800dea2 <Keypad4x4_ChangeColomn+0xe2>
		HAL_GPIO_WritePin(KeypadStruct.OUT0_Port, KeypadStruct.OUT0pin, SET);
 800de60:	4b23      	ldr	r3, [pc, #140]	; (800def0 <Keypad4x4_ChangeColomn+0x130>)
 800de62:	691b      	ldr	r3, [r3, #16]
 800de64:	4a22      	ldr	r2, [pc, #136]	; (800def0 <Keypad4x4_ChangeColomn+0x130>)
 800de66:	8d11      	ldrh	r1, [r2, #40]	; 0x28
 800de68:	2201      	movs	r2, #1
 800de6a:	4618      	mov	r0, r3
 800de6c:	f7f5 fbf0 	bl	8003650 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(KeypadStruct.OUT1_Port, KeypadStruct.OUT1pin, SET);
 800de70:	4b1f      	ldr	r3, [pc, #124]	; (800def0 <Keypad4x4_ChangeColomn+0x130>)
 800de72:	695b      	ldr	r3, [r3, #20]
 800de74:	4a1e      	ldr	r2, [pc, #120]	; (800def0 <Keypad4x4_ChangeColomn+0x130>)
 800de76:	8d51      	ldrh	r1, [r2, #42]	; 0x2a
 800de78:	2201      	movs	r2, #1
 800de7a:	4618      	mov	r0, r3
 800de7c:	f7f5 fbe8 	bl	8003650 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(KeypadStruct.OUT2_Port, KeypadStruct.OUT2pin, RESET);
 800de80:	4b1b      	ldr	r3, [pc, #108]	; (800def0 <Keypad4x4_ChangeColomn+0x130>)
 800de82:	699b      	ldr	r3, [r3, #24]
 800de84:	4a1a      	ldr	r2, [pc, #104]	; (800def0 <Keypad4x4_ChangeColomn+0x130>)
 800de86:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 800de88:	2200      	movs	r2, #0
 800de8a:	4618      	mov	r0, r3
 800de8c:	f7f5 fbe0 	bl	8003650 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(KeypadStruct.OUT3_Port, KeypadStruct.OUT3pin, SET);
 800de90:	4b17      	ldr	r3, [pc, #92]	; (800def0 <Keypad4x4_ChangeColomn+0x130>)
 800de92:	69db      	ldr	r3, [r3, #28]
 800de94:	4a16      	ldr	r2, [pc, #88]	; (800def0 <Keypad4x4_ChangeColomn+0x130>)
 800de96:	8dd1      	ldrh	r1, [r2, #46]	; 0x2e
 800de98:	2201      	movs	r2, #1
 800de9a:	4618      	mov	r0, r3
 800de9c:	f7f5 fbd8 	bl	8003650 <HAL_GPIO_WritePin>
}
 800dea0:	e022      	b.n	800dee8 <Keypad4x4_ChangeColomn+0x128>
	else if(colNum_0_to_3==3)
 800dea2:	79fb      	ldrb	r3, [r7, #7]
 800dea4:	2b03      	cmp	r3, #3
 800dea6:	d11f      	bne.n	800dee8 <Keypad4x4_ChangeColomn+0x128>
		HAL_GPIO_WritePin(KeypadStruct.OUT0_Port, KeypadStruct.OUT0pin, SET);
 800dea8:	4b11      	ldr	r3, [pc, #68]	; (800def0 <Keypad4x4_ChangeColomn+0x130>)
 800deaa:	691b      	ldr	r3, [r3, #16]
 800deac:	4a10      	ldr	r2, [pc, #64]	; (800def0 <Keypad4x4_ChangeColomn+0x130>)
 800deae:	8d11      	ldrh	r1, [r2, #40]	; 0x28
 800deb0:	2201      	movs	r2, #1
 800deb2:	4618      	mov	r0, r3
 800deb4:	f7f5 fbcc 	bl	8003650 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(KeypadStruct.OUT1_Port, KeypadStruct.OUT1pin, SET);
 800deb8:	4b0d      	ldr	r3, [pc, #52]	; (800def0 <Keypad4x4_ChangeColomn+0x130>)
 800deba:	695b      	ldr	r3, [r3, #20]
 800debc:	4a0c      	ldr	r2, [pc, #48]	; (800def0 <Keypad4x4_ChangeColomn+0x130>)
 800debe:	8d51      	ldrh	r1, [r2, #42]	; 0x2a
 800dec0:	2201      	movs	r2, #1
 800dec2:	4618      	mov	r0, r3
 800dec4:	f7f5 fbc4 	bl	8003650 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(KeypadStruct.OUT2_Port, KeypadStruct.OUT2pin, SET);
 800dec8:	4b09      	ldr	r3, [pc, #36]	; (800def0 <Keypad4x4_ChangeColomn+0x130>)
 800deca:	699b      	ldr	r3, [r3, #24]
 800decc:	4a08      	ldr	r2, [pc, #32]	; (800def0 <Keypad4x4_ChangeColomn+0x130>)
 800dece:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 800ded0:	2201      	movs	r2, #1
 800ded2:	4618      	mov	r0, r3
 800ded4:	f7f5 fbbc 	bl	8003650 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(KeypadStruct.OUT3_Port, KeypadStruct.OUT3pin, RESET);
 800ded8:	4b05      	ldr	r3, [pc, #20]	; (800def0 <Keypad4x4_ChangeColomn+0x130>)
 800deda:	69db      	ldr	r3, [r3, #28]
 800dedc:	4a04      	ldr	r2, [pc, #16]	; (800def0 <Keypad4x4_ChangeColomn+0x130>)
 800dede:	8dd1      	ldrh	r1, [r2, #46]	; 0x2e
 800dee0:	2200      	movs	r2, #0
 800dee2:	4618      	mov	r0, r3
 800dee4:	f7f5 fbb4 	bl	8003650 <HAL_GPIO_WritePin>
}
 800dee8:	bf00      	nop
 800deea:	3708      	adds	r7, #8
 800deec:	46bd      	mov	sp, r7
 800deee:	bd80      	pop	{r7, pc}
 800def0:	20010344 	.word	0x20010344

0800def4 <Keypad4x4_ReadKeypad>:
//funkce pro cteni aktivni klavesy
void Keypad4x4_ReadKeypad(bool keys[16])
{
 800def4:	b580      	push	{r7, lr}
 800def6:	b082      	sub	sp, #8
 800def8:	af00      	add	r7, sp, #0
 800defa:	6078      	str	r0, [r7, #4]
	//Step(1): Make Col0 High and check the rows
	Keypad4x4_ChangeColomn(0);
 800defc:	2000      	movs	r0, #0
 800defe:	f7ff ff5f 	bl	800ddc0 <Keypad4x4_ChangeColomn>
	keys[0] = HAL_GPIO_ReadPin(KeypadStruct.IN0_Port, KeypadStruct.IN0pin);
 800df02:	4b95      	ldr	r3, [pc, #596]	; (800e158 <Keypad4x4_ReadKeypad+0x264>)
 800df04:	681b      	ldr	r3, [r3, #0]
 800df06:	4a94      	ldr	r2, [pc, #592]	; (800e158 <Keypad4x4_ReadKeypad+0x264>)
 800df08:	8c12      	ldrh	r2, [r2, #32]
 800df0a:	4611      	mov	r1, r2
 800df0c:	4618      	mov	r0, r3
 800df0e:	f7f5 fb87 	bl	8003620 <HAL_GPIO_ReadPin>
 800df12:	4603      	mov	r3, r0
 800df14:	2b00      	cmp	r3, #0
 800df16:	bf14      	ite	ne
 800df18:	2301      	movne	r3, #1
 800df1a:	2300      	moveq	r3, #0
 800df1c:	b2da      	uxtb	r2, r3
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	701a      	strb	r2, [r3, #0]
	keys[4] = HAL_GPIO_ReadPin(KeypadStruct.IN1_Port, KeypadStruct.IN1pin);
 800df22:	4b8d      	ldr	r3, [pc, #564]	; (800e158 <Keypad4x4_ReadKeypad+0x264>)
 800df24:	685b      	ldr	r3, [r3, #4]
 800df26:	4a8c      	ldr	r2, [pc, #560]	; (800e158 <Keypad4x4_ReadKeypad+0x264>)
 800df28:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 800df2a:	4611      	mov	r1, r2
 800df2c:	4618      	mov	r0, r3
 800df2e:	f7f5 fb77 	bl	8003620 <HAL_GPIO_ReadPin>
 800df32:	4603      	mov	r3, r0
 800df34:	461a      	mov	r2, r3
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	3304      	adds	r3, #4
 800df3a:	2a00      	cmp	r2, #0
 800df3c:	bf14      	ite	ne
 800df3e:	2201      	movne	r2, #1
 800df40:	2200      	moveq	r2, #0
 800df42:	b2d2      	uxtb	r2, r2
 800df44:	701a      	strb	r2, [r3, #0]
	keys[8] = HAL_GPIO_ReadPin(KeypadStruct.IN2_Port, KeypadStruct.IN2pin);
 800df46:	4b84      	ldr	r3, [pc, #528]	; (800e158 <Keypad4x4_ReadKeypad+0x264>)
 800df48:	689b      	ldr	r3, [r3, #8]
 800df4a:	4a83      	ldr	r2, [pc, #524]	; (800e158 <Keypad4x4_ReadKeypad+0x264>)
 800df4c:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 800df4e:	4611      	mov	r1, r2
 800df50:	4618      	mov	r0, r3
 800df52:	f7f5 fb65 	bl	8003620 <HAL_GPIO_ReadPin>
 800df56:	4603      	mov	r3, r0
 800df58:	461a      	mov	r2, r3
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	3308      	adds	r3, #8
 800df5e:	2a00      	cmp	r2, #0
 800df60:	bf14      	ite	ne
 800df62:	2201      	movne	r2, #1
 800df64:	2200      	moveq	r2, #0
 800df66:	b2d2      	uxtb	r2, r2
 800df68:	701a      	strb	r2, [r3, #0]
	keys[12] = HAL_GPIO_ReadPin(KeypadStruct.IN3_Port, KeypadStruct.IN3pin);
 800df6a:	4b7b      	ldr	r3, [pc, #492]	; (800e158 <Keypad4x4_ReadKeypad+0x264>)
 800df6c:	68db      	ldr	r3, [r3, #12]
 800df6e:	4a7a      	ldr	r2, [pc, #488]	; (800e158 <Keypad4x4_ReadKeypad+0x264>)
 800df70:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 800df72:	4611      	mov	r1, r2
 800df74:	4618      	mov	r0, r3
 800df76:	f7f5 fb53 	bl	8003620 <HAL_GPIO_ReadPin>
 800df7a:	4603      	mov	r3, r0
 800df7c:	461a      	mov	r2, r3
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	330c      	adds	r3, #12
 800df82:	2a00      	cmp	r2, #0
 800df84:	bf14      	ite	ne
 800df86:	2201      	movne	r2, #1
 800df88:	2200      	moveq	r2, #0
 800df8a:	b2d2      	uxtb	r2, r2
 800df8c:	701a      	strb	r2, [r3, #0]
	
	//Step(2): Make Col1 High and check the rows
	Keypad4x4_ChangeColomn(1);
 800df8e:	2001      	movs	r0, #1
 800df90:	f7ff ff16 	bl	800ddc0 <Keypad4x4_ChangeColomn>
	keys[1] = HAL_GPIO_ReadPin(KeypadStruct.IN0_Port, KeypadStruct.IN0pin);
 800df94:	4b70      	ldr	r3, [pc, #448]	; (800e158 <Keypad4x4_ReadKeypad+0x264>)
 800df96:	681b      	ldr	r3, [r3, #0]
 800df98:	4a6f      	ldr	r2, [pc, #444]	; (800e158 <Keypad4x4_ReadKeypad+0x264>)
 800df9a:	8c12      	ldrh	r2, [r2, #32]
 800df9c:	4611      	mov	r1, r2
 800df9e:	4618      	mov	r0, r3
 800dfa0:	f7f5 fb3e 	bl	8003620 <HAL_GPIO_ReadPin>
 800dfa4:	4603      	mov	r3, r0
 800dfa6:	461a      	mov	r2, r3
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	3301      	adds	r3, #1
 800dfac:	2a00      	cmp	r2, #0
 800dfae:	bf14      	ite	ne
 800dfb0:	2201      	movne	r2, #1
 800dfb2:	2200      	moveq	r2, #0
 800dfb4:	b2d2      	uxtb	r2, r2
 800dfb6:	701a      	strb	r2, [r3, #0]
	keys[5] = HAL_GPIO_ReadPin(KeypadStruct.IN1_Port, KeypadStruct.IN1pin);
 800dfb8:	4b67      	ldr	r3, [pc, #412]	; (800e158 <Keypad4x4_ReadKeypad+0x264>)
 800dfba:	685b      	ldr	r3, [r3, #4]
 800dfbc:	4a66      	ldr	r2, [pc, #408]	; (800e158 <Keypad4x4_ReadKeypad+0x264>)
 800dfbe:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 800dfc0:	4611      	mov	r1, r2
 800dfc2:	4618      	mov	r0, r3
 800dfc4:	f7f5 fb2c 	bl	8003620 <HAL_GPIO_ReadPin>
 800dfc8:	4603      	mov	r3, r0
 800dfca:	461a      	mov	r2, r3
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	3305      	adds	r3, #5
 800dfd0:	2a00      	cmp	r2, #0
 800dfd2:	bf14      	ite	ne
 800dfd4:	2201      	movne	r2, #1
 800dfd6:	2200      	moveq	r2, #0
 800dfd8:	b2d2      	uxtb	r2, r2
 800dfda:	701a      	strb	r2, [r3, #0]
	keys[9] = HAL_GPIO_ReadPin(KeypadStruct.IN2_Port, KeypadStruct.IN2pin);
 800dfdc:	4b5e      	ldr	r3, [pc, #376]	; (800e158 <Keypad4x4_ReadKeypad+0x264>)
 800dfde:	689b      	ldr	r3, [r3, #8]
 800dfe0:	4a5d      	ldr	r2, [pc, #372]	; (800e158 <Keypad4x4_ReadKeypad+0x264>)
 800dfe2:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 800dfe4:	4611      	mov	r1, r2
 800dfe6:	4618      	mov	r0, r3
 800dfe8:	f7f5 fb1a 	bl	8003620 <HAL_GPIO_ReadPin>
 800dfec:	4603      	mov	r3, r0
 800dfee:	461a      	mov	r2, r3
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	3309      	adds	r3, #9
 800dff4:	2a00      	cmp	r2, #0
 800dff6:	bf14      	ite	ne
 800dff8:	2201      	movne	r2, #1
 800dffa:	2200      	moveq	r2, #0
 800dffc:	b2d2      	uxtb	r2, r2
 800dffe:	701a      	strb	r2, [r3, #0]
	keys[13] = HAL_GPIO_ReadPin(KeypadStruct.IN3_Port, KeypadStruct.IN3pin);
 800e000:	4b55      	ldr	r3, [pc, #340]	; (800e158 <Keypad4x4_ReadKeypad+0x264>)
 800e002:	68db      	ldr	r3, [r3, #12]
 800e004:	4a54      	ldr	r2, [pc, #336]	; (800e158 <Keypad4x4_ReadKeypad+0x264>)
 800e006:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 800e008:	4611      	mov	r1, r2
 800e00a:	4618      	mov	r0, r3
 800e00c:	f7f5 fb08 	bl	8003620 <HAL_GPIO_ReadPin>
 800e010:	4603      	mov	r3, r0
 800e012:	461a      	mov	r2, r3
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	330d      	adds	r3, #13
 800e018:	2a00      	cmp	r2, #0
 800e01a:	bf14      	ite	ne
 800e01c:	2201      	movne	r2, #1
 800e01e:	2200      	moveq	r2, #0
 800e020:	b2d2      	uxtb	r2, r2
 800e022:	701a      	strb	r2, [r3, #0]
	
	//Step(3): Make Col2 High and check the rows
	Keypad4x4_ChangeColomn(2);
 800e024:	2002      	movs	r0, #2
 800e026:	f7ff fecb 	bl	800ddc0 <Keypad4x4_ChangeColomn>
	keys[2] = HAL_GPIO_ReadPin(KeypadStruct.IN0_Port, KeypadStruct.IN0pin);
 800e02a:	4b4b      	ldr	r3, [pc, #300]	; (800e158 <Keypad4x4_ReadKeypad+0x264>)
 800e02c:	681b      	ldr	r3, [r3, #0]
 800e02e:	4a4a      	ldr	r2, [pc, #296]	; (800e158 <Keypad4x4_ReadKeypad+0x264>)
 800e030:	8c12      	ldrh	r2, [r2, #32]
 800e032:	4611      	mov	r1, r2
 800e034:	4618      	mov	r0, r3
 800e036:	f7f5 faf3 	bl	8003620 <HAL_GPIO_ReadPin>
 800e03a:	4603      	mov	r3, r0
 800e03c:	461a      	mov	r2, r3
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	3302      	adds	r3, #2
 800e042:	2a00      	cmp	r2, #0
 800e044:	bf14      	ite	ne
 800e046:	2201      	movne	r2, #1
 800e048:	2200      	moveq	r2, #0
 800e04a:	b2d2      	uxtb	r2, r2
 800e04c:	701a      	strb	r2, [r3, #0]
	keys[6] = HAL_GPIO_ReadPin(KeypadStruct.IN1_Port, KeypadStruct.IN1pin);
 800e04e:	4b42      	ldr	r3, [pc, #264]	; (800e158 <Keypad4x4_ReadKeypad+0x264>)
 800e050:	685b      	ldr	r3, [r3, #4]
 800e052:	4a41      	ldr	r2, [pc, #260]	; (800e158 <Keypad4x4_ReadKeypad+0x264>)
 800e054:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 800e056:	4611      	mov	r1, r2
 800e058:	4618      	mov	r0, r3
 800e05a:	f7f5 fae1 	bl	8003620 <HAL_GPIO_ReadPin>
 800e05e:	4603      	mov	r3, r0
 800e060:	461a      	mov	r2, r3
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	3306      	adds	r3, #6
 800e066:	2a00      	cmp	r2, #0
 800e068:	bf14      	ite	ne
 800e06a:	2201      	movne	r2, #1
 800e06c:	2200      	moveq	r2, #0
 800e06e:	b2d2      	uxtb	r2, r2
 800e070:	701a      	strb	r2, [r3, #0]
	keys[10] = HAL_GPIO_ReadPin(KeypadStruct.IN2_Port, KeypadStruct.IN2pin);
 800e072:	4b39      	ldr	r3, [pc, #228]	; (800e158 <Keypad4x4_ReadKeypad+0x264>)
 800e074:	689b      	ldr	r3, [r3, #8]
 800e076:	4a38      	ldr	r2, [pc, #224]	; (800e158 <Keypad4x4_ReadKeypad+0x264>)
 800e078:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 800e07a:	4611      	mov	r1, r2
 800e07c:	4618      	mov	r0, r3
 800e07e:	f7f5 facf 	bl	8003620 <HAL_GPIO_ReadPin>
 800e082:	4603      	mov	r3, r0
 800e084:	461a      	mov	r2, r3
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	330a      	adds	r3, #10
 800e08a:	2a00      	cmp	r2, #0
 800e08c:	bf14      	ite	ne
 800e08e:	2201      	movne	r2, #1
 800e090:	2200      	moveq	r2, #0
 800e092:	b2d2      	uxtb	r2, r2
 800e094:	701a      	strb	r2, [r3, #0]
	keys[14] = HAL_GPIO_ReadPin(KeypadStruct.IN3_Port, KeypadStruct.IN3pin);
 800e096:	4b30      	ldr	r3, [pc, #192]	; (800e158 <Keypad4x4_ReadKeypad+0x264>)
 800e098:	68db      	ldr	r3, [r3, #12]
 800e09a:	4a2f      	ldr	r2, [pc, #188]	; (800e158 <Keypad4x4_ReadKeypad+0x264>)
 800e09c:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 800e09e:	4611      	mov	r1, r2
 800e0a0:	4618      	mov	r0, r3
 800e0a2:	f7f5 fabd 	bl	8003620 <HAL_GPIO_ReadPin>
 800e0a6:	4603      	mov	r3, r0
 800e0a8:	461a      	mov	r2, r3
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	330e      	adds	r3, #14
 800e0ae:	2a00      	cmp	r2, #0
 800e0b0:	bf14      	ite	ne
 800e0b2:	2201      	movne	r2, #1
 800e0b4:	2200      	moveq	r2, #0
 800e0b6:	b2d2      	uxtb	r2, r2
 800e0b8:	701a      	strb	r2, [r3, #0]
	
	//Step(4): Make Col3 High and check the rows
	Keypad4x4_ChangeColomn(3);
 800e0ba:	2003      	movs	r0, #3
 800e0bc:	f7ff fe80 	bl	800ddc0 <Keypad4x4_ChangeColomn>
	keys[3] = HAL_GPIO_ReadPin(KeypadStruct.IN0_Port, KeypadStruct.IN0pin);
 800e0c0:	4b25      	ldr	r3, [pc, #148]	; (800e158 <Keypad4x4_ReadKeypad+0x264>)
 800e0c2:	681b      	ldr	r3, [r3, #0]
 800e0c4:	4a24      	ldr	r2, [pc, #144]	; (800e158 <Keypad4x4_ReadKeypad+0x264>)
 800e0c6:	8c12      	ldrh	r2, [r2, #32]
 800e0c8:	4611      	mov	r1, r2
 800e0ca:	4618      	mov	r0, r3
 800e0cc:	f7f5 faa8 	bl	8003620 <HAL_GPIO_ReadPin>
 800e0d0:	4603      	mov	r3, r0
 800e0d2:	461a      	mov	r2, r3
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	3303      	adds	r3, #3
 800e0d8:	2a00      	cmp	r2, #0
 800e0da:	bf14      	ite	ne
 800e0dc:	2201      	movne	r2, #1
 800e0de:	2200      	moveq	r2, #0
 800e0e0:	b2d2      	uxtb	r2, r2
 800e0e2:	701a      	strb	r2, [r3, #0]
	keys[7] = HAL_GPIO_ReadPin(KeypadStruct.IN1_Port, KeypadStruct.IN1pin);
 800e0e4:	4b1c      	ldr	r3, [pc, #112]	; (800e158 <Keypad4x4_ReadKeypad+0x264>)
 800e0e6:	685b      	ldr	r3, [r3, #4]
 800e0e8:	4a1b      	ldr	r2, [pc, #108]	; (800e158 <Keypad4x4_ReadKeypad+0x264>)
 800e0ea:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 800e0ec:	4611      	mov	r1, r2
 800e0ee:	4618      	mov	r0, r3
 800e0f0:	f7f5 fa96 	bl	8003620 <HAL_GPIO_ReadPin>
 800e0f4:	4603      	mov	r3, r0
 800e0f6:	461a      	mov	r2, r3
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	3307      	adds	r3, #7
 800e0fc:	2a00      	cmp	r2, #0
 800e0fe:	bf14      	ite	ne
 800e100:	2201      	movne	r2, #1
 800e102:	2200      	moveq	r2, #0
 800e104:	b2d2      	uxtb	r2, r2
 800e106:	701a      	strb	r2, [r3, #0]
	keys[11] = HAL_GPIO_ReadPin(KeypadStruct.IN2_Port, KeypadStruct.IN2pin);
 800e108:	4b13      	ldr	r3, [pc, #76]	; (800e158 <Keypad4x4_ReadKeypad+0x264>)
 800e10a:	689b      	ldr	r3, [r3, #8]
 800e10c:	4a12      	ldr	r2, [pc, #72]	; (800e158 <Keypad4x4_ReadKeypad+0x264>)
 800e10e:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 800e110:	4611      	mov	r1, r2
 800e112:	4618      	mov	r0, r3
 800e114:	f7f5 fa84 	bl	8003620 <HAL_GPIO_ReadPin>
 800e118:	4603      	mov	r3, r0
 800e11a:	461a      	mov	r2, r3
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	330b      	adds	r3, #11
 800e120:	2a00      	cmp	r2, #0
 800e122:	bf14      	ite	ne
 800e124:	2201      	movne	r2, #1
 800e126:	2200      	moveq	r2, #0
 800e128:	b2d2      	uxtb	r2, r2
 800e12a:	701a      	strb	r2, [r3, #0]
	keys[15] = HAL_GPIO_ReadPin(KeypadStruct.IN3_Port, KeypadStruct.IN3pin);
 800e12c:	4b0a      	ldr	r3, [pc, #40]	; (800e158 <Keypad4x4_ReadKeypad+0x264>)
 800e12e:	68db      	ldr	r3, [r3, #12]
 800e130:	4a09      	ldr	r2, [pc, #36]	; (800e158 <Keypad4x4_ReadKeypad+0x264>)
 800e132:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 800e134:	4611      	mov	r1, r2
 800e136:	4618      	mov	r0, r3
 800e138:	f7f5 fa72 	bl	8003620 <HAL_GPIO_ReadPin>
 800e13c:	4603      	mov	r3, r0
 800e13e:	461a      	mov	r2, r3
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	330f      	adds	r3, #15
 800e144:	2a00      	cmp	r2, #0
 800e146:	bf14      	ite	ne
 800e148:	2201      	movne	r2, #1
 800e14a:	2200      	moveq	r2, #0
 800e14c:	b2d2      	uxtb	r2, r2
 800e14e:	701a      	strb	r2, [r3, #0]
}	
 800e150:	bf00      	nop
 800e152:	3708      	adds	r7, #8
 800e154:	46bd      	mov	sp, r7
 800e156:	bd80      	pop	{r7, pc}
 800e158:	20010344 	.word	0x20010344

0800e15c <Keypad4x4_GetChar>:
//funkce pro ziskani znaku
char Keypad4x4_GetChar(uint8_t keypadSw)
{
 800e15c:	b480      	push	{r7}
 800e15e:	b083      	sub	sp, #12
 800e160:	af00      	add	r7, sp, #0
 800e162:	4603      	mov	r3, r0
 800e164:	71fb      	strb	r3, [r7, #7]
	return Keypad_keys[keypadSw];
 800e166:	79fb      	ldrb	r3, [r7, #7]
 800e168:	4a03      	ldr	r2, [pc, #12]	; (800e178 <Keypad4x4_GetChar+0x1c>)
 800e16a:	5cd3      	ldrb	r3, [r2, r3]
}
 800e16c:	4618      	mov	r0, r3
 800e16e:	370c      	adds	r7, #12
 800e170:	46bd      	mov	sp, r7
 800e172:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e176:	4770      	bx	lr
 800e178:	20000030 	.word	0x20000030

0800e17c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800e17c:	b480      	push	{r7}
 800e17e:	b083      	sub	sp, #12
 800e180:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800e182:	4b0f      	ldr	r3, [pc, #60]	; (800e1c0 <HAL_MspInit+0x44>)
 800e184:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e186:	4a0e      	ldr	r2, [pc, #56]	; (800e1c0 <HAL_MspInit+0x44>)
 800e188:	f043 0301 	orr.w	r3, r3, #1
 800e18c:	6613      	str	r3, [r2, #96]	; 0x60
 800e18e:	4b0c      	ldr	r3, [pc, #48]	; (800e1c0 <HAL_MspInit+0x44>)
 800e190:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e192:	f003 0301 	and.w	r3, r3, #1
 800e196:	607b      	str	r3, [r7, #4]
 800e198:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800e19a:	4b09      	ldr	r3, [pc, #36]	; (800e1c0 <HAL_MspInit+0x44>)
 800e19c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e19e:	4a08      	ldr	r2, [pc, #32]	; (800e1c0 <HAL_MspInit+0x44>)
 800e1a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e1a4:	6593      	str	r3, [r2, #88]	; 0x58
 800e1a6:	4b06      	ldr	r3, [pc, #24]	; (800e1c0 <HAL_MspInit+0x44>)
 800e1a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e1aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e1ae:	603b      	str	r3, [r7, #0]
 800e1b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800e1b2:	bf00      	nop
 800e1b4:	370c      	adds	r7, #12
 800e1b6:	46bd      	mov	sp, r7
 800e1b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1bc:	4770      	bx	lr
 800e1be:	bf00      	nop
 800e1c0:	40021000 	.word	0x40021000

0800e1c4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800e1c4:	b580      	push	{r7, lr}
 800e1c6:	b08a      	sub	sp, #40	; 0x28
 800e1c8:	af00      	add	r7, sp, #0
 800e1ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e1cc:	f107 0314 	add.w	r3, r7, #20
 800e1d0:	2200      	movs	r2, #0
 800e1d2:	601a      	str	r2, [r3, #0]
 800e1d4:	605a      	str	r2, [r3, #4]
 800e1d6:	609a      	str	r2, [r3, #8]
 800e1d8:	60da      	str	r2, [r3, #12]
 800e1da:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	681b      	ldr	r3, [r3, #0]
 800e1e0:	4a3a      	ldr	r2, [pc, #232]	; (800e2cc <HAL_ADC_MspInit+0x108>)
 800e1e2:	4293      	cmp	r3, r2
 800e1e4:	d16e      	bne.n	800e2c4 <HAL_ADC_MspInit+0x100>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800e1e6:	4b3a      	ldr	r3, [pc, #232]	; (800e2d0 <HAL_ADC_MspInit+0x10c>)
 800e1e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e1ea:	4a39      	ldr	r2, [pc, #228]	; (800e2d0 <HAL_ADC_MspInit+0x10c>)
 800e1ec:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800e1f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 800e1f2:	4b37      	ldr	r3, [pc, #220]	; (800e2d0 <HAL_ADC_MspInit+0x10c>)
 800e1f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e1f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e1fa:	613b      	str	r3, [r7, #16]
 800e1fc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800e1fe:	4b34      	ldr	r3, [pc, #208]	; (800e2d0 <HAL_ADC_MspInit+0x10c>)
 800e200:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e202:	4a33      	ldr	r2, [pc, #204]	; (800e2d0 <HAL_ADC_MspInit+0x10c>)
 800e204:	f043 0304 	orr.w	r3, r3, #4
 800e208:	64d3      	str	r3, [r2, #76]	; 0x4c
 800e20a:	4b31      	ldr	r3, [pc, #196]	; (800e2d0 <HAL_ADC_MspInit+0x10c>)
 800e20c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e20e:	f003 0304 	and.w	r3, r3, #4
 800e212:	60fb      	str	r3, [r7, #12]
 800e214:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800e216:	4b2e      	ldr	r3, [pc, #184]	; (800e2d0 <HAL_ADC_MspInit+0x10c>)
 800e218:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e21a:	4a2d      	ldr	r2, [pc, #180]	; (800e2d0 <HAL_ADC_MspInit+0x10c>)
 800e21c:	f043 0302 	orr.w	r3, r3, #2
 800e220:	64d3      	str	r3, [r2, #76]	; 0x4c
 800e222:	4b2b      	ldr	r3, [pc, #172]	; (800e2d0 <HAL_ADC_MspInit+0x10c>)
 800e224:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e226:	f003 0302 	and.w	r3, r3, #2
 800e22a:	60bb      	str	r3, [r7, #8]
 800e22c:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration    
    PC0     ------> ADC1_IN1
    PC3     ------> ADC1_IN4
    PB1     ------> ADC1_IN16 
    */
    GPIO_InitStruct.Pin = ADC_TEMPER_Pin|ADC_POT_Pin;
 800e22e:	2309      	movs	r3, #9
 800e230:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800e232:	230b      	movs	r3, #11
 800e234:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e236:	2300      	movs	r3, #0
 800e238:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800e23a:	f107 0314 	add.w	r3, r7, #20
 800e23e:	4619      	mov	r1, r3
 800e240:	4824      	ldr	r0, [pc, #144]	; (800e2d4 <HAL_ADC_MspInit+0x110>)
 800e242:	f7f5 f85b 	bl	80032fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800e246:	2302      	movs	r3, #2
 800e248:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800e24a:	230b      	movs	r3, #11
 800e24c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e24e:	2300      	movs	r3, #0
 800e250:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800e252:	f107 0314 	add.w	r3, r7, #20
 800e256:	4619      	mov	r1, r3
 800e258:	481f      	ldr	r0, [pc, #124]	; (800e2d8 <HAL_ADC_MspInit+0x114>)
 800e25a:	f7f5 f84f 	bl	80032fc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel2;
 800e25e:	4b1f      	ldr	r3, [pc, #124]	; (800e2dc <HAL_ADC_MspInit+0x118>)
 800e260:	4a1f      	ldr	r2, [pc, #124]	; (800e2e0 <HAL_ADC_MspInit+0x11c>)
 800e262:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800e264:	4b1d      	ldr	r3, [pc, #116]	; (800e2dc <HAL_ADC_MspInit+0x118>)
 800e266:	2205      	movs	r2, #5
 800e268:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800e26a:	4b1c      	ldr	r3, [pc, #112]	; (800e2dc <HAL_ADC_MspInit+0x118>)
 800e26c:	2200      	movs	r2, #0
 800e26e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800e270:	4b1a      	ldr	r3, [pc, #104]	; (800e2dc <HAL_ADC_MspInit+0x118>)
 800e272:	2200      	movs	r2, #0
 800e274:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800e276:	4b19      	ldr	r3, [pc, #100]	; (800e2dc <HAL_ADC_MspInit+0x118>)
 800e278:	2280      	movs	r2, #128	; 0x80
 800e27a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800e27c:	4b17      	ldr	r3, [pc, #92]	; (800e2dc <HAL_ADC_MspInit+0x118>)
 800e27e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e282:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800e284:	4b15      	ldr	r3, [pc, #84]	; (800e2dc <HAL_ADC_MspInit+0x118>)
 800e286:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e28a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800e28c:	4b13      	ldr	r3, [pc, #76]	; (800e2dc <HAL_ADC_MspInit+0x118>)
 800e28e:	2220      	movs	r2, #32
 800e290:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800e292:	4b12      	ldr	r3, [pc, #72]	; (800e2dc <HAL_ADC_MspInit+0x118>)
 800e294:	2200      	movs	r2, #0
 800e296:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800e298:	4810      	ldr	r0, [pc, #64]	; (800e2dc <HAL_ADC_MspInit+0x118>)
 800e29a:	f7f4 fd61 	bl	8002d60 <HAL_DMA_Init>
 800e29e:	4603      	mov	r3, r0
 800e2a0:	2b00      	cmp	r3, #0
 800e2a2:	d001      	beq.n	800e2a8 <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 800e2a4:	f7ff f928 	bl	800d4f8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	4a0c      	ldr	r2, [pc, #48]	; (800e2dc <HAL_ADC_MspInit+0x118>)
 800e2ac:	651a      	str	r2, [r3, #80]	; 0x50
 800e2ae:	4a0b      	ldr	r2, [pc, #44]	; (800e2dc <HAL_ADC_MspInit+0x118>)
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 800e2b4:	2200      	movs	r2, #0
 800e2b6:	2100      	movs	r1, #0
 800e2b8:	2012      	movs	r0, #18
 800e2ba:	f7f4 fd1a 	bl	8002cf2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 800e2be:	2012      	movs	r0, #18
 800e2c0:	f7f4 fd33 	bl	8002d2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800e2c4:	bf00      	nop
 800e2c6:	3728      	adds	r7, #40	; 0x28
 800e2c8:	46bd      	mov	sp, r7
 800e2ca:	bd80      	pop	{r7, pc}
 800e2cc:	50040000 	.word	0x50040000
 800e2d0:	40021000 	.word	0x40021000
 800e2d4:	48000800 	.word	0x48000800
 800e2d8:	48000400 	.word	0x48000400
 800e2dc:	200106e0 	.word	0x200106e0
 800e2e0:	4002001c 	.word	0x4002001c

0800e2e4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800e2e4:	b580      	push	{r7, lr}
 800e2e6:	b08a      	sub	sp, #40	; 0x28
 800e2e8:	af00      	add	r7, sp, #0
 800e2ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e2ec:	f107 0314 	add.w	r3, r7, #20
 800e2f0:	2200      	movs	r2, #0
 800e2f2:	601a      	str	r2, [r3, #0]
 800e2f4:	605a      	str	r2, [r3, #4]
 800e2f6:	609a      	str	r2, [r3, #8]
 800e2f8:	60da      	str	r2, [r3, #12]
 800e2fa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	681b      	ldr	r3, [r3, #0]
 800e300:	4a17      	ldr	r2, [pc, #92]	; (800e360 <HAL_I2C_MspInit+0x7c>)
 800e302:	4293      	cmp	r3, r2
 800e304:	d128      	bne.n	800e358 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800e306:	4b17      	ldr	r3, [pc, #92]	; (800e364 <HAL_I2C_MspInit+0x80>)
 800e308:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e30a:	4a16      	ldr	r2, [pc, #88]	; (800e364 <HAL_I2C_MspInit+0x80>)
 800e30c:	f043 0302 	orr.w	r3, r3, #2
 800e310:	64d3      	str	r3, [r2, #76]	; 0x4c
 800e312:	4b14      	ldr	r3, [pc, #80]	; (800e364 <HAL_I2C_MspInit+0x80>)
 800e314:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e316:	f003 0302 	and.w	r3, r3, #2
 800e31a:	613b      	str	r3, [r7, #16]
 800e31c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = SHT_SCL_Pin|SHT_SDA_Pin;
 800e31e:	f44f 7340 	mov.w	r3, #768	; 0x300
 800e322:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800e324:	2312      	movs	r3, #18
 800e326:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800e328:	2301      	movs	r3, #1
 800e32a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e32c:	2303      	movs	r3, #3
 800e32e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800e330:	2304      	movs	r3, #4
 800e332:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800e334:	f107 0314 	add.w	r3, r7, #20
 800e338:	4619      	mov	r1, r3
 800e33a:	480b      	ldr	r0, [pc, #44]	; (800e368 <HAL_I2C_MspInit+0x84>)
 800e33c:	f7f4 ffde 	bl	80032fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800e340:	4b08      	ldr	r3, [pc, #32]	; (800e364 <HAL_I2C_MspInit+0x80>)
 800e342:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e344:	4a07      	ldr	r2, [pc, #28]	; (800e364 <HAL_I2C_MspInit+0x80>)
 800e346:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800e34a:	6593      	str	r3, [r2, #88]	; 0x58
 800e34c:	4b05      	ldr	r3, [pc, #20]	; (800e364 <HAL_I2C_MspInit+0x80>)
 800e34e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e350:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800e354:	60fb      	str	r3, [r7, #12]
 800e356:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800e358:	bf00      	nop
 800e35a:	3728      	adds	r7, #40	; 0x28
 800e35c:	46bd      	mov	sp, r7
 800e35e:	bd80      	pop	{r7, pc}
 800e360:	40005400 	.word	0x40005400
 800e364:	40021000 	.word	0x40021000
 800e368:	48000400 	.word	0x48000400

0800e36c <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 800e36c:	b480      	push	{r7}
 800e36e:	b085      	sub	sp, #20
 800e370:	af00      	add	r7, sp, #0
 800e372:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	681b      	ldr	r3, [r3, #0]
 800e378:	4a0a      	ldr	r2, [pc, #40]	; (800e3a4 <HAL_RNG_MspInit+0x38>)
 800e37a:	4293      	cmp	r3, r2
 800e37c:	d10b      	bne.n	800e396 <HAL_RNG_MspInit+0x2a>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 800e37e:	4b0a      	ldr	r3, [pc, #40]	; (800e3a8 <HAL_RNG_MspInit+0x3c>)
 800e380:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e382:	4a09      	ldr	r2, [pc, #36]	; (800e3a8 <HAL_RNG_MspInit+0x3c>)
 800e384:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800e388:	64d3      	str	r3, [r2, #76]	; 0x4c
 800e38a:	4b07      	ldr	r3, [pc, #28]	; (800e3a8 <HAL_RNG_MspInit+0x3c>)
 800e38c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e38e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e392:	60fb      	str	r3, [r7, #12]
 800e394:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 800e396:	bf00      	nop
 800e398:	3714      	adds	r7, #20
 800e39a:	46bd      	mov	sp, r7
 800e39c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3a0:	4770      	bx	lr
 800e3a2:	bf00      	nop
 800e3a4:	50060800 	.word	0x50060800
 800e3a8:	40021000 	.word	0x40021000

0800e3ac <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800e3ac:	b580      	push	{r7, lr}
 800e3ae:	b08c      	sub	sp, #48	; 0x30
 800e3b0:	af00      	add	r7, sp, #0
 800e3b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e3b4:	f107 031c 	add.w	r3, r7, #28
 800e3b8:	2200      	movs	r2, #0
 800e3ba:	601a      	str	r2, [r3, #0]
 800e3bc:	605a      	str	r2, [r3, #4]
 800e3be:	609a      	str	r2, [r3, #8]
 800e3c0:	60da      	str	r2, [r3, #12]
 800e3c2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	681b      	ldr	r3, [r3, #0]
 800e3c8:	4a51      	ldr	r2, [pc, #324]	; (800e510 <HAL_SPI_MspInit+0x164>)
 800e3ca:	4293      	cmp	r3, r2
 800e3cc:	d129      	bne.n	800e422 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800e3ce:	4b51      	ldr	r3, [pc, #324]	; (800e514 <HAL_SPI_MspInit+0x168>)
 800e3d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e3d2:	4a50      	ldr	r2, [pc, #320]	; (800e514 <HAL_SPI_MspInit+0x168>)
 800e3d4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800e3d8:	6613      	str	r3, [r2, #96]	; 0x60
 800e3da:	4b4e      	ldr	r3, [pc, #312]	; (800e514 <HAL_SPI_MspInit+0x168>)
 800e3dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e3de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800e3e2:	61bb      	str	r3, [r7, #24]
 800e3e4:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e3e6:	4b4b      	ldr	r3, [pc, #300]	; (800e514 <HAL_SPI_MspInit+0x168>)
 800e3e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e3ea:	4a4a      	ldr	r2, [pc, #296]	; (800e514 <HAL_SPI_MspInit+0x168>)
 800e3ec:	f043 0301 	orr.w	r3, r3, #1
 800e3f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 800e3f2:	4b48      	ldr	r3, [pc, #288]	; (800e514 <HAL_SPI_MspInit+0x168>)
 800e3f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e3f6:	f003 0301 	and.w	r3, r3, #1
 800e3fa:	617b      	str	r3, [r7, #20]
 800e3fc:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration    
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = TP_SCK_Pin|TP_MISO_Pin|TP_MOSI_Pin;
 800e3fe:	23c2      	movs	r3, #194	; 0xc2
 800e400:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e402:	2302      	movs	r3, #2
 800e404:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e406:	2300      	movs	r3, #0
 800e408:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e40a:	2303      	movs	r3, #3
 800e40c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800e40e:	2305      	movs	r3, #5
 800e410:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e412:	f107 031c 	add.w	r3, r7, #28
 800e416:	4619      	mov	r1, r3
 800e418:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800e41c:	f7f4 ff6e 	bl	80032fc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800e420:	e072      	b.n	800e508 <HAL_SPI_MspInit+0x15c>
  else if(hspi->Instance==SPI3)
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	681b      	ldr	r3, [r3, #0]
 800e426:	4a3c      	ldr	r2, [pc, #240]	; (800e518 <HAL_SPI_MspInit+0x16c>)
 800e428:	4293      	cmp	r3, r2
 800e42a:	d16d      	bne.n	800e508 <HAL_SPI_MspInit+0x15c>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800e42c:	4b39      	ldr	r3, [pc, #228]	; (800e514 <HAL_SPI_MspInit+0x168>)
 800e42e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e430:	4a38      	ldr	r2, [pc, #224]	; (800e514 <HAL_SPI_MspInit+0x168>)
 800e432:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e436:	6593      	str	r3, [r2, #88]	; 0x58
 800e438:	4b36      	ldr	r3, [pc, #216]	; (800e514 <HAL_SPI_MspInit+0x168>)
 800e43a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e43c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e440:	613b      	str	r3, [r7, #16]
 800e442:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800e444:	4b33      	ldr	r3, [pc, #204]	; (800e514 <HAL_SPI_MspInit+0x168>)
 800e446:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e448:	4a32      	ldr	r2, [pc, #200]	; (800e514 <HAL_SPI_MspInit+0x168>)
 800e44a:	f043 0304 	orr.w	r3, r3, #4
 800e44e:	64d3      	str	r3, [r2, #76]	; 0x4c
 800e450:	4b30      	ldr	r3, [pc, #192]	; (800e514 <HAL_SPI_MspInit+0x168>)
 800e452:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e454:	f003 0304 	and.w	r3, r3, #4
 800e458:	60fb      	str	r3, [r7, #12]
 800e45a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800e45c:	4b2d      	ldr	r3, [pc, #180]	; (800e514 <HAL_SPI_MspInit+0x168>)
 800e45e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e460:	4a2c      	ldr	r2, [pc, #176]	; (800e514 <HAL_SPI_MspInit+0x168>)
 800e462:	f043 0302 	orr.w	r3, r3, #2
 800e466:	64d3      	str	r3, [r2, #76]	; 0x4c
 800e468:	4b2a      	ldr	r3, [pc, #168]	; (800e514 <HAL_SPI_MspInit+0x168>)
 800e46a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e46c:	f003 0302 	and.w	r3, r3, #2
 800e470:	60bb      	str	r3, [r7, #8]
 800e472:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = TFT_SCK_Pin;
 800e474:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e478:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e47a:	2302      	movs	r3, #2
 800e47c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e47e:	2300      	movs	r3, #0
 800e480:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e482:	2303      	movs	r3, #3
 800e484:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800e486:	2306      	movs	r3, #6
 800e488:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TFT_SCK_GPIO_Port, &GPIO_InitStruct);
 800e48a:	f107 031c 	add.w	r3, r7, #28
 800e48e:	4619      	mov	r1, r3
 800e490:	4822      	ldr	r0, [pc, #136]	; (800e51c <HAL_SPI_MspInit+0x170>)
 800e492:	f7f4 ff33 	bl	80032fc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = TFT_MISO_Pin|TFT_MOSI_Pin;
 800e496:	2330      	movs	r3, #48	; 0x30
 800e498:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e49a:	2302      	movs	r3, #2
 800e49c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e49e:	2300      	movs	r3, #0
 800e4a0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e4a2:	2303      	movs	r3, #3
 800e4a4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800e4a6:	2306      	movs	r3, #6
 800e4a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800e4aa:	f107 031c 	add.w	r3, r7, #28
 800e4ae:	4619      	mov	r1, r3
 800e4b0:	481b      	ldr	r0, [pc, #108]	; (800e520 <HAL_SPI_MspInit+0x174>)
 800e4b2:	f7f4 ff23 	bl	80032fc <HAL_GPIO_Init>
    hdma_spi3_tx.Instance = DMA1_Channel1;
 800e4b6:	4b1b      	ldr	r3, [pc, #108]	; (800e524 <HAL_SPI_MspInit+0x178>)
 800e4b8:	4a1b      	ldr	r2, [pc, #108]	; (800e528 <HAL_SPI_MspInit+0x17c>)
 800e4ba:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Request = DMA_REQUEST_SPI3_TX;
 800e4bc:	4b19      	ldr	r3, [pc, #100]	; (800e524 <HAL_SPI_MspInit+0x178>)
 800e4be:	220f      	movs	r2, #15
 800e4c0:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800e4c2:	4b18      	ldr	r3, [pc, #96]	; (800e524 <HAL_SPI_MspInit+0x178>)
 800e4c4:	2210      	movs	r2, #16
 800e4c6:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800e4c8:	4b16      	ldr	r3, [pc, #88]	; (800e524 <HAL_SPI_MspInit+0x178>)
 800e4ca:	2200      	movs	r2, #0
 800e4cc:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800e4ce:	4b15      	ldr	r3, [pc, #84]	; (800e524 <HAL_SPI_MspInit+0x178>)
 800e4d0:	2280      	movs	r2, #128	; 0x80
 800e4d2:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800e4d4:	4b13      	ldr	r3, [pc, #76]	; (800e524 <HAL_SPI_MspInit+0x178>)
 800e4d6:	2200      	movs	r2, #0
 800e4d8:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800e4da:	4b12      	ldr	r3, [pc, #72]	; (800e524 <HAL_SPI_MspInit+0x178>)
 800e4dc:	2200      	movs	r2, #0
 800e4de:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_CIRCULAR;
 800e4e0:	4b10      	ldr	r3, [pc, #64]	; (800e524 <HAL_SPI_MspInit+0x178>)
 800e4e2:	2220      	movs	r2, #32
 800e4e4:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 800e4e6:	4b0f      	ldr	r3, [pc, #60]	; (800e524 <HAL_SPI_MspInit+0x178>)
 800e4e8:	2200      	movs	r2, #0
 800e4ea:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 800e4ec:	480d      	ldr	r0, [pc, #52]	; (800e524 <HAL_SPI_MspInit+0x178>)
 800e4ee:	f7f4 fc37 	bl	8002d60 <HAL_DMA_Init>
 800e4f2:	4603      	mov	r3, r0
 800e4f4:	2b00      	cmp	r3, #0
 800e4f6:	d001      	beq.n	800e4fc <HAL_SPI_MspInit+0x150>
      Error_Handler();
 800e4f8:	f7fe fffe 	bl	800d4f8 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi3_tx);
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	4a09      	ldr	r2, [pc, #36]	; (800e524 <HAL_SPI_MspInit+0x178>)
 800e500:	655a      	str	r2, [r3, #84]	; 0x54
 800e502:	4a08      	ldr	r2, [pc, #32]	; (800e524 <HAL_SPI_MspInit+0x178>)
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	6293      	str	r3, [r2, #40]	; 0x28
}
 800e508:	bf00      	nop
 800e50a:	3730      	adds	r7, #48	; 0x30
 800e50c:	46bd      	mov	sp, r7
 800e50e:	bd80      	pop	{r7, pc}
 800e510:	40013000 	.word	0x40013000
 800e514:	40021000 	.word	0x40021000
 800e518:	40003c00 	.word	0x40003c00
 800e51c:	48000800 	.word	0x48000800
 800e520:	48000400 	.word	0x48000400
 800e524:	200105d0 	.word	0x200105d0
 800e528:	40020008 	.word	0x40020008

0800e52c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800e52c:	b580      	push	{r7, lr}
 800e52e:	b088      	sub	sp, #32
 800e530:	af00      	add	r7, sp, #0
 800e532:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	681b      	ldr	r3, [r3, #0]
 800e538:	4a42      	ldr	r2, [pc, #264]	; (800e644 <HAL_TIM_Base_MspInit+0x118>)
 800e53a:	4293      	cmp	r3, r2
 800e53c:	d10c      	bne.n	800e558 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800e53e:	4b42      	ldr	r3, [pc, #264]	; (800e648 <HAL_TIM_Base_MspInit+0x11c>)
 800e540:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e542:	4a41      	ldr	r2, [pc, #260]	; (800e648 <HAL_TIM_Base_MspInit+0x11c>)
 800e544:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800e548:	6613      	str	r3, [r2, #96]	; 0x60
 800e54a:	4b3f      	ldr	r3, [pc, #252]	; (800e648 <HAL_TIM_Base_MspInit+0x11c>)
 800e54c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e54e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e552:	61fb      	str	r3, [r7, #28]
 800e554:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800e556:	e070      	b.n	800e63a <HAL_TIM_Base_MspInit+0x10e>
  else if(htim_base->Instance==TIM2)
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	681b      	ldr	r3, [r3, #0]
 800e55c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e560:	d10c      	bne.n	800e57c <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800e562:	4b39      	ldr	r3, [pc, #228]	; (800e648 <HAL_TIM_Base_MspInit+0x11c>)
 800e564:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e566:	4a38      	ldr	r2, [pc, #224]	; (800e648 <HAL_TIM_Base_MspInit+0x11c>)
 800e568:	f043 0301 	orr.w	r3, r3, #1
 800e56c:	6593      	str	r3, [r2, #88]	; 0x58
 800e56e:	4b36      	ldr	r3, [pc, #216]	; (800e648 <HAL_TIM_Base_MspInit+0x11c>)
 800e570:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e572:	f003 0301 	and.w	r3, r3, #1
 800e576:	61bb      	str	r3, [r7, #24]
 800e578:	69bb      	ldr	r3, [r7, #24]
}
 800e57a:	e05e      	b.n	800e63a <HAL_TIM_Base_MspInit+0x10e>
  else if(htim_base->Instance==TIM4)
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	681b      	ldr	r3, [r3, #0]
 800e580:	4a32      	ldr	r2, [pc, #200]	; (800e64c <HAL_TIM_Base_MspInit+0x120>)
 800e582:	4293      	cmp	r3, r2
 800e584:	d114      	bne.n	800e5b0 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800e586:	4b30      	ldr	r3, [pc, #192]	; (800e648 <HAL_TIM_Base_MspInit+0x11c>)
 800e588:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e58a:	4a2f      	ldr	r2, [pc, #188]	; (800e648 <HAL_TIM_Base_MspInit+0x11c>)
 800e58c:	f043 0304 	orr.w	r3, r3, #4
 800e590:	6593      	str	r3, [r2, #88]	; 0x58
 800e592:	4b2d      	ldr	r3, [pc, #180]	; (800e648 <HAL_TIM_Base_MspInit+0x11c>)
 800e594:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e596:	f003 0304 	and.w	r3, r3, #4
 800e59a:	617b      	str	r3, [r7, #20]
 800e59c:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800e59e:	2200      	movs	r2, #0
 800e5a0:	2100      	movs	r1, #0
 800e5a2:	201e      	movs	r0, #30
 800e5a4:	f7f4 fba5 	bl	8002cf2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800e5a8:	201e      	movs	r0, #30
 800e5aa:	f7f4 fbbe 	bl	8002d2a <HAL_NVIC_EnableIRQ>
}
 800e5ae:	e044      	b.n	800e63a <HAL_TIM_Base_MspInit+0x10e>
  else if(htim_base->Instance==TIM5)
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	681b      	ldr	r3, [r3, #0]
 800e5b4:	4a26      	ldr	r2, [pc, #152]	; (800e650 <HAL_TIM_Base_MspInit+0x124>)
 800e5b6:	4293      	cmp	r3, r2
 800e5b8:	d114      	bne.n	800e5e4 <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800e5ba:	4b23      	ldr	r3, [pc, #140]	; (800e648 <HAL_TIM_Base_MspInit+0x11c>)
 800e5bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e5be:	4a22      	ldr	r2, [pc, #136]	; (800e648 <HAL_TIM_Base_MspInit+0x11c>)
 800e5c0:	f043 0308 	orr.w	r3, r3, #8
 800e5c4:	6593      	str	r3, [r2, #88]	; 0x58
 800e5c6:	4b20      	ldr	r3, [pc, #128]	; (800e648 <HAL_TIM_Base_MspInit+0x11c>)
 800e5c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e5ca:	f003 0308 	and.w	r3, r3, #8
 800e5ce:	613b      	str	r3, [r7, #16]
 800e5d0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 800e5d2:	2200      	movs	r2, #0
 800e5d4:	2100      	movs	r1, #0
 800e5d6:	2032      	movs	r0, #50	; 0x32
 800e5d8:	f7f4 fb8b 	bl	8002cf2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800e5dc:	2032      	movs	r0, #50	; 0x32
 800e5de:	f7f4 fba4 	bl	8002d2a <HAL_NVIC_EnableIRQ>
}
 800e5e2:	e02a      	b.n	800e63a <HAL_TIM_Base_MspInit+0x10e>
  else if(htim_base->Instance==TIM6)
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	681b      	ldr	r3, [r3, #0]
 800e5e8:	4a1a      	ldr	r2, [pc, #104]	; (800e654 <HAL_TIM_Base_MspInit+0x128>)
 800e5ea:	4293      	cmp	r3, r2
 800e5ec:	d114      	bne.n	800e618 <HAL_TIM_Base_MspInit+0xec>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800e5ee:	4b16      	ldr	r3, [pc, #88]	; (800e648 <HAL_TIM_Base_MspInit+0x11c>)
 800e5f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e5f2:	4a15      	ldr	r2, [pc, #84]	; (800e648 <HAL_TIM_Base_MspInit+0x11c>)
 800e5f4:	f043 0310 	orr.w	r3, r3, #16
 800e5f8:	6593      	str	r3, [r2, #88]	; 0x58
 800e5fa:	4b13      	ldr	r3, [pc, #76]	; (800e648 <HAL_TIM_Base_MspInit+0x11c>)
 800e5fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e5fe:	f003 0310 	and.w	r3, r3, #16
 800e602:	60fb      	str	r3, [r7, #12]
 800e604:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800e606:	2200      	movs	r2, #0
 800e608:	2100      	movs	r1, #0
 800e60a:	2036      	movs	r0, #54	; 0x36
 800e60c:	f7f4 fb71 	bl	8002cf2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800e610:	2036      	movs	r0, #54	; 0x36
 800e612:	f7f4 fb8a 	bl	8002d2a <HAL_NVIC_EnableIRQ>
}
 800e616:	e010      	b.n	800e63a <HAL_TIM_Base_MspInit+0x10e>
  else if(htim_base->Instance==TIM8)
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	681b      	ldr	r3, [r3, #0]
 800e61c:	4a0e      	ldr	r2, [pc, #56]	; (800e658 <HAL_TIM_Base_MspInit+0x12c>)
 800e61e:	4293      	cmp	r3, r2
 800e620:	d10b      	bne.n	800e63a <HAL_TIM_Base_MspInit+0x10e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800e622:	4b09      	ldr	r3, [pc, #36]	; (800e648 <HAL_TIM_Base_MspInit+0x11c>)
 800e624:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e626:	4a08      	ldr	r2, [pc, #32]	; (800e648 <HAL_TIM_Base_MspInit+0x11c>)
 800e628:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800e62c:	6613      	str	r3, [r2, #96]	; 0x60
 800e62e:	4b06      	ldr	r3, [pc, #24]	; (800e648 <HAL_TIM_Base_MspInit+0x11c>)
 800e630:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e632:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e636:	60bb      	str	r3, [r7, #8]
 800e638:	68bb      	ldr	r3, [r7, #8]
}
 800e63a:	bf00      	nop
 800e63c:	3720      	adds	r7, #32
 800e63e:	46bd      	mov	sp, r7
 800e640:	bd80      	pop	{r7, pc}
 800e642:	bf00      	nop
 800e644:	40012c00 	.word	0x40012c00
 800e648:	40021000 	.word	0x40021000
 800e64c:	40000800 	.word	0x40000800
 800e650:	40000c00 	.word	0x40000c00
 800e654:	40001000 	.word	0x40001000
 800e658:	40013400 	.word	0x40013400

0800e65c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800e65c:	b580      	push	{r7, lr}
 800e65e:	b08a      	sub	sp, #40	; 0x28
 800e660:	af00      	add	r7, sp, #0
 800e662:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e664:	f107 0314 	add.w	r3, r7, #20
 800e668:	2200      	movs	r2, #0
 800e66a:	601a      	str	r2, [r3, #0]
 800e66c:	605a      	str	r2, [r3, #4]
 800e66e:	609a      	str	r2, [r3, #8]
 800e670:	60da      	str	r2, [r3, #12]
 800e672:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	681b      	ldr	r3, [r3, #0]
 800e678:	4a1b      	ldr	r2, [pc, #108]	; (800e6e8 <HAL_TIM_Encoder_MspInit+0x8c>)
 800e67a:	4293      	cmp	r3, r2
 800e67c:	d12f      	bne.n	800e6de <HAL_TIM_Encoder_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800e67e:	4b1b      	ldr	r3, [pc, #108]	; (800e6ec <HAL_TIM_Encoder_MspInit+0x90>)
 800e680:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e682:	4a1a      	ldr	r2, [pc, #104]	; (800e6ec <HAL_TIM_Encoder_MspInit+0x90>)
 800e684:	f043 0302 	orr.w	r3, r3, #2
 800e688:	6593      	str	r3, [r2, #88]	; 0x58
 800e68a:	4b18      	ldr	r3, [pc, #96]	; (800e6ec <HAL_TIM_Encoder_MspInit+0x90>)
 800e68c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e68e:	f003 0302 	and.w	r3, r3, #2
 800e692:	613b      	str	r3, [r7, #16]
 800e694:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800e696:	4b15      	ldr	r3, [pc, #84]	; (800e6ec <HAL_TIM_Encoder_MspInit+0x90>)
 800e698:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e69a:	4a14      	ldr	r2, [pc, #80]	; (800e6ec <HAL_TIM_Encoder_MspInit+0x90>)
 800e69c:	f043 0310 	orr.w	r3, r3, #16
 800e6a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 800e6a2:	4b12      	ldr	r3, [pc, #72]	; (800e6ec <HAL_TIM_Encoder_MspInit+0x90>)
 800e6a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e6a6:	f003 0310 	and.w	r3, r3, #16
 800e6aa:	60fb      	str	r3, [r7, #12]
 800e6ac:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration    
    PE3     ------> TIM3_CH1
    PE4     ------> TIM3_CH2 
    */
    GPIO_InitStruct.Pin = ENC_A_Pin|ENC_B_Pin;
 800e6ae:	2318      	movs	r3, #24
 800e6b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e6b2:	2302      	movs	r3, #2
 800e6b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e6b6:	2300      	movs	r3, #0
 800e6b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e6ba:	2300      	movs	r3, #0
 800e6bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800e6be:	2302      	movs	r3, #2
 800e6c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800e6c2:	f107 0314 	add.w	r3, r7, #20
 800e6c6:	4619      	mov	r1, r3
 800e6c8:	4809      	ldr	r0, [pc, #36]	; (800e6f0 <HAL_TIM_Encoder_MspInit+0x94>)
 800e6ca:	f7f4 fe17 	bl	80032fc <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800e6ce:	2200      	movs	r2, #0
 800e6d0:	2100      	movs	r1, #0
 800e6d2:	201d      	movs	r0, #29
 800e6d4:	f7f4 fb0d 	bl	8002cf2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800e6d8:	201d      	movs	r0, #29
 800e6da:	f7f4 fb26 	bl	8002d2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800e6de:	bf00      	nop
 800e6e0:	3728      	adds	r7, #40	; 0x28
 800e6e2:	46bd      	mov	sp, r7
 800e6e4:	bd80      	pop	{r7, pc}
 800e6e6:	bf00      	nop
 800e6e8:	40000400 	.word	0x40000400
 800e6ec:	40021000 	.word	0x40021000
 800e6f0:	48001000 	.word	0x48001000

0800e6f4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800e6f4:	b580      	push	{r7, lr}
 800e6f6:	b08a      	sub	sp, #40	; 0x28
 800e6f8:	af00      	add	r7, sp, #0
 800e6fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e6fc:	f107 0314 	add.w	r3, r7, #20
 800e700:	2200      	movs	r2, #0
 800e702:	601a      	str	r2, [r3, #0]
 800e704:	605a      	str	r2, [r3, #4]
 800e706:	609a      	str	r2, [r3, #8]
 800e708:	60da      	str	r2, [r3, #12]
 800e70a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	681b      	ldr	r3, [r3, #0]
 800e710:	4a34      	ldr	r2, [pc, #208]	; (800e7e4 <HAL_TIM_MspPostInit+0xf0>)
 800e712:	4293      	cmp	r3, r2
 800e714:	d11d      	bne.n	800e752 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800e716:	4b34      	ldr	r3, [pc, #208]	; (800e7e8 <HAL_TIM_MspPostInit+0xf4>)
 800e718:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e71a:	4a33      	ldr	r2, [pc, #204]	; (800e7e8 <HAL_TIM_MspPostInit+0xf4>)
 800e71c:	f043 0310 	orr.w	r3, r3, #16
 800e720:	64d3      	str	r3, [r2, #76]	; 0x4c
 800e722:	4b31      	ldr	r3, [pc, #196]	; (800e7e8 <HAL_TIM_MspPostInit+0xf4>)
 800e724:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e726:	f003 0310 	and.w	r3, r3, #16
 800e72a:	613b      	str	r3, [r7, #16]
 800e72c:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration    
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3 
    */
    GPIO_InitStruct.Pin = OUT_LED_R_Pin|OUT_LED_G_Pin|OUT_LED_B_Pin;
 800e72e:	f44f 5328 	mov.w	r3, #10752	; 0x2a00
 800e732:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e734:	2302      	movs	r3, #2
 800e736:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e738:	2300      	movs	r3, #0
 800e73a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e73c:	2300      	movs	r3, #0
 800e73e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800e740:	2301      	movs	r3, #1
 800e742:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800e744:	f107 0314 	add.w	r3, r7, #20
 800e748:	4619      	mov	r1, r3
 800e74a:	4828      	ldr	r0, [pc, #160]	; (800e7ec <HAL_TIM_MspPostInit+0xf8>)
 800e74c:	f7f4 fdd6 	bl	80032fc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 800e750:	e043      	b.n	800e7da <HAL_TIM_MspPostInit+0xe6>
  else if(htim->Instance==TIM2)
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	681b      	ldr	r3, [r3, #0]
 800e756:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e75a:	d11d      	bne.n	800e798 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e75c:	4b22      	ldr	r3, [pc, #136]	; (800e7e8 <HAL_TIM_MspPostInit+0xf4>)
 800e75e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e760:	4a21      	ldr	r2, [pc, #132]	; (800e7e8 <HAL_TIM_MspPostInit+0xf4>)
 800e762:	f043 0301 	orr.w	r3, r3, #1
 800e766:	64d3      	str	r3, [r2, #76]	; 0x4c
 800e768:	4b1f      	ldr	r3, [pc, #124]	; (800e7e8 <HAL_TIM_MspPostInit+0xf4>)
 800e76a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e76c:	f003 0301 	and.w	r3, r3, #1
 800e770:	60fb      	str	r3, [r7, #12]
 800e772:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = DAC_REPRO_Pin;
 800e774:	2320      	movs	r3, #32
 800e776:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e778:	2302      	movs	r3, #2
 800e77a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e77c:	2300      	movs	r3, #0
 800e77e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e780:	2300      	movs	r3, #0
 800e782:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800e784:	2301      	movs	r3, #1
 800e786:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(DAC_REPRO_GPIO_Port, &GPIO_InitStruct);
 800e788:	f107 0314 	add.w	r3, r7, #20
 800e78c:	4619      	mov	r1, r3
 800e78e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800e792:	f7f4 fdb3 	bl	80032fc <HAL_GPIO_Init>
}
 800e796:	e020      	b.n	800e7da <HAL_TIM_MspPostInit+0xe6>
  else if(htim->Instance==TIM8)
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	681b      	ldr	r3, [r3, #0]
 800e79c:	4a14      	ldr	r2, [pc, #80]	; (800e7f0 <HAL_TIM_MspPostInit+0xfc>)
 800e79e:	4293      	cmp	r3, r2
 800e7a0:	d11b      	bne.n	800e7da <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800e7a2:	4b11      	ldr	r3, [pc, #68]	; (800e7e8 <HAL_TIM_MspPostInit+0xf4>)
 800e7a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e7a6:	4a10      	ldr	r2, [pc, #64]	; (800e7e8 <HAL_TIM_MspPostInit+0xf4>)
 800e7a8:	f043 0304 	orr.w	r3, r3, #4
 800e7ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 800e7ae:	4b0e      	ldr	r3, [pc, #56]	; (800e7e8 <HAL_TIM_MspPostInit+0xf4>)
 800e7b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e7b2:	f003 0304 	and.w	r3, r3, #4
 800e7b6:	60bb      	str	r3, [r7, #8]
 800e7b8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = HEATER_Pin;
 800e7ba:	2340      	movs	r3, #64	; 0x40
 800e7bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e7be:	2302      	movs	r3, #2
 800e7c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e7c2:	2300      	movs	r3, #0
 800e7c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e7c6:	2300      	movs	r3, #0
 800e7c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800e7ca:	2303      	movs	r3, #3
 800e7cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(HEATER_GPIO_Port, &GPIO_InitStruct);
 800e7ce:	f107 0314 	add.w	r3, r7, #20
 800e7d2:	4619      	mov	r1, r3
 800e7d4:	4807      	ldr	r0, [pc, #28]	; (800e7f4 <HAL_TIM_MspPostInit+0x100>)
 800e7d6:	f7f4 fd91 	bl	80032fc <HAL_GPIO_Init>
}
 800e7da:	bf00      	nop
 800e7dc:	3728      	adds	r7, #40	; 0x28
 800e7de:	46bd      	mov	sp, r7
 800e7e0:	bd80      	pop	{r7, pc}
 800e7e2:	bf00      	nop
 800e7e4:	40012c00 	.word	0x40012c00
 800e7e8:	40021000 	.word	0x40021000
 800e7ec:	48001000 	.word	0x48001000
 800e7f0:	40013400 	.word	0x40013400
 800e7f4:	48000800 	.word	0x48000800

0800e7f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800e7f8:	b580      	push	{r7, lr}
 800e7fa:	b08a      	sub	sp, #40	; 0x28
 800e7fc:	af00      	add	r7, sp, #0
 800e7fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e800:	f107 0314 	add.w	r3, r7, #20
 800e804:	2200      	movs	r2, #0
 800e806:	601a      	str	r2, [r3, #0]
 800e808:	605a      	str	r2, [r3, #4]
 800e80a:	609a      	str	r2, [r3, #8]
 800e80c:	60da      	str	r2, [r3, #12]
 800e80e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	681b      	ldr	r3, [r3, #0]
 800e814:	4a17      	ldr	r2, [pc, #92]	; (800e874 <HAL_UART_MspInit+0x7c>)
 800e816:	4293      	cmp	r3, r2
 800e818:	d128      	bne.n	800e86c <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800e81a:	4b17      	ldr	r3, [pc, #92]	; (800e878 <HAL_UART_MspInit+0x80>)
 800e81c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e81e:	4a16      	ldr	r2, [pc, #88]	; (800e878 <HAL_UART_MspInit+0x80>)
 800e820:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800e824:	6593      	str	r3, [r2, #88]	; 0x58
 800e826:	4b14      	ldr	r3, [pc, #80]	; (800e878 <HAL_UART_MspInit+0x80>)
 800e828:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e82a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e82e:	613b      	str	r3, [r7, #16]
 800e830:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800e832:	4b11      	ldr	r3, [pc, #68]	; (800e878 <HAL_UART_MspInit+0x80>)
 800e834:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e836:	4a10      	ldr	r2, [pc, #64]	; (800e878 <HAL_UART_MspInit+0x80>)
 800e838:	f043 0308 	orr.w	r3, r3, #8
 800e83c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800e83e:	4b0e      	ldr	r3, [pc, #56]	; (800e878 <HAL_UART_MspInit+0x80>)
 800e840:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e842:	f003 0308 	and.w	r3, r3, #8
 800e846:	60fb      	str	r3, [r7, #12]
 800e848:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800e84a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800e84e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e850:	2302      	movs	r3, #2
 800e852:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e854:	2300      	movs	r3, #0
 800e856:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e858:	2303      	movs	r3, #3
 800e85a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800e85c:	2307      	movs	r3, #7
 800e85e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800e860:	f107 0314 	add.w	r3, r7, #20
 800e864:	4619      	mov	r1, r3
 800e866:	4805      	ldr	r0, [pc, #20]	; (800e87c <HAL_UART_MspInit+0x84>)
 800e868:	f7f4 fd48 	bl	80032fc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800e86c:	bf00      	nop
 800e86e:	3728      	adds	r7, #40	; 0x28
 800e870:	46bd      	mov	sp, r7
 800e872:	bd80      	pop	{r7, pc}
 800e874:	40004800 	.word	0x40004800
 800e878:	40021000 	.word	0x40021000
 800e87c:	48000c00 	.word	0x48000c00

0800e880 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800e880:	b480      	push	{r7}
 800e882:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800e884:	bf00      	nop
 800e886:	46bd      	mov	sp, r7
 800e888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e88c:	4770      	bx	lr

0800e88e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800e88e:	b480      	push	{r7}
 800e890:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800e892:	e7fe      	b.n	800e892 <HardFault_Handler+0x4>

0800e894 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800e894:	b480      	push	{r7}
 800e896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800e898:	e7fe      	b.n	800e898 <MemManage_Handler+0x4>

0800e89a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800e89a:	b480      	push	{r7}
 800e89c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800e89e:	e7fe      	b.n	800e89e <BusFault_Handler+0x4>

0800e8a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800e8a0:	b480      	push	{r7}
 800e8a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800e8a4:	e7fe      	b.n	800e8a4 <UsageFault_Handler+0x4>

0800e8a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800e8a6:	b480      	push	{r7}
 800e8a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800e8aa:	bf00      	nop
 800e8ac:	46bd      	mov	sp, r7
 800e8ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8b2:	4770      	bx	lr

0800e8b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800e8b4:	b480      	push	{r7}
 800e8b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800e8b8:	bf00      	nop
 800e8ba:	46bd      	mov	sp, r7
 800e8bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8c0:	4770      	bx	lr

0800e8c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800e8c2:	b480      	push	{r7}
 800e8c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800e8c6:	bf00      	nop
 800e8c8:	46bd      	mov	sp, r7
 800e8ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8ce:	4770      	bx	lr

0800e8d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800e8d0:	b580      	push	{r7, lr}
 800e8d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800e8d4:	f7f2 fbf4 	bl	80010c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800e8d8:	bf00      	nop
 800e8da:	bd80      	pop	{r7, pc}

0800e8dc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800e8dc:	b580      	push	{r7, lr}
 800e8de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 800e8e0:	4802      	ldr	r0, [pc, #8]	; (800e8ec <DMA1_Channel1_IRQHandler+0x10>)
 800e8e2:	f7f4 fbbc 	bl	800305e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800e8e6:	bf00      	nop
 800e8e8:	bd80      	pop	{r7, pc}
 800e8ea:	bf00      	nop
 800e8ec:	200105d0 	.word	0x200105d0

0800e8f0 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800e8f0:	b580      	push	{r7, lr}
 800e8f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800e8f4:	4802      	ldr	r0, [pc, #8]	; (800e900 <DMA1_Channel2_IRQHandler+0x10>)
 800e8f6:	f7f4 fbb2 	bl	800305e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800e8fa:	bf00      	nop
 800e8fc:	bd80      	pop	{r7, pc}
 800e8fe:	bf00      	nop
 800e900:	200106e0 	.word	0x200106e0

0800e904 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 800e904:	b580      	push	{r7, lr}
 800e906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800e908:	4802      	ldr	r0, [pc, #8]	; (800e914 <ADC1_IRQHandler+0x10>)
 800e90a:	f7f3 f9a1 	bl	8001c50 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 800e90e:	bf00      	nop
 800e910:	bd80      	pop	{r7, pc}
 800e912:	bf00      	nop
 800e914:	20010660 	.word	0x20010660

0800e918 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800e918:	b580      	push	{r7, lr}
 800e91a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800e91c:	4802      	ldr	r0, [pc, #8]	; (800e928 <TIM3_IRQHandler+0x10>)
 800e91e:	f7f8 fb11 	bl	8006f44 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800e922:	bf00      	nop
 800e924:	bd80      	pop	{r7, pc}
 800e926:	bf00      	nop
 800e928:	2001052c 	.word	0x2001052c

0800e92c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800e92c:	b580      	push	{r7, lr}
 800e92e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800e930:	4802      	ldr	r0, [pc, #8]	; (800e93c <TIM4_IRQHandler+0x10>)
 800e932:	f7f8 fb07 	bl	8006f44 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800e936:	bf00      	nop
 800e938:	bd80      	pop	{r7, pc}
 800e93a:	bf00      	nop
 800e93c:	200103c4 	.word	0x200103c4

0800e940 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800e940:	b580      	push	{r7, lr}
 800e942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 800e944:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800e948:	f7f4 feb4 	bl	80036b4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800e94c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800e950:	f7f4 feb0 	bl	80036b4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 800e954:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800e958:	f7f4 feac 	bl	80036b4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800e95c:	bf00      	nop
 800e95e:	bd80      	pop	{r7, pc}

0800e960 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 800e960:	b580      	push	{r7, lr}
 800e962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 800e964:	4802      	ldr	r0, [pc, #8]	; (800e970 <TIM5_IRQHandler+0x10>)
 800e966:	f7f8 faed 	bl	8006f44 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800e96a:	bf00      	nop
 800e96c:	bd80      	pop	{r7, pc}
 800e96e:	bf00      	nop
 800e970:	200104ec 	.word	0x200104ec

0800e974 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800e974:	b580      	push	{r7, lr}
 800e976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800e978:	4802      	ldr	r0, [pc, #8]	; (800e984 <TIM6_DAC_IRQHandler+0x10>)
 800e97a:	f7f8 fae3 	bl	8006f44 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800e97e:	bf00      	nop
 800e980:	bd80      	pop	{r7, pc}
 800e982:	bf00      	nop
 800e984:	20010750 	.word	0x20010750

0800e988 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800e988:	b480      	push	{r7}
 800e98a:	af00      	add	r7, sp, #0
	return 1;
 800e98c:	2301      	movs	r3, #1
}
 800e98e:	4618      	mov	r0, r3
 800e990:	46bd      	mov	sp, r7
 800e992:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e996:	4770      	bx	lr

0800e998 <_kill>:

int _kill(int pid, int sig)
{
 800e998:	b580      	push	{r7, lr}
 800e99a:	b082      	sub	sp, #8
 800e99c:	af00      	add	r7, sp, #0
 800e99e:	6078      	str	r0, [r7, #4]
 800e9a0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800e9a2:	f000 f90d 	bl	800ebc0 <__errno>
 800e9a6:	4603      	mov	r3, r0
 800e9a8:	2216      	movs	r2, #22
 800e9aa:	601a      	str	r2, [r3, #0]
	return -1;
 800e9ac:	f04f 33ff 	mov.w	r3, #4294967295
}
 800e9b0:	4618      	mov	r0, r3
 800e9b2:	3708      	adds	r7, #8
 800e9b4:	46bd      	mov	sp, r7
 800e9b6:	bd80      	pop	{r7, pc}

0800e9b8 <_exit>:

void _exit (int status)
{
 800e9b8:	b580      	push	{r7, lr}
 800e9ba:	b082      	sub	sp, #8
 800e9bc:	af00      	add	r7, sp, #0
 800e9be:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800e9c0:	f04f 31ff 	mov.w	r1, #4294967295
 800e9c4:	6878      	ldr	r0, [r7, #4]
 800e9c6:	f7ff ffe7 	bl	800e998 <_kill>
	while (1) {}		/* Make sure we hang here */
 800e9ca:	e7fe      	b.n	800e9ca <_exit+0x12>

0800e9cc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800e9cc:	b580      	push	{r7, lr}
 800e9ce:	b086      	sub	sp, #24
 800e9d0:	af00      	add	r7, sp, #0
 800e9d2:	60f8      	str	r0, [r7, #12]
 800e9d4:	60b9      	str	r1, [r7, #8]
 800e9d6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800e9d8:	2300      	movs	r3, #0
 800e9da:	617b      	str	r3, [r7, #20]
 800e9dc:	e00a      	b.n	800e9f4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800e9de:	f3af 8000 	nop.w
 800e9e2:	4601      	mov	r1, r0
 800e9e4:	68bb      	ldr	r3, [r7, #8]
 800e9e6:	1c5a      	adds	r2, r3, #1
 800e9e8:	60ba      	str	r2, [r7, #8]
 800e9ea:	b2ca      	uxtb	r2, r1
 800e9ec:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800e9ee:	697b      	ldr	r3, [r7, #20]
 800e9f0:	3301      	adds	r3, #1
 800e9f2:	617b      	str	r3, [r7, #20]
 800e9f4:	697a      	ldr	r2, [r7, #20]
 800e9f6:	687b      	ldr	r3, [r7, #4]
 800e9f8:	429a      	cmp	r2, r3
 800e9fa:	dbf0      	blt.n	800e9de <_read+0x12>
	}

return len;
 800e9fc:	687b      	ldr	r3, [r7, #4]
}
 800e9fe:	4618      	mov	r0, r3
 800ea00:	3718      	adds	r7, #24
 800ea02:	46bd      	mov	sp, r7
 800ea04:	bd80      	pop	{r7, pc}

0800ea06 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800ea06:	b580      	push	{r7, lr}
 800ea08:	b086      	sub	sp, #24
 800ea0a:	af00      	add	r7, sp, #0
 800ea0c:	60f8      	str	r0, [r7, #12]
 800ea0e:	60b9      	str	r1, [r7, #8]
 800ea10:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800ea12:	2300      	movs	r3, #0
 800ea14:	617b      	str	r3, [r7, #20]
 800ea16:	e009      	b.n	800ea2c <_write+0x26>
	{
		__io_putchar(*ptr++);
 800ea18:	68bb      	ldr	r3, [r7, #8]
 800ea1a:	1c5a      	adds	r2, r3, #1
 800ea1c:	60ba      	str	r2, [r7, #8]
 800ea1e:	781b      	ldrb	r3, [r3, #0]
 800ea20:	4618      	mov	r0, r3
 800ea22:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800ea26:	697b      	ldr	r3, [r7, #20]
 800ea28:	3301      	adds	r3, #1
 800ea2a:	617b      	str	r3, [r7, #20]
 800ea2c:	697a      	ldr	r2, [r7, #20]
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	429a      	cmp	r2, r3
 800ea32:	dbf1      	blt.n	800ea18 <_write+0x12>
	}
	return len;
 800ea34:	687b      	ldr	r3, [r7, #4]
}
 800ea36:	4618      	mov	r0, r3
 800ea38:	3718      	adds	r7, #24
 800ea3a:	46bd      	mov	sp, r7
 800ea3c:	bd80      	pop	{r7, pc}

0800ea3e <_close>:

int _close(int file)
{
 800ea3e:	b480      	push	{r7}
 800ea40:	b083      	sub	sp, #12
 800ea42:	af00      	add	r7, sp, #0
 800ea44:	6078      	str	r0, [r7, #4]
	return -1;
 800ea46:	f04f 33ff 	mov.w	r3, #4294967295
}
 800ea4a:	4618      	mov	r0, r3
 800ea4c:	370c      	adds	r7, #12
 800ea4e:	46bd      	mov	sp, r7
 800ea50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea54:	4770      	bx	lr

0800ea56 <_fstat>:


int _fstat(int file, struct stat *st)
{
 800ea56:	b480      	push	{r7}
 800ea58:	b083      	sub	sp, #12
 800ea5a:	af00      	add	r7, sp, #0
 800ea5c:	6078      	str	r0, [r7, #4]
 800ea5e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800ea60:	683b      	ldr	r3, [r7, #0]
 800ea62:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800ea66:	605a      	str	r2, [r3, #4]
	return 0;
 800ea68:	2300      	movs	r3, #0
}
 800ea6a:	4618      	mov	r0, r3
 800ea6c:	370c      	adds	r7, #12
 800ea6e:	46bd      	mov	sp, r7
 800ea70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea74:	4770      	bx	lr

0800ea76 <_isatty>:

int _isatty(int file)
{
 800ea76:	b480      	push	{r7}
 800ea78:	b083      	sub	sp, #12
 800ea7a:	af00      	add	r7, sp, #0
 800ea7c:	6078      	str	r0, [r7, #4]
	return 1;
 800ea7e:	2301      	movs	r3, #1
}
 800ea80:	4618      	mov	r0, r3
 800ea82:	370c      	adds	r7, #12
 800ea84:	46bd      	mov	sp, r7
 800ea86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea8a:	4770      	bx	lr

0800ea8c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800ea8c:	b480      	push	{r7}
 800ea8e:	b085      	sub	sp, #20
 800ea90:	af00      	add	r7, sp, #0
 800ea92:	60f8      	str	r0, [r7, #12]
 800ea94:	60b9      	str	r1, [r7, #8]
 800ea96:	607a      	str	r2, [r7, #4]
	return 0;
 800ea98:	2300      	movs	r3, #0
}
 800ea9a:	4618      	mov	r0, r3
 800ea9c:	3714      	adds	r7, #20
 800ea9e:	46bd      	mov	sp, r7
 800eaa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaa4:	4770      	bx	lr
	...

0800eaa8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800eaa8:	b580      	push	{r7, lr}
 800eaaa:	b084      	sub	sp, #16
 800eaac:	af00      	add	r7, sp, #0
 800eaae:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800eab0:	4b11      	ldr	r3, [pc, #68]	; (800eaf8 <_sbrk+0x50>)
 800eab2:	681b      	ldr	r3, [r3, #0]
 800eab4:	2b00      	cmp	r3, #0
 800eab6:	d102      	bne.n	800eabe <_sbrk+0x16>
		heap_end = &end;
 800eab8:	4b0f      	ldr	r3, [pc, #60]	; (800eaf8 <_sbrk+0x50>)
 800eaba:	4a10      	ldr	r2, [pc, #64]	; (800eafc <_sbrk+0x54>)
 800eabc:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800eabe:	4b0e      	ldr	r3, [pc, #56]	; (800eaf8 <_sbrk+0x50>)
 800eac0:	681b      	ldr	r3, [r3, #0]
 800eac2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800eac4:	4b0c      	ldr	r3, [pc, #48]	; (800eaf8 <_sbrk+0x50>)
 800eac6:	681a      	ldr	r2, [r3, #0]
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	4413      	add	r3, r2
 800eacc:	466a      	mov	r2, sp
 800eace:	4293      	cmp	r3, r2
 800ead0:	d907      	bls.n	800eae2 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800ead2:	f000 f875 	bl	800ebc0 <__errno>
 800ead6:	4603      	mov	r3, r0
 800ead8:	220c      	movs	r2, #12
 800eada:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 800eadc:	f04f 33ff 	mov.w	r3, #4294967295
 800eae0:	e006      	b.n	800eaf0 <_sbrk+0x48>
	}

	heap_end += incr;
 800eae2:	4b05      	ldr	r3, [pc, #20]	; (800eaf8 <_sbrk+0x50>)
 800eae4:	681a      	ldr	r2, [r3, #0]
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	4413      	add	r3, r2
 800eaea:	4a03      	ldr	r2, [pc, #12]	; (800eaf8 <_sbrk+0x50>)
 800eaec:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800eaee:	68fb      	ldr	r3, [r7, #12]
}
 800eaf0:	4618      	mov	r0, r3
 800eaf2:	3710      	adds	r7, #16
 800eaf4:	46bd      	mov	sp, r7
 800eaf6:	bd80      	pop	{r7, pc}
 800eaf8:	20010374 	.word	0x20010374
 800eafc:	200108c8 	.word	0x200108c8

0800eb00 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800eb00:	b480      	push	{r7}
 800eb02:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800eb04:	4b17      	ldr	r3, [pc, #92]	; (800eb64 <SystemInit+0x64>)
 800eb06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800eb0a:	4a16      	ldr	r2, [pc, #88]	; (800eb64 <SystemInit+0x64>)
 800eb0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800eb10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800eb14:	4b14      	ldr	r3, [pc, #80]	; (800eb68 <SystemInit+0x68>)
 800eb16:	681b      	ldr	r3, [r3, #0]
 800eb18:	4a13      	ldr	r2, [pc, #76]	; (800eb68 <SystemInit+0x68>)
 800eb1a:	f043 0301 	orr.w	r3, r3, #1
 800eb1e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800eb20:	4b11      	ldr	r3, [pc, #68]	; (800eb68 <SystemInit+0x68>)
 800eb22:	2200      	movs	r2, #0
 800eb24:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800eb26:	4b10      	ldr	r3, [pc, #64]	; (800eb68 <SystemInit+0x68>)
 800eb28:	681b      	ldr	r3, [r3, #0]
 800eb2a:	4a0f      	ldr	r2, [pc, #60]	; (800eb68 <SystemInit+0x68>)
 800eb2c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 800eb30:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800eb34:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800eb36:	4b0c      	ldr	r3, [pc, #48]	; (800eb68 <SystemInit+0x68>)
 800eb38:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800eb3c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800eb3e:	4b0a      	ldr	r3, [pc, #40]	; (800eb68 <SystemInit+0x68>)
 800eb40:	681b      	ldr	r3, [r3, #0]
 800eb42:	4a09      	ldr	r2, [pc, #36]	; (800eb68 <SystemInit+0x68>)
 800eb44:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800eb48:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800eb4a:	4b07      	ldr	r3, [pc, #28]	; (800eb68 <SystemInit+0x68>)
 800eb4c:	2200      	movs	r2, #0
 800eb4e:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800eb50:	4b04      	ldr	r3, [pc, #16]	; (800eb64 <SystemInit+0x64>)
 800eb52:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800eb56:	609a      	str	r2, [r3, #8]
#endif
}
 800eb58:	bf00      	nop
 800eb5a:	46bd      	mov	sp, r7
 800eb5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb60:	4770      	bx	lr
 800eb62:	bf00      	nop
 800eb64:	e000ed00 	.word	0xe000ed00
 800eb68:	40021000 	.word	0x40021000

0800eb6c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800eb6c:	f8df d034 	ldr.w	sp, [pc, #52]	; 800eba4 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800eb70:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800eb72:	e003      	b.n	800eb7c <LoopCopyDataInit>

0800eb74 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800eb74:	4b0c      	ldr	r3, [pc, #48]	; (800eba8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800eb76:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800eb78:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800eb7a:	3104      	adds	r1, #4

0800eb7c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800eb7c:	480b      	ldr	r0, [pc, #44]	; (800ebac <LoopForever+0xa>)
	ldr	r3, =_edata
 800eb7e:	4b0c      	ldr	r3, [pc, #48]	; (800ebb0 <LoopForever+0xe>)
	adds	r2, r0, r1
 800eb80:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800eb82:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800eb84:	d3f6      	bcc.n	800eb74 <CopyDataInit>
	ldr	r2, =_sbss
 800eb86:	4a0b      	ldr	r2, [pc, #44]	; (800ebb4 <LoopForever+0x12>)
	b	LoopFillZerobss
 800eb88:	e002      	b.n	800eb90 <LoopFillZerobss>

0800eb8a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800eb8a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800eb8c:	f842 3b04 	str.w	r3, [r2], #4

0800eb90 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800eb90:	4b09      	ldr	r3, [pc, #36]	; (800ebb8 <LoopForever+0x16>)
	cmp	r2, r3
 800eb92:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800eb94:	d3f9      	bcc.n	800eb8a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800eb96:	f7ff ffb3 	bl	800eb00 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800eb9a:	f000 f817 	bl	800ebcc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800eb9e:	f7fd f973 	bl	800be88 <main>

0800eba2 <LoopForever>:

LoopForever:
    b LoopForever
 800eba2:	e7fe      	b.n	800eba2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800eba4:	200a0000 	.word	0x200a0000
	ldr	r3, =_sidata
 800eba8:	0801408c 	.word	0x0801408c
	ldr	r0, =_sdata
 800ebac:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800ebb0:	20000218 	.word	0x20000218
	ldr	r2, =_sbss
 800ebb4:	20000218 	.word	0x20000218
	ldr	r3, = _ebss
 800ebb8:	200108c4 	.word	0x200108c4

0800ebbc <CAN1_RX0_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800ebbc:	e7fe      	b.n	800ebbc <CAN1_RX0_IRQHandler>
	...

0800ebc0 <__errno>:
 800ebc0:	4b01      	ldr	r3, [pc, #4]	; (800ebc8 <__errno+0x8>)
 800ebc2:	6818      	ldr	r0, [r3, #0]
 800ebc4:	4770      	bx	lr
 800ebc6:	bf00      	nop
 800ebc8:	20000044 	.word	0x20000044

0800ebcc <__libc_init_array>:
 800ebcc:	b570      	push	{r4, r5, r6, lr}
 800ebce:	4d0d      	ldr	r5, [pc, #52]	; (800ec04 <__libc_init_array+0x38>)
 800ebd0:	4c0d      	ldr	r4, [pc, #52]	; (800ec08 <__libc_init_array+0x3c>)
 800ebd2:	1b64      	subs	r4, r4, r5
 800ebd4:	10a4      	asrs	r4, r4, #2
 800ebd6:	2600      	movs	r6, #0
 800ebd8:	42a6      	cmp	r6, r4
 800ebda:	d109      	bne.n	800ebf0 <__libc_init_array+0x24>
 800ebdc:	4d0b      	ldr	r5, [pc, #44]	; (800ec0c <__libc_init_array+0x40>)
 800ebde:	4c0c      	ldr	r4, [pc, #48]	; (800ec10 <__libc_init_array+0x44>)
 800ebe0:	f004 fcca 	bl	8013578 <_init>
 800ebe4:	1b64      	subs	r4, r4, r5
 800ebe6:	10a4      	asrs	r4, r4, #2
 800ebe8:	2600      	movs	r6, #0
 800ebea:	42a6      	cmp	r6, r4
 800ebec:	d105      	bne.n	800ebfa <__libc_init_array+0x2e>
 800ebee:	bd70      	pop	{r4, r5, r6, pc}
 800ebf0:	f855 3b04 	ldr.w	r3, [r5], #4
 800ebf4:	4798      	blx	r3
 800ebf6:	3601      	adds	r6, #1
 800ebf8:	e7ee      	b.n	800ebd8 <__libc_init_array+0xc>
 800ebfa:	f855 3b04 	ldr.w	r3, [r5], #4
 800ebfe:	4798      	blx	r3
 800ec00:	3601      	adds	r6, #1
 800ec02:	e7f2      	b.n	800ebea <__libc_init_array+0x1e>
 800ec04:	08014084 	.word	0x08014084
 800ec08:	08014084 	.word	0x08014084
 800ec0c:	08014084 	.word	0x08014084
 800ec10:	08014088 	.word	0x08014088

0800ec14 <memcpy>:
 800ec14:	440a      	add	r2, r1
 800ec16:	4291      	cmp	r1, r2
 800ec18:	f100 33ff 	add.w	r3, r0, #4294967295
 800ec1c:	d100      	bne.n	800ec20 <memcpy+0xc>
 800ec1e:	4770      	bx	lr
 800ec20:	b510      	push	{r4, lr}
 800ec22:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ec26:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ec2a:	4291      	cmp	r1, r2
 800ec2c:	d1f9      	bne.n	800ec22 <memcpy+0xe>
 800ec2e:	bd10      	pop	{r4, pc}

0800ec30 <memset>:
 800ec30:	4402      	add	r2, r0
 800ec32:	4603      	mov	r3, r0
 800ec34:	4293      	cmp	r3, r2
 800ec36:	d100      	bne.n	800ec3a <memset+0xa>
 800ec38:	4770      	bx	lr
 800ec3a:	f803 1b01 	strb.w	r1, [r3], #1
 800ec3e:	e7f9      	b.n	800ec34 <memset+0x4>

0800ec40 <__cvt>:
 800ec40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ec44:	ec55 4b10 	vmov	r4, r5, d0
 800ec48:	2d00      	cmp	r5, #0
 800ec4a:	460e      	mov	r6, r1
 800ec4c:	4619      	mov	r1, r3
 800ec4e:	462b      	mov	r3, r5
 800ec50:	bfbb      	ittet	lt
 800ec52:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800ec56:	461d      	movlt	r5, r3
 800ec58:	2300      	movge	r3, #0
 800ec5a:	232d      	movlt	r3, #45	; 0x2d
 800ec5c:	700b      	strb	r3, [r1, #0]
 800ec5e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ec60:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800ec64:	4691      	mov	r9, r2
 800ec66:	f023 0820 	bic.w	r8, r3, #32
 800ec6a:	bfbc      	itt	lt
 800ec6c:	4622      	movlt	r2, r4
 800ec6e:	4614      	movlt	r4, r2
 800ec70:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ec74:	d005      	beq.n	800ec82 <__cvt+0x42>
 800ec76:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800ec7a:	d100      	bne.n	800ec7e <__cvt+0x3e>
 800ec7c:	3601      	adds	r6, #1
 800ec7e:	2102      	movs	r1, #2
 800ec80:	e000      	b.n	800ec84 <__cvt+0x44>
 800ec82:	2103      	movs	r1, #3
 800ec84:	ab03      	add	r3, sp, #12
 800ec86:	9301      	str	r3, [sp, #4]
 800ec88:	ab02      	add	r3, sp, #8
 800ec8a:	9300      	str	r3, [sp, #0]
 800ec8c:	ec45 4b10 	vmov	d0, r4, r5
 800ec90:	4653      	mov	r3, sl
 800ec92:	4632      	mov	r2, r6
 800ec94:	f001 fdb4 	bl	8010800 <_dtoa_r>
 800ec98:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800ec9c:	4607      	mov	r7, r0
 800ec9e:	d102      	bne.n	800eca6 <__cvt+0x66>
 800eca0:	f019 0f01 	tst.w	r9, #1
 800eca4:	d022      	beq.n	800ecec <__cvt+0xac>
 800eca6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ecaa:	eb07 0906 	add.w	r9, r7, r6
 800ecae:	d110      	bne.n	800ecd2 <__cvt+0x92>
 800ecb0:	783b      	ldrb	r3, [r7, #0]
 800ecb2:	2b30      	cmp	r3, #48	; 0x30
 800ecb4:	d10a      	bne.n	800eccc <__cvt+0x8c>
 800ecb6:	2200      	movs	r2, #0
 800ecb8:	2300      	movs	r3, #0
 800ecba:	4620      	mov	r0, r4
 800ecbc:	4629      	mov	r1, r5
 800ecbe:	f7f1 ff1b 	bl	8000af8 <__aeabi_dcmpeq>
 800ecc2:	b918      	cbnz	r0, 800eccc <__cvt+0x8c>
 800ecc4:	f1c6 0601 	rsb	r6, r6, #1
 800ecc8:	f8ca 6000 	str.w	r6, [sl]
 800eccc:	f8da 3000 	ldr.w	r3, [sl]
 800ecd0:	4499      	add	r9, r3
 800ecd2:	2200      	movs	r2, #0
 800ecd4:	2300      	movs	r3, #0
 800ecd6:	4620      	mov	r0, r4
 800ecd8:	4629      	mov	r1, r5
 800ecda:	f7f1 ff0d 	bl	8000af8 <__aeabi_dcmpeq>
 800ecde:	b108      	cbz	r0, 800ece4 <__cvt+0xa4>
 800ece0:	f8cd 900c 	str.w	r9, [sp, #12]
 800ece4:	2230      	movs	r2, #48	; 0x30
 800ece6:	9b03      	ldr	r3, [sp, #12]
 800ece8:	454b      	cmp	r3, r9
 800ecea:	d307      	bcc.n	800ecfc <__cvt+0xbc>
 800ecec:	9b03      	ldr	r3, [sp, #12]
 800ecee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ecf0:	1bdb      	subs	r3, r3, r7
 800ecf2:	4638      	mov	r0, r7
 800ecf4:	6013      	str	r3, [r2, #0]
 800ecf6:	b004      	add	sp, #16
 800ecf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ecfc:	1c59      	adds	r1, r3, #1
 800ecfe:	9103      	str	r1, [sp, #12]
 800ed00:	701a      	strb	r2, [r3, #0]
 800ed02:	e7f0      	b.n	800ece6 <__cvt+0xa6>

0800ed04 <__exponent>:
 800ed04:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ed06:	4603      	mov	r3, r0
 800ed08:	2900      	cmp	r1, #0
 800ed0a:	bfb8      	it	lt
 800ed0c:	4249      	neglt	r1, r1
 800ed0e:	f803 2b02 	strb.w	r2, [r3], #2
 800ed12:	bfb4      	ite	lt
 800ed14:	222d      	movlt	r2, #45	; 0x2d
 800ed16:	222b      	movge	r2, #43	; 0x2b
 800ed18:	2909      	cmp	r1, #9
 800ed1a:	7042      	strb	r2, [r0, #1]
 800ed1c:	dd2a      	ble.n	800ed74 <__exponent+0x70>
 800ed1e:	f10d 0407 	add.w	r4, sp, #7
 800ed22:	46a4      	mov	ip, r4
 800ed24:	270a      	movs	r7, #10
 800ed26:	46a6      	mov	lr, r4
 800ed28:	460a      	mov	r2, r1
 800ed2a:	fb91 f6f7 	sdiv	r6, r1, r7
 800ed2e:	fb07 1516 	mls	r5, r7, r6, r1
 800ed32:	3530      	adds	r5, #48	; 0x30
 800ed34:	2a63      	cmp	r2, #99	; 0x63
 800ed36:	f104 34ff 	add.w	r4, r4, #4294967295
 800ed3a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800ed3e:	4631      	mov	r1, r6
 800ed40:	dcf1      	bgt.n	800ed26 <__exponent+0x22>
 800ed42:	3130      	adds	r1, #48	; 0x30
 800ed44:	f1ae 0502 	sub.w	r5, lr, #2
 800ed48:	f804 1c01 	strb.w	r1, [r4, #-1]
 800ed4c:	1c44      	adds	r4, r0, #1
 800ed4e:	4629      	mov	r1, r5
 800ed50:	4561      	cmp	r1, ip
 800ed52:	d30a      	bcc.n	800ed6a <__exponent+0x66>
 800ed54:	f10d 0209 	add.w	r2, sp, #9
 800ed58:	eba2 020e 	sub.w	r2, r2, lr
 800ed5c:	4565      	cmp	r5, ip
 800ed5e:	bf88      	it	hi
 800ed60:	2200      	movhi	r2, #0
 800ed62:	4413      	add	r3, r2
 800ed64:	1a18      	subs	r0, r3, r0
 800ed66:	b003      	add	sp, #12
 800ed68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ed6a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ed6e:	f804 2f01 	strb.w	r2, [r4, #1]!
 800ed72:	e7ed      	b.n	800ed50 <__exponent+0x4c>
 800ed74:	2330      	movs	r3, #48	; 0x30
 800ed76:	3130      	adds	r1, #48	; 0x30
 800ed78:	7083      	strb	r3, [r0, #2]
 800ed7a:	70c1      	strb	r1, [r0, #3]
 800ed7c:	1d03      	adds	r3, r0, #4
 800ed7e:	e7f1      	b.n	800ed64 <__exponent+0x60>

0800ed80 <_printf_float>:
 800ed80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed84:	ed2d 8b02 	vpush	{d8}
 800ed88:	b08d      	sub	sp, #52	; 0x34
 800ed8a:	460c      	mov	r4, r1
 800ed8c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800ed90:	4616      	mov	r6, r2
 800ed92:	461f      	mov	r7, r3
 800ed94:	4605      	mov	r5, r0
 800ed96:	f002 fe8f 	bl	8011ab8 <_localeconv_r>
 800ed9a:	f8d0 a000 	ldr.w	sl, [r0]
 800ed9e:	4650      	mov	r0, sl
 800eda0:	f7f1 fa2e 	bl	8000200 <strlen>
 800eda4:	2300      	movs	r3, #0
 800eda6:	930a      	str	r3, [sp, #40]	; 0x28
 800eda8:	6823      	ldr	r3, [r4, #0]
 800edaa:	9305      	str	r3, [sp, #20]
 800edac:	f8d8 3000 	ldr.w	r3, [r8]
 800edb0:	f894 b018 	ldrb.w	fp, [r4, #24]
 800edb4:	3307      	adds	r3, #7
 800edb6:	f023 0307 	bic.w	r3, r3, #7
 800edba:	f103 0208 	add.w	r2, r3, #8
 800edbe:	f8c8 2000 	str.w	r2, [r8]
 800edc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edc6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800edca:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800edce:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800edd2:	9307      	str	r3, [sp, #28]
 800edd4:	f8cd 8018 	str.w	r8, [sp, #24]
 800edd8:	ee08 0a10 	vmov	s16, r0
 800eddc:	4b9f      	ldr	r3, [pc, #636]	; (800f05c <_printf_float+0x2dc>)
 800edde:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ede2:	f04f 32ff 	mov.w	r2, #4294967295
 800ede6:	f7f1 feb9 	bl	8000b5c <__aeabi_dcmpun>
 800edea:	bb88      	cbnz	r0, 800ee50 <_printf_float+0xd0>
 800edec:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800edf0:	4b9a      	ldr	r3, [pc, #616]	; (800f05c <_printf_float+0x2dc>)
 800edf2:	f04f 32ff 	mov.w	r2, #4294967295
 800edf6:	f7f1 fe93 	bl	8000b20 <__aeabi_dcmple>
 800edfa:	bb48      	cbnz	r0, 800ee50 <_printf_float+0xd0>
 800edfc:	2200      	movs	r2, #0
 800edfe:	2300      	movs	r3, #0
 800ee00:	4640      	mov	r0, r8
 800ee02:	4649      	mov	r1, r9
 800ee04:	f7f1 fe82 	bl	8000b0c <__aeabi_dcmplt>
 800ee08:	b110      	cbz	r0, 800ee10 <_printf_float+0x90>
 800ee0a:	232d      	movs	r3, #45	; 0x2d
 800ee0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ee10:	4b93      	ldr	r3, [pc, #588]	; (800f060 <_printf_float+0x2e0>)
 800ee12:	4894      	ldr	r0, [pc, #592]	; (800f064 <_printf_float+0x2e4>)
 800ee14:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800ee18:	bf94      	ite	ls
 800ee1a:	4698      	movls	r8, r3
 800ee1c:	4680      	movhi	r8, r0
 800ee1e:	2303      	movs	r3, #3
 800ee20:	6123      	str	r3, [r4, #16]
 800ee22:	9b05      	ldr	r3, [sp, #20]
 800ee24:	f023 0204 	bic.w	r2, r3, #4
 800ee28:	6022      	str	r2, [r4, #0]
 800ee2a:	f04f 0900 	mov.w	r9, #0
 800ee2e:	9700      	str	r7, [sp, #0]
 800ee30:	4633      	mov	r3, r6
 800ee32:	aa0b      	add	r2, sp, #44	; 0x2c
 800ee34:	4621      	mov	r1, r4
 800ee36:	4628      	mov	r0, r5
 800ee38:	f000 f9d8 	bl	800f1ec <_printf_common>
 800ee3c:	3001      	adds	r0, #1
 800ee3e:	f040 8090 	bne.w	800ef62 <_printf_float+0x1e2>
 800ee42:	f04f 30ff 	mov.w	r0, #4294967295
 800ee46:	b00d      	add	sp, #52	; 0x34
 800ee48:	ecbd 8b02 	vpop	{d8}
 800ee4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ee50:	4642      	mov	r2, r8
 800ee52:	464b      	mov	r3, r9
 800ee54:	4640      	mov	r0, r8
 800ee56:	4649      	mov	r1, r9
 800ee58:	f7f1 fe80 	bl	8000b5c <__aeabi_dcmpun>
 800ee5c:	b140      	cbz	r0, 800ee70 <_printf_float+0xf0>
 800ee5e:	464b      	mov	r3, r9
 800ee60:	2b00      	cmp	r3, #0
 800ee62:	bfbc      	itt	lt
 800ee64:	232d      	movlt	r3, #45	; 0x2d
 800ee66:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800ee6a:	487f      	ldr	r0, [pc, #508]	; (800f068 <_printf_float+0x2e8>)
 800ee6c:	4b7f      	ldr	r3, [pc, #508]	; (800f06c <_printf_float+0x2ec>)
 800ee6e:	e7d1      	b.n	800ee14 <_printf_float+0x94>
 800ee70:	6863      	ldr	r3, [r4, #4]
 800ee72:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800ee76:	9206      	str	r2, [sp, #24]
 800ee78:	1c5a      	adds	r2, r3, #1
 800ee7a:	d13f      	bne.n	800eefc <_printf_float+0x17c>
 800ee7c:	2306      	movs	r3, #6
 800ee7e:	6063      	str	r3, [r4, #4]
 800ee80:	9b05      	ldr	r3, [sp, #20]
 800ee82:	6861      	ldr	r1, [r4, #4]
 800ee84:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800ee88:	2300      	movs	r3, #0
 800ee8a:	9303      	str	r3, [sp, #12]
 800ee8c:	ab0a      	add	r3, sp, #40	; 0x28
 800ee8e:	e9cd b301 	strd	fp, r3, [sp, #4]
 800ee92:	ab09      	add	r3, sp, #36	; 0x24
 800ee94:	ec49 8b10 	vmov	d0, r8, r9
 800ee98:	9300      	str	r3, [sp, #0]
 800ee9a:	6022      	str	r2, [r4, #0]
 800ee9c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800eea0:	4628      	mov	r0, r5
 800eea2:	f7ff fecd 	bl	800ec40 <__cvt>
 800eea6:	9b06      	ldr	r3, [sp, #24]
 800eea8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800eeaa:	2b47      	cmp	r3, #71	; 0x47
 800eeac:	4680      	mov	r8, r0
 800eeae:	d108      	bne.n	800eec2 <_printf_float+0x142>
 800eeb0:	1cc8      	adds	r0, r1, #3
 800eeb2:	db02      	blt.n	800eeba <_printf_float+0x13a>
 800eeb4:	6863      	ldr	r3, [r4, #4]
 800eeb6:	4299      	cmp	r1, r3
 800eeb8:	dd41      	ble.n	800ef3e <_printf_float+0x1be>
 800eeba:	f1ab 0b02 	sub.w	fp, fp, #2
 800eebe:	fa5f fb8b 	uxtb.w	fp, fp
 800eec2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800eec6:	d820      	bhi.n	800ef0a <_printf_float+0x18a>
 800eec8:	3901      	subs	r1, #1
 800eeca:	465a      	mov	r2, fp
 800eecc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800eed0:	9109      	str	r1, [sp, #36]	; 0x24
 800eed2:	f7ff ff17 	bl	800ed04 <__exponent>
 800eed6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800eed8:	1813      	adds	r3, r2, r0
 800eeda:	2a01      	cmp	r2, #1
 800eedc:	4681      	mov	r9, r0
 800eede:	6123      	str	r3, [r4, #16]
 800eee0:	dc02      	bgt.n	800eee8 <_printf_float+0x168>
 800eee2:	6822      	ldr	r2, [r4, #0]
 800eee4:	07d2      	lsls	r2, r2, #31
 800eee6:	d501      	bpl.n	800eeec <_printf_float+0x16c>
 800eee8:	3301      	adds	r3, #1
 800eeea:	6123      	str	r3, [r4, #16]
 800eeec:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800eef0:	2b00      	cmp	r3, #0
 800eef2:	d09c      	beq.n	800ee2e <_printf_float+0xae>
 800eef4:	232d      	movs	r3, #45	; 0x2d
 800eef6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800eefa:	e798      	b.n	800ee2e <_printf_float+0xae>
 800eefc:	9a06      	ldr	r2, [sp, #24]
 800eefe:	2a47      	cmp	r2, #71	; 0x47
 800ef00:	d1be      	bne.n	800ee80 <_printf_float+0x100>
 800ef02:	2b00      	cmp	r3, #0
 800ef04:	d1bc      	bne.n	800ee80 <_printf_float+0x100>
 800ef06:	2301      	movs	r3, #1
 800ef08:	e7b9      	b.n	800ee7e <_printf_float+0xfe>
 800ef0a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800ef0e:	d118      	bne.n	800ef42 <_printf_float+0x1c2>
 800ef10:	2900      	cmp	r1, #0
 800ef12:	6863      	ldr	r3, [r4, #4]
 800ef14:	dd0b      	ble.n	800ef2e <_printf_float+0x1ae>
 800ef16:	6121      	str	r1, [r4, #16]
 800ef18:	b913      	cbnz	r3, 800ef20 <_printf_float+0x1a0>
 800ef1a:	6822      	ldr	r2, [r4, #0]
 800ef1c:	07d0      	lsls	r0, r2, #31
 800ef1e:	d502      	bpl.n	800ef26 <_printf_float+0x1a6>
 800ef20:	3301      	adds	r3, #1
 800ef22:	440b      	add	r3, r1
 800ef24:	6123      	str	r3, [r4, #16]
 800ef26:	65a1      	str	r1, [r4, #88]	; 0x58
 800ef28:	f04f 0900 	mov.w	r9, #0
 800ef2c:	e7de      	b.n	800eeec <_printf_float+0x16c>
 800ef2e:	b913      	cbnz	r3, 800ef36 <_printf_float+0x1b6>
 800ef30:	6822      	ldr	r2, [r4, #0]
 800ef32:	07d2      	lsls	r2, r2, #31
 800ef34:	d501      	bpl.n	800ef3a <_printf_float+0x1ba>
 800ef36:	3302      	adds	r3, #2
 800ef38:	e7f4      	b.n	800ef24 <_printf_float+0x1a4>
 800ef3a:	2301      	movs	r3, #1
 800ef3c:	e7f2      	b.n	800ef24 <_printf_float+0x1a4>
 800ef3e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800ef42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ef44:	4299      	cmp	r1, r3
 800ef46:	db05      	blt.n	800ef54 <_printf_float+0x1d4>
 800ef48:	6823      	ldr	r3, [r4, #0]
 800ef4a:	6121      	str	r1, [r4, #16]
 800ef4c:	07d8      	lsls	r0, r3, #31
 800ef4e:	d5ea      	bpl.n	800ef26 <_printf_float+0x1a6>
 800ef50:	1c4b      	adds	r3, r1, #1
 800ef52:	e7e7      	b.n	800ef24 <_printf_float+0x1a4>
 800ef54:	2900      	cmp	r1, #0
 800ef56:	bfd4      	ite	le
 800ef58:	f1c1 0202 	rsble	r2, r1, #2
 800ef5c:	2201      	movgt	r2, #1
 800ef5e:	4413      	add	r3, r2
 800ef60:	e7e0      	b.n	800ef24 <_printf_float+0x1a4>
 800ef62:	6823      	ldr	r3, [r4, #0]
 800ef64:	055a      	lsls	r2, r3, #21
 800ef66:	d407      	bmi.n	800ef78 <_printf_float+0x1f8>
 800ef68:	6923      	ldr	r3, [r4, #16]
 800ef6a:	4642      	mov	r2, r8
 800ef6c:	4631      	mov	r1, r6
 800ef6e:	4628      	mov	r0, r5
 800ef70:	47b8      	blx	r7
 800ef72:	3001      	adds	r0, #1
 800ef74:	d12c      	bne.n	800efd0 <_printf_float+0x250>
 800ef76:	e764      	b.n	800ee42 <_printf_float+0xc2>
 800ef78:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ef7c:	f240 80e0 	bls.w	800f140 <_printf_float+0x3c0>
 800ef80:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ef84:	2200      	movs	r2, #0
 800ef86:	2300      	movs	r3, #0
 800ef88:	f7f1 fdb6 	bl	8000af8 <__aeabi_dcmpeq>
 800ef8c:	2800      	cmp	r0, #0
 800ef8e:	d034      	beq.n	800effa <_printf_float+0x27a>
 800ef90:	4a37      	ldr	r2, [pc, #220]	; (800f070 <_printf_float+0x2f0>)
 800ef92:	2301      	movs	r3, #1
 800ef94:	4631      	mov	r1, r6
 800ef96:	4628      	mov	r0, r5
 800ef98:	47b8      	blx	r7
 800ef9a:	3001      	adds	r0, #1
 800ef9c:	f43f af51 	beq.w	800ee42 <_printf_float+0xc2>
 800efa0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800efa4:	429a      	cmp	r2, r3
 800efa6:	db02      	blt.n	800efae <_printf_float+0x22e>
 800efa8:	6823      	ldr	r3, [r4, #0]
 800efaa:	07d8      	lsls	r0, r3, #31
 800efac:	d510      	bpl.n	800efd0 <_printf_float+0x250>
 800efae:	ee18 3a10 	vmov	r3, s16
 800efb2:	4652      	mov	r2, sl
 800efb4:	4631      	mov	r1, r6
 800efb6:	4628      	mov	r0, r5
 800efb8:	47b8      	blx	r7
 800efba:	3001      	adds	r0, #1
 800efbc:	f43f af41 	beq.w	800ee42 <_printf_float+0xc2>
 800efc0:	f04f 0800 	mov.w	r8, #0
 800efc4:	f104 091a 	add.w	r9, r4, #26
 800efc8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800efca:	3b01      	subs	r3, #1
 800efcc:	4543      	cmp	r3, r8
 800efce:	dc09      	bgt.n	800efe4 <_printf_float+0x264>
 800efd0:	6823      	ldr	r3, [r4, #0]
 800efd2:	079b      	lsls	r3, r3, #30
 800efd4:	f100 8105 	bmi.w	800f1e2 <_printf_float+0x462>
 800efd8:	68e0      	ldr	r0, [r4, #12]
 800efda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800efdc:	4298      	cmp	r0, r3
 800efde:	bfb8      	it	lt
 800efe0:	4618      	movlt	r0, r3
 800efe2:	e730      	b.n	800ee46 <_printf_float+0xc6>
 800efe4:	2301      	movs	r3, #1
 800efe6:	464a      	mov	r2, r9
 800efe8:	4631      	mov	r1, r6
 800efea:	4628      	mov	r0, r5
 800efec:	47b8      	blx	r7
 800efee:	3001      	adds	r0, #1
 800eff0:	f43f af27 	beq.w	800ee42 <_printf_float+0xc2>
 800eff4:	f108 0801 	add.w	r8, r8, #1
 800eff8:	e7e6      	b.n	800efc8 <_printf_float+0x248>
 800effa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800effc:	2b00      	cmp	r3, #0
 800effe:	dc39      	bgt.n	800f074 <_printf_float+0x2f4>
 800f000:	4a1b      	ldr	r2, [pc, #108]	; (800f070 <_printf_float+0x2f0>)
 800f002:	2301      	movs	r3, #1
 800f004:	4631      	mov	r1, r6
 800f006:	4628      	mov	r0, r5
 800f008:	47b8      	blx	r7
 800f00a:	3001      	adds	r0, #1
 800f00c:	f43f af19 	beq.w	800ee42 <_printf_float+0xc2>
 800f010:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f014:	4313      	orrs	r3, r2
 800f016:	d102      	bne.n	800f01e <_printf_float+0x29e>
 800f018:	6823      	ldr	r3, [r4, #0]
 800f01a:	07d9      	lsls	r1, r3, #31
 800f01c:	d5d8      	bpl.n	800efd0 <_printf_float+0x250>
 800f01e:	ee18 3a10 	vmov	r3, s16
 800f022:	4652      	mov	r2, sl
 800f024:	4631      	mov	r1, r6
 800f026:	4628      	mov	r0, r5
 800f028:	47b8      	blx	r7
 800f02a:	3001      	adds	r0, #1
 800f02c:	f43f af09 	beq.w	800ee42 <_printf_float+0xc2>
 800f030:	f04f 0900 	mov.w	r9, #0
 800f034:	f104 0a1a 	add.w	sl, r4, #26
 800f038:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f03a:	425b      	negs	r3, r3
 800f03c:	454b      	cmp	r3, r9
 800f03e:	dc01      	bgt.n	800f044 <_printf_float+0x2c4>
 800f040:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f042:	e792      	b.n	800ef6a <_printf_float+0x1ea>
 800f044:	2301      	movs	r3, #1
 800f046:	4652      	mov	r2, sl
 800f048:	4631      	mov	r1, r6
 800f04a:	4628      	mov	r0, r5
 800f04c:	47b8      	blx	r7
 800f04e:	3001      	adds	r0, #1
 800f050:	f43f aef7 	beq.w	800ee42 <_printf_float+0xc2>
 800f054:	f109 0901 	add.w	r9, r9, #1
 800f058:	e7ee      	b.n	800f038 <_printf_float+0x2b8>
 800f05a:	bf00      	nop
 800f05c:	7fefffff 	.word	0x7fefffff
 800f060:	08013bcc 	.word	0x08013bcc
 800f064:	08013bd0 	.word	0x08013bd0
 800f068:	08013bd8 	.word	0x08013bd8
 800f06c:	08013bd4 	.word	0x08013bd4
 800f070:	08013bdc 	.word	0x08013bdc
 800f074:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f076:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f078:	429a      	cmp	r2, r3
 800f07a:	bfa8      	it	ge
 800f07c:	461a      	movge	r2, r3
 800f07e:	2a00      	cmp	r2, #0
 800f080:	4691      	mov	r9, r2
 800f082:	dc37      	bgt.n	800f0f4 <_printf_float+0x374>
 800f084:	f04f 0b00 	mov.w	fp, #0
 800f088:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f08c:	f104 021a 	add.w	r2, r4, #26
 800f090:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f092:	9305      	str	r3, [sp, #20]
 800f094:	eba3 0309 	sub.w	r3, r3, r9
 800f098:	455b      	cmp	r3, fp
 800f09a:	dc33      	bgt.n	800f104 <_printf_float+0x384>
 800f09c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f0a0:	429a      	cmp	r2, r3
 800f0a2:	db3b      	blt.n	800f11c <_printf_float+0x39c>
 800f0a4:	6823      	ldr	r3, [r4, #0]
 800f0a6:	07da      	lsls	r2, r3, #31
 800f0a8:	d438      	bmi.n	800f11c <_printf_float+0x39c>
 800f0aa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f0ac:	9b05      	ldr	r3, [sp, #20]
 800f0ae:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f0b0:	1ad3      	subs	r3, r2, r3
 800f0b2:	eba2 0901 	sub.w	r9, r2, r1
 800f0b6:	4599      	cmp	r9, r3
 800f0b8:	bfa8      	it	ge
 800f0ba:	4699      	movge	r9, r3
 800f0bc:	f1b9 0f00 	cmp.w	r9, #0
 800f0c0:	dc35      	bgt.n	800f12e <_printf_float+0x3ae>
 800f0c2:	f04f 0800 	mov.w	r8, #0
 800f0c6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f0ca:	f104 0a1a 	add.w	sl, r4, #26
 800f0ce:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f0d2:	1a9b      	subs	r3, r3, r2
 800f0d4:	eba3 0309 	sub.w	r3, r3, r9
 800f0d8:	4543      	cmp	r3, r8
 800f0da:	f77f af79 	ble.w	800efd0 <_printf_float+0x250>
 800f0de:	2301      	movs	r3, #1
 800f0e0:	4652      	mov	r2, sl
 800f0e2:	4631      	mov	r1, r6
 800f0e4:	4628      	mov	r0, r5
 800f0e6:	47b8      	blx	r7
 800f0e8:	3001      	adds	r0, #1
 800f0ea:	f43f aeaa 	beq.w	800ee42 <_printf_float+0xc2>
 800f0ee:	f108 0801 	add.w	r8, r8, #1
 800f0f2:	e7ec      	b.n	800f0ce <_printf_float+0x34e>
 800f0f4:	4613      	mov	r3, r2
 800f0f6:	4631      	mov	r1, r6
 800f0f8:	4642      	mov	r2, r8
 800f0fa:	4628      	mov	r0, r5
 800f0fc:	47b8      	blx	r7
 800f0fe:	3001      	adds	r0, #1
 800f100:	d1c0      	bne.n	800f084 <_printf_float+0x304>
 800f102:	e69e      	b.n	800ee42 <_printf_float+0xc2>
 800f104:	2301      	movs	r3, #1
 800f106:	4631      	mov	r1, r6
 800f108:	4628      	mov	r0, r5
 800f10a:	9205      	str	r2, [sp, #20]
 800f10c:	47b8      	blx	r7
 800f10e:	3001      	adds	r0, #1
 800f110:	f43f ae97 	beq.w	800ee42 <_printf_float+0xc2>
 800f114:	9a05      	ldr	r2, [sp, #20]
 800f116:	f10b 0b01 	add.w	fp, fp, #1
 800f11a:	e7b9      	b.n	800f090 <_printf_float+0x310>
 800f11c:	ee18 3a10 	vmov	r3, s16
 800f120:	4652      	mov	r2, sl
 800f122:	4631      	mov	r1, r6
 800f124:	4628      	mov	r0, r5
 800f126:	47b8      	blx	r7
 800f128:	3001      	adds	r0, #1
 800f12a:	d1be      	bne.n	800f0aa <_printf_float+0x32a>
 800f12c:	e689      	b.n	800ee42 <_printf_float+0xc2>
 800f12e:	9a05      	ldr	r2, [sp, #20]
 800f130:	464b      	mov	r3, r9
 800f132:	4442      	add	r2, r8
 800f134:	4631      	mov	r1, r6
 800f136:	4628      	mov	r0, r5
 800f138:	47b8      	blx	r7
 800f13a:	3001      	adds	r0, #1
 800f13c:	d1c1      	bne.n	800f0c2 <_printf_float+0x342>
 800f13e:	e680      	b.n	800ee42 <_printf_float+0xc2>
 800f140:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f142:	2a01      	cmp	r2, #1
 800f144:	dc01      	bgt.n	800f14a <_printf_float+0x3ca>
 800f146:	07db      	lsls	r3, r3, #31
 800f148:	d538      	bpl.n	800f1bc <_printf_float+0x43c>
 800f14a:	2301      	movs	r3, #1
 800f14c:	4642      	mov	r2, r8
 800f14e:	4631      	mov	r1, r6
 800f150:	4628      	mov	r0, r5
 800f152:	47b8      	blx	r7
 800f154:	3001      	adds	r0, #1
 800f156:	f43f ae74 	beq.w	800ee42 <_printf_float+0xc2>
 800f15a:	ee18 3a10 	vmov	r3, s16
 800f15e:	4652      	mov	r2, sl
 800f160:	4631      	mov	r1, r6
 800f162:	4628      	mov	r0, r5
 800f164:	47b8      	blx	r7
 800f166:	3001      	adds	r0, #1
 800f168:	f43f ae6b 	beq.w	800ee42 <_printf_float+0xc2>
 800f16c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f170:	2200      	movs	r2, #0
 800f172:	2300      	movs	r3, #0
 800f174:	f7f1 fcc0 	bl	8000af8 <__aeabi_dcmpeq>
 800f178:	b9d8      	cbnz	r0, 800f1b2 <_printf_float+0x432>
 800f17a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f17c:	f108 0201 	add.w	r2, r8, #1
 800f180:	3b01      	subs	r3, #1
 800f182:	4631      	mov	r1, r6
 800f184:	4628      	mov	r0, r5
 800f186:	47b8      	blx	r7
 800f188:	3001      	adds	r0, #1
 800f18a:	d10e      	bne.n	800f1aa <_printf_float+0x42a>
 800f18c:	e659      	b.n	800ee42 <_printf_float+0xc2>
 800f18e:	2301      	movs	r3, #1
 800f190:	4652      	mov	r2, sl
 800f192:	4631      	mov	r1, r6
 800f194:	4628      	mov	r0, r5
 800f196:	47b8      	blx	r7
 800f198:	3001      	adds	r0, #1
 800f19a:	f43f ae52 	beq.w	800ee42 <_printf_float+0xc2>
 800f19e:	f108 0801 	add.w	r8, r8, #1
 800f1a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f1a4:	3b01      	subs	r3, #1
 800f1a6:	4543      	cmp	r3, r8
 800f1a8:	dcf1      	bgt.n	800f18e <_printf_float+0x40e>
 800f1aa:	464b      	mov	r3, r9
 800f1ac:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800f1b0:	e6dc      	b.n	800ef6c <_printf_float+0x1ec>
 800f1b2:	f04f 0800 	mov.w	r8, #0
 800f1b6:	f104 0a1a 	add.w	sl, r4, #26
 800f1ba:	e7f2      	b.n	800f1a2 <_printf_float+0x422>
 800f1bc:	2301      	movs	r3, #1
 800f1be:	4642      	mov	r2, r8
 800f1c0:	e7df      	b.n	800f182 <_printf_float+0x402>
 800f1c2:	2301      	movs	r3, #1
 800f1c4:	464a      	mov	r2, r9
 800f1c6:	4631      	mov	r1, r6
 800f1c8:	4628      	mov	r0, r5
 800f1ca:	47b8      	blx	r7
 800f1cc:	3001      	adds	r0, #1
 800f1ce:	f43f ae38 	beq.w	800ee42 <_printf_float+0xc2>
 800f1d2:	f108 0801 	add.w	r8, r8, #1
 800f1d6:	68e3      	ldr	r3, [r4, #12]
 800f1d8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f1da:	1a5b      	subs	r3, r3, r1
 800f1dc:	4543      	cmp	r3, r8
 800f1de:	dcf0      	bgt.n	800f1c2 <_printf_float+0x442>
 800f1e0:	e6fa      	b.n	800efd8 <_printf_float+0x258>
 800f1e2:	f04f 0800 	mov.w	r8, #0
 800f1e6:	f104 0919 	add.w	r9, r4, #25
 800f1ea:	e7f4      	b.n	800f1d6 <_printf_float+0x456>

0800f1ec <_printf_common>:
 800f1ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f1f0:	4616      	mov	r6, r2
 800f1f2:	4699      	mov	r9, r3
 800f1f4:	688a      	ldr	r2, [r1, #8]
 800f1f6:	690b      	ldr	r3, [r1, #16]
 800f1f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f1fc:	4293      	cmp	r3, r2
 800f1fe:	bfb8      	it	lt
 800f200:	4613      	movlt	r3, r2
 800f202:	6033      	str	r3, [r6, #0]
 800f204:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f208:	4607      	mov	r7, r0
 800f20a:	460c      	mov	r4, r1
 800f20c:	b10a      	cbz	r2, 800f212 <_printf_common+0x26>
 800f20e:	3301      	adds	r3, #1
 800f210:	6033      	str	r3, [r6, #0]
 800f212:	6823      	ldr	r3, [r4, #0]
 800f214:	0699      	lsls	r1, r3, #26
 800f216:	bf42      	ittt	mi
 800f218:	6833      	ldrmi	r3, [r6, #0]
 800f21a:	3302      	addmi	r3, #2
 800f21c:	6033      	strmi	r3, [r6, #0]
 800f21e:	6825      	ldr	r5, [r4, #0]
 800f220:	f015 0506 	ands.w	r5, r5, #6
 800f224:	d106      	bne.n	800f234 <_printf_common+0x48>
 800f226:	f104 0a19 	add.w	sl, r4, #25
 800f22a:	68e3      	ldr	r3, [r4, #12]
 800f22c:	6832      	ldr	r2, [r6, #0]
 800f22e:	1a9b      	subs	r3, r3, r2
 800f230:	42ab      	cmp	r3, r5
 800f232:	dc26      	bgt.n	800f282 <_printf_common+0x96>
 800f234:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f238:	1e13      	subs	r3, r2, #0
 800f23a:	6822      	ldr	r2, [r4, #0]
 800f23c:	bf18      	it	ne
 800f23e:	2301      	movne	r3, #1
 800f240:	0692      	lsls	r2, r2, #26
 800f242:	d42b      	bmi.n	800f29c <_printf_common+0xb0>
 800f244:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f248:	4649      	mov	r1, r9
 800f24a:	4638      	mov	r0, r7
 800f24c:	47c0      	blx	r8
 800f24e:	3001      	adds	r0, #1
 800f250:	d01e      	beq.n	800f290 <_printf_common+0xa4>
 800f252:	6823      	ldr	r3, [r4, #0]
 800f254:	68e5      	ldr	r5, [r4, #12]
 800f256:	6832      	ldr	r2, [r6, #0]
 800f258:	f003 0306 	and.w	r3, r3, #6
 800f25c:	2b04      	cmp	r3, #4
 800f25e:	bf08      	it	eq
 800f260:	1aad      	subeq	r5, r5, r2
 800f262:	68a3      	ldr	r3, [r4, #8]
 800f264:	6922      	ldr	r2, [r4, #16]
 800f266:	bf0c      	ite	eq
 800f268:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f26c:	2500      	movne	r5, #0
 800f26e:	4293      	cmp	r3, r2
 800f270:	bfc4      	itt	gt
 800f272:	1a9b      	subgt	r3, r3, r2
 800f274:	18ed      	addgt	r5, r5, r3
 800f276:	2600      	movs	r6, #0
 800f278:	341a      	adds	r4, #26
 800f27a:	42b5      	cmp	r5, r6
 800f27c:	d11a      	bne.n	800f2b4 <_printf_common+0xc8>
 800f27e:	2000      	movs	r0, #0
 800f280:	e008      	b.n	800f294 <_printf_common+0xa8>
 800f282:	2301      	movs	r3, #1
 800f284:	4652      	mov	r2, sl
 800f286:	4649      	mov	r1, r9
 800f288:	4638      	mov	r0, r7
 800f28a:	47c0      	blx	r8
 800f28c:	3001      	adds	r0, #1
 800f28e:	d103      	bne.n	800f298 <_printf_common+0xac>
 800f290:	f04f 30ff 	mov.w	r0, #4294967295
 800f294:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f298:	3501      	adds	r5, #1
 800f29a:	e7c6      	b.n	800f22a <_printf_common+0x3e>
 800f29c:	18e1      	adds	r1, r4, r3
 800f29e:	1c5a      	adds	r2, r3, #1
 800f2a0:	2030      	movs	r0, #48	; 0x30
 800f2a2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f2a6:	4422      	add	r2, r4
 800f2a8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f2ac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f2b0:	3302      	adds	r3, #2
 800f2b2:	e7c7      	b.n	800f244 <_printf_common+0x58>
 800f2b4:	2301      	movs	r3, #1
 800f2b6:	4622      	mov	r2, r4
 800f2b8:	4649      	mov	r1, r9
 800f2ba:	4638      	mov	r0, r7
 800f2bc:	47c0      	blx	r8
 800f2be:	3001      	adds	r0, #1
 800f2c0:	d0e6      	beq.n	800f290 <_printf_common+0xa4>
 800f2c2:	3601      	adds	r6, #1
 800f2c4:	e7d9      	b.n	800f27a <_printf_common+0x8e>
	...

0800f2c8 <_printf_i>:
 800f2c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f2cc:	460c      	mov	r4, r1
 800f2ce:	4691      	mov	r9, r2
 800f2d0:	7e27      	ldrb	r7, [r4, #24]
 800f2d2:	990c      	ldr	r1, [sp, #48]	; 0x30
 800f2d4:	2f78      	cmp	r7, #120	; 0x78
 800f2d6:	4680      	mov	r8, r0
 800f2d8:	469a      	mov	sl, r3
 800f2da:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f2de:	d807      	bhi.n	800f2f0 <_printf_i+0x28>
 800f2e0:	2f62      	cmp	r7, #98	; 0x62
 800f2e2:	d80a      	bhi.n	800f2fa <_printf_i+0x32>
 800f2e4:	2f00      	cmp	r7, #0
 800f2e6:	f000 80d8 	beq.w	800f49a <_printf_i+0x1d2>
 800f2ea:	2f58      	cmp	r7, #88	; 0x58
 800f2ec:	f000 80a3 	beq.w	800f436 <_printf_i+0x16e>
 800f2f0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800f2f4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f2f8:	e03a      	b.n	800f370 <_printf_i+0xa8>
 800f2fa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f2fe:	2b15      	cmp	r3, #21
 800f300:	d8f6      	bhi.n	800f2f0 <_printf_i+0x28>
 800f302:	a001      	add	r0, pc, #4	; (adr r0, 800f308 <_printf_i+0x40>)
 800f304:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800f308:	0800f361 	.word	0x0800f361
 800f30c:	0800f375 	.word	0x0800f375
 800f310:	0800f2f1 	.word	0x0800f2f1
 800f314:	0800f2f1 	.word	0x0800f2f1
 800f318:	0800f2f1 	.word	0x0800f2f1
 800f31c:	0800f2f1 	.word	0x0800f2f1
 800f320:	0800f375 	.word	0x0800f375
 800f324:	0800f2f1 	.word	0x0800f2f1
 800f328:	0800f2f1 	.word	0x0800f2f1
 800f32c:	0800f2f1 	.word	0x0800f2f1
 800f330:	0800f2f1 	.word	0x0800f2f1
 800f334:	0800f481 	.word	0x0800f481
 800f338:	0800f3a5 	.word	0x0800f3a5
 800f33c:	0800f463 	.word	0x0800f463
 800f340:	0800f2f1 	.word	0x0800f2f1
 800f344:	0800f2f1 	.word	0x0800f2f1
 800f348:	0800f4a3 	.word	0x0800f4a3
 800f34c:	0800f2f1 	.word	0x0800f2f1
 800f350:	0800f3a5 	.word	0x0800f3a5
 800f354:	0800f2f1 	.word	0x0800f2f1
 800f358:	0800f2f1 	.word	0x0800f2f1
 800f35c:	0800f46b 	.word	0x0800f46b
 800f360:	680b      	ldr	r3, [r1, #0]
 800f362:	1d1a      	adds	r2, r3, #4
 800f364:	681b      	ldr	r3, [r3, #0]
 800f366:	600a      	str	r2, [r1, #0]
 800f368:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800f36c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f370:	2301      	movs	r3, #1
 800f372:	e0a3      	b.n	800f4bc <_printf_i+0x1f4>
 800f374:	6825      	ldr	r5, [r4, #0]
 800f376:	6808      	ldr	r0, [r1, #0]
 800f378:	062e      	lsls	r6, r5, #24
 800f37a:	f100 0304 	add.w	r3, r0, #4
 800f37e:	d50a      	bpl.n	800f396 <_printf_i+0xce>
 800f380:	6805      	ldr	r5, [r0, #0]
 800f382:	600b      	str	r3, [r1, #0]
 800f384:	2d00      	cmp	r5, #0
 800f386:	da03      	bge.n	800f390 <_printf_i+0xc8>
 800f388:	232d      	movs	r3, #45	; 0x2d
 800f38a:	426d      	negs	r5, r5
 800f38c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f390:	485e      	ldr	r0, [pc, #376]	; (800f50c <_printf_i+0x244>)
 800f392:	230a      	movs	r3, #10
 800f394:	e019      	b.n	800f3ca <_printf_i+0x102>
 800f396:	f015 0f40 	tst.w	r5, #64	; 0x40
 800f39a:	6805      	ldr	r5, [r0, #0]
 800f39c:	600b      	str	r3, [r1, #0]
 800f39e:	bf18      	it	ne
 800f3a0:	b22d      	sxthne	r5, r5
 800f3a2:	e7ef      	b.n	800f384 <_printf_i+0xbc>
 800f3a4:	680b      	ldr	r3, [r1, #0]
 800f3a6:	6825      	ldr	r5, [r4, #0]
 800f3a8:	1d18      	adds	r0, r3, #4
 800f3aa:	6008      	str	r0, [r1, #0]
 800f3ac:	0628      	lsls	r0, r5, #24
 800f3ae:	d501      	bpl.n	800f3b4 <_printf_i+0xec>
 800f3b0:	681d      	ldr	r5, [r3, #0]
 800f3b2:	e002      	b.n	800f3ba <_printf_i+0xf2>
 800f3b4:	0669      	lsls	r1, r5, #25
 800f3b6:	d5fb      	bpl.n	800f3b0 <_printf_i+0xe8>
 800f3b8:	881d      	ldrh	r5, [r3, #0]
 800f3ba:	4854      	ldr	r0, [pc, #336]	; (800f50c <_printf_i+0x244>)
 800f3bc:	2f6f      	cmp	r7, #111	; 0x6f
 800f3be:	bf0c      	ite	eq
 800f3c0:	2308      	moveq	r3, #8
 800f3c2:	230a      	movne	r3, #10
 800f3c4:	2100      	movs	r1, #0
 800f3c6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f3ca:	6866      	ldr	r6, [r4, #4]
 800f3cc:	60a6      	str	r6, [r4, #8]
 800f3ce:	2e00      	cmp	r6, #0
 800f3d0:	bfa2      	ittt	ge
 800f3d2:	6821      	ldrge	r1, [r4, #0]
 800f3d4:	f021 0104 	bicge.w	r1, r1, #4
 800f3d8:	6021      	strge	r1, [r4, #0]
 800f3da:	b90d      	cbnz	r5, 800f3e0 <_printf_i+0x118>
 800f3dc:	2e00      	cmp	r6, #0
 800f3de:	d04d      	beq.n	800f47c <_printf_i+0x1b4>
 800f3e0:	4616      	mov	r6, r2
 800f3e2:	fbb5 f1f3 	udiv	r1, r5, r3
 800f3e6:	fb03 5711 	mls	r7, r3, r1, r5
 800f3ea:	5dc7      	ldrb	r7, [r0, r7]
 800f3ec:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800f3f0:	462f      	mov	r7, r5
 800f3f2:	42bb      	cmp	r3, r7
 800f3f4:	460d      	mov	r5, r1
 800f3f6:	d9f4      	bls.n	800f3e2 <_printf_i+0x11a>
 800f3f8:	2b08      	cmp	r3, #8
 800f3fa:	d10b      	bne.n	800f414 <_printf_i+0x14c>
 800f3fc:	6823      	ldr	r3, [r4, #0]
 800f3fe:	07df      	lsls	r7, r3, #31
 800f400:	d508      	bpl.n	800f414 <_printf_i+0x14c>
 800f402:	6923      	ldr	r3, [r4, #16]
 800f404:	6861      	ldr	r1, [r4, #4]
 800f406:	4299      	cmp	r1, r3
 800f408:	bfde      	ittt	le
 800f40a:	2330      	movle	r3, #48	; 0x30
 800f40c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800f410:	f106 36ff 	addle.w	r6, r6, #4294967295
 800f414:	1b92      	subs	r2, r2, r6
 800f416:	6122      	str	r2, [r4, #16]
 800f418:	f8cd a000 	str.w	sl, [sp]
 800f41c:	464b      	mov	r3, r9
 800f41e:	aa03      	add	r2, sp, #12
 800f420:	4621      	mov	r1, r4
 800f422:	4640      	mov	r0, r8
 800f424:	f7ff fee2 	bl	800f1ec <_printf_common>
 800f428:	3001      	adds	r0, #1
 800f42a:	d14c      	bne.n	800f4c6 <_printf_i+0x1fe>
 800f42c:	f04f 30ff 	mov.w	r0, #4294967295
 800f430:	b004      	add	sp, #16
 800f432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f436:	4835      	ldr	r0, [pc, #212]	; (800f50c <_printf_i+0x244>)
 800f438:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800f43c:	6823      	ldr	r3, [r4, #0]
 800f43e:	680e      	ldr	r6, [r1, #0]
 800f440:	061f      	lsls	r7, r3, #24
 800f442:	f856 5b04 	ldr.w	r5, [r6], #4
 800f446:	600e      	str	r6, [r1, #0]
 800f448:	d514      	bpl.n	800f474 <_printf_i+0x1ac>
 800f44a:	07d9      	lsls	r1, r3, #31
 800f44c:	bf44      	itt	mi
 800f44e:	f043 0320 	orrmi.w	r3, r3, #32
 800f452:	6023      	strmi	r3, [r4, #0]
 800f454:	b91d      	cbnz	r5, 800f45e <_printf_i+0x196>
 800f456:	6823      	ldr	r3, [r4, #0]
 800f458:	f023 0320 	bic.w	r3, r3, #32
 800f45c:	6023      	str	r3, [r4, #0]
 800f45e:	2310      	movs	r3, #16
 800f460:	e7b0      	b.n	800f3c4 <_printf_i+0xfc>
 800f462:	6823      	ldr	r3, [r4, #0]
 800f464:	f043 0320 	orr.w	r3, r3, #32
 800f468:	6023      	str	r3, [r4, #0]
 800f46a:	2378      	movs	r3, #120	; 0x78
 800f46c:	4828      	ldr	r0, [pc, #160]	; (800f510 <_printf_i+0x248>)
 800f46e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f472:	e7e3      	b.n	800f43c <_printf_i+0x174>
 800f474:	065e      	lsls	r6, r3, #25
 800f476:	bf48      	it	mi
 800f478:	b2ad      	uxthmi	r5, r5
 800f47a:	e7e6      	b.n	800f44a <_printf_i+0x182>
 800f47c:	4616      	mov	r6, r2
 800f47e:	e7bb      	b.n	800f3f8 <_printf_i+0x130>
 800f480:	680b      	ldr	r3, [r1, #0]
 800f482:	6826      	ldr	r6, [r4, #0]
 800f484:	6960      	ldr	r0, [r4, #20]
 800f486:	1d1d      	adds	r5, r3, #4
 800f488:	600d      	str	r5, [r1, #0]
 800f48a:	0635      	lsls	r5, r6, #24
 800f48c:	681b      	ldr	r3, [r3, #0]
 800f48e:	d501      	bpl.n	800f494 <_printf_i+0x1cc>
 800f490:	6018      	str	r0, [r3, #0]
 800f492:	e002      	b.n	800f49a <_printf_i+0x1d2>
 800f494:	0671      	lsls	r1, r6, #25
 800f496:	d5fb      	bpl.n	800f490 <_printf_i+0x1c8>
 800f498:	8018      	strh	r0, [r3, #0]
 800f49a:	2300      	movs	r3, #0
 800f49c:	6123      	str	r3, [r4, #16]
 800f49e:	4616      	mov	r6, r2
 800f4a0:	e7ba      	b.n	800f418 <_printf_i+0x150>
 800f4a2:	680b      	ldr	r3, [r1, #0]
 800f4a4:	1d1a      	adds	r2, r3, #4
 800f4a6:	600a      	str	r2, [r1, #0]
 800f4a8:	681e      	ldr	r6, [r3, #0]
 800f4aa:	6862      	ldr	r2, [r4, #4]
 800f4ac:	2100      	movs	r1, #0
 800f4ae:	4630      	mov	r0, r6
 800f4b0:	f7f0 feae 	bl	8000210 <memchr>
 800f4b4:	b108      	cbz	r0, 800f4ba <_printf_i+0x1f2>
 800f4b6:	1b80      	subs	r0, r0, r6
 800f4b8:	6060      	str	r0, [r4, #4]
 800f4ba:	6863      	ldr	r3, [r4, #4]
 800f4bc:	6123      	str	r3, [r4, #16]
 800f4be:	2300      	movs	r3, #0
 800f4c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f4c4:	e7a8      	b.n	800f418 <_printf_i+0x150>
 800f4c6:	6923      	ldr	r3, [r4, #16]
 800f4c8:	4632      	mov	r2, r6
 800f4ca:	4649      	mov	r1, r9
 800f4cc:	4640      	mov	r0, r8
 800f4ce:	47d0      	blx	sl
 800f4d0:	3001      	adds	r0, #1
 800f4d2:	d0ab      	beq.n	800f42c <_printf_i+0x164>
 800f4d4:	6823      	ldr	r3, [r4, #0]
 800f4d6:	079b      	lsls	r3, r3, #30
 800f4d8:	d413      	bmi.n	800f502 <_printf_i+0x23a>
 800f4da:	68e0      	ldr	r0, [r4, #12]
 800f4dc:	9b03      	ldr	r3, [sp, #12]
 800f4de:	4298      	cmp	r0, r3
 800f4e0:	bfb8      	it	lt
 800f4e2:	4618      	movlt	r0, r3
 800f4e4:	e7a4      	b.n	800f430 <_printf_i+0x168>
 800f4e6:	2301      	movs	r3, #1
 800f4e8:	4632      	mov	r2, r6
 800f4ea:	4649      	mov	r1, r9
 800f4ec:	4640      	mov	r0, r8
 800f4ee:	47d0      	blx	sl
 800f4f0:	3001      	adds	r0, #1
 800f4f2:	d09b      	beq.n	800f42c <_printf_i+0x164>
 800f4f4:	3501      	adds	r5, #1
 800f4f6:	68e3      	ldr	r3, [r4, #12]
 800f4f8:	9903      	ldr	r1, [sp, #12]
 800f4fa:	1a5b      	subs	r3, r3, r1
 800f4fc:	42ab      	cmp	r3, r5
 800f4fe:	dcf2      	bgt.n	800f4e6 <_printf_i+0x21e>
 800f500:	e7eb      	b.n	800f4da <_printf_i+0x212>
 800f502:	2500      	movs	r5, #0
 800f504:	f104 0619 	add.w	r6, r4, #25
 800f508:	e7f5      	b.n	800f4f6 <_printf_i+0x22e>
 800f50a:	bf00      	nop
 800f50c:	08013bde 	.word	0x08013bde
 800f510:	08013bef 	.word	0x08013bef

0800f514 <_scanf_float>:
 800f514:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f518:	b087      	sub	sp, #28
 800f51a:	4617      	mov	r7, r2
 800f51c:	9303      	str	r3, [sp, #12]
 800f51e:	688b      	ldr	r3, [r1, #8]
 800f520:	1e5a      	subs	r2, r3, #1
 800f522:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800f526:	bf83      	ittte	hi
 800f528:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800f52c:	195b      	addhi	r3, r3, r5
 800f52e:	9302      	strhi	r3, [sp, #8]
 800f530:	2300      	movls	r3, #0
 800f532:	bf86      	itte	hi
 800f534:	f240 135d 	movwhi	r3, #349	; 0x15d
 800f538:	608b      	strhi	r3, [r1, #8]
 800f53a:	9302      	strls	r3, [sp, #8]
 800f53c:	680b      	ldr	r3, [r1, #0]
 800f53e:	468b      	mov	fp, r1
 800f540:	2500      	movs	r5, #0
 800f542:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800f546:	f84b 3b1c 	str.w	r3, [fp], #28
 800f54a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800f54e:	4680      	mov	r8, r0
 800f550:	460c      	mov	r4, r1
 800f552:	465e      	mov	r6, fp
 800f554:	46aa      	mov	sl, r5
 800f556:	46a9      	mov	r9, r5
 800f558:	9501      	str	r5, [sp, #4]
 800f55a:	68a2      	ldr	r2, [r4, #8]
 800f55c:	b152      	cbz	r2, 800f574 <_scanf_float+0x60>
 800f55e:	683b      	ldr	r3, [r7, #0]
 800f560:	781b      	ldrb	r3, [r3, #0]
 800f562:	2b4e      	cmp	r3, #78	; 0x4e
 800f564:	d864      	bhi.n	800f630 <_scanf_float+0x11c>
 800f566:	2b40      	cmp	r3, #64	; 0x40
 800f568:	d83c      	bhi.n	800f5e4 <_scanf_float+0xd0>
 800f56a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800f56e:	b2c8      	uxtb	r0, r1
 800f570:	280e      	cmp	r0, #14
 800f572:	d93a      	bls.n	800f5ea <_scanf_float+0xd6>
 800f574:	f1b9 0f00 	cmp.w	r9, #0
 800f578:	d003      	beq.n	800f582 <_scanf_float+0x6e>
 800f57a:	6823      	ldr	r3, [r4, #0]
 800f57c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f580:	6023      	str	r3, [r4, #0]
 800f582:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f586:	f1ba 0f01 	cmp.w	sl, #1
 800f58a:	f200 8113 	bhi.w	800f7b4 <_scanf_float+0x2a0>
 800f58e:	455e      	cmp	r6, fp
 800f590:	f200 8105 	bhi.w	800f79e <_scanf_float+0x28a>
 800f594:	2501      	movs	r5, #1
 800f596:	4628      	mov	r0, r5
 800f598:	b007      	add	sp, #28
 800f59a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f59e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800f5a2:	2a0d      	cmp	r2, #13
 800f5a4:	d8e6      	bhi.n	800f574 <_scanf_float+0x60>
 800f5a6:	a101      	add	r1, pc, #4	; (adr r1, 800f5ac <_scanf_float+0x98>)
 800f5a8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800f5ac:	0800f6eb 	.word	0x0800f6eb
 800f5b0:	0800f575 	.word	0x0800f575
 800f5b4:	0800f575 	.word	0x0800f575
 800f5b8:	0800f575 	.word	0x0800f575
 800f5bc:	0800f74b 	.word	0x0800f74b
 800f5c0:	0800f723 	.word	0x0800f723
 800f5c4:	0800f575 	.word	0x0800f575
 800f5c8:	0800f575 	.word	0x0800f575
 800f5cc:	0800f6f9 	.word	0x0800f6f9
 800f5d0:	0800f575 	.word	0x0800f575
 800f5d4:	0800f575 	.word	0x0800f575
 800f5d8:	0800f575 	.word	0x0800f575
 800f5dc:	0800f575 	.word	0x0800f575
 800f5e0:	0800f6b1 	.word	0x0800f6b1
 800f5e4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800f5e8:	e7db      	b.n	800f5a2 <_scanf_float+0x8e>
 800f5ea:	290e      	cmp	r1, #14
 800f5ec:	d8c2      	bhi.n	800f574 <_scanf_float+0x60>
 800f5ee:	a001      	add	r0, pc, #4	; (adr r0, 800f5f4 <_scanf_float+0xe0>)
 800f5f0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800f5f4:	0800f6a3 	.word	0x0800f6a3
 800f5f8:	0800f575 	.word	0x0800f575
 800f5fc:	0800f6a3 	.word	0x0800f6a3
 800f600:	0800f737 	.word	0x0800f737
 800f604:	0800f575 	.word	0x0800f575
 800f608:	0800f651 	.word	0x0800f651
 800f60c:	0800f68d 	.word	0x0800f68d
 800f610:	0800f68d 	.word	0x0800f68d
 800f614:	0800f68d 	.word	0x0800f68d
 800f618:	0800f68d 	.word	0x0800f68d
 800f61c:	0800f68d 	.word	0x0800f68d
 800f620:	0800f68d 	.word	0x0800f68d
 800f624:	0800f68d 	.word	0x0800f68d
 800f628:	0800f68d 	.word	0x0800f68d
 800f62c:	0800f68d 	.word	0x0800f68d
 800f630:	2b6e      	cmp	r3, #110	; 0x6e
 800f632:	d809      	bhi.n	800f648 <_scanf_float+0x134>
 800f634:	2b60      	cmp	r3, #96	; 0x60
 800f636:	d8b2      	bhi.n	800f59e <_scanf_float+0x8a>
 800f638:	2b54      	cmp	r3, #84	; 0x54
 800f63a:	d077      	beq.n	800f72c <_scanf_float+0x218>
 800f63c:	2b59      	cmp	r3, #89	; 0x59
 800f63e:	d199      	bne.n	800f574 <_scanf_float+0x60>
 800f640:	2d07      	cmp	r5, #7
 800f642:	d197      	bne.n	800f574 <_scanf_float+0x60>
 800f644:	2508      	movs	r5, #8
 800f646:	e029      	b.n	800f69c <_scanf_float+0x188>
 800f648:	2b74      	cmp	r3, #116	; 0x74
 800f64a:	d06f      	beq.n	800f72c <_scanf_float+0x218>
 800f64c:	2b79      	cmp	r3, #121	; 0x79
 800f64e:	e7f6      	b.n	800f63e <_scanf_float+0x12a>
 800f650:	6821      	ldr	r1, [r4, #0]
 800f652:	05c8      	lsls	r0, r1, #23
 800f654:	d51a      	bpl.n	800f68c <_scanf_float+0x178>
 800f656:	9b02      	ldr	r3, [sp, #8]
 800f658:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800f65c:	6021      	str	r1, [r4, #0]
 800f65e:	f109 0901 	add.w	r9, r9, #1
 800f662:	b11b      	cbz	r3, 800f66c <_scanf_float+0x158>
 800f664:	3b01      	subs	r3, #1
 800f666:	3201      	adds	r2, #1
 800f668:	9302      	str	r3, [sp, #8]
 800f66a:	60a2      	str	r2, [r4, #8]
 800f66c:	68a3      	ldr	r3, [r4, #8]
 800f66e:	3b01      	subs	r3, #1
 800f670:	60a3      	str	r3, [r4, #8]
 800f672:	6923      	ldr	r3, [r4, #16]
 800f674:	3301      	adds	r3, #1
 800f676:	6123      	str	r3, [r4, #16]
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	3b01      	subs	r3, #1
 800f67c:	2b00      	cmp	r3, #0
 800f67e:	607b      	str	r3, [r7, #4]
 800f680:	f340 8084 	ble.w	800f78c <_scanf_float+0x278>
 800f684:	683b      	ldr	r3, [r7, #0]
 800f686:	3301      	adds	r3, #1
 800f688:	603b      	str	r3, [r7, #0]
 800f68a:	e766      	b.n	800f55a <_scanf_float+0x46>
 800f68c:	eb1a 0f05 	cmn.w	sl, r5
 800f690:	f47f af70 	bne.w	800f574 <_scanf_float+0x60>
 800f694:	6822      	ldr	r2, [r4, #0]
 800f696:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800f69a:	6022      	str	r2, [r4, #0]
 800f69c:	f806 3b01 	strb.w	r3, [r6], #1
 800f6a0:	e7e4      	b.n	800f66c <_scanf_float+0x158>
 800f6a2:	6822      	ldr	r2, [r4, #0]
 800f6a4:	0610      	lsls	r0, r2, #24
 800f6a6:	f57f af65 	bpl.w	800f574 <_scanf_float+0x60>
 800f6aa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800f6ae:	e7f4      	b.n	800f69a <_scanf_float+0x186>
 800f6b0:	f1ba 0f00 	cmp.w	sl, #0
 800f6b4:	d10e      	bne.n	800f6d4 <_scanf_float+0x1c0>
 800f6b6:	f1b9 0f00 	cmp.w	r9, #0
 800f6ba:	d10e      	bne.n	800f6da <_scanf_float+0x1c6>
 800f6bc:	6822      	ldr	r2, [r4, #0]
 800f6be:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800f6c2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800f6c6:	d108      	bne.n	800f6da <_scanf_float+0x1c6>
 800f6c8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800f6cc:	6022      	str	r2, [r4, #0]
 800f6ce:	f04f 0a01 	mov.w	sl, #1
 800f6d2:	e7e3      	b.n	800f69c <_scanf_float+0x188>
 800f6d4:	f1ba 0f02 	cmp.w	sl, #2
 800f6d8:	d055      	beq.n	800f786 <_scanf_float+0x272>
 800f6da:	2d01      	cmp	r5, #1
 800f6dc:	d002      	beq.n	800f6e4 <_scanf_float+0x1d0>
 800f6de:	2d04      	cmp	r5, #4
 800f6e0:	f47f af48 	bne.w	800f574 <_scanf_float+0x60>
 800f6e4:	3501      	adds	r5, #1
 800f6e6:	b2ed      	uxtb	r5, r5
 800f6e8:	e7d8      	b.n	800f69c <_scanf_float+0x188>
 800f6ea:	f1ba 0f01 	cmp.w	sl, #1
 800f6ee:	f47f af41 	bne.w	800f574 <_scanf_float+0x60>
 800f6f2:	f04f 0a02 	mov.w	sl, #2
 800f6f6:	e7d1      	b.n	800f69c <_scanf_float+0x188>
 800f6f8:	b97d      	cbnz	r5, 800f71a <_scanf_float+0x206>
 800f6fa:	f1b9 0f00 	cmp.w	r9, #0
 800f6fe:	f47f af3c 	bne.w	800f57a <_scanf_float+0x66>
 800f702:	6822      	ldr	r2, [r4, #0]
 800f704:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800f708:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800f70c:	f47f af39 	bne.w	800f582 <_scanf_float+0x6e>
 800f710:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800f714:	6022      	str	r2, [r4, #0]
 800f716:	2501      	movs	r5, #1
 800f718:	e7c0      	b.n	800f69c <_scanf_float+0x188>
 800f71a:	2d03      	cmp	r5, #3
 800f71c:	d0e2      	beq.n	800f6e4 <_scanf_float+0x1d0>
 800f71e:	2d05      	cmp	r5, #5
 800f720:	e7de      	b.n	800f6e0 <_scanf_float+0x1cc>
 800f722:	2d02      	cmp	r5, #2
 800f724:	f47f af26 	bne.w	800f574 <_scanf_float+0x60>
 800f728:	2503      	movs	r5, #3
 800f72a:	e7b7      	b.n	800f69c <_scanf_float+0x188>
 800f72c:	2d06      	cmp	r5, #6
 800f72e:	f47f af21 	bne.w	800f574 <_scanf_float+0x60>
 800f732:	2507      	movs	r5, #7
 800f734:	e7b2      	b.n	800f69c <_scanf_float+0x188>
 800f736:	6822      	ldr	r2, [r4, #0]
 800f738:	0591      	lsls	r1, r2, #22
 800f73a:	f57f af1b 	bpl.w	800f574 <_scanf_float+0x60>
 800f73e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800f742:	6022      	str	r2, [r4, #0]
 800f744:	f8cd 9004 	str.w	r9, [sp, #4]
 800f748:	e7a8      	b.n	800f69c <_scanf_float+0x188>
 800f74a:	6822      	ldr	r2, [r4, #0]
 800f74c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800f750:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800f754:	d006      	beq.n	800f764 <_scanf_float+0x250>
 800f756:	0550      	lsls	r0, r2, #21
 800f758:	f57f af0c 	bpl.w	800f574 <_scanf_float+0x60>
 800f75c:	f1b9 0f00 	cmp.w	r9, #0
 800f760:	f43f af0f 	beq.w	800f582 <_scanf_float+0x6e>
 800f764:	0591      	lsls	r1, r2, #22
 800f766:	bf58      	it	pl
 800f768:	9901      	ldrpl	r1, [sp, #4]
 800f76a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800f76e:	bf58      	it	pl
 800f770:	eba9 0101 	subpl.w	r1, r9, r1
 800f774:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800f778:	bf58      	it	pl
 800f77a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800f77e:	6022      	str	r2, [r4, #0]
 800f780:	f04f 0900 	mov.w	r9, #0
 800f784:	e78a      	b.n	800f69c <_scanf_float+0x188>
 800f786:	f04f 0a03 	mov.w	sl, #3
 800f78a:	e787      	b.n	800f69c <_scanf_float+0x188>
 800f78c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800f790:	4639      	mov	r1, r7
 800f792:	4640      	mov	r0, r8
 800f794:	4798      	blx	r3
 800f796:	2800      	cmp	r0, #0
 800f798:	f43f aedf 	beq.w	800f55a <_scanf_float+0x46>
 800f79c:	e6ea      	b.n	800f574 <_scanf_float+0x60>
 800f79e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f7a2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f7a6:	463a      	mov	r2, r7
 800f7a8:	4640      	mov	r0, r8
 800f7aa:	4798      	blx	r3
 800f7ac:	6923      	ldr	r3, [r4, #16]
 800f7ae:	3b01      	subs	r3, #1
 800f7b0:	6123      	str	r3, [r4, #16]
 800f7b2:	e6ec      	b.n	800f58e <_scanf_float+0x7a>
 800f7b4:	1e6b      	subs	r3, r5, #1
 800f7b6:	2b06      	cmp	r3, #6
 800f7b8:	d825      	bhi.n	800f806 <_scanf_float+0x2f2>
 800f7ba:	2d02      	cmp	r5, #2
 800f7bc:	d836      	bhi.n	800f82c <_scanf_float+0x318>
 800f7be:	455e      	cmp	r6, fp
 800f7c0:	f67f aee8 	bls.w	800f594 <_scanf_float+0x80>
 800f7c4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f7c8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f7cc:	463a      	mov	r2, r7
 800f7ce:	4640      	mov	r0, r8
 800f7d0:	4798      	blx	r3
 800f7d2:	6923      	ldr	r3, [r4, #16]
 800f7d4:	3b01      	subs	r3, #1
 800f7d6:	6123      	str	r3, [r4, #16]
 800f7d8:	e7f1      	b.n	800f7be <_scanf_float+0x2aa>
 800f7da:	9802      	ldr	r0, [sp, #8]
 800f7dc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f7e0:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800f7e4:	9002      	str	r0, [sp, #8]
 800f7e6:	463a      	mov	r2, r7
 800f7e8:	4640      	mov	r0, r8
 800f7ea:	4798      	blx	r3
 800f7ec:	6923      	ldr	r3, [r4, #16]
 800f7ee:	3b01      	subs	r3, #1
 800f7f0:	6123      	str	r3, [r4, #16]
 800f7f2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f7f6:	fa5f fa8a 	uxtb.w	sl, sl
 800f7fa:	f1ba 0f02 	cmp.w	sl, #2
 800f7fe:	d1ec      	bne.n	800f7da <_scanf_float+0x2c6>
 800f800:	3d03      	subs	r5, #3
 800f802:	b2ed      	uxtb	r5, r5
 800f804:	1b76      	subs	r6, r6, r5
 800f806:	6823      	ldr	r3, [r4, #0]
 800f808:	05da      	lsls	r2, r3, #23
 800f80a:	d52f      	bpl.n	800f86c <_scanf_float+0x358>
 800f80c:	055b      	lsls	r3, r3, #21
 800f80e:	d510      	bpl.n	800f832 <_scanf_float+0x31e>
 800f810:	455e      	cmp	r6, fp
 800f812:	f67f aebf 	bls.w	800f594 <_scanf_float+0x80>
 800f816:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f81a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f81e:	463a      	mov	r2, r7
 800f820:	4640      	mov	r0, r8
 800f822:	4798      	blx	r3
 800f824:	6923      	ldr	r3, [r4, #16]
 800f826:	3b01      	subs	r3, #1
 800f828:	6123      	str	r3, [r4, #16]
 800f82a:	e7f1      	b.n	800f810 <_scanf_float+0x2fc>
 800f82c:	46aa      	mov	sl, r5
 800f82e:	9602      	str	r6, [sp, #8]
 800f830:	e7df      	b.n	800f7f2 <_scanf_float+0x2de>
 800f832:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800f836:	6923      	ldr	r3, [r4, #16]
 800f838:	2965      	cmp	r1, #101	; 0x65
 800f83a:	f103 33ff 	add.w	r3, r3, #4294967295
 800f83e:	f106 35ff 	add.w	r5, r6, #4294967295
 800f842:	6123      	str	r3, [r4, #16]
 800f844:	d00c      	beq.n	800f860 <_scanf_float+0x34c>
 800f846:	2945      	cmp	r1, #69	; 0x45
 800f848:	d00a      	beq.n	800f860 <_scanf_float+0x34c>
 800f84a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f84e:	463a      	mov	r2, r7
 800f850:	4640      	mov	r0, r8
 800f852:	4798      	blx	r3
 800f854:	6923      	ldr	r3, [r4, #16]
 800f856:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800f85a:	3b01      	subs	r3, #1
 800f85c:	1eb5      	subs	r5, r6, #2
 800f85e:	6123      	str	r3, [r4, #16]
 800f860:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f864:	463a      	mov	r2, r7
 800f866:	4640      	mov	r0, r8
 800f868:	4798      	blx	r3
 800f86a:	462e      	mov	r6, r5
 800f86c:	6825      	ldr	r5, [r4, #0]
 800f86e:	f015 0510 	ands.w	r5, r5, #16
 800f872:	d158      	bne.n	800f926 <_scanf_float+0x412>
 800f874:	7035      	strb	r5, [r6, #0]
 800f876:	6823      	ldr	r3, [r4, #0]
 800f878:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800f87c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f880:	d11c      	bne.n	800f8bc <_scanf_float+0x3a8>
 800f882:	9b01      	ldr	r3, [sp, #4]
 800f884:	454b      	cmp	r3, r9
 800f886:	eba3 0209 	sub.w	r2, r3, r9
 800f88a:	d124      	bne.n	800f8d6 <_scanf_float+0x3c2>
 800f88c:	2200      	movs	r2, #0
 800f88e:	4659      	mov	r1, fp
 800f890:	4640      	mov	r0, r8
 800f892:	f000 fe9b 	bl	80105cc <_strtod_r>
 800f896:	9b03      	ldr	r3, [sp, #12]
 800f898:	6821      	ldr	r1, [r4, #0]
 800f89a:	681b      	ldr	r3, [r3, #0]
 800f89c:	f011 0f02 	tst.w	r1, #2
 800f8a0:	ec57 6b10 	vmov	r6, r7, d0
 800f8a4:	f103 0204 	add.w	r2, r3, #4
 800f8a8:	d020      	beq.n	800f8ec <_scanf_float+0x3d8>
 800f8aa:	9903      	ldr	r1, [sp, #12]
 800f8ac:	600a      	str	r2, [r1, #0]
 800f8ae:	681b      	ldr	r3, [r3, #0]
 800f8b0:	e9c3 6700 	strd	r6, r7, [r3]
 800f8b4:	68e3      	ldr	r3, [r4, #12]
 800f8b6:	3301      	adds	r3, #1
 800f8b8:	60e3      	str	r3, [r4, #12]
 800f8ba:	e66c      	b.n	800f596 <_scanf_float+0x82>
 800f8bc:	9b04      	ldr	r3, [sp, #16]
 800f8be:	2b00      	cmp	r3, #0
 800f8c0:	d0e4      	beq.n	800f88c <_scanf_float+0x378>
 800f8c2:	9905      	ldr	r1, [sp, #20]
 800f8c4:	230a      	movs	r3, #10
 800f8c6:	462a      	mov	r2, r5
 800f8c8:	3101      	adds	r1, #1
 800f8ca:	4640      	mov	r0, r8
 800f8cc:	f000 ff08 	bl	80106e0 <_strtol_r>
 800f8d0:	9b04      	ldr	r3, [sp, #16]
 800f8d2:	9e05      	ldr	r6, [sp, #20]
 800f8d4:	1ac2      	subs	r2, r0, r3
 800f8d6:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800f8da:	429e      	cmp	r6, r3
 800f8dc:	bf28      	it	cs
 800f8de:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800f8e2:	4912      	ldr	r1, [pc, #72]	; (800f92c <_scanf_float+0x418>)
 800f8e4:	4630      	mov	r0, r6
 800f8e6:	f000 f82b 	bl	800f940 <siprintf>
 800f8ea:	e7cf      	b.n	800f88c <_scanf_float+0x378>
 800f8ec:	f011 0f04 	tst.w	r1, #4
 800f8f0:	9903      	ldr	r1, [sp, #12]
 800f8f2:	600a      	str	r2, [r1, #0]
 800f8f4:	d1db      	bne.n	800f8ae <_scanf_float+0x39a>
 800f8f6:	f8d3 8000 	ldr.w	r8, [r3]
 800f8fa:	ee10 2a10 	vmov	r2, s0
 800f8fe:	ee10 0a10 	vmov	r0, s0
 800f902:	463b      	mov	r3, r7
 800f904:	4639      	mov	r1, r7
 800f906:	f7f1 f929 	bl	8000b5c <__aeabi_dcmpun>
 800f90a:	b128      	cbz	r0, 800f918 <_scanf_float+0x404>
 800f90c:	4808      	ldr	r0, [pc, #32]	; (800f930 <_scanf_float+0x41c>)
 800f90e:	f000 f811 	bl	800f934 <nanf>
 800f912:	ed88 0a00 	vstr	s0, [r8]
 800f916:	e7cd      	b.n	800f8b4 <_scanf_float+0x3a0>
 800f918:	4630      	mov	r0, r6
 800f91a:	4639      	mov	r1, r7
 800f91c:	f7f1 f97c 	bl	8000c18 <__aeabi_d2f>
 800f920:	f8c8 0000 	str.w	r0, [r8]
 800f924:	e7c6      	b.n	800f8b4 <_scanf_float+0x3a0>
 800f926:	2500      	movs	r5, #0
 800f928:	e635      	b.n	800f596 <_scanf_float+0x82>
 800f92a:	bf00      	nop
 800f92c:	08013c00 	.word	0x08013c00
 800f930:	08014018 	.word	0x08014018

0800f934 <nanf>:
 800f934:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800f93c <nanf+0x8>
 800f938:	4770      	bx	lr
 800f93a:	bf00      	nop
 800f93c:	7fc00000 	.word	0x7fc00000

0800f940 <siprintf>:
 800f940:	b40e      	push	{r1, r2, r3}
 800f942:	b500      	push	{lr}
 800f944:	b09c      	sub	sp, #112	; 0x70
 800f946:	ab1d      	add	r3, sp, #116	; 0x74
 800f948:	9002      	str	r0, [sp, #8]
 800f94a:	9006      	str	r0, [sp, #24]
 800f94c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f950:	4809      	ldr	r0, [pc, #36]	; (800f978 <siprintf+0x38>)
 800f952:	9107      	str	r1, [sp, #28]
 800f954:	9104      	str	r1, [sp, #16]
 800f956:	4909      	ldr	r1, [pc, #36]	; (800f97c <siprintf+0x3c>)
 800f958:	f853 2b04 	ldr.w	r2, [r3], #4
 800f95c:	9105      	str	r1, [sp, #20]
 800f95e:	6800      	ldr	r0, [r0, #0]
 800f960:	9301      	str	r3, [sp, #4]
 800f962:	a902      	add	r1, sp, #8
 800f964:	f002 fe96 	bl	8012694 <_svfiprintf_r>
 800f968:	9b02      	ldr	r3, [sp, #8]
 800f96a:	2200      	movs	r2, #0
 800f96c:	701a      	strb	r2, [r3, #0]
 800f96e:	b01c      	add	sp, #112	; 0x70
 800f970:	f85d eb04 	ldr.w	lr, [sp], #4
 800f974:	b003      	add	sp, #12
 800f976:	4770      	bx	lr
 800f978:	20000044 	.word	0x20000044
 800f97c:	ffff0208 	.word	0xffff0208

0800f980 <sulp>:
 800f980:	b570      	push	{r4, r5, r6, lr}
 800f982:	4604      	mov	r4, r0
 800f984:	460d      	mov	r5, r1
 800f986:	ec45 4b10 	vmov	d0, r4, r5
 800f98a:	4616      	mov	r6, r2
 800f98c:	f002 fc1e 	bl	80121cc <__ulp>
 800f990:	ec51 0b10 	vmov	r0, r1, d0
 800f994:	b17e      	cbz	r6, 800f9b6 <sulp+0x36>
 800f996:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800f99a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800f99e:	2b00      	cmp	r3, #0
 800f9a0:	dd09      	ble.n	800f9b6 <sulp+0x36>
 800f9a2:	051b      	lsls	r3, r3, #20
 800f9a4:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800f9a8:	2400      	movs	r4, #0
 800f9aa:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800f9ae:	4622      	mov	r2, r4
 800f9b0:	462b      	mov	r3, r5
 800f9b2:	f7f0 fe39 	bl	8000628 <__aeabi_dmul>
 800f9b6:	bd70      	pop	{r4, r5, r6, pc}

0800f9b8 <_strtod_l>:
 800f9b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f9bc:	b0a3      	sub	sp, #140	; 0x8c
 800f9be:	461f      	mov	r7, r3
 800f9c0:	2300      	movs	r3, #0
 800f9c2:	931e      	str	r3, [sp, #120]	; 0x78
 800f9c4:	4ba4      	ldr	r3, [pc, #656]	; (800fc58 <_strtod_l+0x2a0>)
 800f9c6:	9219      	str	r2, [sp, #100]	; 0x64
 800f9c8:	681b      	ldr	r3, [r3, #0]
 800f9ca:	9307      	str	r3, [sp, #28]
 800f9cc:	4604      	mov	r4, r0
 800f9ce:	4618      	mov	r0, r3
 800f9d0:	4688      	mov	r8, r1
 800f9d2:	f7f0 fc15 	bl	8000200 <strlen>
 800f9d6:	f04f 0a00 	mov.w	sl, #0
 800f9da:	4605      	mov	r5, r0
 800f9dc:	f04f 0b00 	mov.w	fp, #0
 800f9e0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800f9e4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800f9e6:	781a      	ldrb	r2, [r3, #0]
 800f9e8:	2a2b      	cmp	r2, #43	; 0x2b
 800f9ea:	d04c      	beq.n	800fa86 <_strtod_l+0xce>
 800f9ec:	d839      	bhi.n	800fa62 <_strtod_l+0xaa>
 800f9ee:	2a0d      	cmp	r2, #13
 800f9f0:	d832      	bhi.n	800fa58 <_strtod_l+0xa0>
 800f9f2:	2a08      	cmp	r2, #8
 800f9f4:	d832      	bhi.n	800fa5c <_strtod_l+0xa4>
 800f9f6:	2a00      	cmp	r2, #0
 800f9f8:	d03c      	beq.n	800fa74 <_strtod_l+0xbc>
 800f9fa:	2300      	movs	r3, #0
 800f9fc:	930e      	str	r3, [sp, #56]	; 0x38
 800f9fe:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800fa00:	7833      	ldrb	r3, [r6, #0]
 800fa02:	2b30      	cmp	r3, #48	; 0x30
 800fa04:	f040 80b4 	bne.w	800fb70 <_strtod_l+0x1b8>
 800fa08:	7873      	ldrb	r3, [r6, #1]
 800fa0a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800fa0e:	2b58      	cmp	r3, #88	; 0x58
 800fa10:	d16c      	bne.n	800faec <_strtod_l+0x134>
 800fa12:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fa14:	9301      	str	r3, [sp, #4]
 800fa16:	ab1e      	add	r3, sp, #120	; 0x78
 800fa18:	9702      	str	r7, [sp, #8]
 800fa1a:	9300      	str	r3, [sp, #0]
 800fa1c:	4a8f      	ldr	r2, [pc, #572]	; (800fc5c <_strtod_l+0x2a4>)
 800fa1e:	ab1f      	add	r3, sp, #124	; 0x7c
 800fa20:	a91d      	add	r1, sp, #116	; 0x74
 800fa22:	4620      	mov	r0, r4
 800fa24:	f001 fd40 	bl	80114a8 <__gethex>
 800fa28:	f010 0707 	ands.w	r7, r0, #7
 800fa2c:	4605      	mov	r5, r0
 800fa2e:	d005      	beq.n	800fa3c <_strtod_l+0x84>
 800fa30:	2f06      	cmp	r7, #6
 800fa32:	d12a      	bne.n	800fa8a <_strtod_l+0xd2>
 800fa34:	3601      	adds	r6, #1
 800fa36:	2300      	movs	r3, #0
 800fa38:	961d      	str	r6, [sp, #116]	; 0x74
 800fa3a:	930e      	str	r3, [sp, #56]	; 0x38
 800fa3c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800fa3e:	2b00      	cmp	r3, #0
 800fa40:	f040 8596 	bne.w	8010570 <_strtod_l+0xbb8>
 800fa44:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fa46:	b1db      	cbz	r3, 800fa80 <_strtod_l+0xc8>
 800fa48:	4652      	mov	r2, sl
 800fa4a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800fa4e:	ec43 2b10 	vmov	d0, r2, r3
 800fa52:	b023      	add	sp, #140	; 0x8c
 800fa54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa58:	2a20      	cmp	r2, #32
 800fa5a:	d1ce      	bne.n	800f9fa <_strtod_l+0x42>
 800fa5c:	3301      	adds	r3, #1
 800fa5e:	931d      	str	r3, [sp, #116]	; 0x74
 800fa60:	e7c0      	b.n	800f9e4 <_strtod_l+0x2c>
 800fa62:	2a2d      	cmp	r2, #45	; 0x2d
 800fa64:	d1c9      	bne.n	800f9fa <_strtod_l+0x42>
 800fa66:	2201      	movs	r2, #1
 800fa68:	920e      	str	r2, [sp, #56]	; 0x38
 800fa6a:	1c5a      	adds	r2, r3, #1
 800fa6c:	921d      	str	r2, [sp, #116]	; 0x74
 800fa6e:	785b      	ldrb	r3, [r3, #1]
 800fa70:	2b00      	cmp	r3, #0
 800fa72:	d1c4      	bne.n	800f9fe <_strtod_l+0x46>
 800fa74:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800fa76:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800fa7a:	2b00      	cmp	r3, #0
 800fa7c:	f040 8576 	bne.w	801056c <_strtod_l+0xbb4>
 800fa80:	4652      	mov	r2, sl
 800fa82:	465b      	mov	r3, fp
 800fa84:	e7e3      	b.n	800fa4e <_strtod_l+0x96>
 800fa86:	2200      	movs	r2, #0
 800fa88:	e7ee      	b.n	800fa68 <_strtod_l+0xb0>
 800fa8a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800fa8c:	b13a      	cbz	r2, 800fa9e <_strtod_l+0xe6>
 800fa8e:	2135      	movs	r1, #53	; 0x35
 800fa90:	a820      	add	r0, sp, #128	; 0x80
 800fa92:	f002 fca6 	bl	80123e2 <__copybits>
 800fa96:	991e      	ldr	r1, [sp, #120]	; 0x78
 800fa98:	4620      	mov	r0, r4
 800fa9a:	f002 f86b 	bl	8011b74 <_Bfree>
 800fa9e:	3f01      	subs	r7, #1
 800faa0:	2f05      	cmp	r7, #5
 800faa2:	d807      	bhi.n	800fab4 <_strtod_l+0xfc>
 800faa4:	e8df f007 	tbb	[pc, r7]
 800faa8:	1d180b0e 	.word	0x1d180b0e
 800faac:	030e      	.short	0x030e
 800faae:	f04f 0b00 	mov.w	fp, #0
 800fab2:	46da      	mov	sl, fp
 800fab4:	0728      	lsls	r0, r5, #28
 800fab6:	d5c1      	bpl.n	800fa3c <_strtod_l+0x84>
 800fab8:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800fabc:	e7be      	b.n	800fa3c <_strtod_l+0x84>
 800fabe:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 800fac2:	e7f7      	b.n	800fab4 <_strtod_l+0xfc>
 800fac4:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 800fac8:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800faca:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800face:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800fad2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800fad6:	e7ed      	b.n	800fab4 <_strtod_l+0xfc>
 800fad8:	f8df b184 	ldr.w	fp, [pc, #388]	; 800fc60 <_strtod_l+0x2a8>
 800fadc:	f04f 0a00 	mov.w	sl, #0
 800fae0:	e7e8      	b.n	800fab4 <_strtod_l+0xfc>
 800fae2:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800fae6:	f04f 3aff 	mov.w	sl, #4294967295
 800faea:	e7e3      	b.n	800fab4 <_strtod_l+0xfc>
 800faec:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800faee:	1c5a      	adds	r2, r3, #1
 800faf0:	921d      	str	r2, [sp, #116]	; 0x74
 800faf2:	785b      	ldrb	r3, [r3, #1]
 800faf4:	2b30      	cmp	r3, #48	; 0x30
 800faf6:	d0f9      	beq.n	800faec <_strtod_l+0x134>
 800faf8:	2b00      	cmp	r3, #0
 800fafa:	d09f      	beq.n	800fa3c <_strtod_l+0x84>
 800fafc:	2301      	movs	r3, #1
 800fafe:	f04f 0900 	mov.w	r9, #0
 800fb02:	9304      	str	r3, [sp, #16]
 800fb04:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800fb06:	930a      	str	r3, [sp, #40]	; 0x28
 800fb08:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800fb0c:	464f      	mov	r7, r9
 800fb0e:	220a      	movs	r2, #10
 800fb10:	981d      	ldr	r0, [sp, #116]	; 0x74
 800fb12:	7806      	ldrb	r6, [r0, #0]
 800fb14:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800fb18:	b2d9      	uxtb	r1, r3
 800fb1a:	2909      	cmp	r1, #9
 800fb1c:	d92a      	bls.n	800fb74 <_strtod_l+0x1bc>
 800fb1e:	9907      	ldr	r1, [sp, #28]
 800fb20:	462a      	mov	r2, r5
 800fb22:	f002 fed1 	bl	80128c8 <strncmp>
 800fb26:	b398      	cbz	r0, 800fb90 <_strtod_l+0x1d8>
 800fb28:	2000      	movs	r0, #0
 800fb2a:	4633      	mov	r3, r6
 800fb2c:	463d      	mov	r5, r7
 800fb2e:	9007      	str	r0, [sp, #28]
 800fb30:	4602      	mov	r2, r0
 800fb32:	2b65      	cmp	r3, #101	; 0x65
 800fb34:	d001      	beq.n	800fb3a <_strtod_l+0x182>
 800fb36:	2b45      	cmp	r3, #69	; 0x45
 800fb38:	d118      	bne.n	800fb6c <_strtod_l+0x1b4>
 800fb3a:	b91d      	cbnz	r5, 800fb44 <_strtod_l+0x18c>
 800fb3c:	9b04      	ldr	r3, [sp, #16]
 800fb3e:	4303      	orrs	r3, r0
 800fb40:	d098      	beq.n	800fa74 <_strtod_l+0xbc>
 800fb42:	2500      	movs	r5, #0
 800fb44:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 800fb48:	f108 0301 	add.w	r3, r8, #1
 800fb4c:	931d      	str	r3, [sp, #116]	; 0x74
 800fb4e:	f898 3001 	ldrb.w	r3, [r8, #1]
 800fb52:	2b2b      	cmp	r3, #43	; 0x2b
 800fb54:	d075      	beq.n	800fc42 <_strtod_l+0x28a>
 800fb56:	2b2d      	cmp	r3, #45	; 0x2d
 800fb58:	d07b      	beq.n	800fc52 <_strtod_l+0x29a>
 800fb5a:	f04f 0c00 	mov.w	ip, #0
 800fb5e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800fb62:	2909      	cmp	r1, #9
 800fb64:	f240 8082 	bls.w	800fc6c <_strtod_l+0x2b4>
 800fb68:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800fb6c:	2600      	movs	r6, #0
 800fb6e:	e09d      	b.n	800fcac <_strtod_l+0x2f4>
 800fb70:	2300      	movs	r3, #0
 800fb72:	e7c4      	b.n	800fafe <_strtod_l+0x146>
 800fb74:	2f08      	cmp	r7, #8
 800fb76:	bfd8      	it	le
 800fb78:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800fb7a:	f100 0001 	add.w	r0, r0, #1
 800fb7e:	bfda      	itte	le
 800fb80:	fb02 3301 	mlale	r3, r2, r1, r3
 800fb84:	9309      	strle	r3, [sp, #36]	; 0x24
 800fb86:	fb02 3909 	mlagt	r9, r2, r9, r3
 800fb8a:	3701      	adds	r7, #1
 800fb8c:	901d      	str	r0, [sp, #116]	; 0x74
 800fb8e:	e7bf      	b.n	800fb10 <_strtod_l+0x158>
 800fb90:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800fb92:	195a      	adds	r2, r3, r5
 800fb94:	921d      	str	r2, [sp, #116]	; 0x74
 800fb96:	5d5b      	ldrb	r3, [r3, r5]
 800fb98:	2f00      	cmp	r7, #0
 800fb9a:	d037      	beq.n	800fc0c <_strtod_l+0x254>
 800fb9c:	9007      	str	r0, [sp, #28]
 800fb9e:	463d      	mov	r5, r7
 800fba0:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800fba4:	2a09      	cmp	r2, #9
 800fba6:	d912      	bls.n	800fbce <_strtod_l+0x216>
 800fba8:	2201      	movs	r2, #1
 800fbaa:	e7c2      	b.n	800fb32 <_strtod_l+0x17a>
 800fbac:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800fbae:	1c5a      	adds	r2, r3, #1
 800fbb0:	921d      	str	r2, [sp, #116]	; 0x74
 800fbb2:	785b      	ldrb	r3, [r3, #1]
 800fbb4:	3001      	adds	r0, #1
 800fbb6:	2b30      	cmp	r3, #48	; 0x30
 800fbb8:	d0f8      	beq.n	800fbac <_strtod_l+0x1f4>
 800fbba:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800fbbe:	2a08      	cmp	r2, #8
 800fbc0:	f200 84db 	bhi.w	801057a <_strtod_l+0xbc2>
 800fbc4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800fbc6:	9007      	str	r0, [sp, #28]
 800fbc8:	2000      	movs	r0, #0
 800fbca:	920a      	str	r2, [sp, #40]	; 0x28
 800fbcc:	4605      	mov	r5, r0
 800fbce:	3b30      	subs	r3, #48	; 0x30
 800fbd0:	f100 0201 	add.w	r2, r0, #1
 800fbd4:	d014      	beq.n	800fc00 <_strtod_l+0x248>
 800fbd6:	9907      	ldr	r1, [sp, #28]
 800fbd8:	4411      	add	r1, r2
 800fbda:	9107      	str	r1, [sp, #28]
 800fbdc:	462a      	mov	r2, r5
 800fbde:	eb00 0e05 	add.w	lr, r0, r5
 800fbe2:	210a      	movs	r1, #10
 800fbe4:	4572      	cmp	r2, lr
 800fbe6:	d113      	bne.n	800fc10 <_strtod_l+0x258>
 800fbe8:	182a      	adds	r2, r5, r0
 800fbea:	2a08      	cmp	r2, #8
 800fbec:	f105 0501 	add.w	r5, r5, #1
 800fbf0:	4405      	add	r5, r0
 800fbf2:	dc1c      	bgt.n	800fc2e <_strtod_l+0x276>
 800fbf4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800fbf6:	220a      	movs	r2, #10
 800fbf8:	fb02 3301 	mla	r3, r2, r1, r3
 800fbfc:	9309      	str	r3, [sp, #36]	; 0x24
 800fbfe:	2200      	movs	r2, #0
 800fc00:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800fc02:	1c59      	adds	r1, r3, #1
 800fc04:	911d      	str	r1, [sp, #116]	; 0x74
 800fc06:	785b      	ldrb	r3, [r3, #1]
 800fc08:	4610      	mov	r0, r2
 800fc0a:	e7c9      	b.n	800fba0 <_strtod_l+0x1e8>
 800fc0c:	4638      	mov	r0, r7
 800fc0e:	e7d2      	b.n	800fbb6 <_strtod_l+0x1fe>
 800fc10:	2a08      	cmp	r2, #8
 800fc12:	dc04      	bgt.n	800fc1e <_strtod_l+0x266>
 800fc14:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800fc16:	434e      	muls	r6, r1
 800fc18:	9609      	str	r6, [sp, #36]	; 0x24
 800fc1a:	3201      	adds	r2, #1
 800fc1c:	e7e2      	b.n	800fbe4 <_strtod_l+0x22c>
 800fc1e:	f102 0c01 	add.w	ip, r2, #1
 800fc22:	f1bc 0f10 	cmp.w	ip, #16
 800fc26:	bfd8      	it	le
 800fc28:	fb01 f909 	mulle.w	r9, r1, r9
 800fc2c:	e7f5      	b.n	800fc1a <_strtod_l+0x262>
 800fc2e:	2d10      	cmp	r5, #16
 800fc30:	bfdc      	itt	le
 800fc32:	220a      	movle	r2, #10
 800fc34:	fb02 3909 	mlale	r9, r2, r9, r3
 800fc38:	e7e1      	b.n	800fbfe <_strtod_l+0x246>
 800fc3a:	2300      	movs	r3, #0
 800fc3c:	9307      	str	r3, [sp, #28]
 800fc3e:	2201      	movs	r2, #1
 800fc40:	e77c      	b.n	800fb3c <_strtod_l+0x184>
 800fc42:	f04f 0c00 	mov.w	ip, #0
 800fc46:	f108 0302 	add.w	r3, r8, #2
 800fc4a:	931d      	str	r3, [sp, #116]	; 0x74
 800fc4c:	f898 3002 	ldrb.w	r3, [r8, #2]
 800fc50:	e785      	b.n	800fb5e <_strtod_l+0x1a6>
 800fc52:	f04f 0c01 	mov.w	ip, #1
 800fc56:	e7f6      	b.n	800fc46 <_strtod_l+0x28e>
 800fc58:	08013e58 	.word	0x08013e58
 800fc5c:	08013c08 	.word	0x08013c08
 800fc60:	7ff00000 	.word	0x7ff00000
 800fc64:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800fc66:	1c59      	adds	r1, r3, #1
 800fc68:	911d      	str	r1, [sp, #116]	; 0x74
 800fc6a:	785b      	ldrb	r3, [r3, #1]
 800fc6c:	2b30      	cmp	r3, #48	; 0x30
 800fc6e:	d0f9      	beq.n	800fc64 <_strtod_l+0x2ac>
 800fc70:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 800fc74:	2908      	cmp	r1, #8
 800fc76:	f63f af79 	bhi.w	800fb6c <_strtod_l+0x1b4>
 800fc7a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800fc7e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800fc80:	9308      	str	r3, [sp, #32]
 800fc82:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800fc84:	1c59      	adds	r1, r3, #1
 800fc86:	911d      	str	r1, [sp, #116]	; 0x74
 800fc88:	785b      	ldrb	r3, [r3, #1]
 800fc8a:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 800fc8e:	2e09      	cmp	r6, #9
 800fc90:	d937      	bls.n	800fd02 <_strtod_l+0x34a>
 800fc92:	9e08      	ldr	r6, [sp, #32]
 800fc94:	1b89      	subs	r1, r1, r6
 800fc96:	2908      	cmp	r1, #8
 800fc98:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800fc9c:	dc02      	bgt.n	800fca4 <_strtod_l+0x2ec>
 800fc9e:	4576      	cmp	r6, lr
 800fca0:	bfa8      	it	ge
 800fca2:	4676      	movge	r6, lr
 800fca4:	f1bc 0f00 	cmp.w	ip, #0
 800fca8:	d000      	beq.n	800fcac <_strtod_l+0x2f4>
 800fcaa:	4276      	negs	r6, r6
 800fcac:	2d00      	cmp	r5, #0
 800fcae:	d14f      	bne.n	800fd50 <_strtod_l+0x398>
 800fcb0:	9904      	ldr	r1, [sp, #16]
 800fcb2:	4301      	orrs	r1, r0
 800fcb4:	f47f aec2 	bne.w	800fa3c <_strtod_l+0x84>
 800fcb8:	2a00      	cmp	r2, #0
 800fcba:	f47f aedb 	bne.w	800fa74 <_strtod_l+0xbc>
 800fcbe:	2b69      	cmp	r3, #105	; 0x69
 800fcc0:	d027      	beq.n	800fd12 <_strtod_l+0x35a>
 800fcc2:	dc24      	bgt.n	800fd0e <_strtod_l+0x356>
 800fcc4:	2b49      	cmp	r3, #73	; 0x49
 800fcc6:	d024      	beq.n	800fd12 <_strtod_l+0x35a>
 800fcc8:	2b4e      	cmp	r3, #78	; 0x4e
 800fcca:	f47f aed3 	bne.w	800fa74 <_strtod_l+0xbc>
 800fcce:	499e      	ldr	r1, [pc, #632]	; (800ff48 <_strtod_l+0x590>)
 800fcd0:	a81d      	add	r0, sp, #116	; 0x74
 800fcd2:	f001 fe41 	bl	8011958 <__match>
 800fcd6:	2800      	cmp	r0, #0
 800fcd8:	f43f aecc 	beq.w	800fa74 <_strtod_l+0xbc>
 800fcdc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800fcde:	781b      	ldrb	r3, [r3, #0]
 800fce0:	2b28      	cmp	r3, #40	; 0x28
 800fce2:	d12d      	bne.n	800fd40 <_strtod_l+0x388>
 800fce4:	4999      	ldr	r1, [pc, #612]	; (800ff4c <_strtod_l+0x594>)
 800fce6:	aa20      	add	r2, sp, #128	; 0x80
 800fce8:	a81d      	add	r0, sp, #116	; 0x74
 800fcea:	f001 fe49 	bl	8011980 <__hexnan>
 800fcee:	2805      	cmp	r0, #5
 800fcf0:	d126      	bne.n	800fd40 <_strtod_l+0x388>
 800fcf2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fcf4:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 800fcf8:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800fcfc:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800fd00:	e69c      	b.n	800fa3c <_strtod_l+0x84>
 800fd02:	210a      	movs	r1, #10
 800fd04:	fb01 3e0e 	mla	lr, r1, lr, r3
 800fd08:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800fd0c:	e7b9      	b.n	800fc82 <_strtod_l+0x2ca>
 800fd0e:	2b6e      	cmp	r3, #110	; 0x6e
 800fd10:	e7db      	b.n	800fcca <_strtod_l+0x312>
 800fd12:	498f      	ldr	r1, [pc, #572]	; (800ff50 <_strtod_l+0x598>)
 800fd14:	a81d      	add	r0, sp, #116	; 0x74
 800fd16:	f001 fe1f 	bl	8011958 <__match>
 800fd1a:	2800      	cmp	r0, #0
 800fd1c:	f43f aeaa 	beq.w	800fa74 <_strtod_l+0xbc>
 800fd20:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800fd22:	498c      	ldr	r1, [pc, #560]	; (800ff54 <_strtod_l+0x59c>)
 800fd24:	3b01      	subs	r3, #1
 800fd26:	a81d      	add	r0, sp, #116	; 0x74
 800fd28:	931d      	str	r3, [sp, #116]	; 0x74
 800fd2a:	f001 fe15 	bl	8011958 <__match>
 800fd2e:	b910      	cbnz	r0, 800fd36 <_strtod_l+0x37e>
 800fd30:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800fd32:	3301      	adds	r3, #1
 800fd34:	931d      	str	r3, [sp, #116]	; 0x74
 800fd36:	f8df b22c 	ldr.w	fp, [pc, #556]	; 800ff64 <_strtod_l+0x5ac>
 800fd3a:	f04f 0a00 	mov.w	sl, #0
 800fd3e:	e67d      	b.n	800fa3c <_strtod_l+0x84>
 800fd40:	4885      	ldr	r0, [pc, #532]	; (800ff58 <_strtod_l+0x5a0>)
 800fd42:	f002 fda9 	bl	8012898 <nan>
 800fd46:	ed8d 0b04 	vstr	d0, [sp, #16]
 800fd4a:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800fd4e:	e675      	b.n	800fa3c <_strtod_l+0x84>
 800fd50:	9b07      	ldr	r3, [sp, #28]
 800fd52:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fd54:	1af3      	subs	r3, r6, r3
 800fd56:	2f00      	cmp	r7, #0
 800fd58:	bf08      	it	eq
 800fd5a:	462f      	moveq	r7, r5
 800fd5c:	2d10      	cmp	r5, #16
 800fd5e:	9308      	str	r3, [sp, #32]
 800fd60:	46a8      	mov	r8, r5
 800fd62:	bfa8      	it	ge
 800fd64:	f04f 0810 	movge.w	r8, #16
 800fd68:	f7f0 fbe4 	bl	8000534 <__aeabi_ui2d>
 800fd6c:	2d09      	cmp	r5, #9
 800fd6e:	4682      	mov	sl, r0
 800fd70:	468b      	mov	fp, r1
 800fd72:	dd13      	ble.n	800fd9c <_strtod_l+0x3e4>
 800fd74:	4b79      	ldr	r3, [pc, #484]	; (800ff5c <_strtod_l+0x5a4>)
 800fd76:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800fd7a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800fd7e:	f7f0 fc53 	bl	8000628 <__aeabi_dmul>
 800fd82:	4682      	mov	sl, r0
 800fd84:	4648      	mov	r0, r9
 800fd86:	468b      	mov	fp, r1
 800fd88:	f7f0 fbd4 	bl	8000534 <__aeabi_ui2d>
 800fd8c:	4602      	mov	r2, r0
 800fd8e:	460b      	mov	r3, r1
 800fd90:	4650      	mov	r0, sl
 800fd92:	4659      	mov	r1, fp
 800fd94:	f7f0 fa92 	bl	80002bc <__adddf3>
 800fd98:	4682      	mov	sl, r0
 800fd9a:	468b      	mov	fp, r1
 800fd9c:	2d0f      	cmp	r5, #15
 800fd9e:	dc38      	bgt.n	800fe12 <_strtod_l+0x45a>
 800fda0:	9b08      	ldr	r3, [sp, #32]
 800fda2:	2b00      	cmp	r3, #0
 800fda4:	f43f ae4a 	beq.w	800fa3c <_strtod_l+0x84>
 800fda8:	dd24      	ble.n	800fdf4 <_strtod_l+0x43c>
 800fdaa:	2b16      	cmp	r3, #22
 800fdac:	dc0b      	bgt.n	800fdc6 <_strtod_l+0x40e>
 800fdae:	4d6b      	ldr	r5, [pc, #428]	; (800ff5c <_strtod_l+0x5a4>)
 800fdb0:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 800fdb4:	e9d5 0100 	ldrd	r0, r1, [r5]
 800fdb8:	4652      	mov	r2, sl
 800fdba:	465b      	mov	r3, fp
 800fdbc:	f7f0 fc34 	bl	8000628 <__aeabi_dmul>
 800fdc0:	4682      	mov	sl, r0
 800fdc2:	468b      	mov	fp, r1
 800fdc4:	e63a      	b.n	800fa3c <_strtod_l+0x84>
 800fdc6:	9a08      	ldr	r2, [sp, #32]
 800fdc8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800fdcc:	4293      	cmp	r3, r2
 800fdce:	db20      	blt.n	800fe12 <_strtod_l+0x45a>
 800fdd0:	4c62      	ldr	r4, [pc, #392]	; (800ff5c <_strtod_l+0x5a4>)
 800fdd2:	f1c5 050f 	rsb	r5, r5, #15
 800fdd6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800fdda:	4652      	mov	r2, sl
 800fddc:	465b      	mov	r3, fp
 800fdde:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fde2:	f7f0 fc21 	bl	8000628 <__aeabi_dmul>
 800fde6:	9b08      	ldr	r3, [sp, #32]
 800fde8:	1b5d      	subs	r5, r3, r5
 800fdea:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800fdee:	e9d4 2300 	ldrd	r2, r3, [r4]
 800fdf2:	e7e3      	b.n	800fdbc <_strtod_l+0x404>
 800fdf4:	9b08      	ldr	r3, [sp, #32]
 800fdf6:	3316      	adds	r3, #22
 800fdf8:	db0b      	blt.n	800fe12 <_strtod_l+0x45a>
 800fdfa:	9b07      	ldr	r3, [sp, #28]
 800fdfc:	4a57      	ldr	r2, [pc, #348]	; (800ff5c <_strtod_l+0x5a4>)
 800fdfe:	1b9e      	subs	r6, r3, r6
 800fe00:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800fe04:	e9d6 2300 	ldrd	r2, r3, [r6]
 800fe08:	4650      	mov	r0, sl
 800fe0a:	4659      	mov	r1, fp
 800fe0c:	f7f0 fd36 	bl	800087c <__aeabi_ddiv>
 800fe10:	e7d6      	b.n	800fdc0 <_strtod_l+0x408>
 800fe12:	9b08      	ldr	r3, [sp, #32]
 800fe14:	eba5 0808 	sub.w	r8, r5, r8
 800fe18:	4498      	add	r8, r3
 800fe1a:	f1b8 0f00 	cmp.w	r8, #0
 800fe1e:	dd71      	ble.n	800ff04 <_strtod_l+0x54c>
 800fe20:	f018 030f 	ands.w	r3, r8, #15
 800fe24:	d00a      	beq.n	800fe3c <_strtod_l+0x484>
 800fe26:	494d      	ldr	r1, [pc, #308]	; (800ff5c <_strtod_l+0x5a4>)
 800fe28:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800fe2c:	4652      	mov	r2, sl
 800fe2e:	465b      	mov	r3, fp
 800fe30:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fe34:	f7f0 fbf8 	bl	8000628 <__aeabi_dmul>
 800fe38:	4682      	mov	sl, r0
 800fe3a:	468b      	mov	fp, r1
 800fe3c:	f038 080f 	bics.w	r8, r8, #15
 800fe40:	d04d      	beq.n	800fede <_strtod_l+0x526>
 800fe42:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800fe46:	dd22      	ble.n	800fe8e <_strtod_l+0x4d6>
 800fe48:	2500      	movs	r5, #0
 800fe4a:	462e      	mov	r6, r5
 800fe4c:	9509      	str	r5, [sp, #36]	; 0x24
 800fe4e:	9507      	str	r5, [sp, #28]
 800fe50:	2322      	movs	r3, #34	; 0x22
 800fe52:	f8df b110 	ldr.w	fp, [pc, #272]	; 800ff64 <_strtod_l+0x5ac>
 800fe56:	6023      	str	r3, [r4, #0]
 800fe58:	f04f 0a00 	mov.w	sl, #0
 800fe5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fe5e:	2b00      	cmp	r3, #0
 800fe60:	f43f adec 	beq.w	800fa3c <_strtod_l+0x84>
 800fe64:	991e      	ldr	r1, [sp, #120]	; 0x78
 800fe66:	4620      	mov	r0, r4
 800fe68:	f001 fe84 	bl	8011b74 <_Bfree>
 800fe6c:	9907      	ldr	r1, [sp, #28]
 800fe6e:	4620      	mov	r0, r4
 800fe70:	f001 fe80 	bl	8011b74 <_Bfree>
 800fe74:	4631      	mov	r1, r6
 800fe76:	4620      	mov	r0, r4
 800fe78:	f001 fe7c 	bl	8011b74 <_Bfree>
 800fe7c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800fe7e:	4620      	mov	r0, r4
 800fe80:	f001 fe78 	bl	8011b74 <_Bfree>
 800fe84:	4629      	mov	r1, r5
 800fe86:	4620      	mov	r0, r4
 800fe88:	f001 fe74 	bl	8011b74 <_Bfree>
 800fe8c:	e5d6      	b.n	800fa3c <_strtod_l+0x84>
 800fe8e:	2300      	movs	r3, #0
 800fe90:	ea4f 1828 	mov.w	r8, r8, asr #4
 800fe94:	4650      	mov	r0, sl
 800fe96:	4659      	mov	r1, fp
 800fe98:	4699      	mov	r9, r3
 800fe9a:	f1b8 0f01 	cmp.w	r8, #1
 800fe9e:	dc21      	bgt.n	800fee4 <_strtod_l+0x52c>
 800fea0:	b10b      	cbz	r3, 800fea6 <_strtod_l+0x4ee>
 800fea2:	4682      	mov	sl, r0
 800fea4:	468b      	mov	fp, r1
 800fea6:	4b2e      	ldr	r3, [pc, #184]	; (800ff60 <_strtod_l+0x5a8>)
 800fea8:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800feac:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800feb0:	4652      	mov	r2, sl
 800feb2:	465b      	mov	r3, fp
 800feb4:	e9d9 0100 	ldrd	r0, r1, [r9]
 800feb8:	f7f0 fbb6 	bl	8000628 <__aeabi_dmul>
 800febc:	4b29      	ldr	r3, [pc, #164]	; (800ff64 <_strtod_l+0x5ac>)
 800febe:	460a      	mov	r2, r1
 800fec0:	400b      	ands	r3, r1
 800fec2:	4929      	ldr	r1, [pc, #164]	; (800ff68 <_strtod_l+0x5b0>)
 800fec4:	428b      	cmp	r3, r1
 800fec6:	4682      	mov	sl, r0
 800fec8:	d8be      	bhi.n	800fe48 <_strtod_l+0x490>
 800feca:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800fece:	428b      	cmp	r3, r1
 800fed0:	bf86      	itte	hi
 800fed2:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800ff6c <_strtod_l+0x5b4>
 800fed6:	f04f 3aff 	movhi.w	sl, #4294967295
 800feda:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800fede:	2300      	movs	r3, #0
 800fee0:	9304      	str	r3, [sp, #16]
 800fee2:	e081      	b.n	800ffe8 <_strtod_l+0x630>
 800fee4:	f018 0f01 	tst.w	r8, #1
 800fee8:	d007      	beq.n	800fefa <_strtod_l+0x542>
 800feea:	4b1d      	ldr	r3, [pc, #116]	; (800ff60 <_strtod_l+0x5a8>)
 800feec:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800fef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fef4:	f7f0 fb98 	bl	8000628 <__aeabi_dmul>
 800fef8:	2301      	movs	r3, #1
 800fefa:	f109 0901 	add.w	r9, r9, #1
 800fefe:	ea4f 0868 	mov.w	r8, r8, asr #1
 800ff02:	e7ca      	b.n	800fe9a <_strtod_l+0x4e2>
 800ff04:	d0eb      	beq.n	800fede <_strtod_l+0x526>
 800ff06:	f1c8 0800 	rsb	r8, r8, #0
 800ff0a:	f018 020f 	ands.w	r2, r8, #15
 800ff0e:	d00a      	beq.n	800ff26 <_strtod_l+0x56e>
 800ff10:	4b12      	ldr	r3, [pc, #72]	; (800ff5c <_strtod_l+0x5a4>)
 800ff12:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ff16:	4650      	mov	r0, sl
 800ff18:	4659      	mov	r1, fp
 800ff1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff1e:	f7f0 fcad 	bl	800087c <__aeabi_ddiv>
 800ff22:	4682      	mov	sl, r0
 800ff24:	468b      	mov	fp, r1
 800ff26:	ea5f 1828 	movs.w	r8, r8, asr #4
 800ff2a:	d0d8      	beq.n	800fede <_strtod_l+0x526>
 800ff2c:	f1b8 0f1f 	cmp.w	r8, #31
 800ff30:	dd1e      	ble.n	800ff70 <_strtod_l+0x5b8>
 800ff32:	2500      	movs	r5, #0
 800ff34:	462e      	mov	r6, r5
 800ff36:	9509      	str	r5, [sp, #36]	; 0x24
 800ff38:	9507      	str	r5, [sp, #28]
 800ff3a:	2322      	movs	r3, #34	; 0x22
 800ff3c:	f04f 0a00 	mov.w	sl, #0
 800ff40:	f04f 0b00 	mov.w	fp, #0
 800ff44:	6023      	str	r3, [r4, #0]
 800ff46:	e789      	b.n	800fe5c <_strtod_l+0x4a4>
 800ff48:	08013bd9 	.word	0x08013bd9
 800ff4c:	08013c1c 	.word	0x08013c1c
 800ff50:	08013bd1 	.word	0x08013bd1
 800ff54:	08013d5c 	.word	0x08013d5c
 800ff58:	08014018 	.word	0x08014018
 800ff5c:	08013ef8 	.word	0x08013ef8
 800ff60:	08013ed0 	.word	0x08013ed0
 800ff64:	7ff00000 	.word	0x7ff00000
 800ff68:	7ca00000 	.word	0x7ca00000
 800ff6c:	7fefffff 	.word	0x7fefffff
 800ff70:	f018 0310 	ands.w	r3, r8, #16
 800ff74:	bf18      	it	ne
 800ff76:	236a      	movne	r3, #106	; 0x6a
 800ff78:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8010330 <_strtod_l+0x978>
 800ff7c:	9304      	str	r3, [sp, #16]
 800ff7e:	4650      	mov	r0, sl
 800ff80:	4659      	mov	r1, fp
 800ff82:	2300      	movs	r3, #0
 800ff84:	f018 0f01 	tst.w	r8, #1
 800ff88:	d004      	beq.n	800ff94 <_strtod_l+0x5dc>
 800ff8a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800ff8e:	f7f0 fb4b 	bl	8000628 <__aeabi_dmul>
 800ff92:	2301      	movs	r3, #1
 800ff94:	ea5f 0868 	movs.w	r8, r8, asr #1
 800ff98:	f109 0908 	add.w	r9, r9, #8
 800ff9c:	d1f2      	bne.n	800ff84 <_strtod_l+0x5cc>
 800ff9e:	b10b      	cbz	r3, 800ffa4 <_strtod_l+0x5ec>
 800ffa0:	4682      	mov	sl, r0
 800ffa2:	468b      	mov	fp, r1
 800ffa4:	9b04      	ldr	r3, [sp, #16]
 800ffa6:	b1bb      	cbz	r3, 800ffd8 <_strtod_l+0x620>
 800ffa8:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800ffac:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800ffb0:	2b00      	cmp	r3, #0
 800ffb2:	4659      	mov	r1, fp
 800ffb4:	dd10      	ble.n	800ffd8 <_strtod_l+0x620>
 800ffb6:	2b1f      	cmp	r3, #31
 800ffb8:	f340 8128 	ble.w	801020c <_strtod_l+0x854>
 800ffbc:	2b34      	cmp	r3, #52	; 0x34
 800ffbe:	bfde      	ittt	le
 800ffc0:	3b20      	suble	r3, #32
 800ffc2:	f04f 32ff 	movle.w	r2, #4294967295
 800ffc6:	fa02 f303 	lslle.w	r3, r2, r3
 800ffca:	f04f 0a00 	mov.w	sl, #0
 800ffce:	bfcc      	ite	gt
 800ffd0:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800ffd4:	ea03 0b01 	andle.w	fp, r3, r1
 800ffd8:	2200      	movs	r2, #0
 800ffda:	2300      	movs	r3, #0
 800ffdc:	4650      	mov	r0, sl
 800ffde:	4659      	mov	r1, fp
 800ffe0:	f7f0 fd8a 	bl	8000af8 <__aeabi_dcmpeq>
 800ffe4:	2800      	cmp	r0, #0
 800ffe6:	d1a4      	bne.n	800ff32 <_strtod_l+0x57a>
 800ffe8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ffea:	9300      	str	r3, [sp, #0]
 800ffec:	990a      	ldr	r1, [sp, #40]	; 0x28
 800ffee:	462b      	mov	r3, r5
 800fff0:	463a      	mov	r2, r7
 800fff2:	4620      	mov	r0, r4
 800fff4:	f001 fe2a 	bl	8011c4c <__s2b>
 800fff8:	9009      	str	r0, [sp, #36]	; 0x24
 800fffa:	2800      	cmp	r0, #0
 800fffc:	f43f af24 	beq.w	800fe48 <_strtod_l+0x490>
 8010000:	9b07      	ldr	r3, [sp, #28]
 8010002:	1b9e      	subs	r6, r3, r6
 8010004:	9b08      	ldr	r3, [sp, #32]
 8010006:	2b00      	cmp	r3, #0
 8010008:	bfb4      	ite	lt
 801000a:	4633      	movlt	r3, r6
 801000c:	2300      	movge	r3, #0
 801000e:	9310      	str	r3, [sp, #64]	; 0x40
 8010010:	9b08      	ldr	r3, [sp, #32]
 8010012:	2500      	movs	r5, #0
 8010014:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8010018:	9318      	str	r3, [sp, #96]	; 0x60
 801001a:	462e      	mov	r6, r5
 801001c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801001e:	4620      	mov	r0, r4
 8010020:	6859      	ldr	r1, [r3, #4]
 8010022:	f001 fd67 	bl	8011af4 <_Balloc>
 8010026:	9007      	str	r0, [sp, #28]
 8010028:	2800      	cmp	r0, #0
 801002a:	f43f af11 	beq.w	800fe50 <_strtod_l+0x498>
 801002e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010030:	691a      	ldr	r2, [r3, #16]
 8010032:	3202      	adds	r2, #2
 8010034:	f103 010c 	add.w	r1, r3, #12
 8010038:	0092      	lsls	r2, r2, #2
 801003a:	300c      	adds	r0, #12
 801003c:	f7fe fdea 	bl	800ec14 <memcpy>
 8010040:	ec4b ab10 	vmov	d0, sl, fp
 8010044:	aa20      	add	r2, sp, #128	; 0x80
 8010046:	a91f      	add	r1, sp, #124	; 0x7c
 8010048:	4620      	mov	r0, r4
 801004a:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 801004e:	f002 f939 	bl	80122c4 <__d2b>
 8010052:	901e      	str	r0, [sp, #120]	; 0x78
 8010054:	2800      	cmp	r0, #0
 8010056:	f43f aefb 	beq.w	800fe50 <_strtod_l+0x498>
 801005a:	2101      	movs	r1, #1
 801005c:	4620      	mov	r0, r4
 801005e:	f001 fe8f 	bl	8011d80 <__i2b>
 8010062:	4606      	mov	r6, r0
 8010064:	2800      	cmp	r0, #0
 8010066:	f43f aef3 	beq.w	800fe50 <_strtod_l+0x498>
 801006a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801006c:	9904      	ldr	r1, [sp, #16]
 801006e:	2b00      	cmp	r3, #0
 8010070:	bfab      	itete	ge
 8010072:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 8010074:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 8010076:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8010078:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 801007c:	bfac      	ite	ge
 801007e:	eb03 0902 	addge.w	r9, r3, r2
 8010082:	1ad7      	sublt	r7, r2, r3
 8010084:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8010086:	eba3 0801 	sub.w	r8, r3, r1
 801008a:	4490      	add	r8, r2
 801008c:	4ba3      	ldr	r3, [pc, #652]	; (801031c <_strtod_l+0x964>)
 801008e:	f108 38ff 	add.w	r8, r8, #4294967295
 8010092:	4598      	cmp	r8, r3
 8010094:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8010098:	f280 80cc 	bge.w	8010234 <_strtod_l+0x87c>
 801009c:	eba3 0308 	sub.w	r3, r3, r8
 80100a0:	2b1f      	cmp	r3, #31
 80100a2:	eba2 0203 	sub.w	r2, r2, r3
 80100a6:	f04f 0101 	mov.w	r1, #1
 80100aa:	f300 80b6 	bgt.w	801021a <_strtod_l+0x862>
 80100ae:	fa01 f303 	lsl.w	r3, r1, r3
 80100b2:	9311      	str	r3, [sp, #68]	; 0x44
 80100b4:	2300      	movs	r3, #0
 80100b6:	930c      	str	r3, [sp, #48]	; 0x30
 80100b8:	eb09 0802 	add.w	r8, r9, r2
 80100bc:	9b04      	ldr	r3, [sp, #16]
 80100be:	45c1      	cmp	r9, r8
 80100c0:	4417      	add	r7, r2
 80100c2:	441f      	add	r7, r3
 80100c4:	464b      	mov	r3, r9
 80100c6:	bfa8      	it	ge
 80100c8:	4643      	movge	r3, r8
 80100ca:	42bb      	cmp	r3, r7
 80100cc:	bfa8      	it	ge
 80100ce:	463b      	movge	r3, r7
 80100d0:	2b00      	cmp	r3, #0
 80100d2:	bfc2      	ittt	gt
 80100d4:	eba8 0803 	subgt.w	r8, r8, r3
 80100d8:	1aff      	subgt	r7, r7, r3
 80100da:	eba9 0903 	subgt.w	r9, r9, r3
 80100de:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80100e0:	2b00      	cmp	r3, #0
 80100e2:	dd17      	ble.n	8010114 <_strtod_l+0x75c>
 80100e4:	4631      	mov	r1, r6
 80100e6:	461a      	mov	r2, r3
 80100e8:	4620      	mov	r0, r4
 80100ea:	f001 ff05 	bl	8011ef8 <__pow5mult>
 80100ee:	4606      	mov	r6, r0
 80100f0:	2800      	cmp	r0, #0
 80100f2:	f43f aead 	beq.w	800fe50 <_strtod_l+0x498>
 80100f6:	4601      	mov	r1, r0
 80100f8:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80100fa:	4620      	mov	r0, r4
 80100fc:	f001 fe56 	bl	8011dac <__multiply>
 8010100:	900f      	str	r0, [sp, #60]	; 0x3c
 8010102:	2800      	cmp	r0, #0
 8010104:	f43f aea4 	beq.w	800fe50 <_strtod_l+0x498>
 8010108:	991e      	ldr	r1, [sp, #120]	; 0x78
 801010a:	4620      	mov	r0, r4
 801010c:	f001 fd32 	bl	8011b74 <_Bfree>
 8010110:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010112:	931e      	str	r3, [sp, #120]	; 0x78
 8010114:	f1b8 0f00 	cmp.w	r8, #0
 8010118:	f300 8091 	bgt.w	801023e <_strtod_l+0x886>
 801011c:	9b08      	ldr	r3, [sp, #32]
 801011e:	2b00      	cmp	r3, #0
 8010120:	dd08      	ble.n	8010134 <_strtod_l+0x77c>
 8010122:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8010124:	9907      	ldr	r1, [sp, #28]
 8010126:	4620      	mov	r0, r4
 8010128:	f001 fee6 	bl	8011ef8 <__pow5mult>
 801012c:	9007      	str	r0, [sp, #28]
 801012e:	2800      	cmp	r0, #0
 8010130:	f43f ae8e 	beq.w	800fe50 <_strtod_l+0x498>
 8010134:	2f00      	cmp	r7, #0
 8010136:	dd08      	ble.n	801014a <_strtod_l+0x792>
 8010138:	9907      	ldr	r1, [sp, #28]
 801013a:	463a      	mov	r2, r7
 801013c:	4620      	mov	r0, r4
 801013e:	f001 ff35 	bl	8011fac <__lshift>
 8010142:	9007      	str	r0, [sp, #28]
 8010144:	2800      	cmp	r0, #0
 8010146:	f43f ae83 	beq.w	800fe50 <_strtod_l+0x498>
 801014a:	f1b9 0f00 	cmp.w	r9, #0
 801014e:	dd08      	ble.n	8010162 <_strtod_l+0x7aa>
 8010150:	4631      	mov	r1, r6
 8010152:	464a      	mov	r2, r9
 8010154:	4620      	mov	r0, r4
 8010156:	f001 ff29 	bl	8011fac <__lshift>
 801015a:	4606      	mov	r6, r0
 801015c:	2800      	cmp	r0, #0
 801015e:	f43f ae77 	beq.w	800fe50 <_strtod_l+0x498>
 8010162:	9a07      	ldr	r2, [sp, #28]
 8010164:	991e      	ldr	r1, [sp, #120]	; 0x78
 8010166:	4620      	mov	r0, r4
 8010168:	f001 ffa8 	bl	80120bc <__mdiff>
 801016c:	4605      	mov	r5, r0
 801016e:	2800      	cmp	r0, #0
 8010170:	f43f ae6e 	beq.w	800fe50 <_strtod_l+0x498>
 8010174:	68c3      	ldr	r3, [r0, #12]
 8010176:	930f      	str	r3, [sp, #60]	; 0x3c
 8010178:	2300      	movs	r3, #0
 801017a:	60c3      	str	r3, [r0, #12]
 801017c:	4631      	mov	r1, r6
 801017e:	f001 ff81 	bl	8012084 <__mcmp>
 8010182:	2800      	cmp	r0, #0
 8010184:	da65      	bge.n	8010252 <_strtod_l+0x89a>
 8010186:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010188:	ea53 030a 	orrs.w	r3, r3, sl
 801018c:	f040 8087 	bne.w	801029e <_strtod_l+0x8e6>
 8010190:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010194:	2b00      	cmp	r3, #0
 8010196:	f040 8082 	bne.w	801029e <_strtod_l+0x8e6>
 801019a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801019e:	0d1b      	lsrs	r3, r3, #20
 80101a0:	051b      	lsls	r3, r3, #20
 80101a2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80101a6:	d97a      	bls.n	801029e <_strtod_l+0x8e6>
 80101a8:	696b      	ldr	r3, [r5, #20]
 80101aa:	b913      	cbnz	r3, 80101b2 <_strtod_l+0x7fa>
 80101ac:	692b      	ldr	r3, [r5, #16]
 80101ae:	2b01      	cmp	r3, #1
 80101b0:	dd75      	ble.n	801029e <_strtod_l+0x8e6>
 80101b2:	4629      	mov	r1, r5
 80101b4:	2201      	movs	r2, #1
 80101b6:	4620      	mov	r0, r4
 80101b8:	f001 fef8 	bl	8011fac <__lshift>
 80101bc:	4631      	mov	r1, r6
 80101be:	4605      	mov	r5, r0
 80101c0:	f001 ff60 	bl	8012084 <__mcmp>
 80101c4:	2800      	cmp	r0, #0
 80101c6:	dd6a      	ble.n	801029e <_strtod_l+0x8e6>
 80101c8:	9904      	ldr	r1, [sp, #16]
 80101ca:	4a55      	ldr	r2, [pc, #340]	; (8010320 <_strtod_l+0x968>)
 80101cc:	465b      	mov	r3, fp
 80101ce:	2900      	cmp	r1, #0
 80101d0:	f000 8085 	beq.w	80102de <_strtod_l+0x926>
 80101d4:	ea02 010b 	and.w	r1, r2, fp
 80101d8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80101dc:	dc7f      	bgt.n	80102de <_strtod_l+0x926>
 80101de:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80101e2:	f77f aeaa 	ble.w	800ff3a <_strtod_l+0x582>
 80101e6:	4a4f      	ldr	r2, [pc, #316]	; (8010324 <_strtod_l+0x96c>)
 80101e8:	2300      	movs	r3, #0
 80101ea:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 80101ee:	4650      	mov	r0, sl
 80101f0:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 80101f4:	4659      	mov	r1, fp
 80101f6:	f7f0 fa17 	bl	8000628 <__aeabi_dmul>
 80101fa:	460b      	mov	r3, r1
 80101fc:	4303      	orrs	r3, r0
 80101fe:	bf08      	it	eq
 8010200:	2322      	moveq	r3, #34	; 0x22
 8010202:	4682      	mov	sl, r0
 8010204:	468b      	mov	fp, r1
 8010206:	bf08      	it	eq
 8010208:	6023      	streq	r3, [r4, #0]
 801020a:	e62b      	b.n	800fe64 <_strtod_l+0x4ac>
 801020c:	f04f 32ff 	mov.w	r2, #4294967295
 8010210:	fa02 f303 	lsl.w	r3, r2, r3
 8010214:	ea03 0a0a 	and.w	sl, r3, sl
 8010218:	e6de      	b.n	800ffd8 <_strtod_l+0x620>
 801021a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 801021e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8010222:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8010226:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 801022a:	fa01 f308 	lsl.w	r3, r1, r8
 801022e:	930c      	str	r3, [sp, #48]	; 0x30
 8010230:	9111      	str	r1, [sp, #68]	; 0x44
 8010232:	e741      	b.n	80100b8 <_strtod_l+0x700>
 8010234:	2300      	movs	r3, #0
 8010236:	930c      	str	r3, [sp, #48]	; 0x30
 8010238:	2301      	movs	r3, #1
 801023a:	9311      	str	r3, [sp, #68]	; 0x44
 801023c:	e73c      	b.n	80100b8 <_strtod_l+0x700>
 801023e:	991e      	ldr	r1, [sp, #120]	; 0x78
 8010240:	4642      	mov	r2, r8
 8010242:	4620      	mov	r0, r4
 8010244:	f001 feb2 	bl	8011fac <__lshift>
 8010248:	901e      	str	r0, [sp, #120]	; 0x78
 801024a:	2800      	cmp	r0, #0
 801024c:	f47f af66 	bne.w	801011c <_strtod_l+0x764>
 8010250:	e5fe      	b.n	800fe50 <_strtod_l+0x498>
 8010252:	465f      	mov	r7, fp
 8010254:	d16e      	bne.n	8010334 <_strtod_l+0x97c>
 8010256:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8010258:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801025c:	b342      	cbz	r2, 80102b0 <_strtod_l+0x8f8>
 801025e:	4a32      	ldr	r2, [pc, #200]	; (8010328 <_strtod_l+0x970>)
 8010260:	4293      	cmp	r3, r2
 8010262:	d128      	bne.n	80102b6 <_strtod_l+0x8fe>
 8010264:	9b04      	ldr	r3, [sp, #16]
 8010266:	4650      	mov	r0, sl
 8010268:	b1eb      	cbz	r3, 80102a6 <_strtod_l+0x8ee>
 801026a:	4a2d      	ldr	r2, [pc, #180]	; (8010320 <_strtod_l+0x968>)
 801026c:	403a      	ands	r2, r7
 801026e:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8010272:	f04f 31ff 	mov.w	r1, #4294967295
 8010276:	d819      	bhi.n	80102ac <_strtod_l+0x8f4>
 8010278:	0d12      	lsrs	r2, r2, #20
 801027a:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801027e:	fa01 f303 	lsl.w	r3, r1, r3
 8010282:	4298      	cmp	r0, r3
 8010284:	d117      	bne.n	80102b6 <_strtod_l+0x8fe>
 8010286:	4b29      	ldr	r3, [pc, #164]	; (801032c <_strtod_l+0x974>)
 8010288:	429f      	cmp	r7, r3
 801028a:	d102      	bne.n	8010292 <_strtod_l+0x8da>
 801028c:	3001      	adds	r0, #1
 801028e:	f43f addf 	beq.w	800fe50 <_strtod_l+0x498>
 8010292:	4b23      	ldr	r3, [pc, #140]	; (8010320 <_strtod_l+0x968>)
 8010294:	403b      	ands	r3, r7
 8010296:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 801029a:	f04f 0a00 	mov.w	sl, #0
 801029e:	9b04      	ldr	r3, [sp, #16]
 80102a0:	2b00      	cmp	r3, #0
 80102a2:	d1a0      	bne.n	80101e6 <_strtod_l+0x82e>
 80102a4:	e5de      	b.n	800fe64 <_strtod_l+0x4ac>
 80102a6:	f04f 33ff 	mov.w	r3, #4294967295
 80102aa:	e7ea      	b.n	8010282 <_strtod_l+0x8ca>
 80102ac:	460b      	mov	r3, r1
 80102ae:	e7e8      	b.n	8010282 <_strtod_l+0x8ca>
 80102b0:	ea53 030a 	orrs.w	r3, r3, sl
 80102b4:	d088      	beq.n	80101c8 <_strtod_l+0x810>
 80102b6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80102b8:	b1db      	cbz	r3, 80102f2 <_strtod_l+0x93a>
 80102ba:	423b      	tst	r3, r7
 80102bc:	d0ef      	beq.n	801029e <_strtod_l+0x8e6>
 80102be:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80102c0:	9a04      	ldr	r2, [sp, #16]
 80102c2:	4650      	mov	r0, sl
 80102c4:	4659      	mov	r1, fp
 80102c6:	b1c3      	cbz	r3, 80102fa <_strtod_l+0x942>
 80102c8:	f7ff fb5a 	bl	800f980 <sulp>
 80102cc:	4602      	mov	r2, r0
 80102ce:	460b      	mov	r3, r1
 80102d0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80102d4:	f7ef fff2 	bl	80002bc <__adddf3>
 80102d8:	4682      	mov	sl, r0
 80102da:	468b      	mov	fp, r1
 80102dc:	e7df      	b.n	801029e <_strtod_l+0x8e6>
 80102de:	4013      	ands	r3, r2
 80102e0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80102e4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80102e8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80102ec:	f04f 3aff 	mov.w	sl, #4294967295
 80102f0:	e7d5      	b.n	801029e <_strtod_l+0x8e6>
 80102f2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80102f4:	ea13 0f0a 	tst.w	r3, sl
 80102f8:	e7e0      	b.n	80102bc <_strtod_l+0x904>
 80102fa:	f7ff fb41 	bl	800f980 <sulp>
 80102fe:	4602      	mov	r2, r0
 8010300:	460b      	mov	r3, r1
 8010302:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8010306:	f7ef ffd7 	bl	80002b8 <__aeabi_dsub>
 801030a:	2200      	movs	r2, #0
 801030c:	2300      	movs	r3, #0
 801030e:	4682      	mov	sl, r0
 8010310:	468b      	mov	fp, r1
 8010312:	f7f0 fbf1 	bl	8000af8 <__aeabi_dcmpeq>
 8010316:	2800      	cmp	r0, #0
 8010318:	d0c1      	beq.n	801029e <_strtod_l+0x8e6>
 801031a:	e60e      	b.n	800ff3a <_strtod_l+0x582>
 801031c:	fffffc02 	.word	0xfffffc02
 8010320:	7ff00000 	.word	0x7ff00000
 8010324:	39500000 	.word	0x39500000
 8010328:	000fffff 	.word	0x000fffff
 801032c:	7fefffff 	.word	0x7fefffff
 8010330:	08013c30 	.word	0x08013c30
 8010334:	4631      	mov	r1, r6
 8010336:	4628      	mov	r0, r5
 8010338:	f002 f820 	bl	801237c <__ratio>
 801033c:	ec59 8b10 	vmov	r8, r9, d0
 8010340:	ee10 0a10 	vmov	r0, s0
 8010344:	2200      	movs	r2, #0
 8010346:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801034a:	4649      	mov	r1, r9
 801034c:	f7f0 fbe8 	bl	8000b20 <__aeabi_dcmple>
 8010350:	2800      	cmp	r0, #0
 8010352:	d07c      	beq.n	801044e <_strtod_l+0xa96>
 8010354:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010356:	2b00      	cmp	r3, #0
 8010358:	d04c      	beq.n	80103f4 <_strtod_l+0xa3c>
 801035a:	4b95      	ldr	r3, [pc, #596]	; (80105b0 <_strtod_l+0xbf8>)
 801035c:	2200      	movs	r2, #0
 801035e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8010362:	f8df 924c 	ldr.w	r9, [pc, #588]	; 80105b0 <_strtod_l+0xbf8>
 8010366:	f04f 0800 	mov.w	r8, #0
 801036a:	4b92      	ldr	r3, [pc, #584]	; (80105b4 <_strtod_l+0xbfc>)
 801036c:	403b      	ands	r3, r7
 801036e:	9311      	str	r3, [sp, #68]	; 0x44
 8010370:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8010372:	4b91      	ldr	r3, [pc, #580]	; (80105b8 <_strtod_l+0xc00>)
 8010374:	429a      	cmp	r2, r3
 8010376:	f040 80b2 	bne.w	80104de <_strtod_l+0xb26>
 801037a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801037e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8010382:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8010386:	ec4b ab10 	vmov	d0, sl, fp
 801038a:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 801038e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8010392:	f001 ff1b 	bl	80121cc <__ulp>
 8010396:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801039a:	ec53 2b10 	vmov	r2, r3, d0
 801039e:	f7f0 f943 	bl	8000628 <__aeabi_dmul>
 80103a2:	4652      	mov	r2, sl
 80103a4:	465b      	mov	r3, fp
 80103a6:	f7ef ff89 	bl	80002bc <__adddf3>
 80103aa:	460b      	mov	r3, r1
 80103ac:	4981      	ldr	r1, [pc, #516]	; (80105b4 <_strtod_l+0xbfc>)
 80103ae:	4a83      	ldr	r2, [pc, #524]	; (80105bc <_strtod_l+0xc04>)
 80103b0:	4019      	ands	r1, r3
 80103b2:	4291      	cmp	r1, r2
 80103b4:	4682      	mov	sl, r0
 80103b6:	d95e      	bls.n	8010476 <_strtod_l+0xabe>
 80103b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80103ba:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80103be:	4293      	cmp	r3, r2
 80103c0:	d103      	bne.n	80103ca <_strtod_l+0xa12>
 80103c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80103c4:	3301      	adds	r3, #1
 80103c6:	f43f ad43 	beq.w	800fe50 <_strtod_l+0x498>
 80103ca:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 80105c8 <_strtod_l+0xc10>
 80103ce:	f04f 3aff 	mov.w	sl, #4294967295
 80103d2:	991e      	ldr	r1, [sp, #120]	; 0x78
 80103d4:	4620      	mov	r0, r4
 80103d6:	f001 fbcd 	bl	8011b74 <_Bfree>
 80103da:	9907      	ldr	r1, [sp, #28]
 80103dc:	4620      	mov	r0, r4
 80103de:	f001 fbc9 	bl	8011b74 <_Bfree>
 80103e2:	4631      	mov	r1, r6
 80103e4:	4620      	mov	r0, r4
 80103e6:	f001 fbc5 	bl	8011b74 <_Bfree>
 80103ea:	4629      	mov	r1, r5
 80103ec:	4620      	mov	r0, r4
 80103ee:	f001 fbc1 	bl	8011b74 <_Bfree>
 80103f2:	e613      	b.n	801001c <_strtod_l+0x664>
 80103f4:	f1ba 0f00 	cmp.w	sl, #0
 80103f8:	d11b      	bne.n	8010432 <_strtod_l+0xa7a>
 80103fa:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80103fe:	b9f3      	cbnz	r3, 801043e <_strtod_l+0xa86>
 8010400:	4b6b      	ldr	r3, [pc, #428]	; (80105b0 <_strtod_l+0xbf8>)
 8010402:	2200      	movs	r2, #0
 8010404:	4640      	mov	r0, r8
 8010406:	4649      	mov	r1, r9
 8010408:	f7f0 fb80 	bl	8000b0c <__aeabi_dcmplt>
 801040c:	b9d0      	cbnz	r0, 8010444 <_strtod_l+0xa8c>
 801040e:	4640      	mov	r0, r8
 8010410:	4649      	mov	r1, r9
 8010412:	4b6b      	ldr	r3, [pc, #428]	; (80105c0 <_strtod_l+0xc08>)
 8010414:	2200      	movs	r2, #0
 8010416:	f7f0 f907 	bl	8000628 <__aeabi_dmul>
 801041a:	4680      	mov	r8, r0
 801041c:	4689      	mov	r9, r1
 801041e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8010422:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 8010426:	931b      	str	r3, [sp, #108]	; 0x6c
 8010428:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 801042c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8010430:	e79b      	b.n	801036a <_strtod_l+0x9b2>
 8010432:	f1ba 0f01 	cmp.w	sl, #1
 8010436:	d102      	bne.n	801043e <_strtod_l+0xa86>
 8010438:	2f00      	cmp	r7, #0
 801043a:	f43f ad7e 	beq.w	800ff3a <_strtod_l+0x582>
 801043e:	4b61      	ldr	r3, [pc, #388]	; (80105c4 <_strtod_l+0xc0c>)
 8010440:	2200      	movs	r2, #0
 8010442:	e78c      	b.n	801035e <_strtod_l+0x9a6>
 8010444:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80105c0 <_strtod_l+0xc08>
 8010448:	f04f 0800 	mov.w	r8, #0
 801044c:	e7e7      	b.n	801041e <_strtod_l+0xa66>
 801044e:	4b5c      	ldr	r3, [pc, #368]	; (80105c0 <_strtod_l+0xc08>)
 8010450:	4640      	mov	r0, r8
 8010452:	4649      	mov	r1, r9
 8010454:	2200      	movs	r2, #0
 8010456:	f7f0 f8e7 	bl	8000628 <__aeabi_dmul>
 801045a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801045c:	4680      	mov	r8, r0
 801045e:	4689      	mov	r9, r1
 8010460:	b933      	cbnz	r3, 8010470 <_strtod_l+0xab8>
 8010462:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010466:	9012      	str	r0, [sp, #72]	; 0x48
 8010468:	9313      	str	r3, [sp, #76]	; 0x4c
 801046a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 801046e:	e7dd      	b.n	801042c <_strtod_l+0xa74>
 8010470:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 8010474:	e7f9      	b.n	801046a <_strtod_l+0xab2>
 8010476:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 801047a:	9b04      	ldr	r3, [sp, #16]
 801047c:	2b00      	cmp	r3, #0
 801047e:	d1a8      	bne.n	80103d2 <_strtod_l+0xa1a>
 8010480:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8010484:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8010486:	0d1b      	lsrs	r3, r3, #20
 8010488:	051b      	lsls	r3, r3, #20
 801048a:	429a      	cmp	r2, r3
 801048c:	d1a1      	bne.n	80103d2 <_strtod_l+0xa1a>
 801048e:	4640      	mov	r0, r8
 8010490:	4649      	mov	r1, r9
 8010492:	f7f0 fc29 	bl	8000ce8 <__aeabi_d2lz>
 8010496:	f7f0 f899 	bl	80005cc <__aeabi_l2d>
 801049a:	4602      	mov	r2, r0
 801049c:	460b      	mov	r3, r1
 801049e:	4640      	mov	r0, r8
 80104a0:	4649      	mov	r1, r9
 80104a2:	f7ef ff09 	bl	80002b8 <__aeabi_dsub>
 80104a6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80104a8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80104ac:	ea43 030a 	orr.w	r3, r3, sl
 80104b0:	4313      	orrs	r3, r2
 80104b2:	4680      	mov	r8, r0
 80104b4:	4689      	mov	r9, r1
 80104b6:	d053      	beq.n	8010560 <_strtod_l+0xba8>
 80104b8:	a335      	add	r3, pc, #212	; (adr r3, 8010590 <_strtod_l+0xbd8>)
 80104ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104be:	f7f0 fb25 	bl	8000b0c <__aeabi_dcmplt>
 80104c2:	2800      	cmp	r0, #0
 80104c4:	f47f acce 	bne.w	800fe64 <_strtod_l+0x4ac>
 80104c8:	a333      	add	r3, pc, #204	; (adr r3, 8010598 <_strtod_l+0xbe0>)
 80104ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104ce:	4640      	mov	r0, r8
 80104d0:	4649      	mov	r1, r9
 80104d2:	f7f0 fb39 	bl	8000b48 <__aeabi_dcmpgt>
 80104d6:	2800      	cmp	r0, #0
 80104d8:	f43f af7b 	beq.w	80103d2 <_strtod_l+0xa1a>
 80104dc:	e4c2      	b.n	800fe64 <_strtod_l+0x4ac>
 80104de:	9b04      	ldr	r3, [sp, #16]
 80104e0:	b333      	cbz	r3, 8010530 <_strtod_l+0xb78>
 80104e2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80104e4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80104e8:	d822      	bhi.n	8010530 <_strtod_l+0xb78>
 80104ea:	a32d      	add	r3, pc, #180	; (adr r3, 80105a0 <_strtod_l+0xbe8>)
 80104ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104f0:	4640      	mov	r0, r8
 80104f2:	4649      	mov	r1, r9
 80104f4:	f7f0 fb14 	bl	8000b20 <__aeabi_dcmple>
 80104f8:	b1a0      	cbz	r0, 8010524 <_strtod_l+0xb6c>
 80104fa:	4649      	mov	r1, r9
 80104fc:	4640      	mov	r0, r8
 80104fe:	f7f0 fb6b 	bl	8000bd8 <__aeabi_d2uiz>
 8010502:	2801      	cmp	r0, #1
 8010504:	bf38      	it	cc
 8010506:	2001      	movcc	r0, #1
 8010508:	f7f0 f814 	bl	8000534 <__aeabi_ui2d>
 801050c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801050e:	4680      	mov	r8, r0
 8010510:	4689      	mov	r9, r1
 8010512:	bb13      	cbnz	r3, 801055a <_strtod_l+0xba2>
 8010514:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010518:	9014      	str	r0, [sp, #80]	; 0x50
 801051a:	9315      	str	r3, [sp, #84]	; 0x54
 801051c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8010520:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8010524:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010526:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8010528:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 801052c:	1a9b      	subs	r3, r3, r2
 801052e:	930d      	str	r3, [sp, #52]	; 0x34
 8010530:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8010534:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8010538:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801053c:	f001 fe46 	bl	80121cc <__ulp>
 8010540:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8010544:	ec53 2b10 	vmov	r2, r3, d0
 8010548:	f7f0 f86e 	bl	8000628 <__aeabi_dmul>
 801054c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8010550:	f7ef feb4 	bl	80002bc <__adddf3>
 8010554:	4682      	mov	sl, r0
 8010556:	468b      	mov	fp, r1
 8010558:	e78f      	b.n	801047a <_strtod_l+0xac2>
 801055a:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 801055e:	e7dd      	b.n	801051c <_strtod_l+0xb64>
 8010560:	a311      	add	r3, pc, #68	; (adr r3, 80105a8 <_strtod_l+0xbf0>)
 8010562:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010566:	f7f0 fad1 	bl	8000b0c <__aeabi_dcmplt>
 801056a:	e7b4      	b.n	80104d6 <_strtod_l+0xb1e>
 801056c:	2300      	movs	r3, #0
 801056e:	930e      	str	r3, [sp, #56]	; 0x38
 8010570:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8010572:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8010574:	6013      	str	r3, [r2, #0]
 8010576:	f7ff ba65 	b.w	800fa44 <_strtod_l+0x8c>
 801057a:	2b65      	cmp	r3, #101	; 0x65
 801057c:	f43f ab5d 	beq.w	800fc3a <_strtod_l+0x282>
 8010580:	2b45      	cmp	r3, #69	; 0x45
 8010582:	f43f ab5a 	beq.w	800fc3a <_strtod_l+0x282>
 8010586:	2201      	movs	r2, #1
 8010588:	f7ff bb92 	b.w	800fcb0 <_strtod_l+0x2f8>
 801058c:	f3af 8000 	nop.w
 8010590:	94a03595 	.word	0x94a03595
 8010594:	3fdfffff 	.word	0x3fdfffff
 8010598:	35afe535 	.word	0x35afe535
 801059c:	3fe00000 	.word	0x3fe00000
 80105a0:	ffc00000 	.word	0xffc00000
 80105a4:	41dfffff 	.word	0x41dfffff
 80105a8:	94a03595 	.word	0x94a03595
 80105ac:	3fcfffff 	.word	0x3fcfffff
 80105b0:	3ff00000 	.word	0x3ff00000
 80105b4:	7ff00000 	.word	0x7ff00000
 80105b8:	7fe00000 	.word	0x7fe00000
 80105bc:	7c9fffff 	.word	0x7c9fffff
 80105c0:	3fe00000 	.word	0x3fe00000
 80105c4:	bff00000 	.word	0xbff00000
 80105c8:	7fefffff 	.word	0x7fefffff

080105cc <_strtod_r>:
 80105cc:	4b01      	ldr	r3, [pc, #4]	; (80105d4 <_strtod_r+0x8>)
 80105ce:	f7ff b9f3 	b.w	800f9b8 <_strtod_l>
 80105d2:	bf00      	nop
 80105d4:	200000ac 	.word	0x200000ac

080105d8 <_strtol_l.isra.0>:
 80105d8:	2b01      	cmp	r3, #1
 80105da:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80105de:	d001      	beq.n	80105e4 <_strtol_l.isra.0+0xc>
 80105e0:	2b24      	cmp	r3, #36	; 0x24
 80105e2:	d906      	bls.n	80105f2 <_strtol_l.isra.0+0x1a>
 80105e4:	f7fe faec 	bl	800ebc0 <__errno>
 80105e8:	2316      	movs	r3, #22
 80105ea:	6003      	str	r3, [r0, #0]
 80105ec:	2000      	movs	r0, #0
 80105ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80105f2:	4f3a      	ldr	r7, [pc, #232]	; (80106dc <_strtol_l.isra.0+0x104>)
 80105f4:	468e      	mov	lr, r1
 80105f6:	4676      	mov	r6, lr
 80105f8:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80105fc:	5de5      	ldrb	r5, [r4, r7]
 80105fe:	f015 0508 	ands.w	r5, r5, #8
 8010602:	d1f8      	bne.n	80105f6 <_strtol_l.isra.0+0x1e>
 8010604:	2c2d      	cmp	r4, #45	; 0x2d
 8010606:	d134      	bne.n	8010672 <_strtol_l.isra.0+0x9a>
 8010608:	f89e 4000 	ldrb.w	r4, [lr]
 801060c:	f04f 0801 	mov.w	r8, #1
 8010610:	f106 0e02 	add.w	lr, r6, #2
 8010614:	2b00      	cmp	r3, #0
 8010616:	d05c      	beq.n	80106d2 <_strtol_l.isra.0+0xfa>
 8010618:	2b10      	cmp	r3, #16
 801061a:	d10c      	bne.n	8010636 <_strtol_l.isra.0+0x5e>
 801061c:	2c30      	cmp	r4, #48	; 0x30
 801061e:	d10a      	bne.n	8010636 <_strtol_l.isra.0+0x5e>
 8010620:	f89e 4000 	ldrb.w	r4, [lr]
 8010624:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8010628:	2c58      	cmp	r4, #88	; 0x58
 801062a:	d14d      	bne.n	80106c8 <_strtol_l.isra.0+0xf0>
 801062c:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8010630:	2310      	movs	r3, #16
 8010632:	f10e 0e02 	add.w	lr, lr, #2
 8010636:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 801063a:	f10c 3cff 	add.w	ip, ip, #4294967295
 801063e:	2600      	movs	r6, #0
 8010640:	fbbc f9f3 	udiv	r9, ip, r3
 8010644:	4635      	mov	r5, r6
 8010646:	fb03 ca19 	mls	sl, r3, r9, ip
 801064a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 801064e:	2f09      	cmp	r7, #9
 8010650:	d818      	bhi.n	8010684 <_strtol_l.isra.0+0xac>
 8010652:	463c      	mov	r4, r7
 8010654:	42a3      	cmp	r3, r4
 8010656:	dd24      	ble.n	80106a2 <_strtol_l.isra.0+0xca>
 8010658:	2e00      	cmp	r6, #0
 801065a:	db1f      	blt.n	801069c <_strtol_l.isra.0+0xc4>
 801065c:	45a9      	cmp	r9, r5
 801065e:	d31d      	bcc.n	801069c <_strtol_l.isra.0+0xc4>
 8010660:	d101      	bne.n	8010666 <_strtol_l.isra.0+0x8e>
 8010662:	45a2      	cmp	sl, r4
 8010664:	db1a      	blt.n	801069c <_strtol_l.isra.0+0xc4>
 8010666:	fb05 4503 	mla	r5, r5, r3, r4
 801066a:	2601      	movs	r6, #1
 801066c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8010670:	e7eb      	b.n	801064a <_strtol_l.isra.0+0x72>
 8010672:	2c2b      	cmp	r4, #43	; 0x2b
 8010674:	bf08      	it	eq
 8010676:	f89e 4000 	ldrbeq.w	r4, [lr]
 801067a:	46a8      	mov	r8, r5
 801067c:	bf08      	it	eq
 801067e:	f106 0e02 	addeq.w	lr, r6, #2
 8010682:	e7c7      	b.n	8010614 <_strtol_l.isra.0+0x3c>
 8010684:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8010688:	2f19      	cmp	r7, #25
 801068a:	d801      	bhi.n	8010690 <_strtol_l.isra.0+0xb8>
 801068c:	3c37      	subs	r4, #55	; 0x37
 801068e:	e7e1      	b.n	8010654 <_strtol_l.isra.0+0x7c>
 8010690:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8010694:	2f19      	cmp	r7, #25
 8010696:	d804      	bhi.n	80106a2 <_strtol_l.isra.0+0xca>
 8010698:	3c57      	subs	r4, #87	; 0x57
 801069a:	e7db      	b.n	8010654 <_strtol_l.isra.0+0x7c>
 801069c:	f04f 36ff 	mov.w	r6, #4294967295
 80106a0:	e7e4      	b.n	801066c <_strtol_l.isra.0+0x94>
 80106a2:	2e00      	cmp	r6, #0
 80106a4:	da05      	bge.n	80106b2 <_strtol_l.isra.0+0xda>
 80106a6:	2322      	movs	r3, #34	; 0x22
 80106a8:	6003      	str	r3, [r0, #0]
 80106aa:	4665      	mov	r5, ip
 80106ac:	b942      	cbnz	r2, 80106c0 <_strtol_l.isra.0+0xe8>
 80106ae:	4628      	mov	r0, r5
 80106b0:	e79d      	b.n	80105ee <_strtol_l.isra.0+0x16>
 80106b2:	f1b8 0f00 	cmp.w	r8, #0
 80106b6:	d000      	beq.n	80106ba <_strtol_l.isra.0+0xe2>
 80106b8:	426d      	negs	r5, r5
 80106ba:	2a00      	cmp	r2, #0
 80106bc:	d0f7      	beq.n	80106ae <_strtol_l.isra.0+0xd6>
 80106be:	b10e      	cbz	r6, 80106c4 <_strtol_l.isra.0+0xec>
 80106c0:	f10e 31ff 	add.w	r1, lr, #4294967295
 80106c4:	6011      	str	r1, [r2, #0]
 80106c6:	e7f2      	b.n	80106ae <_strtol_l.isra.0+0xd6>
 80106c8:	2430      	movs	r4, #48	; 0x30
 80106ca:	2b00      	cmp	r3, #0
 80106cc:	d1b3      	bne.n	8010636 <_strtol_l.isra.0+0x5e>
 80106ce:	2308      	movs	r3, #8
 80106d0:	e7b1      	b.n	8010636 <_strtol_l.isra.0+0x5e>
 80106d2:	2c30      	cmp	r4, #48	; 0x30
 80106d4:	d0a4      	beq.n	8010620 <_strtol_l.isra.0+0x48>
 80106d6:	230a      	movs	r3, #10
 80106d8:	e7ad      	b.n	8010636 <_strtol_l.isra.0+0x5e>
 80106da:	bf00      	nop
 80106dc:	08013c59 	.word	0x08013c59

080106e0 <_strtol_r>:
 80106e0:	f7ff bf7a 	b.w	80105d8 <_strtol_l.isra.0>

080106e4 <quorem>:
 80106e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80106e8:	6903      	ldr	r3, [r0, #16]
 80106ea:	690c      	ldr	r4, [r1, #16]
 80106ec:	42a3      	cmp	r3, r4
 80106ee:	4607      	mov	r7, r0
 80106f0:	f2c0 8081 	blt.w	80107f6 <quorem+0x112>
 80106f4:	3c01      	subs	r4, #1
 80106f6:	f101 0814 	add.w	r8, r1, #20
 80106fa:	f100 0514 	add.w	r5, r0, #20
 80106fe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010702:	9301      	str	r3, [sp, #4]
 8010704:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8010708:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801070c:	3301      	adds	r3, #1
 801070e:	429a      	cmp	r2, r3
 8010710:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8010714:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8010718:	fbb2 f6f3 	udiv	r6, r2, r3
 801071c:	d331      	bcc.n	8010782 <quorem+0x9e>
 801071e:	f04f 0e00 	mov.w	lr, #0
 8010722:	4640      	mov	r0, r8
 8010724:	46ac      	mov	ip, r5
 8010726:	46f2      	mov	sl, lr
 8010728:	f850 2b04 	ldr.w	r2, [r0], #4
 801072c:	b293      	uxth	r3, r2
 801072e:	fb06 e303 	mla	r3, r6, r3, lr
 8010732:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8010736:	b29b      	uxth	r3, r3
 8010738:	ebaa 0303 	sub.w	r3, sl, r3
 801073c:	0c12      	lsrs	r2, r2, #16
 801073e:	f8dc a000 	ldr.w	sl, [ip]
 8010742:	fb06 e202 	mla	r2, r6, r2, lr
 8010746:	fa13 f38a 	uxtah	r3, r3, sl
 801074a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801074e:	fa1f fa82 	uxth.w	sl, r2
 8010752:	f8dc 2000 	ldr.w	r2, [ip]
 8010756:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 801075a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801075e:	b29b      	uxth	r3, r3
 8010760:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010764:	4581      	cmp	r9, r0
 8010766:	f84c 3b04 	str.w	r3, [ip], #4
 801076a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801076e:	d2db      	bcs.n	8010728 <quorem+0x44>
 8010770:	f855 300b 	ldr.w	r3, [r5, fp]
 8010774:	b92b      	cbnz	r3, 8010782 <quorem+0x9e>
 8010776:	9b01      	ldr	r3, [sp, #4]
 8010778:	3b04      	subs	r3, #4
 801077a:	429d      	cmp	r5, r3
 801077c:	461a      	mov	r2, r3
 801077e:	d32e      	bcc.n	80107de <quorem+0xfa>
 8010780:	613c      	str	r4, [r7, #16]
 8010782:	4638      	mov	r0, r7
 8010784:	f001 fc7e 	bl	8012084 <__mcmp>
 8010788:	2800      	cmp	r0, #0
 801078a:	db24      	blt.n	80107d6 <quorem+0xf2>
 801078c:	3601      	adds	r6, #1
 801078e:	4628      	mov	r0, r5
 8010790:	f04f 0c00 	mov.w	ip, #0
 8010794:	f858 2b04 	ldr.w	r2, [r8], #4
 8010798:	f8d0 e000 	ldr.w	lr, [r0]
 801079c:	b293      	uxth	r3, r2
 801079e:	ebac 0303 	sub.w	r3, ip, r3
 80107a2:	0c12      	lsrs	r2, r2, #16
 80107a4:	fa13 f38e 	uxtah	r3, r3, lr
 80107a8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80107ac:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80107b0:	b29b      	uxth	r3, r3
 80107b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80107b6:	45c1      	cmp	r9, r8
 80107b8:	f840 3b04 	str.w	r3, [r0], #4
 80107bc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80107c0:	d2e8      	bcs.n	8010794 <quorem+0xb0>
 80107c2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80107c6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80107ca:	b922      	cbnz	r2, 80107d6 <quorem+0xf2>
 80107cc:	3b04      	subs	r3, #4
 80107ce:	429d      	cmp	r5, r3
 80107d0:	461a      	mov	r2, r3
 80107d2:	d30a      	bcc.n	80107ea <quorem+0x106>
 80107d4:	613c      	str	r4, [r7, #16]
 80107d6:	4630      	mov	r0, r6
 80107d8:	b003      	add	sp, #12
 80107da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80107de:	6812      	ldr	r2, [r2, #0]
 80107e0:	3b04      	subs	r3, #4
 80107e2:	2a00      	cmp	r2, #0
 80107e4:	d1cc      	bne.n	8010780 <quorem+0x9c>
 80107e6:	3c01      	subs	r4, #1
 80107e8:	e7c7      	b.n	801077a <quorem+0x96>
 80107ea:	6812      	ldr	r2, [r2, #0]
 80107ec:	3b04      	subs	r3, #4
 80107ee:	2a00      	cmp	r2, #0
 80107f0:	d1f0      	bne.n	80107d4 <quorem+0xf0>
 80107f2:	3c01      	subs	r4, #1
 80107f4:	e7eb      	b.n	80107ce <quorem+0xea>
 80107f6:	2000      	movs	r0, #0
 80107f8:	e7ee      	b.n	80107d8 <quorem+0xf4>
 80107fa:	0000      	movs	r0, r0
 80107fc:	0000      	movs	r0, r0
	...

08010800 <_dtoa_r>:
 8010800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010804:	ed2d 8b02 	vpush	{d8}
 8010808:	ec57 6b10 	vmov	r6, r7, d0
 801080c:	b095      	sub	sp, #84	; 0x54
 801080e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8010810:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8010814:	9105      	str	r1, [sp, #20]
 8010816:	e9cd 6702 	strd	r6, r7, [sp, #8]
 801081a:	4604      	mov	r4, r0
 801081c:	9209      	str	r2, [sp, #36]	; 0x24
 801081e:	930f      	str	r3, [sp, #60]	; 0x3c
 8010820:	b975      	cbnz	r5, 8010840 <_dtoa_r+0x40>
 8010822:	2010      	movs	r0, #16
 8010824:	f001 f94c 	bl	8011ac0 <malloc>
 8010828:	4602      	mov	r2, r0
 801082a:	6260      	str	r0, [r4, #36]	; 0x24
 801082c:	b920      	cbnz	r0, 8010838 <_dtoa_r+0x38>
 801082e:	4bb2      	ldr	r3, [pc, #712]	; (8010af8 <_dtoa_r+0x2f8>)
 8010830:	21ea      	movs	r1, #234	; 0xea
 8010832:	48b2      	ldr	r0, [pc, #712]	; (8010afc <_dtoa_r+0x2fc>)
 8010834:	f002 f868 	bl	8012908 <__assert_func>
 8010838:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801083c:	6005      	str	r5, [r0, #0]
 801083e:	60c5      	str	r5, [r0, #12]
 8010840:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010842:	6819      	ldr	r1, [r3, #0]
 8010844:	b151      	cbz	r1, 801085c <_dtoa_r+0x5c>
 8010846:	685a      	ldr	r2, [r3, #4]
 8010848:	604a      	str	r2, [r1, #4]
 801084a:	2301      	movs	r3, #1
 801084c:	4093      	lsls	r3, r2
 801084e:	608b      	str	r3, [r1, #8]
 8010850:	4620      	mov	r0, r4
 8010852:	f001 f98f 	bl	8011b74 <_Bfree>
 8010856:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010858:	2200      	movs	r2, #0
 801085a:	601a      	str	r2, [r3, #0]
 801085c:	1e3b      	subs	r3, r7, #0
 801085e:	bfb9      	ittee	lt
 8010860:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8010864:	9303      	strlt	r3, [sp, #12]
 8010866:	2300      	movge	r3, #0
 8010868:	f8c8 3000 	strge.w	r3, [r8]
 801086c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8010870:	4ba3      	ldr	r3, [pc, #652]	; (8010b00 <_dtoa_r+0x300>)
 8010872:	bfbc      	itt	lt
 8010874:	2201      	movlt	r2, #1
 8010876:	f8c8 2000 	strlt.w	r2, [r8]
 801087a:	ea33 0309 	bics.w	r3, r3, r9
 801087e:	d11b      	bne.n	80108b8 <_dtoa_r+0xb8>
 8010880:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8010882:	f242 730f 	movw	r3, #9999	; 0x270f
 8010886:	6013      	str	r3, [r2, #0]
 8010888:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801088c:	4333      	orrs	r3, r6
 801088e:	f000 857a 	beq.w	8011386 <_dtoa_r+0xb86>
 8010892:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010894:	b963      	cbnz	r3, 80108b0 <_dtoa_r+0xb0>
 8010896:	4b9b      	ldr	r3, [pc, #620]	; (8010b04 <_dtoa_r+0x304>)
 8010898:	e024      	b.n	80108e4 <_dtoa_r+0xe4>
 801089a:	4b9b      	ldr	r3, [pc, #620]	; (8010b08 <_dtoa_r+0x308>)
 801089c:	9300      	str	r3, [sp, #0]
 801089e:	3308      	adds	r3, #8
 80108a0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80108a2:	6013      	str	r3, [r2, #0]
 80108a4:	9800      	ldr	r0, [sp, #0]
 80108a6:	b015      	add	sp, #84	; 0x54
 80108a8:	ecbd 8b02 	vpop	{d8}
 80108ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80108b0:	4b94      	ldr	r3, [pc, #592]	; (8010b04 <_dtoa_r+0x304>)
 80108b2:	9300      	str	r3, [sp, #0]
 80108b4:	3303      	adds	r3, #3
 80108b6:	e7f3      	b.n	80108a0 <_dtoa_r+0xa0>
 80108b8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80108bc:	2200      	movs	r2, #0
 80108be:	ec51 0b17 	vmov	r0, r1, d7
 80108c2:	2300      	movs	r3, #0
 80108c4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80108c8:	f7f0 f916 	bl	8000af8 <__aeabi_dcmpeq>
 80108cc:	4680      	mov	r8, r0
 80108ce:	b158      	cbz	r0, 80108e8 <_dtoa_r+0xe8>
 80108d0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80108d2:	2301      	movs	r3, #1
 80108d4:	6013      	str	r3, [r2, #0]
 80108d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80108d8:	2b00      	cmp	r3, #0
 80108da:	f000 8551 	beq.w	8011380 <_dtoa_r+0xb80>
 80108de:	488b      	ldr	r0, [pc, #556]	; (8010b0c <_dtoa_r+0x30c>)
 80108e0:	6018      	str	r0, [r3, #0]
 80108e2:	1e43      	subs	r3, r0, #1
 80108e4:	9300      	str	r3, [sp, #0]
 80108e6:	e7dd      	b.n	80108a4 <_dtoa_r+0xa4>
 80108e8:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80108ec:	aa12      	add	r2, sp, #72	; 0x48
 80108ee:	a913      	add	r1, sp, #76	; 0x4c
 80108f0:	4620      	mov	r0, r4
 80108f2:	f001 fce7 	bl	80122c4 <__d2b>
 80108f6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80108fa:	4683      	mov	fp, r0
 80108fc:	2d00      	cmp	r5, #0
 80108fe:	d07c      	beq.n	80109fa <_dtoa_r+0x1fa>
 8010900:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010902:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8010906:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801090a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 801090e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8010912:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8010916:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801091a:	4b7d      	ldr	r3, [pc, #500]	; (8010b10 <_dtoa_r+0x310>)
 801091c:	2200      	movs	r2, #0
 801091e:	4630      	mov	r0, r6
 8010920:	4639      	mov	r1, r7
 8010922:	f7ef fcc9 	bl	80002b8 <__aeabi_dsub>
 8010926:	a36e      	add	r3, pc, #440	; (adr r3, 8010ae0 <_dtoa_r+0x2e0>)
 8010928:	e9d3 2300 	ldrd	r2, r3, [r3]
 801092c:	f7ef fe7c 	bl	8000628 <__aeabi_dmul>
 8010930:	a36d      	add	r3, pc, #436	; (adr r3, 8010ae8 <_dtoa_r+0x2e8>)
 8010932:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010936:	f7ef fcc1 	bl	80002bc <__adddf3>
 801093a:	4606      	mov	r6, r0
 801093c:	4628      	mov	r0, r5
 801093e:	460f      	mov	r7, r1
 8010940:	f7ef fe08 	bl	8000554 <__aeabi_i2d>
 8010944:	a36a      	add	r3, pc, #424	; (adr r3, 8010af0 <_dtoa_r+0x2f0>)
 8010946:	e9d3 2300 	ldrd	r2, r3, [r3]
 801094a:	f7ef fe6d 	bl	8000628 <__aeabi_dmul>
 801094e:	4602      	mov	r2, r0
 8010950:	460b      	mov	r3, r1
 8010952:	4630      	mov	r0, r6
 8010954:	4639      	mov	r1, r7
 8010956:	f7ef fcb1 	bl	80002bc <__adddf3>
 801095a:	4606      	mov	r6, r0
 801095c:	460f      	mov	r7, r1
 801095e:	f7f0 f913 	bl	8000b88 <__aeabi_d2iz>
 8010962:	2200      	movs	r2, #0
 8010964:	4682      	mov	sl, r0
 8010966:	2300      	movs	r3, #0
 8010968:	4630      	mov	r0, r6
 801096a:	4639      	mov	r1, r7
 801096c:	f7f0 f8ce 	bl	8000b0c <__aeabi_dcmplt>
 8010970:	b148      	cbz	r0, 8010986 <_dtoa_r+0x186>
 8010972:	4650      	mov	r0, sl
 8010974:	f7ef fdee 	bl	8000554 <__aeabi_i2d>
 8010978:	4632      	mov	r2, r6
 801097a:	463b      	mov	r3, r7
 801097c:	f7f0 f8bc 	bl	8000af8 <__aeabi_dcmpeq>
 8010980:	b908      	cbnz	r0, 8010986 <_dtoa_r+0x186>
 8010982:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010986:	f1ba 0f16 	cmp.w	sl, #22
 801098a:	d854      	bhi.n	8010a36 <_dtoa_r+0x236>
 801098c:	4b61      	ldr	r3, [pc, #388]	; (8010b14 <_dtoa_r+0x314>)
 801098e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8010992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010996:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801099a:	f7f0 f8b7 	bl	8000b0c <__aeabi_dcmplt>
 801099e:	2800      	cmp	r0, #0
 80109a0:	d04b      	beq.n	8010a3a <_dtoa_r+0x23a>
 80109a2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80109a6:	2300      	movs	r3, #0
 80109a8:	930e      	str	r3, [sp, #56]	; 0x38
 80109aa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80109ac:	1b5d      	subs	r5, r3, r5
 80109ae:	1e6b      	subs	r3, r5, #1
 80109b0:	9304      	str	r3, [sp, #16]
 80109b2:	bf43      	ittte	mi
 80109b4:	2300      	movmi	r3, #0
 80109b6:	f1c5 0801 	rsbmi	r8, r5, #1
 80109ba:	9304      	strmi	r3, [sp, #16]
 80109bc:	f04f 0800 	movpl.w	r8, #0
 80109c0:	f1ba 0f00 	cmp.w	sl, #0
 80109c4:	db3b      	blt.n	8010a3e <_dtoa_r+0x23e>
 80109c6:	9b04      	ldr	r3, [sp, #16]
 80109c8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80109cc:	4453      	add	r3, sl
 80109ce:	9304      	str	r3, [sp, #16]
 80109d0:	2300      	movs	r3, #0
 80109d2:	9306      	str	r3, [sp, #24]
 80109d4:	9b05      	ldr	r3, [sp, #20]
 80109d6:	2b09      	cmp	r3, #9
 80109d8:	d869      	bhi.n	8010aae <_dtoa_r+0x2ae>
 80109da:	2b05      	cmp	r3, #5
 80109dc:	bfc4      	itt	gt
 80109de:	3b04      	subgt	r3, #4
 80109e0:	9305      	strgt	r3, [sp, #20]
 80109e2:	9b05      	ldr	r3, [sp, #20]
 80109e4:	f1a3 0302 	sub.w	r3, r3, #2
 80109e8:	bfcc      	ite	gt
 80109ea:	2500      	movgt	r5, #0
 80109ec:	2501      	movle	r5, #1
 80109ee:	2b03      	cmp	r3, #3
 80109f0:	d869      	bhi.n	8010ac6 <_dtoa_r+0x2c6>
 80109f2:	e8df f003 	tbb	[pc, r3]
 80109f6:	4e2c      	.short	0x4e2c
 80109f8:	5a4c      	.short	0x5a4c
 80109fa:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80109fe:	441d      	add	r5, r3
 8010a00:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8010a04:	2b20      	cmp	r3, #32
 8010a06:	bfc1      	itttt	gt
 8010a08:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8010a0c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8010a10:	fa09 f303 	lslgt.w	r3, r9, r3
 8010a14:	fa26 f000 	lsrgt.w	r0, r6, r0
 8010a18:	bfda      	itte	le
 8010a1a:	f1c3 0320 	rsble	r3, r3, #32
 8010a1e:	fa06 f003 	lslle.w	r0, r6, r3
 8010a22:	4318      	orrgt	r0, r3
 8010a24:	f7ef fd86 	bl	8000534 <__aeabi_ui2d>
 8010a28:	2301      	movs	r3, #1
 8010a2a:	4606      	mov	r6, r0
 8010a2c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8010a30:	3d01      	subs	r5, #1
 8010a32:	9310      	str	r3, [sp, #64]	; 0x40
 8010a34:	e771      	b.n	801091a <_dtoa_r+0x11a>
 8010a36:	2301      	movs	r3, #1
 8010a38:	e7b6      	b.n	80109a8 <_dtoa_r+0x1a8>
 8010a3a:	900e      	str	r0, [sp, #56]	; 0x38
 8010a3c:	e7b5      	b.n	80109aa <_dtoa_r+0x1aa>
 8010a3e:	f1ca 0300 	rsb	r3, sl, #0
 8010a42:	9306      	str	r3, [sp, #24]
 8010a44:	2300      	movs	r3, #0
 8010a46:	eba8 080a 	sub.w	r8, r8, sl
 8010a4a:	930d      	str	r3, [sp, #52]	; 0x34
 8010a4c:	e7c2      	b.n	80109d4 <_dtoa_r+0x1d4>
 8010a4e:	2300      	movs	r3, #0
 8010a50:	9308      	str	r3, [sp, #32]
 8010a52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010a54:	2b00      	cmp	r3, #0
 8010a56:	dc39      	bgt.n	8010acc <_dtoa_r+0x2cc>
 8010a58:	f04f 0901 	mov.w	r9, #1
 8010a5c:	f8cd 9004 	str.w	r9, [sp, #4]
 8010a60:	464b      	mov	r3, r9
 8010a62:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8010a66:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8010a68:	2200      	movs	r2, #0
 8010a6a:	6042      	str	r2, [r0, #4]
 8010a6c:	2204      	movs	r2, #4
 8010a6e:	f102 0614 	add.w	r6, r2, #20
 8010a72:	429e      	cmp	r6, r3
 8010a74:	6841      	ldr	r1, [r0, #4]
 8010a76:	d92f      	bls.n	8010ad8 <_dtoa_r+0x2d8>
 8010a78:	4620      	mov	r0, r4
 8010a7a:	f001 f83b 	bl	8011af4 <_Balloc>
 8010a7e:	9000      	str	r0, [sp, #0]
 8010a80:	2800      	cmp	r0, #0
 8010a82:	d14b      	bne.n	8010b1c <_dtoa_r+0x31c>
 8010a84:	4b24      	ldr	r3, [pc, #144]	; (8010b18 <_dtoa_r+0x318>)
 8010a86:	4602      	mov	r2, r0
 8010a88:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8010a8c:	e6d1      	b.n	8010832 <_dtoa_r+0x32>
 8010a8e:	2301      	movs	r3, #1
 8010a90:	e7de      	b.n	8010a50 <_dtoa_r+0x250>
 8010a92:	2300      	movs	r3, #0
 8010a94:	9308      	str	r3, [sp, #32]
 8010a96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010a98:	eb0a 0903 	add.w	r9, sl, r3
 8010a9c:	f109 0301 	add.w	r3, r9, #1
 8010aa0:	2b01      	cmp	r3, #1
 8010aa2:	9301      	str	r3, [sp, #4]
 8010aa4:	bfb8      	it	lt
 8010aa6:	2301      	movlt	r3, #1
 8010aa8:	e7dd      	b.n	8010a66 <_dtoa_r+0x266>
 8010aaa:	2301      	movs	r3, #1
 8010aac:	e7f2      	b.n	8010a94 <_dtoa_r+0x294>
 8010aae:	2501      	movs	r5, #1
 8010ab0:	2300      	movs	r3, #0
 8010ab2:	9305      	str	r3, [sp, #20]
 8010ab4:	9508      	str	r5, [sp, #32]
 8010ab6:	f04f 39ff 	mov.w	r9, #4294967295
 8010aba:	2200      	movs	r2, #0
 8010abc:	f8cd 9004 	str.w	r9, [sp, #4]
 8010ac0:	2312      	movs	r3, #18
 8010ac2:	9209      	str	r2, [sp, #36]	; 0x24
 8010ac4:	e7cf      	b.n	8010a66 <_dtoa_r+0x266>
 8010ac6:	2301      	movs	r3, #1
 8010ac8:	9308      	str	r3, [sp, #32]
 8010aca:	e7f4      	b.n	8010ab6 <_dtoa_r+0x2b6>
 8010acc:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8010ad0:	f8cd 9004 	str.w	r9, [sp, #4]
 8010ad4:	464b      	mov	r3, r9
 8010ad6:	e7c6      	b.n	8010a66 <_dtoa_r+0x266>
 8010ad8:	3101      	adds	r1, #1
 8010ada:	6041      	str	r1, [r0, #4]
 8010adc:	0052      	lsls	r2, r2, #1
 8010ade:	e7c6      	b.n	8010a6e <_dtoa_r+0x26e>
 8010ae0:	636f4361 	.word	0x636f4361
 8010ae4:	3fd287a7 	.word	0x3fd287a7
 8010ae8:	8b60c8b3 	.word	0x8b60c8b3
 8010aec:	3fc68a28 	.word	0x3fc68a28
 8010af0:	509f79fb 	.word	0x509f79fb
 8010af4:	3fd34413 	.word	0x3fd34413
 8010af8:	08013d66 	.word	0x08013d66
 8010afc:	08013d7d 	.word	0x08013d7d
 8010b00:	7ff00000 	.word	0x7ff00000
 8010b04:	08013d62 	.word	0x08013d62
 8010b08:	08013d59 	.word	0x08013d59
 8010b0c:	08013bdd 	.word	0x08013bdd
 8010b10:	3ff80000 	.word	0x3ff80000
 8010b14:	08013ef8 	.word	0x08013ef8
 8010b18:	08013ddc 	.word	0x08013ddc
 8010b1c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010b1e:	9a00      	ldr	r2, [sp, #0]
 8010b20:	601a      	str	r2, [r3, #0]
 8010b22:	9b01      	ldr	r3, [sp, #4]
 8010b24:	2b0e      	cmp	r3, #14
 8010b26:	f200 80ad 	bhi.w	8010c84 <_dtoa_r+0x484>
 8010b2a:	2d00      	cmp	r5, #0
 8010b2c:	f000 80aa 	beq.w	8010c84 <_dtoa_r+0x484>
 8010b30:	f1ba 0f00 	cmp.w	sl, #0
 8010b34:	dd36      	ble.n	8010ba4 <_dtoa_r+0x3a4>
 8010b36:	4ac3      	ldr	r2, [pc, #780]	; (8010e44 <_dtoa_r+0x644>)
 8010b38:	f00a 030f 	and.w	r3, sl, #15
 8010b3c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8010b40:	ed93 7b00 	vldr	d7, [r3]
 8010b44:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8010b48:	ea4f 172a 	mov.w	r7, sl, asr #4
 8010b4c:	eeb0 8a47 	vmov.f32	s16, s14
 8010b50:	eef0 8a67 	vmov.f32	s17, s15
 8010b54:	d016      	beq.n	8010b84 <_dtoa_r+0x384>
 8010b56:	4bbc      	ldr	r3, [pc, #752]	; (8010e48 <_dtoa_r+0x648>)
 8010b58:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8010b5c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8010b60:	f7ef fe8c 	bl	800087c <__aeabi_ddiv>
 8010b64:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010b68:	f007 070f 	and.w	r7, r7, #15
 8010b6c:	2503      	movs	r5, #3
 8010b6e:	4eb6      	ldr	r6, [pc, #728]	; (8010e48 <_dtoa_r+0x648>)
 8010b70:	b957      	cbnz	r7, 8010b88 <_dtoa_r+0x388>
 8010b72:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010b76:	ec53 2b18 	vmov	r2, r3, d8
 8010b7a:	f7ef fe7f 	bl	800087c <__aeabi_ddiv>
 8010b7e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010b82:	e029      	b.n	8010bd8 <_dtoa_r+0x3d8>
 8010b84:	2502      	movs	r5, #2
 8010b86:	e7f2      	b.n	8010b6e <_dtoa_r+0x36e>
 8010b88:	07f9      	lsls	r1, r7, #31
 8010b8a:	d508      	bpl.n	8010b9e <_dtoa_r+0x39e>
 8010b8c:	ec51 0b18 	vmov	r0, r1, d8
 8010b90:	e9d6 2300 	ldrd	r2, r3, [r6]
 8010b94:	f7ef fd48 	bl	8000628 <__aeabi_dmul>
 8010b98:	ec41 0b18 	vmov	d8, r0, r1
 8010b9c:	3501      	adds	r5, #1
 8010b9e:	107f      	asrs	r7, r7, #1
 8010ba0:	3608      	adds	r6, #8
 8010ba2:	e7e5      	b.n	8010b70 <_dtoa_r+0x370>
 8010ba4:	f000 80a6 	beq.w	8010cf4 <_dtoa_r+0x4f4>
 8010ba8:	f1ca 0600 	rsb	r6, sl, #0
 8010bac:	4ba5      	ldr	r3, [pc, #660]	; (8010e44 <_dtoa_r+0x644>)
 8010bae:	4fa6      	ldr	r7, [pc, #664]	; (8010e48 <_dtoa_r+0x648>)
 8010bb0:	f006 020f 	and.w	r2, r6, #15
 8010bb4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010bbc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8010bc0:	f7ef fd32 	bl	8000628 <__aeabi_dmul>
 8010bc4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010bc8:	1136      	asrs	r6, r6, #4
 8010bca:	2300      	movs	r3, #0
 8010bcc:	2502      	movs	r5, #2
 8010bce:	2e00      	cmp	r6, #0
 8010bd0:	f040 8085 	bne.w	8010cde <_dtoa_r+0x4de>
 8010bd4:	2b00      	cmp	r3, #0
 8010bd6:	d1d2      	bne.n	8010b7e <_dtoa_r+0x37e>
 8010bd8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010bda:	2b00      	cmp	r3, #0
 8010bdc:	f000 808c 	beq.w	8010cf8 <_dtoa_r+0x4f8>
 8010be0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8010be4:	4b99      	ldr	r3, [pc, #612]	; (8010e4c <_dtoa_r+0x64c>)
 8010be6:	2200      	movs	r2, #0
 8010be8:	4630      	mov	r0, r6
 8010bea:	4639      	mov	r1, r7
 8010bec:	f7ef ff8e 	bl	8000b0c <__aeabi_dcmplt>
 8010bf0:	2800      	cmp	r0, #0
 8010bf2:	f000 8081 	beq.w	8010cf8 <_dtoa_r+0x4f8>
 8010bf6:	9b01      	ldr	r3, [sp, #4]
 8010bf8:	2b00      	cmp	r3, #0
 8010bfa:	d07d      	beq.n	8010cf8 <_dtoa_r+0x4f8>
 8010bfc:	f1b9 0f00 	cmp.w	r9, #0
 8010c00:	dd3c      	ble.n	8010c7c <_dtoa_r+0x47c>
 8010c02:	f10a 33ff 	add.w	r3, sl, #4294967295
 8010c06:	9307      	str	r3, [sp, #28]
 8010c08:	2200      	movs	r2, #0
 8010c0a:	4b91      	ldr	r3, [pc, #580]	; (8010e50 <_dtoa_r+0x650>)
 8010c0c:	4630      	mov	r0, r6
 8010c0e:	4639      	mov	r1, r7
 8010c10:	f7ef fd0a 	bl	8000628 <__aeabi_dmul>
 8010c14:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010c18:	3501      	adds	r5, #1
 8010c1a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8010c1e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8010c22:	4628      	mov	r0, r5
 8010c24:	f7ef fc96 	bl	8000554 <__aeabi_i2d>
 8010c28:	4632      	mov	r2, r6
 8010c2a:	463b      	mov	r3, r7
 8010c2c:	f7ef fcfc 	bl	8000628 <__aeabi_dmul>
 8010c30:	4b88      	ldr	r3, [pc, #544]	; (8010e54 <_dtoa_r+0x654>)
 8010c32:	2200      	movs	r2, #0
 8010c34:	f7ef fb42 	bl	80002bc <__adddf3>
 8010c38:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8010c3c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010c40:	9303      	str	r3, [sp, #12]
 8010c42:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010c44:	2b00      	cmp	r3, #0
 8010c46:	d15c      	bne.n	8010d02 <_dtoa_r+0x502>
 8010c48:	4b83      	ldr	r3, [pc, #524]	; (8010e58 <_dtoa_r+0x658>)
 8010c4a:	2200      	movs	r2, #0
 8010c4c:	4630      	mov	r0, r6
 8010c4e:	4639      	mov	r1, r7
 8010c50:	f7ef fb32 	bl	80002b8 <__aeabi_dsub>
 8010c54:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010c58:	4606      	mov	r6, r0
 8010c5a:	460f      	mov	r7, r1
 8010c5c:	f7ef ff74 	bl	8000b48 <__aeabi_dcmpgt>
 8010c60:	2800      	cmp	r0, #0
 8010c62:	f040 8296 	bne.w	8011192 <_dtoa_r+0x992>
 8010c66:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8010c6a:	4630      	mov	r0, r6
 8010c6c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010c70:	4639      	mov	r1, r7
 8010c72:	f7ef ff4b 	bl	8000b0c <__aeabi_dcmplt>
 8010c76:	2800      	cmp	r0, #0
 8010c78:	f040 8288 	bne.w	801118c <_dtoa_r+0x98c>
 8010c7c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8010c80:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8010c84:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8010c86:	2b00      	cmp	r3, #0
 8010c88:	f2c0 8158 	blt.w	8010f3c <_dtoa_r+0x73c>
 8010c8c:	f1ba 0f0e 	cmp.w	sl, #14
 8010c90:	f300 8154 	bgt.w	8010f3c <_dtoa_r+0x73c>
 8010c94:	4b6b      	ldr	r3, [pc, #428]	; (8010e44 <_dtoa_r+0x644>)
 8010c96:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8010c9a:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010c9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010ca0:	2b00      	cmp	r3, #0
 8010ca2:	f280 80e3 	bge.w	8010e6c <_dtoa_r+0x66c>
 8010ca6:	9b01      	ldr	r3, [sp, #4]
 8010ca8:	2b00      	cmp	r3, #0
 8010caa:	f300 80df 	bgt.w	8010e6c <_dtoa_r+0x66c>
 8010cae:	f040 826d 	bne.w	801118c <_dtoa_r+0x98c>
 8010cb2:	4b69      	ldr	r3, [pc, #420]	; (8010e58 <_dtoa_r+0x658>)
 8010cb4:	2200      	movs	r2, #0
 8010cb6:	4640      	mov	r0, r8
 8010cb8:	4649      	mov	r1, r9
 8010cba:	f7ef fcb5 	bl	8000628 <__aeabi_dmul>
 8010cbe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010cc2:	f7ef ff37 	bl	8000b34 <__aeabi_dcmpge>
 8010cc6:	9e01      	ldr	r6, [sp, #4]
 8010cc8:	4637      	mov	r7, r6
 8010cca:	2800      	cmp	r0, #0
 8010ccc:	f040 8243 	bne.w	8011156 <_dtoa_r+0x956>
 8010cd0:	9d00      	ldr	r5, [sp, #0]
 8010cd2:	2331      	movs	r3, #49	; 0x31
 8010cd4:	f805 3b01 	strb.w	r3, [r5], #1
 8010cd8:	f10a 0a01 	add.w	sl, sl, #1
 8010cdc:	e23f      	b.n	801115e <_dtoa_r+0x95e>
 8010cde:	07f2      	lsls	r2, r6, #31
 8010ce0:	d505      	bpl.n	8010cee <_dtoa_r+0x4ee>
 8010ce2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010ce6:	f7ef fc9f 	bl	8000628 <__aeabi_dmul>
 8010cea:	3501      	adds	r5, #1
 8010cec:	2301      	movs	r3, #1
 8010cee:	1076      	asrs	r6, r6, #1
 8010cf0:	3708      	adds	r7, #8
 8010cf2:	e76c      	b.n	8010bce <_dtoa_r+0x3ce>
 8010cf4:	2502      	movs	r5, #2
 8010cf6:	e76f      	b.n	8010bd8 <_dtoa_r+0x3d8>
 8010cf8:	9b01      	ldr	r3, [sp, #4]
 8010cfa:	f8cd a01c 	str.w	sl, [sp, #28]
 8010cfe:	930c      	str	r3, [sp, #48]	; 0x30
 8010d00:	e78d      	b.n	8010c1e <_dtoa_r+0x41e>
 8010d02:	9900      	ldr	r1, [sp, #0]
 8010d04:	980c      	ldr	r0, [sp, #48]	; 0x30
 8010d06:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010d08:	4b4e      	ldr	r3, [pc, #312]	; (8010e44 <_dtoa_r+0x644>)
 8010d0a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010d0e:	4401      	add	r1, r0
 8010d10:	9102      	str	r1, [sp, #8]
 8010d12:	9908      	ldr	r1, [sp, #32]
 8010d14:	eeb0 8a47 	vmov.f32	s16, s14
 8010d18:	eef0 8a67 	vmov.f32	s17, s15
 8010d1c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010d20:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8010d24:	2900      	cmp	r1, #0
 8010d26:	d045      	beq.n	8010db4 <_dtoa_r+0x5b4>
 8010d28:	494c      	ldr	r1, [pc, #304]	; (8010e5c <_dtoa_r+0x65c>)
 8010d2a:	2000      	movs	r0, #0
 8010d2c:	f7ef fda6 	bl	800087c <__aeabi_ddiv>
 8010d30:	ec53 2b18 	vmov	r2, r3, d8
 8010d34:	f7ef fac0 	bl	80002b8 <__aeabi_dsub>
 8010d38:	9d00      	ldr	r5, [sp, #0]
 8010d3a:	ec41 0b18 	vmov	d8, r0, r1
 8010d3e:	4639      	mov	r1, r7
 8010d40:	4630      	mov	r0, r6
 8010d42:	f7ef ff21 	bl	8000b88 <__aeabi_d2iz>
 8010d46:	900c      	str	r0, [sp, #48]	; 0x30
 8010d48:	f7ef fc04 	bl	8000554 <__aeabi_i2d>
 8010d4c:	4602      	mov	r2, r0
 8010d4e:	460b      	mov	r3, r1
 8010d50:	4630      	mov	r0, r6
 8010d52:	4639      	mov	r1, r7
 8010d54:	f7ef fab0 	bl	80002b8 <__aeabi_dsub>
 8010d58:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010d5a:	3330      	adds	r3, #48	; 0x30
 8010d5c:	f805 3b01 	strb.w	r3, [r5], #1
 8010d60:	ec53 2b18 	vmov	r2, r3, d8
 8010d64:	4606      	mov	r6, r0
 8010d66:	460f      	mov	r7, r1
 8010d68:	f7ef fed0 	bl	8000b0c <__aeabi_dcmplt>
 8010d6c:	2800      	cmp	r0, #0
 8010d6e:	d165      	bne.n	8010e3c <_dtoa_r+0x63c>
 8010d70:	4632      	mov	r2, r6
 8010d72:	463b      	mov	r3, r7
 8010d74:	4935      	ldr	r1, [pc, #212]	; (8010e4c <_dtoa_r+0x64c>)
 8010d76:	2000      	movs	r0, #0
 8010d78:	f7ef fa9e 	bl	80002b8 <__aeabi_dsub>
 8010d7c:	ec53 2b18 	vmov	r2, r3, d8
 8010d80:	f7ef fec4 	bl	8000b0c <__aeabi_dcmplt>
 8010d84:	2800      	cmp	r0, #0
 8010d86:	f040 80b9 	bne.w	8010efc <_dtoa_r+0x6fc>
 8010d8a:	9b02      	ldr	r3, [sp, #8]
 8010d8c:	429d      	cmp	r5, r3
 8010d8e:	f43f af75 	beq.w	8010c7c <_dtoa_r+0x47c>
 8010d92:	4b2f      	ldr	r3, [pc, #188]	; (8010e50 <_dtoa_r+0x650>)
 8010d94:	ec51 0b18 	vmov	r0, r1, d8
 8010d98:	2200      	movs	r2, #0
 8010d9a:	f7ef fc45 	bl	8000628 <__aeabi_dmul>
 8010d9e:	4b2c      	ldr	r3, [pc, #176]	; (8010e50 <_dtoa_r+0x650>)
 8010da0:	ec41 0b18 	vmov	d8, r0, r1
 8010da4:	2200      	movs	r2, #0
 8010da6:	4630      	mov	r0, r6
 8010da8:	4639      	mov	r1, r7
 8010daa:	f7ef fc3d 	bl	8000628 <__aeabi_dmul>
 8010dae:	4606      	mov	r6, r0
 8010db0:	460f      	mov	r7, r1
 8010db2:	e7c4      	b.n	8010d3e <_dtoa_r+0x53e>
 8010db4:	ec51 0b17 	vmov	r0, r1, d7
 8010db8:	f7ef fc36 	bl	8000628 <__aeabi_dmul>
 8010dbc:	9b02      	ldr	r3, [sp, #8]
 8010dbe:	9d00      	ldr	r5, [sp, #0]
 8010dc0:	930c      	str	r3, [sp, #48]	; 0x30
 8010dc2:	ec41 0b18 	vmov	d8, r0, r1
 8010dc6:	4639      	mov	r1, r7
 8010dc8:	4630      	mov	r0, r6
 8010dca:	f7ef fedd 	bl	8000b88 <__aeabi_d2iz>
 8010dce:	9011      	str	r0, [sp, #68]	; 0x44
 8010dd0:	f7ef fbc0 	bl	8000554 <__aeabi_i2d>
 8010dd4:	4602      	mov	r2, r0
 8010dd6:	460b      	mov	r3, r1
 8010dd8:	4630      	mov	r0, r6
 8010dda:	4639      	mov	r1, r7
 8010ddc:	f7ef fa6c 	bl	80002b8 <__aeabi_dsub>
 8010de0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010de2:	3330      	adds	r3, #48	; 0x30
 8010de4:	f805 3b01 	strb.w	r3, [r5], #1
 8010de8:	9b02      	ldr	r3, [sp, #8]
 8010dea:	429d      	cmp	r5, r3
 8010dec:	4606      	mov	r6, r0
 8010dee:	460f      	mov	r7, r1
 8010df0:	f04f 0200 	mov.w	r2, #0
 8010df4:	d134      	bne.n	8010e60 <_dtoa_r+0x660>
 8010df6:	4b19      	ldr	r3, [pc, #100]	; (8010e5c <_dtoa_r+0x65c>)
 8010df8:	ec51 0b18 	vmov	r0, r1, d8
 8010dfc:	f7ef fa5e 	bl	80002bc <__adddf3>
 8010e00:	4602      	mov	r2, r0
 8010e02:	460b      	mov	r3, r1
 8010e04:	4630      	mov	r0, r6
 8010e06:	4639      	mov	r1, r7
 8010e08:	f7ef fe9e 	bl	8000b48 <__aeabi_dcmpgt>
 8010e0c:	2800      	cmp	r0, #0
 8010e0e:	d175      	bne.n	8010efc <_dtoa_r+0x6fc>
 8010e10:	ec53 2b18 	vmov	r2, r3, d8
 8010e14:	4911      	ldr	r1, [pc, #68]	; (8010e5c <_dtoa_r+0x65c>)
 8010e16:	2000      	movs	r0, #0
 8010e18:	f7ef fa4e 	bl	80002b8 <__aeabi_dsub>
 8010e1c:	4602      	mov	r2, r0
 8010e1e:	460b      	mov	r3, r1
 8010e20:	4630      	mov	r0, r6
 8010e22:	4639      	mov	r1, r7
 8010e24:	f7ef fe72 	bl	8000b0c <__aeabi_dcmplt>
 8010e28:	2800      	cmp	r0, #0
 8010e2a:	f43f af27 	beq.w	8010c7c <_dtoa_r+0x47c>
 8010e2e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8010e30:	1e6b      	subs	r3, r5, #1
 8010e32:	930c      	str	r3, [sp, #48]	; 0x30
 8010e34:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8010e38:	2b30      	cmp	r3, #48	; 0x30
 8010e3a:	d0f8      	beq.n	8010e2e <_dtoa_r+0x62e>
 8010e3c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8010e40:	e04a      	b.n	8010ed8 <_dtoa_r+0x6d8>
 8010e42:	bf00      	nop
 8010e44:	08013ef8 	.word	0x08013ef8
 8010e48:	08013ed0 	.word	0x08013ed0
 8010e4c:	3ff00000 	.word	0x3ff00000
 8010e50:	40240000 	.word	0x40240000
 8010e54:	401c0000 	.word	0x401c0000
 8010e58:	40140000 	.word	0x40140000
 8010e5c:	3fe00000 	.word	0x3fe00000
 8010e60:	4baf      	ldr	r3, [pc, #700]	; (8011120 <_dtoa_r+0x920>)
 8010e62:	f7ef fbe1 	bl	8000628 <__aeabi_dmul>
 8010e66:	4606      	mov	r6, r0
 8010e68:	460f      	mov	r7, r1
 8010e6a:	e7ac      	b.n	8010dc6 <_dtoa_r+0x5c6>
 8010e6c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8010e70:	9d00      	ldr	r5, [sp, #0]
 8010e72:	4642      	mov	r2, r8
 8010e74:	464b      	mov	r3, r9
 8010e76:	4630      	mov	r0, r6
 8010e78:	4639      	mov	r1, r7
 8010e7a:	f7ef fcff 	bl	800087c <__aeabi_ddiv>
 8010e7e:	f7ef fe83 	bl	8000b88 <__aeabi_d2iz>
 8010e82:	9002      	str	r0, [sp, #8]
 8010e84:	f7ef fb66 	bl	8000554 <__aeabi_i2d>
 8010e88:	4642      	mov	r2, r8
 8010e8a:	464b      	mov	r3, r9
 8010e8c:	f7ef fbcc 	bl	8000628 <__aeabi_dmul>
 8010e90:	4602      	mov	r2, r0
 8010e92:	460b      	mov	r3, r1
 8010e94:	4630      	mov	r0, r6
 8010e96:	4639      	mov	r1, r7
 8010e98:	f7ef fa0e 	bl	80002b8 <__aeabi_dsub>
 8010e9c:	9e02      	ldr	r6, [sp, #8]
 8010e9e:	9f01      	ldr	r7, [sp, #4]
 8010ea0:	3630      	adds	r6, #48	; 0x30
 8010ea2:	f805 6b01 	strb.w	r6, [r5], #1
 8010ea6:	9e00      	ldr	r6, [sp, #0]
 8010ea8:	1bae      	subs	r6, r5, r6
 8010eaa:	42b7      	cmp	r7, r6
 8010eac:	4602      	mov	r2, r0
 8010eae:	460b      	mov	r3, r1
 8010eb0:	d137      	bne.n	8010f22 <_dtoa_r+0x722>
 8010eb2:	f7ef fa03 	bl	80002bc <__adddf3>
 8010eb6:	4642      	mov	r2, r8
 8010eb8:	464b      	mov	r3, r9
 8010eba:	4606      	mov	r6, r0
 8010ebc:	460f      	mov	r7, r1
 8010ebe:	f7ef fe43 	bl	8000b48 <__aeabi_dcmpgt>
 8010ec2:	b9c8      	cbnz	r0, 8010ef8 <_dtoa_r+0x6f8>
 8010ec4:	4642      	mov	r2, r8
 8010ec6:	464b      	mov	r3, r9
 8010ec8:	4630      	mov	r0, r6
 8010eca:	4639      	mov	r1, r7
 8010ecc:	f7ef fe14 	bl	8000af8 <__aeabi_dcmpeq>
 8010ed0:	b110      	cbz	r0, 8010ed8 <_dtoa_r+0x6d8>
 8010ed2:	9b02      	ldr	r3, [sp, #8]
 8010ed4:	07d9      	lsls	r1, r3, #31
 8010ed6:	d40f      	bmi.n	8010ef8 <_dtoa_r+0x6f8>
 8010ed8:	4620      	mov	r0, r4
 8010eda:	4659      	mov	r1, fp
 8010edc:	f000 fe4a 	bl	8011b74 <_Bfree>
 8010ee0:	2300      	movs	r3, #0
 8010ee2:	702b      	strb	r3, [r5, #0]
 8010ee4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010ee6:	f10a 0001 	add.w	r0, sl, #1
 8010eea:	6018      	str	r0, [r3, #0]
 8010eec:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010eee:	2b00      	cmp	r3, #0
 8010ef0:	f43f acd8 	beq.w	80108a4 <_dtoa_r+0xa4>
 8010ef4:	601d      	str	r5, [r3, #0]
 8010ef6:	e4d5      	b.n	80108a4 <_dtoa_r+0xa4>
 8010ef8:	f8cd a01c 	str.w	sl, [sp, #28]
 8010efc:	462b      	mov	r3, r5
 8010efe:	461d      	mov	r5, r3
 8010f00:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010f04:	2a39      	cmp	r2, #57	; 0x39
 8010f06:	d108      	bne.n	8010f1a <_dtoa_r+0x71a>
 8010f08:	9a00      	ldr	r2, [sp, #0]
 8010f0a:	429a      	cmp	r2, r3
 8010f0c:	d1f7      	bne.n	8010efe <_dtoa_r+0x6fe>
 8010f0e:	9a07      	ldr	r2, [sp, #28]
 8010f10:	9900      	ldr	r1, [sp, #0]
 8010f12:	3201      	adds	r2, #1
 8010f14:	9207      	str	r2, [sp, #28]
 8010f16:	2230      	movs	r2, #48	; 0x30
 8010f18:	700a      	strb	r2, [r1, #0]
 8010f1a:	781a      	ldrb	r2, [r3, #0]
 8010f1c:	3201      	adds	r2, #1
 8010f1e:	701a      	strb	r2, [r3, #0]
 8010f20:	e78c      	b.n	8010e3c <_dtoa_r+0x63c>
 8010f22:	4b7f      	ldr	r3, [pc, #508]	; (8011120 <_dtoa_r+0x920>)
 8010f24:	2200      	movs	r2, #0
 8010f26:	f7ef fb7f 	bl	8000628 <__aeabi_dmul>
 8010f2a:	2200      	movs	r2, #0
 8010f2c:	2300      	movs	r3, #0
 8010f2e:	4606      	mov	r6, r0
 8010f30:	460f      	mov	r7, r1
 8010f32:	f7ef fde1 	bl	8000af8 <__aeabi_dcmpeq>
 8010f36:	2800      	cmp	r0, #0
 8010f38:	d09b      	beq.n	8010e72 <_dtoa_r+0x672>
 8010f3a:	e7cd      	b.n	8010ed8 <_dtoa_r+0x6d8>
 8010f3c:	9a08      	ldr	r2, [sp, #32]
 8010f3e:	2a00      	cmp	r2, #0
 8010f40:	f000 80c4 	beq.w	80110cc <_dtoa_r+0x8cc>
 8010f44:	9a05      	ldr	r2, [sp, #20]
 8010f46:	2a01      	cmp	r2, #1
 8010f48:	f300 80a8 	bgt.w	801109c <_dtoa_r+0x89c>
 8010f4c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8010f4e:	2a00      	cmp	r2, #0
 8010f50:	f000 80a0 	beq.w	8011094 <_dtoa_r+0x894>
 8010f54:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8010f58:	9e06      	ldr	r6, [sp, #24]
 8010f5a:	4645      	mov	r5, r8
 8010f5c:	9a04      	ldr	r2, [sp, #16]
 8010f5e:	2101      	movs	r1, #1
 8010f60:	441a      	add	r2, r3
 8010f62:	4620      	mov	r0, r4
 8010f64:	4498      	add	r8, r3
 8010f66:	9204      	str	r2, [sp, #16]
 8010f68:	f000 ff0a 	bl	8011d80 <__i2b>
 8010f6c:	4607      	mov	r7, r0
 8010f6e:	2d00      	cmp	r5, #0
 8010f70:	dd0b      	ble.n	8010f8a <_dtoa_r+0x78a>
 8010f72:	9b04      	ldr	r3, [sp, #16]
 8010f74:	2b00      	cmp	r3, #0
 8010f76:	dd08      	ble.n	8010f8a <_dtoa_r+0x78a>
 8010f78:	42ab      	cmp	r3, r5
 8010f7a:	9a04      	ldr	r2, [sp, #16]
 8010f7c:	bfa8      	it	ge
 8010f7e:	462b      	movge	r3, r5
 8010f80:	eba8 0803 	sub.w	r8, r8, r3
 8010f84:	1aed      	subs	r5, r5, r3
 8010f86:	1ad3      	subs	r3, r2, r3
 8010f88:	9304      	str	r3, [sp, #16]
 8010f8a:	9b06      	ldr	r3, [sp, #24]
 8010f8c:	b1fb      	cbz	r3, 8010fce <_dtoa_r+0x7ce>
 8010f8e:	9b08      	ldr	r3, [sp, #32]
 8010f90:	2b00      	cmp	r3, #0
 8010f92:	f000 809f 	beq.w	80110d4 <_dtoa_r+0x8d4>
 8010f96:	2e00      	cmp	r6, #0
 8010f98:	dd11      	ble.n	8010fbe <_dtoa_r+0x7be>
 8010f9a:	4639      	mov	r1, r7
 8010f9c:	4632      	mov	r2, r6
 8010f9e:	4620      	mov	r0, r4
 8010fa0:	f000 ffaa 	bl	8011ef8 <__pow5mult>
 8010fa4:	465a      	mov	r2, fp
 8010fa6:	4601      	mov	r1, r0
 8010fa8:	4607      	mov	r7, r0
 8010faa:	4620      	mov	r0, r4
 8010fac:	f000 fefe 	bl	8011dac <__multiply>
 8010fb0:	4659      	mov	r1, fp
 8010fb2:	9007      	str	r0, [sp, #28]
 8010fb4:	4620      	mov	r0, r4
 8010fb6:	f000 fddd 	bl	8011b74 <_Bfree>
 8010fba:	9b07      	ldr	r3, [sp, #28]
 8010fbc:	469b      	mov	fp, r3
 8010fbe:	9b06      	ldr	r3, [sp, #24]
 8010fc0:	1b9a      	subs	r2, r3, r6
 8010fc2:	d004      	beq.n	8010fce <_dtoa_r+0x7ce>
 8010fc4:	4659      	mov	r1, fp
 8010fc6:	4620      	mov	r0, r4
 8010fc8:	f000 ff96 	bl	8011ef8 <__pow5mult>
 8010fcc:	4683      	mov	fp, r0
 8010fce:	2101      	movs	r1, #1
 8010fd0:	4620      	mov	r0, r4
 8010fd2:	f000 fed5 	bl	8011d80 <__i2b>
 8010fd6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010fd8:	2b00      	cmp	r3, #0
 8010fda:	4606      	mov	r6, r0
 8010fdc:	dd7c      	ble.n	80110d8 <_dtoa_r+0x8d8>
 8010fde:	461a      	mov	r2, r3
 8010fe0:	4601      	mov	r1, r0
 8010fe2:	4620      	mov	r0, r4
 8010fe4:	f000 ff88 	bl	8011ef8 <__pow5mult>
 8010fe8:	9b05      	ldr	r3, [sp, #20]
 8010fea:	2b01      	cmp	r3, #1
 8010fec:	4606      	mov	r6, r0
 8010fee:	dd76      	ble.n	80110de <_dtoa_r+0x8de>
 8010ff0:	2300      	movs	r3, #0
 8010ff2:	9306      	str	r3, [sp, #24]
 8010ff4:	6933      	ldr	r3, [r6, #16]
 8010ff6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8010ffa:	6918      	ldr	r0, [r3, #16]
 8010ffc:	f000 fe70 	bl	8011ce0 <__hi0bits>
 8011000:	f1c0 0020 	rsb	r0, r0, #32
 8011004:	9b04      	ldr	r3, [sp, #16]
 8011006:	4418      	add	r0, r3
 8011008:	f010 001f 	ands.w	r0, r0, #31
 801100c:	f000 8086 	beq.w	801111c <_dtoa_r+0x91c>
 8011010:	f1c0 0320 	rsb	r3, r0, #32
 8011014:	2b04      	cmp	r3, #4
 8011016:	dd7f      	ble.n	8011118 <_dtoa_r+0x918>
 8011018:	f1c0 001c 	rsb	r0, r0, #28
 801101c:	9b04      	ldr	r3, [sp, #16]
 801101e:	4403      	add	r3, r0
 8011020:	4480      	add	r8, r0
 8011022:	4405      	add	r5, r0
 8011024:	9304      	str	r3, [sp, #16]
 8011026:	f1b8 0f00 	cmp.w	r8, #0
 801102a:	dd05      	ble.n	8011038 <_dtoa_r+0x838>
 801102c:	4659      	mov	r1, fp
 801102e:	4642      	mov	r2, r8
 8011030:	4620      	mov	r0, r4
 8011032:	f000 ffbb 	bl	8011fac <__lshift>
 8011036:	4683      	mov	fp, r0
 8011038:	9b04      	ldr	r3, [sp, #16]
 801103a:	2b00      	cmp	r3, #0
 801103c:	dd05      	ble.n	801104a <_dtoa_r+0x84a>
 801103e:	4631      	mov	r1, r6
 8011040:	461a      	mov	r2, r3
 8011042:	4620      	mov	r0, r4
 8011044:	f000 ffb2 	bl	8011fac <__lshift>
 8011048:	4606      	mov	r6, r0
 801104a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801104c:	2b00      	cmp	r3, #0
 801104e:	d069      	beq.n	8011124 <_dtoa_r+0x924>
 8011050:	4631      	mov	r1, r6
 8011052:	4658      	mov	r0, fp
 8011054:	f001 f816 	bl	8012084 <__mcmp>
 8011058:	2800      	cmp	r0, #0
 801105a:	da63      	bge.n	8011124 <_dtoa_r+0x924>
 801105c:	2300      	movs	r3, #0
 801105e:	4659      	mov	r1, fp
 8011060:	220a      	movs	r2, #10
 8011062:	4620      	mov	r0, r4
 8011064:	f000 fda8 	bl	8011bb8 <__multadd>
 8011068:	9b08      	ldr	r3, [sp, #32]
 801106a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801106e:	4683      	mov	fp, r0
 8011070:	2b00      	cmp	r3, #0
 8011072:	f000 818f 	beq.w	8011394 <_dtoa_r+0xb94>
 8011076:	4639      	mov	r1, r7
 8011078:	2300      	movs	r3, #0
 801107a:	220a      	movs	r2, #10
 801107c:	4620      	mov	r0, r4
 801107e:	f000 fd9b 	bl	8011bb8 <__multadd>
 8011082:	f1b9 0f00 	cmp.w	r9, #0
 8011086:	4607      	mov	r7, r0
 8011088:	f300 808e 	bgt.w	80111a8 <_dtoa_r+0x9a8>
 801108c:	9b05      	ldr	r3, [sp, #20]
 801108e:	2b02      	cmp	r3, #2
 8011090:	dc50      	bgt.n	8011134 <_dtoa_r+0x934>
 8011092:	e089      	b.n	80111a8 <_dtoa_r+0x9a8>
 8011094:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8011096:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801109a:	e75d      	b.n	8010f58 <_dtoa_r+0x758>
 801109c:	9b01      	ldr	r3, [sp, #4]
 801109e:	1e5e      	subs	r6, r3, #1
 80110a0:	9b06      	ldr	r3, [sp, #24]
 80110a2:	42b3      	cmp	r3, r6
 80110a4:	bfbf      	itttt	lt
 80110a6:	9b06      	ldrlt	r3, [sp, #24]
 80110a8:	9606      	strlt	r6, [sp, #24]
 80110aa:	1af2      	sublt	r2, r6, r3
 80110ac:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 80110ae:	bfb6      	itet	lt
 80110b0:	189b      	addlt	r3, r3, r2
 80110b2:	1b9e      	subge	r6, r3, r6
 80110b4:	930d      	strlt	r3, [sp, #52]	; 0x34
 80110b6:	9b01      	ldr	r3, [sp, #4]
 80110b8:	bfb8      	it	lt
 80110ba:	2600      	movlt	r6, #0
 80110bc:	2b00      	cmp	r3, #0
 80110be:	bfb5      	itete	lt
 80110c0:	eba8 0503 	sublt.w	r5, r8, r3
 80110c4:	9b01      	ldrge	r3, [sp, #4]
 80110c6:	2300      	movlt	r3, #0
 80110c8:	4645      	movge	r5, r8
 80110ca:	e747      	b.n	8010f5c <_dtoa_r+0x75c>
 80110cc:	9e06      	ldr	r6, [sp, #24]
 80110ce:	9f08      	ldr	r7, [sp, #32]
 80110d0:	4645      	mov	r5, r8
 80110d2:	e74c      	b.n	8010f6e <_dtoa_r+0x76e>
 80110d4:	9a06      	ldr	r2, [sp, #24]
 80110d6:	e775      	b.n	8010fc4 <_dtoa_r+0x7c4>
 80110d8:	9b05      	ldr	r3, [sp, #20]
 80110da:	2b01      	cmp	r3, #1
 80110dc:	dc18      	bgt.n	8011110 <_dtoa_r+0x910>
 80110de:	9b02      	ldr	r3, [sp, #8]
 80110e0:	b9b3      	cbnz	r3, 8011110 <_dtoa_r+0x910>
 80110e2:	9b03      	ldr	r3, [sp, #12]
 80110e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80110e8:	b9a3      	cbnz	r3, 8011114 <_dtoa_r+0x914>
 80110ea:	9b03      	ldr	r3, [sp, #12]
 80110ec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80110f0:	0d1b      	lsrs	r3, r3, #20
 80110f2:	051b      	lsls	r3, r3, #20
 80110f4:	b12b      	cbz	r3, 8011102 <_dtoa_r+0x902>
 80110f6:	9b04      	ldr	r3, [sp, #16]
 80110f8:	3301      	adds	r3, #1
 80110fa:	9304      	str	r3, [sp, #16]
 80110fc:	f108 0801 	add.w	r8, r8, #1
 8011100:	2301      	movs	r3, #1
 8011102:	9306      	str	r3, [sp, #24]
 8011104:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011106:	2b00      	cmp	r3, #0
 8011108:	f47f af74 	bne.w	8010ff4 <_dtoa_r+0x7f4>
 801110c:	2001      	movs	r0, #1
 801110e:	e779      	b.n	8011004 <_dtoa_r+0x804>
 8011110:	2300      	movs	r3, #0
 8011112:	e7f6      	b.n	8011102 <_dtoa_r+0x902>
 8011114:	9b02      	ldr	r3, [sp, #8]
 8011116:	e7f4      	b.n	8011102 <_dtoa_r+0x902>
 8011118:	d085      	beq.n	8011026 <_dtoa_r+0x826>
 801111a:	4618      	mov	r0, r3
 801111c:	301c      	adds	r0, #28
 801111e:	e77d      	b.n	801101c <_dtoa_r+0x81c>
 8011120:	40240000 	.word	0x40240000
 8011124:	9b01      	ldr	r3, [sp, #4]
 8011126:	2b00      	cmp	r3, #0
 8011128:	dc38      	bgt.n	801119c <_dtoa_r+0x99c>
 801112a:	9b05      	ldr	r3, [sp, #20]
 801112c:	2b02      	cmp	r3, #2
 801112e:	dd35      	ble.n	801119c <_dtoa_r+0x99c>
 8011130:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8011134:	f1b9 0f00 	cmp.w	r9, #0
 8011138:	d10d      	bne.n	8011156 <_dtoa_r+0x956>
 801113a:	4631      	mov	r1, r6
 801113c:	464b      	mov	r3, r9
 801113e:	2205      	movs	r2, #5
 8011140:	4620      	mov	r0, r4
 8011142:	f000 fd39 	bl	8011bb8 <__multadd>
 8011146:	4601      	mov	r1, r0
 8011148:	4606      	mov	r6, r0
 801114a:	4658      	mov	r0, fp
 801114c:	f000 ff9a 	bl	8012084 <__mcmp>
 8011150:	2800      	cmp	r0, #0
 8011152:	f73f adbd 	bgt.w	8010cd0 <_dtoa_r+0x4d0>
 8011156:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011158:	9d00      	ldr	r5, [sp, #0]
 801115a:	ea6f 0a03 	mvn.w	sl, r3
 801115e:	f04f 0800 	mov.w	r8, #0
 8011162:	4631      	mov	r1, r6
 8011164:	4620      	mov	r0, r4
 8011166:	f000 fd05 	bl	8011b74 <_Bfree>
 801116a:	2f00      	cmp	r7, #0
 801116c:	f43f aeb4 	beq.w	8010ed8 <_dtoa_r+0x6d8>
 8011170:	f1b8 0f00 	cmp.w	r8, #0
 8011174:	d005      	beq.n	8011182 <_dtoa_r+0x982>
 8011176:	45b8      	cmp	r8, r7
 8011178:	d003      	beq.n	8011182 <_dtoa_r+0x982>
 801117a:	4641      	mov	r1, r8
 801117c:	4620      	mov	r0, r4
 801117e:	f000 fcf9 	bl	8011b74 <_Bfree>
 8011182:	4639      	mov	r1, r7
 8011184:	4620      	mov	r0, r4
 8011186:	f000 fcf5 	bl	8011b74 <_Bfree>
 801118a:	e6a5      	b.n	8010ed8 <_dtoa_r+0x6d8>
 801118c:	2600      	movs	r6, #0
 801118e:	4637      	mov	r7, r6
 8011190:	e7e1      	b.n	8011156 <_dtoa_r+0x956>
 8011192:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8011194:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8011198:	4637      	mov	r7, r6
 801119a:	e599      	b.n	8010cd0 <_dtoa_r+0x4d0>
 801119c:	9b08      	ldr	r3, [sp, #32]
 801119e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80111a2:	2b00      	cmp	r3, #0
 80111a4:	f000 80fd 	beq.w	80113a2 <_dtoa_r+0xba2>
 80111a8:	2d00      	cmp	r5, #0
 80111aa:	dd05      	ble.n	80111b8 <_dtoa_r+0x9b8>
 80111ac:	4639      	mov	r1, r7
 80111ae:	462a      	mov	r2, r5
 80111b0:	4620      	mov	r0, r4
 80111b2:	f000 fefb 	bl	8011fac <__lshift>
 80111b6:	4607      	mov	r7, r0
 80111b8:	9b06      	ldr	r3, [sp, #24]
 80111ba:	2b00      	cmp	r3, #0
 80111bc:	d05c      	beq.n	8011278 <_dtoa_r+0xa78>
 80111be:	6879      	ldr	r1, [r7, #4]
 80111c0:	4620      	mov	r0, r4
 80111c2:	f000 fc97 	bl	8011af4 <_Balloc>
 80111c6:	4605      	mov	r5, r0
 80111c8:	b928      	cbnz	r0, 80111d6 <_dtoa_r+0x9d6>
 80111ca:	4b80      	ldr	r3, [pc, #512]	; (80113cc <_dtoa_r+0xbcc>)
 80111cc:	4602      	mov	r2, r0
 80111ce:	f240 21ea 	movw	r1, #746	; 0x2ea
 80111d2:	f7ff bb2e 	b.w	8010832 <_dtoa_r+0x32>
 80111d6:	693a      	ldr	r2, [r7, #16]
 80111d8:	3202      	adds	r2, #2
 80111da:	0092      	lsls	r2, r2, #2
 80111dc:	f107 010c 	add.w	r1, r7, #12
 80111e0:	300c      	adds	r0, #12
 80111e2:	f7fd fd17 	bl	800ec14 <memcpy>
 80111e6:	2201      	movs	r2, #1
 80111e8:	4629      	mov	r1, r5
 80111ea:	4620      	mov	r0, r4
 80111ec:	f000 fede 	bl	8011fac <__lshift>
 80111f0:	9b00      	ldr	r3, [sp, #0]
 80111f2:	3301      	adds	r3, #1
 80111f4:	9301      	str	r3, [sp, #4]
 80111f6:	9b00      	ldr	r3, [sp, #0]
 80111f8:	444b      	add	r3, r9
 80111fa:	9307      	str	r3, [sp, #28]
 80111fc:	9b02      	ldr	r3, [sp, #8]
 80111fe:	f003 0301 	and.w	r3, r3, #1
 8011202:	46b8      	mov	r8, r7
 8011204:	9306      	str	r3, [sp, #24]
 8011206:	4607      	mov	r7, r0
 8011208:	9b01      	ldr	r3, [sp, #4]
 801120a:	4631      	mov	r1, r6
 801120c:	3b01      	subs	r3, #1
 801120e:	4658      	mov	r0, fp
 8011210:	9302      	str	r3, [sp, #8]
 8011212:	f7ff fa67 	bl	80106e4 <quorem>
 8011216:	4603      	mov	r3, r0
 8011218:	3330      	adds	r3, #48	; 0x30
 801121a:	9004      	str	r0, [sp, #16]
 801121c:	4641      	mov	r1, r8
 801121e:	4658      	mov	r0, fp
 8011220:	9308      	str	r3, [sp, #32]
 8011222:	f000 ff2f 	bl	8012084 <__mcmp>
 8011226:	463a      	mov	r2, r7
 8011228:	4681      	mov	r9, r0
 801122a:	4631      	mov	r1, r6
 801122c:	4620      	mov	r0, r4
 801122e:	f000 ff45 	bl	80120bc <__mdiff>
 8011232:	68c2      	ldr	r2, [r0, #12]
 8011234:	9b08      	ldr	r3, [sp, #32]
 8011236:	4605      	mov	r5, r0
 8011238:	bb02      	cbnz	r2, 801127c <_dtoa_r+0xa7c>
 801123a:	4601      	mov	r1, r0
 801123c:	4658      	mov	r0, fp
 801123e:	f000 ff21 	bl	8012084 <__mcmp>
 8011242:	9b08      	ldr	r3, [sp, #32]
 8011244:	4602      	mov	r2, r0
 8011246:	4629      	mov	r1, r5
 8011248:	4620      	mov	r0, r4
 801124a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 801124e:	f000 fc91 	bl	8011b74 <_Bfree>
 8011252:	9b05      	ldr	r3, [sp, #20]
 8011254:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011256:	9d01      	ldr	r5, [sp, #4]
 8011258:	ea43 0102 	orr.w	r1, r3, r2
 801125c:	9b06      	ldr	r3, [sp, #24]
 801125e:	430b      	orrs	r3, r1
 8011260:	9b08      	ldr	r3, [sp, #32]
 8011262:	d10d      	bne.n	8011280 <_dtoa_r+0xa80>
 8011264:	2b39      	cmp	r3, #57	; 0x39
 8011266:	d029      	beq.n	80112bc <_dtoa_r+0xabc>
 8011268:	f1b9 0f00 	cmp.w	r9, #0
 801126c:	dd01      	ble.n	8011272 <_dtoa_r+0xa72>
 801126e:	9b04      	ldr	r3, [sp, #16]
 8011270:	3331      	adds	r3, #49	; 0x31
 8011272:	9a02      	ldr	r2, [sp, #8]
 8011274:	7013      	strb	r3, [r2, #0]
 8011276:	e774      	b.n	8011162 <_dtoa_r+0x962>
 8011278:	4638      	mov	r0, r7
 801127a:	e7b9      	b.n	80111f0 <_dtoa_r+0x9f0>
 801127c:	2201      	movs	r2, #1
 801127e:	e7e2      	b.n	8011246 <_dtoa_r+0xa46>
 8011280:	f1b9 0f00 	cmp.w	r9, #0
 8011284:	db06      	blt.n	8011294 <_dtoa_r+0xa94>
 8011286:	9905      	ldr	r1, [sp, #20]
 8011288:	ea41 0909 	orr.w	r9, r1, r9
 801128c:	9906      	ldr	r1, [sp, #24]
 801128e:	ea59 0101 	orrs.w	r1, r9, r1
 8011292:	d120      	bne.n	80112d6 <_dtoa_r+0xad6>
 8011294:	2a00      	cmp	r2, #0
 8011296:	ddec      	ble.n	8011272 <_dtoa_r+0xa72>
 8011298:	4659      	mov	r1, fp
 801129a:	2201      	movs	r2, #1
 801129c:	4620      	mov	r0, r4
 801129e:	9301      	str	r3, [sp, #4]
 80112a0:	f000 fe84 	bl	8011fac <__lshift>
 80112a4:	4631      	mov	r1, r6
 80112a6:	4683      	mov	fp, r0
 80112a8:	f000 feec 	bl	8012084 <__mcmp>
 80112ac:	2800      	cmp	r0, #0
 80112ae:	9b01      	ldr	r3, [sp, #4]
 80112b0:	dc02      	bgt.n	80112b8 <_dtoa_r+0xab8>
 80112b2:	d1de      	bne.n	8011272 <_dtoa_r+0xa72>
 80112b4:	07da      	lsls	r2, r3, #31
 80112b6:	d5dc      	bpl.n	8011272 <_dtoa_r+0xa72>
 80112b8:	2b39      	cmp	r3, #57	; 0x39
 80112ba:	d1d8      	bne.n	801126e <_dtoa_r+0xa6e>
 80112bc:	9a02      	ldr	r2, [sp, #8]
 80112be:	2339      	movs	r3, #57	; 0x39
 80112c0:	7013      	strb	r3, [r2, #0]
 80112c2:	462b      	mov	r3, r5
 80112c4:	461d      	mov	r5, r3
 80112c6:	3b01      	subs	r3, #1
 80112c8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80112cc:	2a39      	cmp	r2, #57	; 0x39
 80112ce:	d050      	beq.n	8011372 <_dtoa_r+0xb72>
 80112d0:	3201      	adds	r2, #1
 80112d2:	701a      	strb	r2, [r3, #0]
 80112d4:	e745      	b.n	8011162 <_dtoa_r+0x962>
 80112d6:	2a00      	cmp	r2, #0
 80112d8:	dd03      	ble.n	80112e2 <_dtoa_r+0xae2>
 80112da:	2b39      	cmp	r3, #57	; 0x39
 80112dc:	d0ee      	beq.n	80112bc <_dtoa_r+0xabc>
 80112de:	3301      	adds	r3, #1
 80112e0:	e7c7      	b.n	8011272 <_dtoa_r+0xa72>
 80112e2:	9a01      	ldr	r2, [sp, #4]
 80112e4:	9907      	ldr	r1, [sp, #28]
 80112e6:	f802 3c01 	strb.w	r3, [r2, #-1]
 80112ea:	428a      	cmp	r2, r1
 80112ec:	d02a      	beq.n	8011344 <_dtoa_r+0xb44>
 80112ee:	4659      	mov	r1, fp
 80112f0:	2300      	movs	r3, #0
 80112f2:	220a      	movs	r2, #10
 80112f4:	4620      	mov	r0, r4
 80112f6:	f000 fc5f 	bl	8011bb8 <__multadd>
 80112fa:	45b8      	cmp	r8, r7
 80112fc:	4683      	mov	fp, r0
 80112fe:	f04f 0300 	mov.w	r3, #0
 8011302:	f04f 020a 	mov.w	r2, #10
 8011306:	4641      	mov	r1, r8
 8011308:	4620      	mov	r0, r4
 801130a:	d107      	bne.n	801131c <_dtoa_r+0xb1c>
 801130c:	f000 fc54 	bl	8011bb8 <__multadd>
 8011310:	4680      	mov	r8, r0
 8011312:	4607      	mov	r7, r0
 8011314:	9b01      	ldr	r3, [sp, #4]
 8011316:	3301      	adds	r3, #1
 8011318:	9301      	str	r3, [sp, #4]
 801131a:	e775      	b.n	8011208 <_dtoa_r+0xa08>
 801131c:	f000 fc4c 	bl	8011bb8 <__multadd>
 8011320:	4639      	mov	r1, r7
 8011322:	4680      	mov	r8, r0
 8011324:	2300      	movs	r3, #0
 8011326:	220a      	movs	r2, #10
 8011328:	4620      	mov	r0, r4
 801132a:	f000 fc45 	bl	8011bb8 <__multadd>
 801132e:	4607      	mov	r7, r0
 8011330:	e7f0      	b.n	8011314 <_dtoa_r+0xb14>
 8011332:	f1b9 0f00 	cmp.w	r9, #0
 8011336:	9a00      	ldr	r2, [sp, #0]
 8011338:	bfcc      	ite	gt
 801133a:	464d      	movgt	r5, r9
 801133c:	2501      	movle	r5, #1
 801133e:	4415      	add	r5, r2
 8011340:	f04f 0800 	mov.w	r8, #0
 8011344:	4659      	mov	r1, fp
 8011346:	2201      	movs	r2, #1
 8011348:	4620      	mov	r0, r4
 801134a:	9301      	str	r3, [sp, #4]
 801134c:	f000 fe2e 	bl	8011fac <__lshift>
 8011350:	4631      	mov	r1, r6
 8011352:	4683      	mov	fp, r0
 8011354:	f000 fe96 	bl	8012084 <__mcmp>
 8011358:	2800      	cmp	r0, #0
 801135a:	dcb2      	bgt.n	80112c2 <_dtoa_r+0xac2>
 801135c:	d102      	bne.n	8011364 <_dtoa_r+0xb64>
 801135e:	9b01      	ldr	r3, [sp, #4]
 8011360:	07db      	lsls	r3, r3, #31
 8011362:	d4ae      	bmi.n	80112c2 <_dtoa_r+0xac2>
 8011364:	462b      	mov	r3, r5
 8011366:	461d      	mov	r5, r3
 8011368:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801136c:	2a30      	cmp	r2, #48	; 0x30
 801136e:	d0fa      	beq.n	8011366 <_dtoa_r+0xb66>
 8011370:	e6f7      	b.n	8011162 <_dtoa_r+0x962>
 8011372:	9a00      	ldr	r2, [sp, #0]
 8011374:	429a      	cmp	r2, r3
 8011376:	d1a5      	bne.n	80112c4 <_dtoa_r+0xac4>
 8011378:	f10a 0a01 	add.w	sl, sl, #1
 801137c:	2331      	movs	r3, #49	; 0x31
 801137e:	e779      	b.n	8011274 <_dtoa_r+0xa74>
 8011380:	4b13      	ldr	r3, [pc, #76]	; (80113d0 <_dtoa_r+0xbd0>)
 8011382:	f7ff baaf 	b.w	80108e4 <_dtoa_r+0xe4>
 8011386:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011388:	2b00      	cmp	r3, #0
 801138a:	f47f aa86 	bne.w	801089a <_dtoa_r+0x9a>
 801138e:	4b11      	ldr	r3, [pc, #68]	; (80113d4 <_dtoa_r+0xbd4>)
 8011390:	f7ff baa8 	b.w	80108e4 <_dtoa_r+0xe4>
 8011394:	f1b9 0f00 	cmp.w	r9, #0
 8011398:	dc03      	bgt.n	80113a2 <_dtoa_r+0xba2>
 801139a:	9b05      	ldr	r3, [sp, #20]
 801139c:	2b02      	cmp	r3, #2
 801139e:	f73f aec9 	bgt.w	8011134 <_dtoa_r+0x934>
 80113a2:	9d00      	ldr	r5, [sp, #0]
 80113a4:	4631      	mov	r1, r6
 80113a6:	4658      	mov	r0, fp
 80113a8:	f7ff f99c 	bl	80106e4 <quorem>
 80113ac:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80113b0:	f805 3b01 	strb.w	r3, [r5], #1
 80113b4:	9a00      	ldr	r2, [sp, #0]
 80113b6:	1aaa      	subs	r2, r5, r2
 80113b8:	4591      	cmp	r9, r2
 80113ba:	ddba      	ble.n	8011332 <_dtoa_r+0xb32>
 80113bc:	4659      	mov	r1, fp
 80113be:	2300      	movs	r3, #0
 80113c0:	220a      	movs	r2, #10
 80113c2:	4620      	mov	r0, r4
 80113c4:	f000 fbf8 	bl	8011bb8 <__multadd>
 80113c8:	4683      	mov	fp, r0
 80113ca:	e7eb      	b.n	80113a4 <_dtoa_r+0xba4>
 80113cc:	08013ddc 	.word	0x08013ddc
 80113d0:	08013bdc 	.word	0x08013bdc
 80113d4:	08013d59 	.word	0x08013d59

080113d8 <rshift>:
 80113d8:	6903      	ldr	r3, [r0, #16]
 80113da:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80113de:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80113e2:	ea4f 1261 	mov.w	r2, r1, asr #5
 80113e6:	f100 0414 	add.w	r4, r0, #20
 80113ea:	dd45      	ble.n	8011478 <rshift+0xa0>
 80113ec:	f011 011f 	ands.w	r1, r1, #31
 80113f0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80113f4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80113f8:	d10c      	bne.n	8011414 <rshift+0x3c>
 80113fa:	f100 0710 	add.w	r7, r0, #16
 80113fe:	4629      	mov	r1, r5
 8011400:	42b1      	cmp	r1, r6
 8011402:	d334      	bcc.n	801146e <rshift+0x96>
 8011404:	1a9b      	subs	r3, r3, r2
 8011406:	009b      	lsls	r3, r3, #2
 8011408:	1eea      	subs	r2, r5, #3
 801140a:	4296      	cmp	r6, r2
 801140c:	bf38      	it	cc
 801140e:	2300      	movcc	r3, #0
 8011410:	4423      	add	r3, r4
 8011412:	e015      	b.n	8011440 <rshift+0x68>
 8011414:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8011418:	f1c1 0820 	rsb	r8, r1, #32
 801141c:	40cf      	lsrs	r7, r1
 801141e:	f105 0e04 	add.w	lr, r5, #4
 8011422:	46a1      	mov	r9, r4
 8011424:	4576      	cmp	r6, lr
 8011426:	46f4      	mov	ip, lr
 8011428:	d815      	bhi.n	8011456 <rshift+0x7e>
 801142a:	1a9b      	subs	r3, r3, r2
 801142c:	009a      	lsls	r2, r3, #2
 801142e:	3a04      	subs	r2, #4
 8011430:	3501      	adds	r5, #1
 8011432:	42ae      	cmp	r6, r5
 8011434:	bf38      	it	cc
 8011436:	2200      	movcc	r2, #0
 8011438:	18a3      	adds	r3, r4, r2
 801143a:	50a7      	str	r7, [r4, r2]
 801143c:	b107      	cbz	r7, 8011440 <rshift+0x68>
 801143e:	3304      	adds	r3, #4
 8011440:	1b1a      	subs	r2, r3, r4
 8011442:	42a3      	cmp	r3, r4
 8011444:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8011448:	bf08      	it	eq
 801144a:	2300      	moveq	r3, #0
 801144c:	6102      	str	r2, [r0, #16]
 801144e:	bf08      	it	eq
 8011450:	6143      	streq	r3, [r0, #20]
 8011452:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011456:	f8dc c000 	ldr.w	ip, [ip]
 801145a:	fa0c fc08 	lsl.w	ip, ip, r8
 801145e:	ea4c 0707 	orr.w	r7, ip, r7
 8011462:	f849 7b04 	str.w	r7, [r9], #4
 8011466:	f85e 7b04 	ldr.w	r7, [lr], #4
 801146a:	40cf      	lsrs	r7, r1
 801146c:	e7da      	b.n	8011424 <rshift+0x4c>
 801146e:	f851 cb04 	ldr.w	ip, [r1], #4
 8011472:	f847 cf04 	str.w	ip, [r7, #4]!
 8011476:	e7c3      	b.n	8011400 <rshift+0x28>
 8011478:	4623      	mov	r3, r4
 801147a:	e7e1      	b.n	8011440 <rshift+0x68>

0801147c <__hexdig_fun>:
 801147c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8011480:	2b09      	cmp	r3, #9
 8011482:	d802      	bhi.n	801148a <__hexdig_fun+0xe>
 8011484:	3820      	subs	r0, #32
 8011486:	b2c0      	uxtb	r0, r0
 8011488:	4770      	bx	lr
 801148a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801148e:	2b05      	cmp	r3, #5
 8011490:	d801      	bhi.n	8011496 <__hexdig_fun+0x1a>
 8011492:	3847      	subs	r0, #71	; 0x47
 8011494:	e7f7      	b.n	8011486 <__hexdig_fun+0xa>
 8011496:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801149a:	2b05      	cmp	r3, #5
 801149c:	d801      	bhi.n	80114a2 <__hexdig_fun+0x26>
 801149e:	3827      	subs	r0, #39	; 0x27
 80114a0:	e7f1      	b.n	8011486 <__hexdig_fun+0xa>
 80114a2:	2000      	movs	r0, #0
 80114a4:	4770      	bx	lr
	...

080114a8 <__gethex>:
 80114a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80114ac:	ed2d 8b02 	vpush	{d8}
 80114b0:	b089      	sub	sp, #36	; 0x24
 80114b2:	ee08 0a10 	vmov	s16, r0
 80114b6:	9304      	str	r3, [sp, #16]
 80114b8:	4bbc      	ldr	r3, [pc, #752]	; (80117ac <__gethex+0x304>)
 80114ba:	681b      	ldr	r3, [r3, #0]
 80114bc:	9301      	str	r3, [sp, #4]
 80114be:	4618      	mov	r0, r3
 80114c0:	468b      	mov	fp, r1
 80114c2:	4690      	mov	r8, r2
 80114c4:	f7ee fe9c 	bl	8000200 <strlen>
 80114c8:	9b01      	ldr	r3, [sp, #4]
 80114ca:	f8db 2000 	ldr.w	r2, [fp]
 80114ce:	4403      	add	r3, r0
 80114d0:	4682      	mov	sl, r0
 80114d2:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80114d6:	9305      	str	r3, [sp, #20]
 80114d8:	1c93      	adds	r3, r2, #2
 80114da:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80114de:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80114e2:	32fe      	adds	r2, #254	; 0xfe
 80114e4:	18d1      	adds	r1, r2, r3
 80114e6:	461f      	mov	r7, r3
 80114e8:	f813 0b01 	ldrb.w	r0, [r3], #1
 80114ec:	9100      	str	r1, [sp, #0]
 80114ee:	2830      	cmp	r0, #48	; 0x30
 80114f0:	d0f8      	beq.n	80114e4 <__gethex+0x3c>
 80114f2:	f7ff ffc3 	bl	801147c <__hexdig_fun>
 80114f6:	4604      	mov	r4, r0
 80114f8:	2800      	cmp	r0, #0
 80114fa:	d13a      	bne.n	8011572 <__gethex+0xca>
 80114fc:	9901      	ldr	r1, [sp, #4]
 80114fe:	4652      	mov	r2, sl
 8011500:	4638      	mov	r0, r7
 8011502:	f001 f9e1 	bl	80128c8 <strncmp>
 8011506:	4605      	mov	r5, r0
 8011508:	2800      	cmp	r0, #0
 801150a:	d168      	bne.n	80115de <__gethex+0x136>
 801150c:	f817 000a 	ldrb.w	r0, [r7, sl]
 8011510:	eb07 060a 	add.w	r6, r7, sl
 8011514:	f7ff ffb2 	bl	801147c <__hexdig_fun>
 8011518:	2800      	cmp	r0, #0
 801151a:	d062      	beq.n	80115e2 <__gethex+0x13a>
 801151c:	4633      	mov	r3, r6
 801151e:	7818      	ldrb	r0, [r3, #0]
 8011520:	2830      	cmp	r0, #48	; 0x30
 8011522:	461f      	mov	r7, r3
 8011524:	f103 0301 	add.w	r3, r3, #1
 8011528:	d0f9      	beq.n	801151e <__gethex+0x76>
 801152a:	f7ff ffa7 	bl	801147c <__hexdig_fun>
 801152e:	2301      	movs	r3, #1
 8011530:	fab0 f480 	clz	r4, r0
 8011534:	0964      	lsrs	r4, r4, #5
 8011536:	4635      	mov	r5, r6
 8011538:	9300      	str	r3, [sp, #0]
 801153a:	463a      	mov	r2, r7
 801153c:	4616      	mov	r6, r2
 801153e:	3201      	adds	r2, #1
 8011540:	7830      	ldrb	r0, [r6, #0]
 8011542:	f7ff ff9b 	bl	801147c <__hexdig_fun>
 8011546:	2800      	cmp	r0, #0
 8011548:	d1f8      	bne.n	801153c <__gethex+0x94>
 801154a:	9901      	ldr	r1, [sp, #4]
 801154c:	4652      	mov	r2, sl
 801154e:	4630      	mov	r0, r6
 8011550:	f001 f9ba 	bl	80128c8 <strncmp>
 8011554:	b980      	cbnz	r0, 8011578 <__gethex+0xd0>
 8011556:	b94d      	cbnz	r5, 801156c <__gethex+0xc4>
 8011558:	eb06 050a 	add.w	r5, r6, sl
 801155c:	462a      	mov	r2, r5
 801155e:	4616      	mov	r6, r2
 8011560:	3201      	adds	r2, #1
 8011562:	7830      	ldrb	r0, [r6, #0]
 8011564:	f7ff ff8a 	bl	801147c <__hexdig_fun>
 8011568:	2800      	cmp	r0, #0
 801156a:	d1f8      	bne.n	801155e <__gethex+0xb6>
 801156c:	1bad      	subs	r5, r5, r6
 801156e:	00ad      	lsls	r5, r5, #2
 8011570:	e004      	b.n	801157c <__gethex+0xd4>
 8011572:	2400      	movs	r4, #0
 8011574:	4625      	mov	r5, r4
 8011576:	e7e0      	b.n	801153a <__gethex+0x92>
 8011578:	2d00      	cmp	r5, #0
 801157a:	d1f7      	bne.n	801156c <__gethex+0xc4>
 801157c:	7833      	ldrb	r3, [r6, #0]
 801157e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8011582:	2b50      	cmp	r3, #80	; 0x50
 8011584:	d13b      	bne.n	80115fe <__gethex+0x156>
 8011586:	7873      	ldrb	r3, [r6, #1]
 8011588:	2b2b      	cmp	r3, #43	; 0x2b
 801158a:	d02c      	beq.n	80115e6 <__gethex+0x13e>
 801158c:	2b2d      	cmp	r3, #45	; 0x2d
 801158e:	d02e      	beq.n	80115ee <__gethex+0x146>
 8011590:	1c71      	adds	r1, r6, #1
 8011592:	f04f 0900 	mov.w	r9, #0
 8011596:	7808      	ldrb	r0, [r1, #0]
 8011598:	f7ff ff70 	bl	801147c <__hexdig_fun>
 801159c:	1e43      	subs	r3, r0, #1
 801159e:	b2db      	uxtb	r3, r3
 80115a0:	2b18      	cmp	r3, #24
 80115a2:	d82c      	bhi.n	80115fe <__gethex+0x156>
 80115a4:	f1a0 0210 	sub.w	r2, r0, #16
 80115a8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80115ac:	f7ff ff66 	bl	801147c <__hexdig_fun>
 80115b0:	1e43      	subs	r3, r0, #1
 80115b2:	b2db      	uxtb	r3, r3
 80115b4:	2b18      	cmp	r3, #24
 80115b6:	d91d      	bls.n	80115f4 <__gethex+0x14c>
 80115b8:	f1b9 0f00 	cmp.w	r9, #0
 80115bc:	d000      	beq.n	80115c0 <__gethex+0x118>
 80115be:	4252      	negs	r2, r2
 80115c0:	4415      	add	r5, r2
 80115c2:	f8cb 1000 	str.w	r1, [fp]
 80115c6:	b1e4      	cbz	r4, 8011602 <__gethex+0x15a>
 80115c8:	9b00      	ldr	r3, [sp, #0]
 80115ca:	2b00      	cmp	r3, #0
 80115cc:	bf14      	ite	ne
 80115ce:	2700      	movne	r7, #0
 80115d0:	2706      	moveq	r7, #6
 80115d2:	4638      	mov	r0, r7
 80115d4:	b009      	add	sp, #36	; 0x24
 80115d6:	ecbd 8b02 	vpop	{d8}
 80115da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80115de:	463e      	mov	r6, r7
 80115e0:	4625      	mov	r5, r4
 80115e2:	2401      	movs	r4, #1
 80115e4:	e7ca      	b.n	801157c <__gethex+0xd4>
 80115e6:	f04f 0900 	mov.w	r9, #0
 80115ea:	1cb1      	adds	r1, r6, #2
 80115ec:	e7d3      	b.n	8011596 <__gethex+0xee>
 80115ee:	f04f 0901 	mov.w	r9, #1
 80115f2:	e7fa      	b.n	80115ea <__gethex+0x142>
 80115f4:	230a      	movs	r3, #10
 80115f6:	fb03 0202 	mla	r2, r3, r2, r0
 80115fa:	3a10      	subs	r2, #16
 80115fc:	e7d4      	b.n	80115a8 <__gethex+0x100>
 80115fe:	4631      	mov	r1, r6
 8011600:	e7df      	b.n	80115c2 <__gethex+0x11a>
 8011602:	1bf3      	subs	r3, r6, r7
 8011604:	3b01      	subs	r3, #1
 8011606:	4621      	mov	r1, r4
 8011608:	2b07      	cmp	r3, #7
 801160a:	dc0b      	bgt.n	8011624 <__gethex+0x17c>
 801160c:	ee18 0a10 	vmov	r0, s16
 8011610:	f000 fa70 	bl	8011af4 <_Balloc>
 8011614:	4604      	mov	r4, r0
 8011616:	b940      	cbnz	r0, 801162a <__gethex+0x182>
 8011618:	4b65      	ldr	r3, [pc, #404]	; (80117b0 <__gethex+0x308>)
 801161a:	4602      	mov	r2, r0
 801161c:	21de      	movs	r1, #222	; 0xde
 801161e:	4865      	ldr	r0, [pc, #404]	; (80117b4 <__gethex+0x30c>)
 8011620:	f001 f972 	bl	8012908 <__assert_func>
 8011624:	3101      	adds	r1, #1
 8011626:	105b      	asrs	r3, r3, #1
 8011628:	e7ee      	b.n	8011608 <__gethex+0x160>
 801162a:	f100 0914 	add.w	r9, r0, #20
 801162e:	f04f 0b00 	mov.w	fp, #0
 8011632:	f1ca 0301 	rsb	r3, sl, #1
 8011636:	f8cd 9008 	str.w	r9, [sp, #8]
 801163a:	f8cd b000 	str.w	fp, [sp]
 801163e:	9306      	str	r3, [sp, #24]
 8011640:	42b7      	cmp	r7, r6
 8011642:	d340      	bcc.n	80116c6 <__gethex+0x21e>
 8011644:	9802      	ldr	r0, [sp, #8]
 8011646:	9b00      	ldr	r3, [sp, #0]
 8011648:	f840 3b04 	str.w	r3, [r0], #4
 801164c:	eba0 0009 	sub.w	r0, r0, r9
 8011650:	1080      	asrs	r0, r0, #2
 8011652:	0146      	lsls	r6, r0, #5
 8011654:	6120      	str	r0, [r4, #16]
 8011656:	4618      	mov	r0, r3
 8011658:	f000 fb42 	bl	8011ce0 <__hi0bits>
 801165c:	1a30      	subs	r0, r6, r0
 801165e:	f8d8 6000 	ldr.w	r6, [r8]
 8011662:	42b0      	cmp	r0, r6
 8011664:	dd63      	ble.n	801172e <__gethex+0x286>
 8011666:	1b87      	subs	r7, r0, r6
 8011668:	4639      	mov	r1, r7
 801166a:	4620      	mov	r0, r4
 801166c:	f000 fedc 	bl	8012428 <__any_on>
 8011670:	4682      	mov	sl, r0
 8011672:	b1a8      	cbz	r0, 80116a0 <__gethex+0x1f8>
 8011674:	1e7b      	subs	r3, r7, #1
 8011676:	1159      	asrs	r1, r3, #5
 8011678:	f003 021f 	and.w	r2, r3, #31
 801167c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8011680:	f04f 0a01 	mov.w	sl, #1
 8011684:	fa0a f202 	lsl.w	r2, sl, r2
 8011688:	420a      	tst	r2, r1
 801168a:	d009      	beq.n	80116a0 <__gethex+0x1f8>
 801168c:	4553      	cmp	r3, sl
 801168e:	dd05      	ble.n	801169c <__gethex+0x1f4>
 8011690:	1eb9      	subs	r1, r7, #2
 8011692:	4620      	mov	r0, r4
 8011694:	f000 fec8 	bl	8012428 <__any_on>
 8011698:	2800      	cmp	r0, #0
 801169a:	d145      	bne.n	8011728 <__gethex+0x280>
 801169c:	f04f 0a02 	mov.w	sl, #2
 80116a0:	4639      	mov	r1, r7
 80116a2:	4620      	mov	r0, r4
 80116a4:	f7ff fe98 	bl	80113d8 <rshift>
 80116a8:	443d      	add	r5, r7
 80116aa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80116ae:	42ab      	cmp	r3, r5
 80116b0:	da4c      	bge.n	801174c <__gethex+0x2a4>
 80116b2:	ee18 0a10 	vmov	r0, s16
 80116b6:	4621      	mov	r1, r4
 80116b8:	f000 fa5c 	bl	8011b74 <_Bfree>
 80116bc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80116be:	2300      	movs	r3, #0
 80116c0:	6013      	str	r3, [r2, #0]
 80116c2:	27a3      	movs	r7, #163	; 0xa3
 80116c4:	e785      	b.n	80115d2 <__gethex+0x12a>
 80116c6:	1e73      	subs	r3, r6, #1
 80116c8:	9a05      	ldr	r2, [sp, #20]
 80116ca:	9303      	str	r3, [sp, #12]
 80116cc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80116d0:	4293      	cmp	r3, r2
 80116d2:	d019      	beq.n	8011708 <__gethex+0x260>
 80116d4:	f1bb 0f20 	cmp.w	fp, #32
 80116d8:	d107      	bne.n	80116ea <__gethex+0x242>
 80116da:	9b02      	ldr	r3, [sp, #8]
 80116dc:	9a00      	ldr	r2, [sp, #0]
 80116de:	f843 2b04 	str.w	r2, [r3], #4
 80116e2:	9302      	str	r3, [sp, #8]
 80116e4:	2300      	movs	r3, #0
 80116e6:	9300      	str	r3, [sp, #0]
 80116e8:	469b      	mov	fp, r3
 80116ea:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80116ee:	f7ff fec5 	bl	801147c <__hexdig_fun>
 80116f2:	9b00      	ldr	r3, [sp, #0]
 80116f4:	f000 000f 	and.w	r0, r0, #15
 80116f8:	fa00 f00b 	lsl.w	r0, r0, fp
 80116fc:	4303      	orrs	r3, r0
 80116fe:	9300      	str	r3, [sp, #0]
 8011700:	f10b 0b04 	add.w	fp, fp, #4
 8011704:	9b03      	ldr	r3, [sp, #12]
 8011706:	e00d      	b.n	8011724 <__gethex+0x27c>
 8011708:	9b03      	ldr	r3, [sp, #12]
 801170a:	9a06      	ldr	r2, [sp, #24]
 801170c:	4413      	add	r3, r2
 801170e:	42bb      	cmp	r3, r7
 8011710:	d3e0      	bcc.n	80116d4 <__gethex+0x22c>
 8011712:	4618      	mov	r0, r3
 8011714:	9901      	ldr	r1, [sp, #4]
 8011716:	9307      	str	r3, [sp, #28]
 8011718:	4652      	mov	r2, sl
 801171a:	f001 f8d5 	bl	80128c8 <strncmp>
 801171e:	9b07      	ldr	r3, [sp, #28]
 8011720:	2800      	cmp	r0, #0
 8011722:	d1d7      	bne.n	80116d4 <__gethex+0x22c>
 8011724:	461e      	mov	r6, r3
 8011726:	e78b      	b.n	8011640 <__gethex+0x198>
 8011728:	f04f 0a03 	mov.w	sl, #3
 801172c:	e7b8      	b.n	80116a0 <__gethex+0x1f8>
 801172e:	da0a      	bge.n	8011746 <__gethex+0x29e>
 8011730:	1a37      	subs	r7, r6, r0
 8011732:	4621      	mov	r1, r4
 8011734:	ee18 0a10 	vmov	r0, s16
 8011738:	463a      	mov	r2, r7
 801173a:	f000 fc37 	bl	8011fac <__lshift>
 801173e:	1bed      	subs	r5, r5, r7
 8011740:	4604      	mov	r4, r0
 8011742:	f100 0914 	add.w	r9, r0, #20
 8011746:	f04f 0a00 	mov.w	sl, #0
 801174a:	e7ae      	b.n	80116aa <__gethex+0x202>
 801174c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8011750:	42a8      	cmp	r0, r5
 8011752:	dd72      	ble.n	801183a <__gethex+0x392>
 8011754:	1b45      	subs	r5, r0, r5
 8011756:	42ae      	cmp	r6, r5
 8011758:	dc36      	bgt.n	80117c8 <__gethex+0x320>
 801175a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801175e:	2b02      	cmp	r3, #2
 8011760:	d02a      	beq.n	80117b8 <__gethex+0x310>
 8011762:	2b03      	cmp	r3, #3
 8011764:	d02c      	beq.n	80117c0 <__gethex+0x318>
 8011766:	2b01      	cmp	r3, #1
 8011768:	d115      	bne.n	8011796 <__gethex+0x2ee>
 801176a:	42ae      	cmp	r6, r5
 801176c:	d113      	bne.n	8011796 <__gethex+0x2ee>
 801176e:	2e01      	cmp	r6, #1
 8011770:	d10b      	bne.n	801178a <__gethex+0x2e2>
 8011772:	9a04      	ldr	r2, [sp, #16]
 8011774:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8011778:	6013      	str	r3, [r2, #0]
 801177a:	2301      	movs	r3, #1
 801177c:	6123      	str	r3, [r4, #16]
 801177e:	f8c9 3000 	str.w	r3, [r9]
 8011782:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011784:	2762      	movs	r7, #98	; 0x62
 8011786:	601c      	str	r4, [r3, #0]
 8011788:	e723      	b.n	80115d2 <__gethex+0x12a>
 801178a:	1e71      	subs	r1, r6, #1
 801178c:	4620      	mov	r0, r4
 801178e:	f000 fe4b 	bl	8012428 <__any_on>
 8011792:	2800      	cmp	r0, #0
 8011794:	d1ed      	bne.n	8011772 <__gethex+0x2ca>
 8011796:	ee18 0a10 	vmov	r0, s16
 801179a:	4621      	mov	r1, r4
 801179c:	f000 f9ea 	bl	8011b74 <_Bfree>
 80117a0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80117a2:	2300      	movs	r3, #0
 80117a4:	6013      	str	r3, [r2, #0]
 80117a6:	2750      	movs	r7, #80	; 0x50
 80117a8:	e713      	b.n	80115d2 <__gethex+0x12a>
 80117aa:	bf00      	nop
 80117ac:	08013e58 	.word	0x08013e58
 80117b0:	08013ddc 	.word	0x08013ddc
 80117b4:	08013ded 	.word	0x08013ded
 80117b8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80117ba:	2b00      	cmp	r3, #0
 80117bc:	d1eb      	bne.n	8011796 <__gethex+0x2ee>
 80117be:	e7d8      	b.n	8011772 <__gethex+0x2ca>
 80117c0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80117c2:	2b00      	cmp	r3, #0
 80117c4:	d1d5      	bne.n	8011772 <__gethex+0x2ca>
 80117c6:	e7e6      	b.n	8011796 <__gethex+0x2ee>
 80117c8:	1e6f      	subs	r7, r5, #1
 80117ca:	f1ba 0f00 	cmp.w	sl, #0
 80117ce:	d131      	bne.n	8011834 <__gethex+0x38c>
 80117d0:	b127      	cbz	r7, 80117dc <__gethex+0x334>
 80117d2:	4639      	mov	r1, r7
 80117d4:	4620      	mov	r0, r4
 80117d6:	f000 fe27 	bl	8012428 <__any_on>
 80117da:	4682      	mov	sl, r0
 80117dc:	117b      	asrs	r3, r7, #5
 80117de:	2101      	movs	r1, #1
 80117e0:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80117e4:	f007 071f 	and.w	r7, r7, #31
 80117e8:	fa01 f707 	lsl.w	r7, r1, r7
 80117ec:	421f      	tst	r7, r3
 80117ee:	4629      	mov	r1, r5
 80117f0:	4620      	mov	r0, r4
 80117f2:	bf18      	it	ne
 80117f4:	f04a 0a02 	orrne.w	sl, sl, #2
 80117f8:	1b76      	subs	r6, r6, r5
 80117fa:	f7ff fded 	bl	80113d8 <rshift>
 80117fe:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8011802:	2702      	movs	r7, #2
 8011804:	f1ba 0f00 	cmp.w	sl, #0
 8011808:	d048      	beq.n	801189c <__gethex+0x3f4>
 801180a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801180e:	2b02      	cmp	r3, #2
 8011810:	d015      	beq.n	801183e <__gethex+0x396>
 8011812:	2b03      	cmp	r3, #3
 8011814:	d017      	beq.n	8011846 <__gethex+0x39e>
 8011816:	2b01      	cmp	r3, #1
 8011818:	d109      	bne.n	801182e <__gethex+0x386>
 801181a:	f01a 0f02 	tst.w	sl, #2
 801181e:	d006      	beq.n	801182e <__gethex+0x386>
 8011820:	f8d9 0000 	ldr.w	r0, [r9]
 8011824:	ea4a 0a00 	orr.w	sl, sl, r0
 8011828:	f01a 0f01 	tst.w	sl, #1
 801182c:	d10e      	bne.n	801184c <__gethex+0x3a4>
 801182e:	f047 0710 	orr.w	r7, r7, #16
 8011832:	e033      	b.n	801189c <__gethex+0x3f4>
 8011834:	f04f 0a01 	mov.w	sl, #1
 8011838:	e7d0      	b.n	80117dc <__gethex+0x334>
 801183a:	2701      	movs	r7, #1
 801183c:	e7e2      	b.n	8011804 <__gethex+0x35c>
 801183e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011840:	f1c3 0301 	rsb	r3, r3, #1
 8011844:	9315      	str	r3, [sp, #84]	; 0x54
 8011846:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011848:	2b00      	cmp	r3, #0
 801184a:	d0f0      	beq.n	801182e <__gethex+0x386>
 801184c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8011850:	f104 0314 	add.w	r3, r4, #20
 8011854:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8011858:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801185c:	f04f 0c00 	mov.w	ip, #0
 8011860:	4618      	mov	r0, r3
 8011862:	f853 2b04 	ldr.w	r2, [r3], #4
 8011866:	f1b2 3fff 	cmp.w	r2, #4294967295
 801186a:	d01c      	beq.n	80118a6 <__gethex+0x3fe>
 801186c:	3201      	adds	r2, #1
 801186e:	6002      	str	r2, [r0, #0]
 8011870:	2f02      	cmp	r7, #2
 8011872:	f104 0314 	add.w	r3, r4, #20
 8011876:	d13f      	bne.n	80118f8 <__gethex+0x450>
 8011878:	f8d8 2000 	ldr.w	r2, [r8]
 801187c:	3a01      	subs	r2, #1
 801187e:	42b2      	cmp	r2, r6
 8011880:	d10a      	bne.n	8011898 <__gethex+0x3f0>
 8011882:	1171      	asrs	r1, r6, #5
 8011884:	2201      	movs	r2, #1
 8011886:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801188a:	f006 061f 	and.w	r6, r6, #31
 801188e:	fa02 f606 	lsl.w	r6, r2, r6
 8011892:	421e      	tst	r6, r3
 8011894:	bf18      	it	ne
 8011896:	4617      	movne	r7, r2
 8011898:	f047 0720 	orr.w	r7, r7, #32
 801189c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801189e:	601c      	str	r4, [r3, #0]
 80118a0:	9b04      	ldr	r3, [sp, #16]
 80118a2:	601d      	str	r5, [r3, #0]
 80118a4:	e695      	b.n	80115d2 <__gethex+0x12a>
 80118a6:	4299      	cmp	r1, r3
 80118a8:	f843 cc04 	str.w	ip, [r3, #-4]
 80118ac:	d8d8      	bhi.n	8011860 <__gethex+0x3b8>
 80118ae:	68a3      	ldr	r3, [r4, #8]
 80118b0:	459b      	cmp	fp, r3
 80118b2:	db19      	blt.n	80118e8 <__gethex+0x440>
 80118b4:	6861      	ldr	r1, [r4, #4]
 80118b6:	ee18 0a10 	vmov	r0, s16
 80118ba:	3101      	adds	r1, #1
 80118bc:	f000 f91a 	bl	8011af4 <_Balloc>
 80118c0:	4681      	mov	r9, r0
 80118c2:	b918      	cbnz	r0, 80118cc <__gethex+0x424>
 80118c4:	4b1a      	ldr	r3, [pc, #104]	; (8011930 <__gethex+0x488>)
 80118c6:	4602      	mov	r2, r0
 80118c8:	2184      	movs	r1, #132	; 0x84
 80118ca:	e6a8      	b.n	801161e <__gethex+0x176>
 80118cc:	6922      	ldr	r2, [r4, #16]
 80118ce:	3202      	adds	r2, #2
 80118d0:	f104 010c 	add.w	r1, r4, #12
 80118d4:	0092      	lsls	r2, r2, #2
 80118d6:	300c      	adds	r0, #12
 80118d8:	f7fd f99c 	bl	800ec14 <memcpy>
 80118dc:	4621      	mov	r1, r4
 80118de:	ee18 0a10 	vmov	r0, s16
 80118e2:	f000 f947 	bl	8011b74 <_Bfree>
 80118e6:	464c      	mov	r4, r9
 80118e8:	6923      	ldr	r3, [r4, #16]
 80118ea:	1c5a      	adds	r2, r3, #1
 80118ec:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80118f0:	6122      	str	r2, [r4, #16]
 80118f2:	2201      	movs	r2, #1
 80118f4:	615a      	str	r2, [r3, #20]
 80118f6:	e7bb      	b.n	8011870 <__gethex+0x3c8>
 80118f8:	6922      	ldr	r2, [r4, #16]
 80118fa:	455a      	cmp	r2, fp
 80118fc:	dd0b      	ble.n	8011916 <__gethex+0x46e>
 80118fe:	2101      	movs	r1, #1
 8011900:	4620      	mov	r0, r4
 8011902:	f7ff fd69 	bl	80113d8 <rshift>
 8011906:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801190a:	3501      	adds	r5, #1
 801190c:	42ab      	cmp	r3, r5
 801190e:	f6ff aed0 	blt.w	80116b2 <__gethex+0x20a>
 8011912:	2701      	movs	r7, #1
 8011914:	e7c0      	b.n	8011898 <__gethex+0x3f0>
 8011916:	f016 061f 	ands.w	r6, r6, #31
 801191a:	d0fa      	beq.n	8011912 <__gethex+0x46a>
 801191c:	449a      	add	sl, r3
 801191e:	f1c6 0620 	rsb	r6, r6, #32
 8011922:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8011926:	f000 f9db 	bl	8011ce0 <__hi0bits>
 801192a:	42b0      	cmp	r0, r6
 801192c:	dbe7      	blt.n	80118fe <__gethex+0x456>
 801192e:	e7f0      	b.n	8011912 <__gethex+0x46a>
 8011930:	08013ddc 	.word	0x08013ddc

08011934 <L_shift>:
 8011934:	f1c2 0208 	rsb	r2, r2, #8
 8011938:	0092      	lsls	r2, r2, #2
 801193a:	b570      	push	{r4, r5, r6, lr}
 801193c:	f1c2 0620 	rsb	r6, r2, #32
 8011940:	6843      	ldr	r3, [r0, #4]
 8011942:	6804      	ldr	r4, [r0, #0]
 8011944:	fa03 f506 	lsl.w	r5, r3, r6
 8011948:	432c      	orrs	r4, r5
 801194a:	40d3      	lsrs	r3, r2
 801194c:	6004      	str	r4, [r0, #0]
 801194e:	f840 3f04 	str.w	r3, [r0, #4]!
 8011952:	4288      	cmp	r0, r1
 8011954:	d3f4      	bcc.n	8011940 <L_shift+0xc>
 8011956:	bd70      	pop	{r4, r5, r6, pc}

08011958 <__match>:
 8011958:	b530      	push	{r4, r5, lr}
 801195a:	6803      	ldr	r3, [r0, #0]
 801195c:	3301      	adds	r3, #1
 801195e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011962:	b914      	cbnz	r4, 801196a <__match+0x12>
 8011964:	6003      	str	r3, [r0, #0]
 8011966:	2001      	movs	r0, #1
 8011968:	bd30      	pop	{r4, r5, pc}
 801196a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801196e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8011972:	2d19      	cmp	r5, #25
 8011974:	bf98      	it	ls
 8011976:	3220      	addls	r2, #32
 8011978:	42a2      	cmp	r2, r4
 801197a:	d0f0      	beq.n	801195e <__match+0x6>
 801197c:	2000      	movs	r0, #0
 801197e:	e7f3      	b.n	8011968 <__match+0x10>

08011980 <__hexnan>:
 8011980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011984:	680b      	ldr	r3, [r1, #0]
 8011986:	6801      	ldr	r1, [r0, #0]
 8011988:	115e      	asrs	r6, r3, #5
 801198a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801198e:	f013 031f 	ands.w	r3, r3, #31
 8011992:	b087      	sub	sp, #28
 8011994:	bf18      	it	ne
 8011996:	3604      	addne	r6, #4
 8011998:	2500      	movs	r5, #0
 801199a:	1f37      	subs	r7, r6, #4
 801199c:	4682      	mov	sl, r0
 801199e:	4690      	mov	r8, r2
 80119a0:	9301      	str	r3, [sp, #4]
 80119a2:	f846 5c04 	str.w	r5, [r6, #-4]
 80119a6:	46b9      	mov	r9, r7
 80119a8:	463c      	mov	r4, r7
 80119aa:	9502      	str	r5, [sp, #8]
 80119ac:	46ab      	mov	fp, r5
 80119ae:	784a      	ldrb	r2, [r1, #1]
 80119b0:	1c4b      	adds	r3, r1, #1
 80119b2:	9303      	str	r3, [sp, #12]
 80119b4:	b342      	cbz	r2, 8011a08 <__hexnan+0x88>
 80119b6:	4610      	mov	r0, r2
 80119b8:	9105      	str	r1, [sp, #20]
 80119ba:	9204      	str	r2, [sp, #16]
 80119bc:	f7ff fd5e 	bl	801147c <__hexdig_fun>
 80119c0:	2800      	cmp	r0, #0
 80119c2:	d14f      	bne.n	8011a64 <__hexnan+0xe4>
 80119c4:	9a04      	ldr	r2, [sp, #16]
 80119c6:	9905      	ldr	r1, [sp, #20]
 80119c8:	2a20      	cmp	r2, #32
 80119ca:	d818      	bhi.n	80119fe <__hexnan+0x7e>
 80119cc:	9b02      	ldr	r3, [sp, #8]
 80119ce:	459b      	cmp	fp, r3
 80119d0:	dd13      	ble.n	80119fa <__hexnan+0x7a>
 80119d2:	454c      	cmp	r4, r9
 80119d4:	d206      	bcs.n	80119e4 <__hexnan+0x64>
 80119d6:	2d07      	cmp	r5, #7
 80119d8:	dc04      	bgt.n	80119e4 <__hexnan+0x64>
 80119da:	462a      	mov	r2, r5
 80119dc:	4649      	mov	r1, r9
 80119de:	4620      	mov	r0, r4
 80119e0:	f7ff ffa8 	bl	8011934 <L_shift>
 80119e4:	4544      	cmp	r4, r8
 80119e6:	d950      	bls.n	8011a8a <__hexnan+0x10a>
 80119e8:	2300      	movs	r3, #0
 80119ea:	f1a4 0904 	sub.w	r9, r4, #4
 80119ee:	f844 3c04 	str.w	r3, [r4, #-4]
 80119f2:	f8cd b008 	str.w	fp, [sp, #8]
 80119f6:	464c      	mov	r4, r9
 80119f8:	461d      	mov	r5, r3
 80119fa:	9903      	ldr	r1, [sp, #12]
 80119fc:	e7d7      	b.n	80119ae <__hexnan+0x2e>
 80119fe:	2a29      	cmp	r2, #41	; 0x29
 8011a00:	d156      	bne.n	8011ab0 <__hexnan+0x130>
 8011a02:	3102      	adds	r1, #2
 8011a04:	f8ca 1000 	str.w	r1, [sl]
 8011a08:	f1bb 0f00 	cmp.w	fp, #0
 8011a0c:	d050      	beq.n	8011ab0 <__hexnan+0x130>
 8011a0e:	454c      	cmp	r4, r9
 8011a10:	d206      	bcs.n	8011a20 <__hexnan+0xa0>
 8011a12:	2d07      	cmp	r5, #7
 8011a14:	dc04      	bgt.n	8011a20 <__hexnan+0xa0>
 8011a16:	462a      	mov	r2, r5
 8011a18:	4649      	mov	r1, r9
 8011a1a:	4620      	mov	r0, r4
 8011a1c:	f7ff ff8a 	bl	8011934 <L_shift>
 8011a20:	4544      	cmp	r4, r8
 8011a22:	d934      	bls.n	8011a8e <__hexnan+0x10e>
 8011a24:	f1a8 0204 	sub.w	r2, r8, #4
 8011a28:	4623      	mov	r3, r4
 8011a2a:	f853 1b04 	ldr.w	r1, [r3], #4
 8011a2e:	f842 1f04 	str.w	r1, [r2, #4]!
 8011a32:	429f      	cmp	r7, r3
 8011a34:	d2f9      	bcs.n	8011a2a <__hexnan+0xaa>
 8011a36:	1b3b      	subs	r3, r7, r4
 8011a38:	f023 0303 	bic.w	r3, r3, #3
 8011a3c:	3304      	adds	r3, #4
 8011a3e:	3401      	adds	r4, #1
 8011a40:	3e03      	subs	r6, #3
 8011a42:	42b4      	cmp	r4, r6
 8011a44:	bf88      	it	hi
 8011a46:	2304      	movhi	r3, #4
 8011a48:	4443      	add	r3, r8
 8011a4a:	2200      	movs	r2, #0
 8011a4c:	f843 2b04 	str.w	r2, [r3], #4
 8011a50:	429f      	cmp	r7, r3
 8011a52:	d2fb      	bcs.n	8011a4c <__hexnan+0xcc>
 8011a54:	683b      	ldr	r3, [r7, #0]
 8011a56:	b91b      	cbnz	r3, 8011a60 <__hexnan+0xe0>
 8011a58:	4547      	cmp	r7, r8
 8011a5a:	d127      	bne.n	8011aac <__hexnan+0x12c>
 8011a5c:	2301      	movs	r3, #1
 8011a5e:	603b      	str	r3, [r7, #0]
 8011a60:	2005      	movs	r0, #5
 8011a62:	e026      	b.n	8011ab2 <__hexnan+0x132>
 8011a64:	3501      	adds	r5, #1
 8011a66:	2d08      	cmp	r5, #8
 8011a68:	f10b 0b01 	add.w	fp, fp, #1
 8011a6c:	dd06      	ble.n	8011a7c <__hexnan+0xfc>
 8011a6e:	4544      	cmp	r4, r8
 8011a70:	d9c3      	bls.n	80119fa <__hexnan+0x7a>
 8011a72:	2300      	movs	r3, #0
 8011a74:	f844 3c04 	str.w	r3, [r4, #-4]
 8011a78:	2501      	movs	r5, #1
 8011a7a:	3c04      	subs	r4, #4
 8011a7c:	6822      	ldr	r2, [r4, #0]
 8011a7e:	f000 000f 	and.w	r0, r0, #15
 8011a82:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8011a86:	6022      	str	r2, [r4, #0]
 8011a88:	e7b7      	b.n	80119fa <__hexnan+0x7a>
 8011a8a:	2508      	movs	r5, #8
 8011a8c:	e7b5      	b.n	80119fa <__hexnan+0x7a>
 8011a8e:	9b01      	ldr	r3, [sp, #4]
 8011a90:	2b00      	cmp	r3, #0
 8011a92:	d0df      	beq.n	8011a54 <__hexnan+0xd4>
 8011a94:	f04f 32ff 	mov.w	r2, #4294967295
 8011a98:	f1c3 0320 	rsb	r3, r3, #32
 8011a9c:	fa22 f303 	lsr.w	r3, r2, r3
 8011aa0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8011aa4:	401a      	ands	r2, r3
 8011aa6:	f846 2c04 	str.w	r2, [r6, #-4]
 8011aaa:	e7d3      	b.n	8011a54 <__hexnan+0xd4>
 8011aac:	3f04      	subs	r7, #4
 8011aae:	e7d1      	b.n	8011a54 <__hexnan+0xd4>
 8011ab0:	2004      	movs	r0, #4
 8011ab2:	b007      	add	sp, #28
 8011ab4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011ab8 <_localeconv_r>:
 8011ab8:	4800      	ldr	r0, [pc, #0]	; (8011abc <_localeconv_r+0x4>)
 8011aba:	4770      	bx	lr
 8011abc:	2000019c 	.word	0x2000019c

08011ac0 <malloc>:
 8011ac0:	4b02      	ldr	r3, [pc, #8]	; (8011acc <malloc+0xc>)
 8011ac2:	4601      	mov	r1, r0
 8011ac4:	6818      	ldr	r0, [r3, #0]
 8011ac6:	f000 bd2f 	b.w	8012528 <_malloc_r>
 8011aca:	bf00      	nop
 8011acc:	20000044 	.word	0x20000044

08011ad0 <__ascii_mbtowc>:
 8011ad0:	b082      	sub	sp, #8
 8011ad2:	b901      	cbnz	r1, 8011ad6 <__ascii_mbtowc+0x6>
 8011ad4:	a901      	add	r1, sp, #4
 8011ad6:	b142      	cbz	r2, 8011aea <__ascii_mbtowc+0x1a>
 8011ad8:	b14b      	cbz	r3, 8011aee <__ascii_mbtowc+0x1e>
 8011ada:	7813      	ldrb	r3, [r2, #0]
 8011adc:	600b      	str	r3, [r1, #0]
 8011ade:	7812      	ldrb	r2, [r2, #0]
 8011ae0:	1e10      	subs	r0, r2, #0
 8011ae2:	bf18      	it	ne
 8011ae4:	2001      	movne	r0, #1
 8011ae6:	b002      	add	sp, #8
 8011ae8:	4770      	bx	lr
 8011aea:	4610      	mov	r0, r2
 8011aec:	e7fb      	b.n	8011ae6 <__ascii_mbtowc+0x16>
 8011aee:	f06f 0001 	mvn.w	r0, #1
 8011af2:	e7f8      	b.n	8011ae6 <__ascii_mbtowc+0x16>

08011af4 <_Balloc>:
 8011af4:	b570      	push	{r4, r5, r6, lr}
 8011af6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8011af8:	4604      	mov	r4, r0
 8011afa:	460d      	mov	r5, r1
 8011afc:	b976      	cbnz	r6, 8011b1c <_Balloc+0x28>
 8011afe:	2010      	movs	r0, #16
 8011b00:	f7ff ffde 	bl	8011ac0 <malloc>
 8011b04:	4602      	mov	r2, r0
 8011b06:	6260      	str	r0, [r4, #36]	; 0x24
 8011b08:	b920      	cbnz	r0, 8011b14 <_Balloc+0x20>
 8011b0a:	4b18      	ldr	r3, [pc, #96]	; (8011b6c <_Balloc+0x78>)
 8011b0c:	4818      	ldr	r0, [pc, #96]	; (8011b70 <_Balloc+0x7c>)
 8011b0e:	2166      	movs	r1, #102	; 0x66
 8011b10:	f000 fefa 	bl	8012908 <__assert_func>
 8011b14:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011b18:	6006      	str	r6, [r0, #0]
 8011b1a:	60c6      	str	r6, [r0, #12]
 8011b1c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8011b1e:	68f3      	ldr	r3, [r6, #12]
 8011b20:	b183      	cbz	r3, 8011b44 <_Balloc+0x50>
 8011b22:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011b24:	68db      	ldr	r3, [r3, #12]
 8011b26:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8011b2a:	b9b8      	cbnz	r0, 8011b5c <_Balloc+0x68>
 8011b2c:	2101      	movs	r1, #1
 8011b2e:	fa01 f605 	lsl.w	r6, r1, r5
 8011b32:	1d72      	adds	r2, r6, #5
 8011b34:	0092      	lsls	r2, r2, #2
 8011b36:	4620      	mov	r0, r4
 8011b38:	f000 fc97 	bl	801246a <_calloc_r>
 8011b3c:	b160      	cbz	r0, 8011b58 <_Balloc+0x64>
 8011b3e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8011b42:	e00e      	b.n	8011b62 <_Balloc+0x6e>
 8011b44:	2221      	movs	r2, #33	; 0x21
 8011b46:	2104      	movs	r1, #4
 8011b48:	4620      	mov	r0, r4
 8011b4a:	f000 fc8e 	bl	801246a <_calloc_r>
 8011b4e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011b50:	60f0      	str	r0, [r6, #12]
 8011b52:	68db      	ldr	r3, [r3, #12]
 8011b54:	2b00      	cmp	r3, #0
 8011b56:	d1e4      	bne.n	8011b22 <_Balloc+0x2e>
 8011b58:	2000      	movs	r0, #0
 8011b5a:	bd70      	pop	{r4, r5, r6, pc}
 8011b5c:	6802      	ldr	r2, [r0, #0]
 8011b5e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8011b62:	2300      	movs	r3, #0
 8011b64:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8011b68:	e7f7      	b.n	8011b5a <_Balloc+0x66>
 8011b6a:	bf00      	nop
 8011b6c:	08013d66 	.word	0x08013d66
 8011b70:	08013e6c 	.word	0x08013e6c

08011b74 <_Bfree>:
 8011b74:	b570      	push	{r4, r5, r6, lr}
 8011b76:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8011b78:	4605      	mov	r5, r0
 8011b7a:	460c      	mov	r4, r1
 8011b7c:	b976      	cbnz	r6, 8011b9c <_Bfree+0x28>
 8011b7e:	2010      	movs	r0, #16
 8011b80:	f7ff ff9e 	bl	8011ac0 <malloc>
 8011b84:	4602      	mov	r2, r0
 8011b86:	6268      	str	r0, [r5, #36]	; 0x24
 8011b88:	b920      	cbnz	r0, 8011b94 <_Bfree+0x20>
 8011b8a:	4b09      	ldr	r3, [pc, #36]	; (8011bb0 <_Bfree+0x3c>)
 8011b8c:	4809      	ldr	r0, [pc, #36]	; (8011bb4 <_Bfree+0x40>)
 8011b8e:	218a      	movs	r1, #138	; 0x8a
 8011b90:	f000 feba 	bl	8012908 <__assert_func>
 8011b94:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011b98:	6006      	str	r6, [r0, #0]
 8011b9a:	60c6      	str	r6, [r0, #12]
 8011b9c:	b13c      	cbz	r4, 8011bae <_Bfree+0x3a>
 8011b9e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8011ba0:	6862      	ldr	r2, [r4, #4]
 8011ba2:	68db      	ldr	r3, [r3, #12]
 8011ba4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011ba8:	6021      	str	r1, [r4, #0]
 8011baa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8011bae:	bd70      	pop	{r4, r5, r6, pc}
 8011bb0:	08013d66 	.word	0x08013d66
 8011bb4:	08013e6c 	.word	0x08013e6c

08011bb8 <__multadd>:
 8011bb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011bbc:	690e      	ldr	r6, [r1, #16]
 8011bbe:	4607      	mov	r7, r0
 8011bc0:	4698      	mov	r8, r3
 8011bc2:	460c      	mov	r4, r1
 8011bc4:	f101 0014 	add.w	r0, r1, #20
 8011bc8:	2300      	movs	r3, #0
 8011bca:	6805      	ldr	r5, [r0, #0]
 8011bcc:	b2a9      	uxth	r1, r5
 8011bce:	fb02 8101 	mla	r1, r2, r1, r8
 8011bd2:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8011bd6:	0c2d      	lsrs	r5, r5, #16
 8011bd8:	fb02 c505 	mla	r5, r2, r5, ip
 8011bdc:	b289      	uxth	r1, r1
 8011bde:	3301      	adds	r3, #1
 8011be0:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8011be4:	429e      	cmp	r6, r3
 8011be6:	f840 1b04 	str.w	r1, [r0], #4
 8011bea:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8011bee:	dcec      	bgt.n	8011bca <__multadd+0x12>
 8011bf0:	f1b8 0f00 	cmp.w	r8, #0
 8011bf4:	d022      	beq.n	8011c3c <__multadd+0x84>
 8011bf6:	68a3      	ldr	r3, [r4, #8]
 8011bf8:	42b3      	cmp	r3, r6
 8011bfa:	dc19      	bgt.n	8011c30 <__multadd+0x78>
 8011bfc:	6861      	ldr	r1, [r4, #4]
 8011bfe:	4638      	mov	r0, r7
 8011c00:	3101      	adds	r1, #1
 8011c02:	f7ff ff77 	bl	8011af4 <_Balloc>
 8011c06:	4605      	mov	r5, r0
 8011c08:	b928      	cbnz	r0, 8011c16 <__multadd+0x5e>
 8011c0a:	4602      	mov	r2, r0
 8011c0c:	4b0d      	ldr	r3, [pc, #52]	; (8011c44 <__multadd+0x8c>)
 8011c0e:	480e      	ldr	r0, [pc, #56]	; (8011c48 <__multadd+0x90>)
 8011c10:	21b5      	movs	r1, #181	; 0xb5
 8011c12:	f000 fe79 	bl	8012908 <__assert_func>
 8011c16:	6922      	ldr	r2, [r4, #16]
 8011c18:	3202      	adds	r2, #2
 8011c1a:	f104 010c 	add.w	r1, r4, #12
 8011c1e:	0092      	lsls	r2, r2, #2
 8011c20:	300c      	adds	r0, #12
 8011c22:	f7fc fff7 	bl	800ec14 <memcpy>
 8011c26:	4621      	mov	r1, r4
 8011c28:	4638      	mov	r0, r7
 8011c2a:	f7ff ffa3 	bl	8011b74 <_Bfree>
 8011c2e:	462c      	mov	r4, r5
 8011c30:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8011c34:	3601      	adds	r6, #1
 8011c36:	f8c3 8014 	str.w	r8, [r3, #20]
 8011c3a:	6126      	str	r6, [r4, #16]
 8011c3c:	4620      	mov	r0, r4
 8011c3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011c42:	bf00      	nop
 8011c44:	08013ddc 	.word	0x08013ddc
 8011c48:	08013e6c 	.word	0x08013e6c

08011c4c <__s2b>:
 8011c4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011c50:	460c      	mov	r4, r1
 8011c52:	4615      	mov	r5, r2
 8011c54:	461f      	mov	r7, r3
 8011c56:	2209      	movs	r2, #9
 8011c58:	3308      	adds	r3, #8
 8011c5a:	4606      	mov	r6, r0
 8011c5c:	fb93 f3f2 	sdiv	r3, r3, r2
 8011c60:	2100      	movs	r1, #0
 8011c62:	2201      	movs	r2, #1
 8011c64:	429a      	cmp	r2, r3
 8011c66:	db09      	blt.n	8011c7c <__s2b+0x30>
 8011c68:	4630      	mov	r0, r6
 8011c6a:	f7ff ff43 	bl	8011af4 <_Balloc>
 8011c6e:	b940      	cbnz	r0, 8011c82 <__s2b+0x36>
 8011c70:	4602      	mov	r2, r0
 8011c72:	4b19      	ldr	r3, [pc, #100]	; (8011cd8 <__s2b+0x8c>)
 8011c74:	4819      	ldr	r0, [pc, #100]	; (8011cdc <__s2b+0x90>)
 8011c76:	21ce      	movs	r1, #206	; 0xce
 8011c78:	f000 fe46 	bl	8012908 <__assert_func>
 8011c7c:	0052      	lsls	r2, r2, #1
 8011c7e:	3101      	adds	r1, #1
 8011c80:	e7f0      	b.n	8011c64 <__s2b+0x18>
 8011c82:	9b08      	ldr	r3, [sp, #32]
 8011c84:	6143      	str	r3, [r0, #20]
 8011c86:	2d09      	cmp	r5, #9
 8011c88:	f04f 0301 	mov.w	r3, #1
 8011c8c:	6103      	str	r3, [r0, #16]
 8011c8e:	dd16      	ble.n	8011cbe <__s2b+0x72>
 8011c90:	f104 0909 	add.w	r9, r4, #9
 8011c94:	46c8      	mov	r8, r9
 8011c96:	442c      	add	r4, r5
 8011c98:	f818 3b01 	ldrb.w	r3, [r8], #1
 8011c9c:	4601      	mov	r1, r0
 8011c9e:	3b30      	subs	r3, #48	; 0x30
 8011ca0:	220a      	movs	r2, #10
 8011ca2:	4630      	mov	r0, r6
 8011ca4:	f7ff ff88 	bl	8011bb8 <__multadd>
 8011ca8:	45a0      	cmp	r8, r4
 8011caa:	d1f5      	bne.n	8011c98 <__s2b+0x4c>
 8011cac:	f1a5 0408 	sub.w	r4, r5, #8
 8011cb0:	444c      	add	r4, r9
 8011cb2:	1b2d      	subs	r5, r5, r4
 8011cb4:	1963      	adds	r3, r4, r5
 8011cb6:	42bb      	cmp	r3, r7
 8011cb8:	db04      	blt.n	8011cc4 <__s2b+0x78>
 8011cba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011cbe:	340a      	adds	r4, #10
 8011cc0:	2509      	movs	r5, #9
 8011cc2:	e7f6      	b.n	8011cb2 <__s2b+0x66>
 8011cc4:	f814 3b01 	ldrb.w	r3, [r4], #1
 8011cc8:	4601      	mov	r1, r0
 8011cca:	3b30      	subs	r3, #48	; 0x30
 8011ccc:	220a      	movs	r2, #10
 8011cce:	4630      	mov	r0, r6
 8011cd0:	f7ff ff72 	bl	8011bb8 <__multadd>
 8011cd4:	e7ee      	b.n	8011cb4 <__s2b+0x68>
 8011cd6:	bf00      	nop
 8011cd8:	08013ddc 	.word	0x08013ddc
 8011cdc:	08013e6c 	.word	0x08013e6c

08011ce0 <__hi0bits>:
 8011ce0:	0c03      	lsrs	r3, r0, #16
 8011ce2:	041b      	lsls	r3, r3, #16
 8011ce4:	b9d3      	cbnz	r3, 8011d1c <__hi0bits+0x3c>
 8011ce6:	0400      	lsls	r0, r0, #16
 8011ce8:	2310      	movs	r3, #16
 8011cea:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8011cee:	bf04      	itt	eq
 8011cf0:	0200      	lsleq	r0, r0, #8
 8011cf2:	3308      	addeq	r3, #8
 8011cf4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8011cf8:	bf04      	itt	eq
 8011cfa:	0100      	lsleq	r0, r0, #4
 8011cfc:	3304      	addeq	r3, #4
 8011cfe:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8011d02:	bf04      	itt	eq
 8011d04:	0080      	lsleq	r0, r0, #2
 8011d06:	3302      	addeq	r3, #2
 8011d08:	2800      	cmp	r0, #0
 8011d0a:	db05      	blt.n	8011d18 <__hi0bits+0x38>
 8011d0c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8011d10:	f103 0301 	add.w	r3, r3, #1
 8011d14:	bf08      	it	eq
 8011d16:	2320      	moveq	r3, #32
 8011d18:	4618      	mov	r0, r3
 8011d1a:	4770      	bx	lr
 8011d1c:	2300      	movs	r3, #0
 8011d1e:	e7e4      	b.n	8011cea <__hi0bits+0xa>

08011d20 <__lo0bits>:
 8011d20:	6803      	ldr	r3, [r0, #0]
 8011d22:	f013 0207 	ands.w	r2, r3, #7
 8011d26:	4601      	mov	r1, r0
 8011d28:	d00b      	beq.n	8011d42 <__lo0bits+0x22>
 8011d2a:	07da      	lsls	r2, r3, #31
 8011d2c:	d424      	bmi.n	8011d78 <__lo0bits+0x58>
 8011d2e:	0798      	lsls	r0, r3, #30
 8011d30:	bf49      	itett	mi
 8011d32:	085b      	lsrmi	r3, r3, #1
 8011d34:	089b      	lsrpl	r3, r3, #2
 8011d36:	2001      	movmi	r0, #1
 8011d38:	600b      	strmi	r3, [r1, #0]
 8011d3a:	bf5c      	itt	pl
 8011d3c:	600b      	strpl	r3, [r1, #0]
 8011d3e:	2002      	movpl	r0, #2
 8011d40:	4770      	bx	lr
 8011d42:	b298      	uxth	r0, r3
 8011d44:	b9b0      	cbnz	r0, 8011d74 <__lo0bits+0x54>
 8011d46:	0c1b      	lsrs	r3, r3, #16
 8011d48:	2010      	movs	r0, #16
 8011d4a:	f013 0fff 	tst.w	r3, #255	; 0xff
 8011d4e:	bf04      	itt	eq
 8011d50:	0a1b      	lsreq	r3, r3, #8
 8011d52:	3008      	addeq	r0, #8
 8011d54:	071a      	lsls	r2, r3, #28
 8011d56:	bf04      	itt	eq
 8011d58:	091b      	lsreq	r3, r3, #4
 8011d5a:	3004      	addeq	r0, #4
 8011d5c:	079a      	lsls	r2, r3, #30
 8011d5e:	bf04      	itt	eq
 8011d60:	089b      	lsreq	r3, r3, #2
 8011d62:	3002      	addeq	r0, #2
 8011d64:	07da      	lsls	r2, r3, #31
 8011d66:	d403      	bmi.n	8011d70 <__lo0bits+0x50>
 8011d68:	085b      	lsrs	r3, r3, #1
 8011d6a:	f100 0001 	add.w	r0, r0, #1
 8011d6e:	d005      	beq.n	8011d7c <__lo0bits+0x5c>
 8011d70:	600b      	str	r3, [r1, #0]
 8011d72:	4770      	bx	lr
 8011d74:	4610      	mov	r0, r2
 8011d76:	e7e8      	b.n	8011d4a <__lo0bits+0x2a>
 8011d78:	2000      	movs	r0, #0
 8011d7a:	4770      	bx	lr
 8011d7c:	2020      	movs	r0, #32
 8011d7e:	4770      	bx	lr

08011d80 <__i2b>:
 8011d80:	b510      	push	{r4, lr}
 8011d82:	460c      	mov	r4, r1
 8011d84:	2101      	movs	r1, #1
 8011d86:	f7ff feb5 	bl	8011af4 <_Balloc>
 8011d8a:	4602      	mov	r2, r0
 8011d8c:	b928      	cbnz	r0, 8011d9a <__i2b+0x1a>
 8011d8e:	4b05      	ldr	r3, [pc, #20]	; (8011da4 <__i2b+0x24>)
 8011d90:	4805      	ldr	r0, [pc, #20]	; (8011da8 <__i2b+0x28>)
 8011d92:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8011d96:	f000 fdb7 	bl	8012908 <__assert_func>
 8011d9a:	2301      	movs	r3, #1
 8011d9c:	6144      	str	r4, [r0, #20]
 8011d9e:	6103      	str	r3, [r0, #16]
 8011da0:	bd10      	pop	{r4, pc}
 8011da2:	bf00      	nop
 8011da4:	08013ddc 	.word	0x08013ddc
 8011da8:	08013e6c 	.word	0x08013e6c

08011dac <__multiply>:
 8011dac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011db0:	4614      	mov	r4, r2
 8011db2:	690a      	ldr	r2, [r1, #16]
 8011db4:	6923      	ldr	r3, [r4, #16]
 8011db6:	429a      	cmp	r2, r3
 8011db8:	bfb8      	it	lt
 8011dba:	460b      	movlt	r3, r1
 8011dbc:	460d      	mov	r5, r1
 8011dbe:	bfbc      	itt	lt
 8011dc0:	4625      	movlt	r5, r4
 8011dc2:	461c      	movlt	r4, r3
 8011dc4:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8011dc8:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8011dcc:	68ab      	ldr	r3, [r5, #8]
 8011dce:	6869      	ldr	r1, [r5, #4]
 8011dd0:	eb0a 0709 	add.w	r7, sl, r9
 8011dd4:	42bb      	cmp	r3, r7
 8011dd6:	b085      	sub	sp, #20
 8011dd8:	bfb8      	it	lt
 8011dda:	3101      	addlt	r1, #1
 8011ddc:	f7ff fe8a 	bl	8011af4 <_Balloc>
 8011de0:	b930      	cbnz	r0, 8011df0 <__multiply+0x44>
 8011de2:	4602      	mov	r2, r0
 8011de4:	4b42      	ldr	r3, [pc, #264]	; (8011ef0 <__multiply+0x144>)
 8011de6:	4843      	ldr	r0, [pc, #268]	; (8011ef4 <__multiply+0x148>)
 8011de8:	f240 115d 	movw	r1, #349	; 0x15d
 8011dec:	f000 fd8c 	bl	8012908 <__assert_func>
 8011df0:	f100 0614 	add.w	r6, r0, #20
 8011df4:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8011df8:	4633      	mov	r3, r6
 8011dfa:	2200      	movs	r2, #0
 8011dfc:	4543      	cmp	r3, r8
 8011dfe:	d31e      	bcc.n	8011e3e <__multiply+0x92>
 8011e00:	f105 0c14 	add.w	ip, r5, #20
 8011e04:	f104 0314 	add.w	r3, r4, #20
 8011e08:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8011e0c:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8011e10:	9202      	str	r2, [sp, #8]
 8011e12:	ebac 0205 	sub.w	r2, ip, r5
 8011e16:	3a15      	subs	r2, #21
 8011e18:	f022 0203 	bic.w	r2, r2, #3
 8011e1c:	3204      	adds	r2, #4
 8011e1e:	f105 0115 	add.w	r1, r5, #21
 8011e22:	458c      	cmp	ip, r1
 8011e24:	bf38      	it	cc
 8011e26:	2204      	movcc	r2, #4
 8011e28:	9201      	str	r2, [sp, #4]
 8011e2a:	9a02      	ldr	r2, [sp, #8]
 8011e2c:	9303      	str	r3, [sp, #12]
 8011e2e:	429a      	cmp	r2, r3
 8011e30:	d808      	bhi.n	8011e44 <__multiply+0x98>
 8011e32:	2f00      	cmp	r7, #0
 8011e34:	dc55      	bgt.n	8011ee2 <__multiply+0x136>
 8011e36:	6107      	str	r7, [r0, #16]
 8011e38:	b005      	add	sp, #20
 8011e3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011e3e:	f843 2b04 	str.w	r2, [r3], #4
 8011e42:	e7db      	b.n	8011dfc <__multiply+0x50>
 8011e44:	f8b3 a000 	ldrh.w	sl, [r3]
 8011e48:	f1ba 0f00 	cmp.w	sl, #0
 8011e4c:	d020      	beq.n	8011e90 <__multiply+0xe4>
 8011e4e:	f105 0e14 	add.w	lr, r5, #20
 8011e52:	46b1      	mov	r9, r6
 8011e54:	2200      	movs	r2, #0
 8011e56:	f85e 4b04 	ldr.w	r4, [lr], #4
 8011e5a:	f8d9 b000 	ldr.w	fp, [r9]
 8011e5e:	b2a1      	uxth	r1, r4
 8011e60:	fa1f fb8b 	uxth.w	fp, fp
 8011e64:	fb0a b101 	mla	r1, sl, r1, fp
 8011e68:	4411      	add	r1, r2
 8011e6a:	f8d9 2000 	ldr.w	r2, [r9]
 8011e6e:	0c24      	lsrs	r4, r4, #16
 8011e70:	0c12      	lsrs	r2, r2, #16
 8011e72:	fb0a 2404 	mla	r4, sl, r4, r2
 8011e76:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8011e7a:	b289      	uxth	r1, r1
 8011e7c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8011e80:	45f4      	cmp	ip, lr
 8011e82:	f849 1b04 	str.w	r1, [r9], #4
 8011e86:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8011e8a:	d8e4      	bhi.n	8011e56 <__multiply+0xaa>
 8011e8c:	9901      	ldr	r1, [sp, #4]
 8011e8e:	5072      	str	r2, [r6, r1]
 8011e90:	9a03      	ldr	r2, [sp, #12]
 8011e92:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8011e96:	3304      	adds	r3, #4
 8011e98:	f1b9 0f00 	cmp.w	r9, #0
 8011e9c:	d01f      	beq.n	8011ede <__multiply+0x132>
 8011e9e:	6834      	ldr	r4, [r6, #0]
 8011ea0:	f105 0114 	add.w	r1, r5, #20
 8011ea4:	46b6      	mov	lr, r6
 8011ea6:	f04f 0a00 	mov.w	sl, #0
 8011eaa:	880a      	ldrh	r2, [r1, #0]
 8011eac:	f8be b002 	ldrh.w	fp, [lr, #2]
 8011eb0:	fb09 b202 	mla	r2, r9, r2, fp
 8011eb4:	4492      	add	sl, r2
 8011eb6:	b2a4      	uxth	r4, r4
 8011eb8:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8011ebc:	f84e 4b04 	str.w	r4, [lr], #4
 8011ec0:	f851 4b04 	ldr.w	r4, [r1], #4
 8011ec4:	f8be 2000 	ldrh.w	r2, [lr]
 8011ec8:	0c24      	lsrs	r4, r4, #16
 8011eca:	fb09 2404 	mla	r4, r9, r4, r2
 8011ece:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8011ed2:	458c      	cmp	ip, r1
 8011ed4:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8011ed8:	d8e7      	bhi.n	8011eaa <__multiply+0xfe>
 8011eda:	9a01      	ldr	r2, [sp, #4]
 8011edc:	50b4      	str	r4, [r6, r2]
 8011ede:	3604      	adds	r6, #4
 8011ee0:	e7a3      	b.n	8011e2a <__multiply+0x7e>
 8011ee2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8011ee6:	2b00      	cmp	r3, #0
 8011ee8:	d1a5      	bne.n	8011e36 <__multiply+0x8a>
 8011eea:	3f01      	subs	r7, #1
 8011eec:	e7a1      	b.n	8011e32 <__multiply+0x86>
 8011eee:	bf00      	nop
 8011ef0:	08013ddc 	.word	0x08013ddc
 8011ef4:	08013e6c 	.word	0x08013e6c

08011ef8 <__pow5mult>:
 8011ef8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011efc:	4615      	mov	r5, r2
 8011efe:	f012 0203 	ands.w	r2, r2, #3
 8011f02:	4606      	mov	r6, r0
 8011f04:	460f      	mov	r7, r1
 8011f06:	d007      	beq.n	8011f18 <__pow5mult+0x20>
 8011f08:	4c25      	ldr	r4, [pc, #148]	; (8011fa0 <__pow5mult+0xa8>)
 8011f0a:	3a01      	subs	r2, #1
 8011f0c:	2300      	movs	r3, #0
 8011f0e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8011f12:	f7ff fe51 	bl	8011bb8 <__multadd>
 8011f16:	4607      	mov	r7, r0
 8011f18:	10ad      	asrs	r5, r5, #2
 8011f1a:	d03d      	beq.n	8011f98 <__pow5mult+0xa0>
 8011f1c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8011f1e:	b97c      	cbnz	r4, 8011f40 <__pow5mult+0x48>
 8011f20:	2010      	movs	r0, #16
 8011f22:	f7ff fdcd 	bl	8011ac0 <malloc>
 8011f26:	4602      	mov	r2, r0
 8011f28:	6270      	str	r0, [r6, #36]	; 0x24
 8011f2a:	b928      	cbnz	r0, 8011f38 <__pow5mult+0x40>
 8011f2c:	4b1d      	ldr	r3, [pc, #116]	; (8011fa4 <__pow5mult+0xac>)
 8011f2e:	481e      	ldr	r0, [pc, #120]	; (8011fa8 <__pow5mult+0xb0>)
 8011f30:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8011f34:	f000 fce8 	bl	8012908 <__assert_func>
 8011f38:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011f3c:	6004      	str	r4, [r0, #0]
 8011f3e:	60c4      	str	r4, [r0, #12]
 8011f40:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8011f44:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8011f48:	b94c      	cbnz	r4, 8011f5e <__pow5mult+0x66>
 8011f4a:	f240 2171 	movw	r1, #625	; 0x271
 8011f4e:	4630      	mov	r0, r6
 8011f50:	f7ff ff16 	bl	8011d80 <__i2b>
 8011f54:	2300      	movs	r3, #0
 8011f56:	f8c8 0008 	str.w	r0, [r8, #8]
 8011f5a:	4604      	mov	r4, r0
 8011f5c:	6003      	str	r3, [r0, #0]
 8011f5e:	f04f 0900 	mov.w	r9, #0
 8011f62:	07eb      	lsls	r3, r5, #31
 8011f64:	d50a      	bpl.n	8011f7c <__pow5mult+0x84>
 8011f66:	4639      	mov	r1, r7
 8011f68:	4622      	mov	r2, r4
 8011f6a:	4630      	mov	r0, r6
 8011f6c:	f7ff ff1e 	bl	8011dac <__multiply>
 8011f70:	4639      	mov	r1, r7
 8011f72:	4680      	mov	r8, r0
 8011f74:	4630      	mov	r0, r6
 8011f76:	f7ff fdfd 	bl	8011b74 <_Bfree>
 8011f7a:	4647      	mov	r7, r8
 8011f7c:	106d      	asrs	r5, r5, #1
 8011f7e:	d00b      	beq.n	8011f98 <__pow5mult+0xa0>
 8011f80:	6820      	ldr	r0, [r4, #0]
 8011f82:	b938      	cbnz	r0, 8011f94 <__pow5mult+0x9c>
 8011f84:	4622      	mov	r2, r4
 8011f86:	4621      	mov	r1, r4
 8011f88:	4630      	mov	r0, r6
 8011f8a:	f7ff ff0f 	bl	8011dac <__multiply>
 8011f8e:	6020      	str	r0, [r4, #0]
 8011f90:	f8c0 9000 	str.w	r9, [r0]
 8011f94:	4604      	mov	r4, r0
 8011f96:	e7e4      	b.n	8011f62 <__pow5mult+0x6a>
 8011f98:	4638      	mov	r0, r7
 8011f9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011f9e:	bf00      	nop
 8011fa0:	08013fc0 	.word	0x08013fc0
 8011fa4:	08013d66 	.word	0x08013d66
 8011fa8:	08013e6c 	.word	0x08013e6c

08011fac <__lshift>:
 8011fac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011fb0:	460c      	mov	r4, r1
 8011fb2:	6849      	ldr	r1, [r1, #4]
 8011fb4:	6923      	ldr	r3, [r4, #16]
 8011fb6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8011fba:	68a3      	ldr	r3, [r4, #8]
 8011fbc:	4607      	mov	r7, r0
 8011fbe:	4691      	mov	r9, r2
 8011fc0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8011fc4:	f108 0601 	add.w	r6, r8, #1
 8011fc8:	42b3      	cmp	r3, r6
 8011fca:	db0b      	blt.n	8011fe4 <__lshift+0x38>
 8011fcc:	4638      	mov	r0, r7
 8011fce:	f7ff fd91 	bl	8011af4 <_Balloc>
 8011fd2:	4605      	mov	r5, r0
 8011fd4:	b948      	cbnz	r0, 8011fea <__lshift+0x3e>
 8011fd6:	4602      	mov	r2, r0
 8011fd8:	4b28      	ldr	r3, [pc, #160]	; (801207c <__lshift+0xd0>)
 8011fda:	4829      	ldr	r0, [pc, #164]	; (8012080 <__lshift+0xd4>)
 8011fdc:	f240 11d9 	movw	r1, #473	; 0x1d9
 8011fe0:	f000 fc92 	bl	8012908 <__assert_func>
 8011fe4:	3101      	adds	r1, #1
 8011fe6:	005b      	lsls	r3, r3, #1
 8011fe8:	e7ee      	b.n	8011fc8 <__lshift+0x1c>
 8011fea:	2300      	movs	r3, #0
 8011fec:	f100 0114 	add.w	r1, r0, #20
 8011ff0:	f100 0210 	add.w	r2, r0, #16
 8011ff4:	4618      	mov	r0, r3
 8011ff6:	4553      	cmp	r3, sl
 8011ff8:	db33      	blt.n	8012062 <__lshift+0xb6>
 8011ffa:	6920      	ldr	r0, [r4, #16]
 8011ffc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8012000:	f104 0314 	add.w	r3, r4, #20
 8012004:	f019 091f 	ands.w	r9, r9, #31
 8012008:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801200c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8012010:	d02b      	beq.n	801206a <__lshift+0xbe>
 8012012:	f1c9 0e20 	rsb	lr, r9, #32
 8012016:	468a      	mov	sl, r1
 8012018:	2200      	movs	r2, #0
 801201a:	6818      	ldr	r0, [r3, #0]
 801201c:	fa00 f009 	lsl.w	r0, r0, r9
 8012020:	4302      	orrs	r2, r0
 8012022:	f84a 2b04 	str.w	r2, [sl], #4
 8012026:	f853 2b04 	ldr.w	r2, [r3], #4
 801202a:	459c      	cmp	ip, r3
 801202c:	fa22 f20e 	lsr.w	r2, r2, lr
 8012030:	d8f3      	bhi.n	801201a <__lshift+0x6e>
 8012032:	ebac 0304 	sub.w	r3, ip, r4
 8012036:	3b15      	subs	r3, #21
 8012038:	f023 0303 	bic.w	r3, r3, #3
 801203c:	3304      	adds	r3, #4
 801203e:	f104 0015 	add.w	r0, r4, #21
 8012042:	4584      	cmp	ip, r0
 8012044:	bf38      	it	cc
 8012046:	2304      	movcc	r3, #4
 8012048:	50ca      	str	r2, [r1, r3]
 801204a:	b10a      	cbz	r2, 8012050 <__lshift+0xa4>
 801204c:	f108 0602 	add.w	r6, r8, #2
 8012050:	3e01      	subs	r6, #1
 8012052:	4638      	mov	r0, r7
 8012054:	612e      	str	r6, [r5, #16]
 8012056:	4621      	mov	r1, r4
 8012058:	f7ff fd8c 	bl	8011b74 <_Bfree>
 801205c:	4628      	mov	r0, r5
 801205e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012062:	f842 0f04 	str.w	r0, [r2, #4]!
 8012066:	3301      	adds	r3, #1
 8012068:	e7c5      	b.n	8011ff6 <__lshift+0x4a>
 801206a:	3904      	subs	r1, #4
 801206c:	f853 2b04 	ldr.w	r2, [r3], #4
 8012070:	f841 2f04 	str.w	r2, [r1, #4]!
 8012074:	459c      	cmp	ip, r3
 8012076:	d8f9      	bhi.n	801206c <__lshift+0xc0>
 8012078:	e7ea      	b.n	8012050 <__lshift+0xa4>
 801207a:	bf00      	nop
 801207c:	08013ddc 	.word	0x08013ddc
 8012080:	08013e6c 	.word	0x08013e6c

08012084 <__mcmp>:
 8012084:	b530      	push	{r4, r5, lr}
 8012086:	6902      	ldr	r2, [r0, #16]
 8012088:	690c      	ldr	r4, [r1, #16]
 801208a:	1b12      	subs	r2, r2, r4
 801208c:	d10e      	bne.n	80120ac <__mcmp+0x28>
 801208e:	f100 0314 	add.w	r3, r0, #20
 8012092:	3114      	adds	r1, #20
 8012094:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8012098:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801209c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80120a0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80120a4:	42a5      	cmp	r5, r4
 80120a6:	d003      	beq.n	80120b0 <__mcmp+0x2c>
 80120a8:	d305      	bcc.n	80120b6 <__mcmp+0x32>
 80120aa:	2201      	movs	r2, #1
 80120ac:	4610      	mov	r0, r2
 80120ae:	bd30      	pop	{r4, r5, pc}
 80120b0:	4283      	cmp	r3, r0
 80120b2:	d3f3      	bcc.n	801209c <__mcmp+0x18>
 80120b4:	e7fa      	b.n	80120ac <__mcmp+0x28>
 80120b6:	f04f 32ff 	mov.w	r2, #4294967295
 80120ba:	e7f7      	b.n	80120ac <__mcmp+0x28>

080120bc <__mdiff>:
 80120bc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80120c0:	460c      	mov	r4, r1
 80120c2:	4606      	mov	r6, r0
 80120c4:	4611      	mov	r1, r2
 80120c6:	4620      	mov	r0, r4
 80120c8:	4617      	mov	r7, r2
 80120ca:	f7ff ffdb 	bl	8012084 <__mcmp>
 80120ce:	1e05      	subs	r5, r0, #0
 80120d0:	d110      	bne.n	80120f4 <__mdiff+0x38>
 80120d2:	4629      	mov	r1, r5
 80120d4:	4630      	mov	r0, r6
 80120d6:	f7ff fd0d 	bl	8011af4 <_Balloc>
 80120da:	b930      	cbnz	r0, 80120ea <__mdiff+0x2e>
 80120dc:	4b39      	ldr	r3, [pc, #228]	; (80121c4 <__mdiff+0x108>)
 80120de:	4602      	mov	r2, r0
 80120e0:	f240 2132 	movw	r1, #562	; 0x232
 80120e4:	4838      	ldr	r0, [pc, #224]	; (80121c8 <__mdiff+0x10c>)
 80120e6:	f000 fc0f 	bl	8012908 <__assert_func>
 80120ea:	2301      	movs	r3, #1
 80120ec:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80120f0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80120f4:	bfa4      	itt	ge
 80120f6:	463b      	movge	r3, r7
 80120f8:	4627      	movge	r7, r4
 80120fa:	4630      	mov	r0, r6
 80120fc:	6879      	ldr	r1, [r7, #4]
 80120fe:	bfa6      	itte	ge
 8012100:	461c      	movge	r4, r3
 8012102:	2500      	movge	r5, #0
 8012104:	2501      	movlt	r5, #1
 8012106:	f7ff fcf5 	bl	8011af4 <_Balloc>
 801210a:	b920      	cbnz	r0, 8012116 <__mdiff+0x5a>
 801210c:	4b2d      	ldr	r3, [pc, #180]	; (80121c4 <__mdiff+0x108>)
 801210e:	4602      	mov	r2, r0
 8012110:	f44f 7110 	mov.w	r1, #576	; 0x240
 8012114:	e7e6      	b.n	80120e4 <__mdiff+0x28>
 8012116:	693e      	ldr	r6, [r7, #16]
 8012118:	60c5      	str	r5, [r0, #12]
 801211a:	6925      	ldr	r5, [r4, #16]
 801211c:	f107 0114 	add.w	r1, r7, #20
 8012120:	f104 0914 	add.w	r9, r4, #20
 8012124:	f100 0e14 	add.w	lr, r0, #20
 8012128:	f107 0210 	add.w	r2, r7, #16
 801212c:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8012130:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8012134:	46f2      	mov	sl, lr
 8012136:	2700      	movs	r7, #0
 8012138:	f859 3b04 	ldr.w	r3, [r9], #4
 801213c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8012140:	fa1f f883 	uxth.w	r8, r3
 8012144:	fa17 f78b 	uxtah	r7, r7, fp
 8012148:	0c1b      	lsrs	r3, r3, #16
 801214a:	eba7 0808 	sub.w	r8, r7, r8
 801214e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8012152:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8012156:	fa1f f888 	uxth.w	r8, r8
 801215a:	141f      	asrs	r7, r3, #16
 801215c:	454d      	cmp	r5, r9
 801215e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8012162:	f84a 3b04 	str.w	r3, [sl], #4
 8012166:	d8e7      	bhi.n	8012138 <__mdiff+0x7c>
 8012168:	1b2b      	subs	r3, r5, r4
 801216a:	3b15      	subs	r3, #21
 801216c:	f023 0303 	bic.w	r3, r3, #3
 8012170:	3304      	adds	r3, #4
 8012172:	3415      	adds	r4, #21
 8012174:	42a5      	cmp	r5, r4
 8012176:	bf38      	it	cc
 8012178:	2304      	movcc	r3, #4
 801217a:	4419      	add	r1, r3
 801217c:	4473      	add	r3, lr
 801217e:	469e      	mov	lr, r3
 8012180:	460d      	mov	r5, r1
 8012182:	4565      	cmp	r5, ip
 8012184:	d30e      	bcc.n	80121a4 <__mdiff+0xe8>
 8012186:	f10c 0203 	add.w	r2, ip, #3
 801218a:	1a52      	subs	r2, r2, r1
 801218c:	f022 0203 	bic.w	r2, r2, #3
 8012190:	3903      	subs	r1, #3
 8012192:	458c      	cmp	ip, r1
 8012194:	bf38      	it	cc
 8012196:	2200      	movcc	r2, #0
 8012198:	441a      	add	r2, r3
 801219a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801219e:	b17b      	cbz	r3, 80121c0 <__mdiff+0x104>
 80121a0:	6106      	str	r6, [r0, #16]
 80121a2:	e7a5      	b.n	80120f0 <__mdiff+0x34>
 80121a4:	f855 8b04 	ldr.w	r8, [r5], #4
 80121a8:	fa17 f488 	uxtah	r4, r7, r8
 80121ac:	1422      	asrs	r2, r4, #16
 80121ae:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80121b2:	b2a4      	uxth	r4, r4
 80121b4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80121b8:	f84e 4b04 	str.w	r4, [lr], #4
 80121bc:	1417      	asrs	r7, r2, #16
 80121be:	e7e0      	b.n	8012182 <__mdiff+0xc6>
 80121c0:	3e01      	subs	r6, #1
 80121c2:	e7ea      	b.n	801219a <__mdiff+0xde>
 80121c4:	08013ddc 	.word	0x08013ddc
 80121c8:	08013e6c 	.word	0x08013e6c

080121cc <__ulp>:
 80121cc:	b082      	sub	sp, #8
 80121ce:	ed8d 0b00 	vstr	d0, [sp]
 80121d2:	9b01      	ldr	r3, [sp, #4]
 80121d4:	4912      	ldr	r1, [pc, #72]	; (8012220 <__ulp+0x54>)
 80121d6:	4019      	ands	r1, r3
 80121d8:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 80121dc:	2900      	cmp	r1, #0
 80121de:	dd05      	ble.n	80121ec <__ulp+0x20>
 80121e0:	2200      	movs	r2, #0
 80121e2:	460b      	mov	r3, r1
 80121e4:	ec43 2b10 	vmov	d0, r2, r3
 80121e8:	b002      	add	sp, #8
 80121ea:	4770      	bx	lr
 80121ec:	4249      	negs	r1, r1
 80121ee:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 80121f2:	ea4f 5021 	mov.w	r0, r1, asr #20
 80121f6:	f04f 0200 	mov.w	r2, #0
 80121fa:	f04f 0300 	mov.w	r3, #0
 80121fe:	da04      	bge.n	801220a <__ulp+0x3e>
 8012200:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8012204:	fa41 f300 	asr.w	r3, r1, r0
 8012208:	e7ec      	b.n	80121e4 <__ulp+0x18>
 801220a:	f1a0 0114 	sub.w	r1, r0, #20
 801220e:	291e      	cmp	r1, #30
 8012210:	bfda      	itte	le
 8012212:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8012216:	fa20 f101 	lsrle.w	r1, r0, r1
 801221a:	2101      	movgt	r1, #1
 801221c:	460a      	mov	r2, r1
 801221e:	e7e1      	b.n	80121e4 <__ulp+0x18>
 8012220:	7ff00000 	.word	0x7ff00000

08012224 <__b2d>:
 8012224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012226:	6905      	ldr	r5, [r0, #16]
 8012228:	f100 0714 	add.w	r7, r0, #20
 801222c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8012230:	1f2e      	subs	r6, r5, #4
 8012232:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8012236:	4620      	mov	r0, r4
 8012238:	f7ff fd52 	bl	8011ce0 <__hi0bits>
 801223c:	f1c0 0320 	rsb	r3, r0, #32
 8012240:	280a      	cmp	r0, #10
 8012242:	f8df c07c 	ldr.w	ip, [pc, #124]	; 80122c0 <__b2d+0x9c>
 8012246:	600b      	str	r3, [r1, #0]
 8012248:	dc14      	bgt.n	8012274 <__b2d+0x50>
 801224a:	f1c0 0e0b 	rsb	lr, r0, #11
 801224e:	fa24 f10e 	lsr.w	r1, r4, lr
 8012252:	42b7      	cmp	r7, r6
 8012254:	ea41 030c 	orr.w	r3, r1, ip
 8012258:	bf34      	ite	cc
 801225a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801225e:	2100      	movcs	r1, #0
 8012260:	3015      	adds	r0, #21
 8012262:	fa04 f000 	lsl.w	r0, r4, r0
 8012266:	fa21 f10e 	lsr.w	r1, r1, lr
 801226a:	ea40 0201 	orr.w	r2, r0, r1
 801226e:	ec43 2b10 	vmov	d0, r2, r3
 8012272:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012274:	42b7      	cmp	r7, r6
 8012276:	bf3a      	itte	cc
 8012278:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801227c:	f1a5 0608 	subcc.w	r6, r5, #8
 8012280:	2100      	movcs	r1, #0
 8012282:	380b      	subs	r0, #11
 8012284:	d017      	beq.n	80122b6 <__b2d+0x92>
 8012286:	f1c0 0c20 	rsb	ip, r0, #32
 801228a:	fa04 f500 	lsl.w	r5, r4, r0
 801228e:	42be      	cmp	r6, r7
 8012290:	fa21 f40c 	lsr.w	r4, r1, ip
 8012294:	ea45 0504 	orr.w	r5, r5, r4
 8012298:	bf8c      	ite	hi
 801229a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 801229e:	2400      	movls	r4, #0
 80122a0:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 80122a4:	fa01 f000 	lsl.w	r0, r1, r0
 80122a8:	fa24 f40c 	lsr.w	r4, r4, ip
 80122ac:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80122b0:	ea40 0204 	orr.w	r2, r0, r4
 80122b4:	e7db      	b.n	801226e <__b2d+0x4a>
 80122b6:	ea44 030c 	orr.w	r3, r4, ip
 80122ba:	460a      	mov	r2, r1
 80122bc:	e7d7      	b.n	801226e <__b2d+0x4a>
 80122be:	bf00      	nop
 80122c0:	3ff00000 	.word	0x3ff00000

080122c4 <__d2b>:
 80122c4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80122c8:	4689      	mov	r9, r1
 80122ca:	2101      	movs	r1, #1
 80122cc:	ec57 6b10 	vmov	r6, r7, d0
 80122d0:	4690      	mov	r8, r2
 80122d2:	f7ff fc0f 	bl	8011af4 <_Balloc>
 80122d6:	4604      	mov	r4, r0
 80122d8:	b930      	cbnz	r0, 80122e8 <__d2b+0x24>
 80122da:	4602      	mov	r2, r0
 80122dc:	4b25      	ldr	r3, [pc, #148]	; (8012374 <__d2b+0xb0>)
 80122de:	4826      	ldr	r0, [pc, #152]	; (8012378 <__d2b+0xb4>)
 80122e0:	f240 310a 	movw	r1, #778	; 0x30a
 80122e4:	f000 fb10 	bl	8012908 <__assert_func>
 80122e8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80122ec:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80122f0:	bb35      	cbnz	r5, 8012340 <__d2b+0x7c>
 80122f2:	2e00      	cmp	r6, #0
 80122f4:	9301      	str	r3, [sp, #4]
 80122f6:	d028      	beq.n	801234a <__d2b+0x86>
 80122f8:	4668      	mov	r0, sp
 80122fa:	9600      	str	r6, [sp, #0]
 80122fc:	f7ff fd10 	bl	8011d20 <__lo0bits>
 8012300:	9900      	ldr	r1, [sp, #0]
 8012302:	b300      	cbz	r0, 8012346 <__d2b+0x82>
 8012304:	9a01      	ldr	r2, [sp, #4]
 8012306:	f1c0 0320 	rsb	r3, r0, #32
 801230a:	fa02 f303 	lsl.w	r3, r2, r3
 801230e:	430b      	orrs	r3, r1
 8012310:	40c2      	lsrs	r2, r0
 8012312:	6163      	str	r3, [r4, #20]
 8012314:	9201      	str	r2, [sp, #4]
 8012316:	9b01      	ldr	r3, [sp, #4]
 8012318:	61a3      	str	r3, [r4, #24]
 801231a:	2b00      	cmp	r3, #0
 801231c:	bf14      	ite	ne
 801231e:	2202      	movne	r2, #2
 8012320:	2201      	moveq	r2, #1
 8012322:	6122      	str	r2, [r4, #16]
 8012324:	b1d5      	cbz	r5, 801235c <__d2b+0x98>
 8012326:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801232a:	4405      	add	r5, r0
 801232c:	f8c9 5000 	str.w	r5, [r9]
 8012330:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8012334:	f8c8 0000 	str.w	r0, [r8]
 8012338:	4620      	mov	r0, r4
 801233a:	b003      	add	sp, #12
 801233c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012340:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8012344:	e7d5      	b.n	80122f2 <__d2b+0x2e>
 8012346:	6161      	str	r1, [r4, #20]
 8012348:	e7e5      	b.n	8012316 <__d2b+0x52>
 801234a:	a801      	add	r0, sp, #4
 801234c:	f7ff fce8 	bl	8011d20 <__lo0bits>
 8012350:	9b01      	ldr	r3, [sp, #4]
 8012352:	6163      	str	r3, [r4, #20]
 8012354:	2201      	movs	r2, #1
 8012356:	6122      	str	r2, [r4, #16]
 8012358:	3020      	adds	r0, #32
 801235a:	e7e3      	b.n	8012324 <__d2b+0x60>
 801235c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8012360:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8012364:	f8c9 0000 	str.w	r0, [r9]
 8012368:	6918      	ldr	r0, [r3, #16]
 801236a:	f7ff fcb9 	bl	8011ce0 <__hi0bits>
 801236e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8012372:	e7df      	b.n	8012334 <__d2b+0x70>
 8012374:	08013ddc 	.word	0x08013ddc
 8012378:	08013e6c 	.word	0x08013e6c

0801237c <__ratio>:
 801237c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012380:	4688      	mov	r8, r1
 8012382:	4669      	mov	r1, sp
 8012384:	4681      	mov	r9, r0
 8012386:	f7ff ff4d 	bl	8012224 <__b2d>
 801238a:	a901      	add	r1, sp, #4
 801238c:	4640      	mov	r0, r8
 801238e:	ec55 4b10 	vmov	r4, r5, d0
 8012392:	f7ff ff47 	bl	8012224 <__b2d>
 8012396:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801239a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801239e:	eba3 0c02 	sub.w	ip, r3, r2
 80123a2:	e9dd 3200 	ldrd	r3, r2, [sp]
 80123a6:	1a9b      	subs	r3, r3, r2
 80123a8:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80123ac:	ec51 0b10 	vmov	r0, r1, d0
 80123b0:	2b00      	cmp	r3, #0
 80123b2:	bfd6      	itet	le
 80123b4:	460a      	movle	r2, r1
 80123b6:	462a      	movgt	r2, r5
 80123b8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80123bc:	468b      	mov	fp, r1
 80123be:	462f      	mov	r7, r5
 80123c0:	bfd4      	ite	le
 80123c2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80123c6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80123ca:	4620      	mov	r0, r4
 80123cc:	ee10 2a10 	vmov	r2, s0
 80123d0:	465b      	mov	r3, fp
 80123d2:	4639      	mov	r1, r7
 80123d4:	f7ee fa52 	bl	800087c <__aeabi_ddiv>
 80123d8:	ec41 0b10 	vmov	d0, r0, r1
 80123dc:	b003      	add	sp, #12
 80123de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080123e2 <__copybits>:
 80123e2:	3901      	subs	r1, #1
 80123e4:	b570      	push	{r4, r5, r6, lr}
 80123e6:	1149      	asrs	r1, r1, #5
 80123e8:	6914      	ldr	r4, [r2, #16]
 80123ea:	3101      	adds	r1, #1
 80123ec:	f102 0314 	add.w	r3, r2, #20
 80123f0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80123f4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80123f8:	1f05      	subs	r5, r0, #4
 80123fa:	42a3      	cmp	r3, r4
 80123fc:	d30c      	bcc.n	8012418 <__copybits+0x36>
 80123fe:	1aa3      	subs	r3, r4, r2
 8012400:	3b11      	subs	r3, #17
 8012402:	f023 0303 	bic.w	r3, r3, #3
 8012406:	3211      	adds	r2, #17
 8012408:	42a2      	cmp	r2, r4
 801240a:	bf88      	it	hi
 801240c:	2300      	movhi	r3, #0
 801240e:	4418      	add	r0, r3
 8012410:	2300      	movs	r3, #0
 8012412:	4288      	cmp	r0, r1
 8012414:	d305      	bcc.n	8012422 <__copybits+0x40>
 8012416:	bd70      	pop	{r4, r5, r6, pc}
 8012418:	f853 6b04 	ldr.w	r6, [r3], #4
 801241c:	f845 6f04 	str.w	r6, [r5, #4]!
 8012420:	e7eb      	b.n	80123fa <__copybits+0x18>
 8012422:	f840 3b04 	str.w	r3, [r0], #4
 8012426:	e7f4      	b.n	8012412 <__copybits+0x30>

08012428 <__any_on>:
 8012428:	f100 0214 	add.w	r2, r0, #20
 801242c:	6900      	ldr	r0, [r0, #16]
 801242e:	114b      	asrs	r3, r1, #5
 8012430:	4298      	cmp	r0, r3
 8012432:	b510      	push	{r4, lr}
 8012434:	db11      	blt.n	801245a <__any_on+0x32>
 8012436:	dd0a      	ble.n	801244e <__any_on+0x26>
 8012438:	f011 011f 	ands.w	r1, r1, #31
 801243c:	d007      	beq.n	801244e <__any_on+0x26>
 801243e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8012442:	fa24 f001 	lsr.w	r0, r4, r1
 8012446:	fa00 f101 	lsl.w	r1, r0, r1
 801244a:	428c      	cmp	r4, r1
 801244c:	d10b      	bne.n	8012466 <__any_on+0x3e>
 801244e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8012452:	4293      	cmp	r3, r2
 8012454:	d803      	bhi.n	801245e <__any_on+0x36>
 8012456:	2000      	movs	r0, #0
 8012458:	bd10      	pop	{r4, pc}
 801245a:	4603      	mov	r3, r0
 801245c:	e7f7      	b.n	801244e <__any_on+0x26>
 801245e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8012462:	2900      	cmp	r1, #0
 8012464:	d0f5      	beq.n	8012452 <__any_on+0x2a>
 8012466:	2001      	movs	r0, #1
 8012468:	e7f6      	b.n	8012458 <__any_on+0x30>

0801246a <_calloc_r>:
 801246a:	b513      	push	{r0, r1, r4, lr}
 801246c:	434a      	muls	r2, r1
 801246e:	4611      	mov	r1, r2
 8012470:	9201      	str	r2, [sp, #4]
 8012472:	f000 f859 	bl	8012528 <_malloc_r>
 8012476:	4604      	mov	r4, r0
 8012478:	b118      	cbz	r0, 8012482 <_calloc_r+0x18>
 801247a:	9a01      	ldr	r2, [sp, #4]
 801247c:	2100      	movs	r1, #0
 801247e:	f7fc fbd7 	bl	800ec30 <memset>
 8012482:	4620      	mov	r0, r4
 8012484:	b002      	add	sp, #8
 8012486:	bd10      	pop	{r4, pc}

08012488 <_free_r>:
 8012488:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801248a:	2900      	cmp	r1, #0
 801248c:	d048      	beq.n	8012520 <_free_r+0x98>
 801248e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012492:	9001      	str	r0, [sp, #4]
 8012494:	2b00      	cmp	r3, #0
 8012496:	f1a1 0404 	sub.w	r4, r1, #4
 801249a:	bfb8      	it	lt
 801249c:	18e4      	addlt	r4, r4, r3
 801249e:	f000 fa7d 	bl	801299c <__malloc_lock>
 80124a2:	4a20      	ldr	r2, [pc, #128]	; (8012524 <_free_r+0x9c>)
 80124a4:	9801      	ldr	r0, [sp, #4]
 80124a6:	6813      	ldr	r3, [r2, #0]
 80124a8:	4615      	mov	r5, r2
 80124aa:	b933      	cbnz	r3, 80124ba <_free_r+0x32>
 80124ac:	6063      	str	r3, [r4, #4]
 80124ae:	6014      	str	r4, [r2, #0]
 80124b0:	b003      	add	sp, #12
 80124b2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80124b6:	f000 ba77 	b.w	80129a8 <__malloc_unlock>
 80124ba:	42a3      	cmp	r3, r4
 80124bc:	d90b      	bls.n	80124d6 <_free_r+0x4e>
 80124be:	6821      	ldr	r1, [r4, #0]
 80124c0:	1862      	adds	r2, r4, r1
 80124c2:	4293      	cmp	r3, r2
 80124c4:	bf04      	itt	eq
 80124c6:	681a      	ldreq	r2, [r3, #0]
 80124c8:	685b      	ldreq	r3, [r3, #4]
 80124ca:	6063      	str	r3, [r4, #4]
 80124cc:	bf04      	itt	eq
 80124ce:	1852      	addeq	r2, r2, r1
 80124d0:	6022      	streq	r2, [r4, #0]
 80124d2:	602c      	str	r4, [r5, #0]
 80124d4:	e7ec      	b.n	80124b0 <_free_r+0x28>
 80124d6:	461a      	mov	r2, r3
 80124d8:	685b      	ldr	r3, [r3, #4]
 80124da:	b10b      	cbz	r3, 80124e0 <_free_r+0x58>
 80124dc:	42a3      	cmp	r3, r4
 80124de:	d9fa      	bls.n	80124d6 <_free_r+0x4e>
 80124e0:	6811      	ldr	r1, [r2, #0]
 80124e2:	1855      	adds	r5, r2, r1
 80124e4:	42a5      	cmp	r5, r4
 80124e6:	d10b      	bne.n	8012500 <_free_r+0x78>
 80124e8:	6824      	ldr	r4, [r4, #0]
 80124ea:	4421      	add	r1, r4
 80124ec:	1854      	adds	r4, r2, r1
 80124ee:	42a3      	cmp	r3, r4
 80124f0:	6011      	str	r1, [r2, #0]
 80124f2:	d1dd      	bne.n	80124b0 <_free_r+0x28>
 80124f4:	681c      	ldr	r4, [r3, #0]
 80124f6:	685b      	ldr	r3, [r3, #4]
 80124f8:	6053      	str	r3, [r2, #4]
 80124fa:	4421      	add	r1, r4
 80124fc:	6011      	str	r1, [r2, #0]
 80124fe:	e7d7      	b.n	80124b0 <_free_r+0x28>
 8012500:	d902      	bls.n	8012508 <_free_r+0x80>
 8012502:	230c      	movs	r3, #12
 8012504:	6003      	str	r3, [r0, #0]
 8012506:	e7d3      	b.n	80124b0 <_free_r+0x28>
 8012508:	6825      	ldr	r5, [r4, #0]
 801250a:	1961      	adds	r1, r4, r5
 801250c:	428b      	cmp	r3, r1
 801250e:	bf04      	itt	eq
 8012510:	6819      	ldreq	r1, [r3, #0]
 8012512:	685b      	ldreq	r3, [r3, #4]
 8012514:	6063      	str	r3, [r4, #4]
 8012516:	bf04      	itt	eq
 8012518:	1949      	addeq	r1, r1, r5
 801251a:	6021      	streq	r1, [r4, #0]
 801251c:	6054      	str	r4, [r2, #4]
 801251e:	e7c7      	b.n	80124b0 <_free_r+0x28>
 8012520:	b003      	add	sp, #12
 8012522:	bd30      	pop	{r4, r5, pc}
 8012524:	20010378 	.word	0x20010378

08012528 <_malloc_r>:
 8012528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801252a:	1ccd      	adds	r5, r1, #3
 801252c:	f025 0503 	bic.w	r5, r5, #3
 8012530:	3508      	adds	r5, #8
 8012532:	2d0c      	cmp	r5, #12
 8012534:	bf38      	it	cc
 8012536:	250c      	movcc	r5, #12
 8012538:	2d00      	cmp	r5, #0
 801253a:	4606      	mov	r6, r0
 801253c:	db01      	blt.n	8012542 <_malloc_r+0x1a>
 801253e:	42a9      	cmp	r1, r5
 8012540:	d903      	bls.n	801254a <_malloc_r+0x22>
 8012542:	230c      	movs	r3, #12
 8012544:	6033      	str	r3, [r6, #0]
 8012546:	2000      	movs	r0, #0
 8012548:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801254a:	f000 fa27 	bl	801299c <__malloc_lock>
 801254e:	4921      	ldr	r1, [pc, #132]	; (80125d4 <_malloc_r+0xac>)
 8012550:	680a      	ldr	r2, [r1, #0]
 8012552:	4614      	mov	r4, r2
 8012554:	b99c      	cbnz	r4, 801257e <_malloc_r+0x56>
 8012556:	4f20      	ldr	r7, [pc, #128]	; (80125d8 <_malloc_r+0xb0>)
 8012558:	683b      	ldr	r3, [r7, #0]
 801255a:	b923      	cbnz	r3, 8012566 <_malloc_r+0x3e>
 801255c:	4621      	mov	r1, r4
 801255e:	4630      	mov	r0, r6
 8012560:	f000 f9a2 	bl	80128a8 <_sbrk_r>
 8012564:	6038      	str	r0, [r7, #0]
 8012566:	4629      	mov	r1, r5
 8012568:	4630      	mov	r0, r6
 801256a:	f000 f99d 	bl	80128a8 <_sbrk_r>
 801256e:	1c43      	adds	r3, r0, #1
 8012570:	d123      	bne.n	80125ba <_malloc_r+0x92>
 8012572:	230c      	movs	r3, #12
 8012574:	6033      	str	r3, [r6, #0]
 8012576:	4630      	mov	r0, r6
 8012578:	f000 fa16 	bl	80129a8 <__malloc_unlock>
 801257c:	e7e3      	b.n	8012546 <_malloc_r+0x1e>
 801257e:	6823      	ldr	r3, [r4, #0]
 8012580:	1b5b      	subs	r3, r3, r5
 8012582:	d417      	bmi.n	80125b4 <_malloc_r+0x8c>
 8012584:	2b0b      	cmp	r3, #11
 8012586:	d903      	bls.n	8012590 <_malloc_r+0x68>
 8012588:	6023      	str	r3, [r4, #0]
 801258a:	441c      	add	r4, r3
 801258c:	6025      	str	r5, [r4, #0]
 801258e:	e004      	b.n	801259a <_malloc_r+0x72>
 8012590:	6863      	ldr	r3, [r4, #4]
 8012592:	42a2      	cmp	r2, r4
 8012594:	bf0c      	ite	eq
 8012596:	600b      	streq	r3, [r1, #0]
 8012598:	6053      	strne	r3, [r2, #4]
 801259a:	4630      	mov	r0, r6
 801259c:	f000 fa04 	bl	80129a8 <__malloc_unlock>
 80125a0:	f104 000b 	add.w	r0, r4, #11
 80125a4:	1d23      	adds	r3, r4, #4
 80125a6:	f020 0007 	bic.w	r0, r0, #7
 80125aa:	1ac2      	subs	r2, r0, r3
 80125ac:	d0cc      	beq.n	8012548 <_malloc_r+0x20>
 80125ae:	1a1b      	subs	r3, r3, r0
 80125b0:	50a3      	str	r3, [r4, r2]
 80125b2:	e7c9      	b.n	8012548 <_malloc_r+0x20>
 80125b4:	4622      	mov	r2, r4
 80125b6:	6864      	ldr	r4, [r4, #4]
 80125b8:	e7cc      	b.n	8012554 <_malloc_r+0x2c>
 80125ba:	1cc4      	adds	r4, r0, #3
 80125bc:	f024 0403 	bic.w	r4, r4, #3
 80125c0:	42a0      	cmp	r0, r4
 80125c2:	d0e3      	beq.n	801258c <_malloc_r+0x64>
 80125c4:	1a21      	subs	r1, r4, r0
 80125c6:	4630      	mov	r0, r6
 80125c8:	f000 f96e 	bl	80128a8 <_sbrk_r>
 80125cc:	3001      	adds	r0, #1
 80125ce:	d1dd      	bne.n	801258c <_malloc_r+0x64>
 80125d0:	e7cf      	b.n	8012572 <_malloc_r+0x4a>
 80125d2:	bf00      	nop
 80125d4:	20010378 	.word	0x20010378
 80125d8:	2001037c 	.word	0x2001037c

080125dc <__ssputs_r>:
 80125dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80125e0:	688e      	ldr	r6, [r1, #8]
 80125e2:	429e      	cmp	r6, r3
 80125e4:	4682      	mov	sl, r0
 80125e6:	460c      	mov	r4, r1
 80125e8:	4690      	mov	r8, r2
 80125ea:	461f      	mov	r7, r3
 80125ec:	d838      	bhi.n	8012660 <__ssputs_r+0x84>
 80125ee:	898a      	ldrh	r2, [r1, #12]
 80125f0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80125f4:	d032      	beq.n	801265c <__ssputs_r+0x80>
 80125f6:	6825      	ldr	r5, [r4, #0]
 80125f8:	6909      	ldr	r1, [r1, #16]
 80125fa:	eba5 0901 	sub.w	r9, r5, r1
 80125fe:	6965      	ldr	r5, [r4, #20]
 8012600:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012604:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8012608:	3301      	adds	r3, #1
 801260a:	444b      	add	r3, r9
 801260c:	106d      	asrs	r5, r5, #1
 801260e:	429d      	cmp	r5, r3
 8012610:	bf38      	it	cc
 8012612:	461d      	movcc	r5, r3
 8012614:	0553      	lsls	r3, r2, #21
 8012616:	d531      	bpl.n	801267c <__ssputs_r+0xa0>
 8012618:	4629      	mov	r1, r5
 801261a:	f7ff ff85 	bl	8012528 <_malloc_r>
 801261e:	4606      	mov	r6, r0
 8012620:	b950      	cbnz	r0, 8012638 <__ssputs_r+0x5c>
 8012622:	230c      	movs	r3, #12
 8012624:	f8ca 3000 	str.w	r3, [sl]
 8012628:	89a3      	ldrh	r3, [r4, #12]
 801262a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801262e:	81a3      	strh	r3, [r4, #12]
 8012630:	f04f 30ff 	mov.w	r0, #4294967295
 8012634:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012638:	6921      	ldr	r1, [r4, #16]
 801263a:	464a      	mov	r2, r9
 801263c:	f7fc faea 	bl	800ec14 <memcpy>
 8012640:	89a3      	ldrh	r3, [r4, #12]
 8012642:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8012646:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801264a:	81a3      	strh	r3, [r4, #12]
 801264c:	6126      	str	r6, [r4, #16]
 801264e:	6165      	str	r5, [r4, #20]
 8012650:	444e      	add	r6, r9
 8012652:	eba5 0509 	sub.w	r5, r5, r9
 8012656:	6026      	str	r6, [r4, #0]
 8012658:	60a5      	str	r5, [r4, #8]
 801265a:	463e      	mov	r6, r7
 801265c:	42be      	cmp	r6, r7
 801265e:	d900      	bls.n	8012662 <__ssputs_r+0x86>
 8012660:	463e      	mov	r6, r7
 8012662:	4632      	mov	r2, r6
 8012664:	6820      	ldr	r0, [r4, #0]
 8012666:	4641      	mov	r1, r8
 8012668:	f000 f97e 	bl	8012968 <memmove>
 801266c:	68a3      	ldr	r3, [r4, #8]
 801266e:	6822      	ldr	r2, [r4, #0]
 8012670:	1b9b      	subs	r3, r3, r6
 8012672:	4432      	add	r2, r6
 8012674:	60a3      	str	r3, [r4, #8]
 8012676:	6022      	str	r2, [r4, #0]
 8012678:	2000      	movs	r0, #0
 801267a:	e7db      	b.n	8012634 <__ssputs_r+0x58>
 801267c:	462a      	mov	r2, r5
 801267e:	f000 f999 	bl	80129b4 <_realloc_r>
 8012682:	4606      	mov	r6, r0
 8012684:	2800      	cmp	r0, #0
 8012686:	d1e1      	bne.n	801264c <__ssputs_r+0x70>
 8012688:	6921      	ldr	r1, [r4, #16]
 801268a:	4650      	mov	r0, sl
 801268c:	f7ff fefc 	bl	8012488 <_free_r>
 8012690:	e7c7      	b.n	8012622 <__ssputs_r+0x46>
	...

08012694 <_svfiprintf_r>:
 8012694:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012698:	4698      	mov	r8, r3
 801269a:	898b      	ldrh	r3, [r1, #12]
 801269c:	061b      	lsls	r3, r3, #24
 801269e:	b09d      	sub	sp, #116	; 0x74
 80126a0:	4607      	mov	r7, r0
 80126a2:	460d      	mov	r5, r1
 80126a4:	4614      	mov	r4, r2
 80126a6:	d50e      	bpl.n	80126c6 <_svfiprintf_r+0x32>
 80126a8:	690b      	ldr	r3, [r1, #16]
 80126aa:	b963      	cbnz	r3, 80126c6 <_svfiprintf_r+0x32>
 80126ac:	2140      	movs	r1, #64	; 0x40
 80126ae:	f7ff ff3b 	bl	8012528 <_malloc_r>
 80126b2:	6028      	str	r0, [r5, #0]
 80126b4:	6128      	str	r0, [r5, #16]
 80126b6:	b920      	cbnz	r0, 80126c2 <_svfiprintf_r+0x2e>
 80126b8:	230c      	movs	r3, #12
 80126ba:	603b      	str	r3, [r7, #0]
 80126bc:	f04f 30ff 	mov.w	r0, #4294967295
 80126c0:	e0d1      	b.n	8012866 <_svfiprintf_r+0x1d2>
 80126c2:	2340      	movs	r3, #64	; 0x40
 80126c4:	616b      	str	r3, [r5, #20]
 80126c6:	2300      	movs	r3, #0
 80126c8:	9309      	str	r3, [sp, #36]	; 0x24
 80126ca:	2320      	movs	r3, #32
 80126cc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80126d0:	f8cd 800c 	str.w	r8, [sp, #12]
 80126d4:	2330      	movs	r3, #48	; 0x30
 80126d6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8012880 <_svfiprintf_r+0x1ec>
 80126da:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80126de:	f04f 0901 	mov.w	r9, #1
 80126e2:	4623      	mov	r3, r4
 80126e4:	469a      	mov	sl, r3
 80126e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80126ea:	b10a      	cbz	r2, 80126f0 <_svfiprintf_r+0x5c>
 80126ec:	2a25      	cmp	r2, #37	; 0x25
 80126ee:	d1f9      	bne.n	80126e4 <_svfiprintf_r+0x50>
 80126f0:	ebba 0b04 	subs.w	fp, sl, r4
 80126f4:	d00b      	beq.n	801270e <_svfiprintf_r+0x7a>
 80126f6:	465b      	mov	r3, fp
 80126f8:	4622      	mov	r2, r4
 80126fa:	4629      	mov	r1, r5
 80126fc:	4638      	mov	r0, r7
 80126fe:	f7ff ff6d 	bl	80125dc <__ssputs_r>
 8012702:	3001      	adds	r0, #1
 8012704:	f000 80aa 	beq.w	801285c <_svfiprintf_r+0x1c8>
 8012708:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801270a:	445a      	add	r2, fp
 801270c:	9209      	str	r2, [sp, #36]	; 0x24
 801270e:	f89a 3000 	ldrb.w	r3, [sl]
 8012712:	2b00      	cmp	r3, #0
 8012714:	f000 80a2 	beq.w	801285c <_svfiprintf_r+0x1c8>
 8012718:	2300      	movs	r3, #0
 801271a:	f04f 32ff 	mov.w	r2, #4294967295
 801271e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012722:	f10a 0a01 	add.w	sl, sl, #1
 8012726:	9304      	str	r3, [sp, #16]
 8012728:	9307      	str	r3, [sp, #28]
 801272a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801272e:	931a      	str	r3, [sp, #104]	; 0x68
 8012730:	4654      	mov	r4, sl
 8012732:	2205      	movs	r2, #5
 8012734:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012738:	4851      	ldr	r0, [pc, #324]	; (8012880 <_svfiprintf_r+0x1ec>)
 801273a:	f7ed fd69 	bl	8000210 <memchr>
 801273e:	9a04      	ldr	r2, [sp, #16]
 8012740:	b9d8      	cbnz	r0, 801277a <_svfiprintf_r+0xe6>
 8012742:	06d0      	lsls	r0, r2, #27
 8012744:	bf44      	itt	mi
 8012746:	2320      	movmi	r3, #32
 8012748:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801274c:	0711      	lsls	r1, r2, #28
 801274e:	bf44      	itt	mi
 8012750:	232b      	movmi	r3, #43	; 0x2b
 8012752:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012756:	f89a 3000 	ldrb.w	r3, [sl]
 801275a:	2b2a      	cmp	r3, #42	; 0x2a
 801275c:	d015      	beq.n	801278a <_svfiprintf_r+0xf6>
 801275e:	9a07      	ldr	r2, [sp, #28]
 8012760:	4654      	mov	r4, sl
 8012762:	2000      	movs	r0, #0
 8012764:	f04f 0c0a 	mov.w	ip, #10
 8012768:	4621      	mov	r1, r4
 801276a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801276e:	3b30      	subs	r3, #48	; 0x30
 8012770:	2b09      	cmp	r3, #9
 8012772:	d94e      	bls.n	8012812 <_svfiprintf_r+0x17e>
 8012774:	b1b0      	cbz	r0, 80127a4 <_svfiprintf_r+0x110>
 8012776:	9207      	str	r2, [sp, #28]
 8012778:	e014      	b.n	80127a4 <_svfiprintf_r+0x110>
 801277a:	eba0 0308 	sub.w	r3, r0, r8
 801277e:	fa09 f303 	lsl.w	r3, r9, r3
 8012782:	4313      	orrs	r3, r2
 8012784:	9304      	str	r3, [sp, #16]
 8012786:	46a2      	mov	sl, r4
 8012788:	e7d2      	b.n	8012730 <_svfiprintf_r+0x9c>
 801278a:	9b03      	ldr	r3, [sp, #12]
 801278c:	1d19      	adds	r1, r3, #4
 801278e:	681b      	ldr	r3, [r3, #0]
 8012790:	9103      	str	r1, [sp, #12]
 8012792:	2b00      	cmp	r3, #0
 8012794:	bfbb      	ittet	lt
 8012796:	425b      	neglt	r3, r3
 8012798:	f042 0202 	orrlt.w	r2, r2, #2
 801279c:	9307      	strge	r3, [sp, #28]
 801279e:	9307      	strlt	r3, [sp, #28]
 80127a0:	bfb8      	it	lt
 80127a2:	9204      	strlt	r2, [sp, #16]
 80127a4:	7823      	ldrb	r3, [r4, #0]
 80127a6:	2b2e      	cmp	r3, #46	; 0x2e
 80127a8:	d10c      	bne.n	80127c4 <_svfiprintf_r+0x130>
 80127aa:	7863      	ldrb	r3, [r4, #1]
 80127ac:	2b2a      	cmp	r3, #42	; 0x2a
 80127ae:	d135      	bne.n	801281c <_svfiprintf_r+0x188>
 80127b0:	9b03      	ldr	r3, [sp, #12]
 80127b2:	1d1a      	adds	r2, r3, #4
 80127b4:	681b      	ldr	r3, [r3, #0]
 80127b6:	9203      	str	r2, [sp, #12]
 80127b8:	2b00      	cmp	r3, #0
 80127ba:	bfb8      	it	lt
 80127bc:	f04f 33ff 	movlt.w	r3, #4294967295
 80127c0:	3402      	adds	r4, #2
 80127c2:	9305      	str	r3, [sp, #20]
 80127c4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8012890 <_svfiprintf_r+0x1fc>
 80127c8:	7821      	ldrb	r1, [r4, #0]
 80127ca:	2203      	movs	r2, #3
 80127cc:	4650      	mov	r0, sl
 80127ce:	f7ed fd1f 	bl	8000210 <memchr>
 80127d2:	b140      	cbz	r0, 80127e6 <_svfiprintf_r+0x152>
 80127d4:	2340      	movs	r3, #64	; 0x40
 80127d6:	eba0 000a 	sub.w	r0, r0, sl
 80127da:	fa03 f000 	lsl.w	r0, r3, r0
 80127de:	9b04      	ldr	r3, [sp, #16]
 80127e0:	4303      	orrs	r3, r0
 80127e2:	3401      	adds	r4, #1
 80127e4:	9304      	str	r3, [sp, #16]
 80127e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80127ea:	4826      	ldr	r0, [pc, #152]	; (8012884 <_svfiprintf_r+0x1f0>)
 80127ec:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80127f0:	2206      	movs	r2, #6
 80127f2:	f7ed fd0d 	bl	8000210 <memchr>
 80127f6:	2800      	cmp	r0, #0
 80127f8:	d038      	beq.n	801286c <_svfiprintf_r+0x1d8>
 80127fa:	4b23      	ldr	r3, [pc, #140]	; (8012888 <_svfiprintf_r+0x1f4>)
 80127fc:	bb1b      	cbnz	r3, 8012846 <_svfiprintf_r+0x1b2>
 80127fe:	9b03      	ldr	r3, [sp, #12]
 8012800:	3307      	adds	r3, #7
 8012802:	f023 0307 	bic.w	r3, r3, #7
 8012806:	3308      	adds	r3, #8
 8012808:	9303      	str	r3, [sp, #12]
 801280a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801280c:	4433      	add	r3, r6
 801280e:	9309      	str	r3, [sp, #36]	; 0x24
 8012810:	e767      	b.n	80126e2 <_svfiprintf_r+0x4e>
 8012812:	fb0c 3202 	mla	r2, ip, r2, r3
 8012816:	460c      	mov	r4, r1
 8012818:	2001      	movs	r0, #1
 801281a:	e7a5      	b.n	8012768 <_svfiprintf_r+0xd4>
 801281c:	2300      	movs	r3, #0
 801281e:	3401      	adds	r4, #1
 8012820:	9305      	str	r3, [sp, #20]
 8012822:	4619      	mov	r1, r3
 8012824:	f04f 0c0a 	mov.w	ip, #10
 8012828:	4620      	mov	r0, r4
 801282a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801282e:	3a30      	subs	r2, #48	; 0x30
 8012830:	2a09      	cmp	r2, #9
 8012832:	d903      	bls.n	801283c <_svfiprintf_r+0x1a8>
 8012834:	2b00      	cmp	r3, #0
 8012836:	d0c5      	beq.n	80127c4 <_svfiprintf_r+0x130>
 8012838:	9105      	str	r1, [sp, #20]
 801283a:	e7c3      	b.n	80127c4 <_svfiprintf_r+0x130>
 801283c:	fb0c 2101 	mla	r1, ip, r1, r2
 8012840:	4604      	mov	r4, r0
 8012842:	2301      	movs	r3, #1
 8012844:	e7f0      	b.n	8012828 <_svfiprintf_r+0x194>
 8012846:	ab03      	add	r3, sp, #12
 8012848:	9300      	str	r3, [sp, #0]
 801284a:	462a      	mov	r2, r5
 801284c:	4b0f      	ldr	r3, [pc, #60]	; (801288c <_svfiprintf_r+0x1f8>)
 801284e:	a904      	add	r1, sp, #16
 8012850:	4638      	mov	r0, r7
 8012852:	f7fc fa95 	bl	800ed80 <_printf_float>
 8012856:	1c42      	adds	r2, r0, #1
 8012858:	4606      	mov	r6, r0
 801285a:	d1d6      	bne.n	801280a <_svfiprintf_r+0x176>
 801285c:	89ab      	ldrh	r3, [r5, #12]
 801285e:	065b      	lsls	r3, r3, #25
 8012860:	f53f af2c 	bmi.w	80126bc <_svfiprintf_r+0x28>
 8012864:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012866:	b01d      	add	sp, #116	; 0x74
 8012868:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801286c:	ab03      	add	r3, sp, #12
 801286e:	9300      	str	r3, [sp, #0]
 8012870:	462a      	mov	r2, r5
 8012872:	4b06      	ldr	r3, [pc, #24]	; (801288c <_svfiprintf_r+0x1f8>)
 8012874:	a904      	add	r1, sp, #16
 8012876:	4638      	mov	r0, r7
 8012878:	f7fc fd26 	bl	800f2c8 <_printf_i>
 801287c:	e7eb      	b.n	8012856 <_svfiprintf_r+0x1c2>
 801287e:	bf00      	nop
 8012880:	08013fcc 	.word	0x08013fcc
 8012884:	08013fd6 	.word	0x08013fd6
 8012888:	0800ed81 	.word	0x0800ed81
 801288c:	080125dd 	.word	0x080125dd
 8012890:	08013fd2 	.word	0x08013fd2
 8012894:	00000000 	.word	0x00000000

08012898 <nan>:
 8012898:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80128a0 <nan+0x8>
 801289c:	4770      	bx	lr
 801289e:	bf00      	nop
 80128a0:	00000000 	.word	0x00000000
 80128a4:	7ff80000 	.word	0x7ff80000

080128a8 <_sbrk_r>:
 80128a8:	b538      	push	{r3, r4, r5, lr}
 80128aa:	4d06      	ldr	r5, [pc, #24]	; (80128c4 <_sbrk_r+0x1c>)
 80128ac:	2300      	movs	r3, #0
 80128ae:	4604      	mov	r4, r0
 80128b0:	4608      	mov	r0, r1
 80128b2:	602b      	str	r3, [r5, #0]
 80128b4:	f7fc f8f8 	bl	800eaa8 <_sbrk>
 80128b8:	1c43      	adds	r3, r0, #1
 80128ba:	d102      	bne.n	80128c2 <_sbrk_r+0x1a>
 80128bc:	682b      	ldr	r3, [r5, #0]
 80128be:	b103      	cbz	r3, 80128c2 <_sbrk_r+0x1a>
 80128c0:	6023      	str	r3, [r4, #0]
 80128c2:	bd38      	pop	{r3, r4, r5, pc}
 80128c4:	200108b4 	.word	0x200108b4

080128c8 <strncmp>:
 80128c8:	b510      	push	{r4, lr}
 80128ca:	b16a      	cbz	r2, 80128e8 <strncmp+0x20>
 80128cc:	3901      	subs	r1, #1
 80128ce:	1884      	adds	r4, r0, r2
 80128d0:	f810 3b01 	ldrb.w	r3, [r0], #1
 80128d4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80128d8:	4293      	cmp	r3, r2
 80128da:	d103      	bne.n	80128e4 <strncmp+0x1c>
 80128dc:	42a0      	cmp	r0, r4
 80128de:	d001      	beq.n	80128e4 <strncmp+0x1c>
 80128e0:	2b00      	cmp	r3, #0
 80128e2:	d1f5      	bne.n	80128d0 <strncmp+0x8>
 80128e4:	1a98      	subs	r0, r3, r2
 80128e6:	bd10      	pop	{r4, pc}
 80128e8:	4610      	mov	r0, r2
 80128ea:	e7fc      	b.n	80128e6 <strncmp+0x1e>

080128ec <__ascii_wctomb>:
 80128ec:	b149      	cbz	r1, 8012902 <__ascii_wctomb+0x16>
 80128ee:	2aff      	cmp	r2, #255	; 0xff
 80128f0:	bf85      	ittet	hi
 80128f2:	238a      	movhi	r3, #138	; 0x8a
 80128f4:	6003      	strhi	r3, [r0, #0]
 80128f6:	700a      	strbls	r2, [r1, #0]
 80128f8:	f04f 30ff 	movhi.w	r0, #4294967295
 80128fc:	bf98      	it	ls
 80128fe:	2001      	movls	r0, #1
 8012900:	4770      	bx	lr
 8012902:	4608      	mov	r0, r1
 8012904:	4770      	bx	lr
	...

08012908 <__assert_func>:
 8012908:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801290a:	4614      	mov	r4, r2
 801290c:	461a      	mov	r2, r3
 801290e:	4b09      	ldr	r3, [pc, #36]	; (8012934 <__assert_func+0x2c>)
 8012910:	681b      	ldr	r3, [r3, #0]
 8012912:	4605      	mov	r5, r0
 8012914:	68d8      	ldr	r0, [r3, #12]
 8012916:	b14c      	cbz	r4, 801292c <__assert_func+0x24>
 8012918:	4b07      	ldr	r3, [pc, #28]	; (8012938 <__assert_func+0x30>)
 801291a:	9100      	str	r1, [sp, #0]
 801291c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012920:	4906      	ldr	r1, [pc, #24]	; (801293c <__assert_func+0x34>)
 8012922:	462b      	mov	r3, r5
 8012924:	f000 f80e 	bl	8012944 <fiprintf>
 8012928:	f000 fa84 	bl	8012e34 <abort>
 801292c:	4b04      	ldr	r3, [pc, #16]	; (8012940 <__assert_func+0x38>)
 801292e:	461c      	mov	r4, r3
 8012930:	e7f3      	b.n	801291a <__assert_func+0x12>
 8012932:	bf00      	nop
 8012934:	20000044 	.word	0x20000044
 8012938:	08013fdd 	.word	0x08013fdd
 801293c:	08013fea 	.word	0x08013fea
 8012940:	08014018 	.word	0x08014018

08012944 <fiprintf>:
 8012944:	b40e      	push	{r1, r2, r3}
 8012946:	b503      	push	{r0, r1, lr}
 8012948:	4601      	mov	r1, r0
 801294a:	ab03      	add	r3, sp, #12
 801294c:	4805      	ldr	r0, [pc, #20]	; (8012964 <fiprintf+0x20>)
 801294e:	f853 2b04 	ldr.w	r2, [r3], #4
 8012952:	6800      	ldr	r0, [r0, #0]
 8012954:	9301      	str	r3, [sp, #4]
 8012956:	f000 f87d 	bl	8012a54 <_vfiprintf_r>
 801295a:	b002      	add	sp, #8
 801295c:	f85d eb04 	ldr.w	lr, [sp], #4
 8012960:	b003      	add	sp, #12
 8012962:	4770      	bx	lr
 8012964:	20000044 	.word	0x20000044

08012968 <memmove>:
 8012968:	4288      	cmp	r0, r1
 801296a:	b510      	push	{r4, lr}
 801296c:	eb01 0402 	add.w	r4, r1, r2
 8012970:	d902      	bls.n	8012978 <memmove+0x10>
 8012972:	4284      	cmp	r4, r0
 8012974:	4623      	mov	r3, r4
 8012976:	d807      	bhi.n	8012988 <memmove+0x20>
 8012978:	1e43      	subs	r3, r0, #1
 801297a:	42a1      	cmp	r1, r4
 801297c:	d008      	beq.n	8012990 <memmove+0x28>
 801297e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012982:	f803 2f01 	strb.w	r2, [r3, #1]!
 8012986:	e7f8      	b.n	801297a <memmove+0x12>
 8012988:	4402      	add	r2, r0
 801298a:	4601      	mov	r1, r0
 801298c:	428a      	cmp	r2, r1
 801298e:	d100      	bne.n	8012992 <memmove+0x2a>
 8012990:	bd10      	pop	{r4, pc}
 8012992:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012996:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801299a:	e7f7      	b.n	801298c <memmove+0x24>

0801299c <__malloc_lock>:
 801299c:	4801      	ldr	r0, [pc, #4]	; (80129a4 <__malloc_lock+0x8>)
 801299e:	f000 bc09 	b.w	80131b4 <__retarget_lock_acquire_recursive>
 80129a2:	bf00      	nop
 80129a4:	200108bc 	.word	0x200108bc

080129a8 <__malloc_unlock>:
 80129a8:	4801      	ldr	r0, [pc, #4]	; (80129b0 <__malloc_unlock+0x8>)
 80129aa:	f000 bc04 	b.w	80131b6 <__retarget_lock_release_recursive>
 80129ae:	bf00      	nop
 80129b0:	200108bc 	.word	0x200108bc

080129b4 <_realloc_r>:
 80129b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80129b6:	4607      	mov	r7, r0
 80129b8:	4614      	mov	r4, r2
 80129ba:	460e      	mov	r6, r1
 80129bc:	b921      	cbnz	r1, 80129c8 <_realloc_r+0x14>
 80129be:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80129c2:	4611      	mov	r1, r2
 80129c4:	f7ff bdb0 	b.w	8012528 <_malloc_r>
 80129c8:	b922      	cbnz	r2, 80129d4 <_realloc_r+0x20>
 80129ca:	f7ff fd5d 	bl	8012488 <_free_r>
 80129ce:	4625      	mov	r5, r4
 80129d0:	4628      	mov	r0, r5
 80129d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80129d4:	f000 fc54 	bl	8013280 <_malloc_usable_size_r>
 80129d8:	42a0      	cmp	r0, r4
 80129da:	d20f      	bcs.n	80129fc <_realloc_r+0x48>
 80129dc:	4621      	mov	r1, r4
 80129de:	4638      	mov	r0, r7
 80129e0:	f7ff fda2 	bl	8012528 <_malloc_r>
 80129e4:	4605      	mov	r5, r0
 80129e6:	2800      	cmp	r0, #0
 80129e8:	d0f2      	beq.n	80129d0 <_realloc_r+0x1c>
 80129ea:	4631      	mov	r1, r6
 80129ec:	4622      	mov	r2, r4
 80129ee:	f7fc f911 	bl	800ec14 <memcpy>
 80129f2:	4631      	mov	r1, r6
 80129f4:	4638      	mov	r0, r7
 80129f6:	f7ff fd47 	bl	8012488 <_free_r>
 80129fa:	e7e9      	b.n	80129d0 <_realloc_r+0x1c>
 80129fc:	4635      	mov	r5, r6
 80129fe:	e7e7      	b.n	80129d0 <_realloc_r+0x1c>

08012a00 <__sfputc_r>:
 8012a00:	6893      	ldr	r3, [r2, #8]
 8012a02:	3b01      	subs	r3, #1
 8012a04:	2b00      	cmp	r3, #0
 8012a06:	b410      	push	{r4}
 8012a08:	6093      	str	r3, [r2, #8]
 8012a0a:	da08      	bge.n	8012a1e <__sfputc_r+0x1e>
 8012a0c:	6994      	ldr	r4, [r2, #24]
 8012a0e:	42a3      	cmp	r3, r4
 8012a10:	db01      	blt.n	8012a16 <__sfputc_r+0x16>
 8012a12:	290a      	cmp	r1, #10
 8012a14:	d103      	bne.n	8012a1e <__sfputc_r+0x1e>
 8012a16:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012a1a:	f000 b94b 	b.w	8012cb4 <__swbuf_r>
 8012a1e:	6813      	ldr	r3, [r2, #0]
 8012a20:	1c58      	adds	r0, r3, #1
 8012a22:	6010      	str	r0, [r2, #0]
 8012a24:	7019      	strb	r1, [r3, #0]
 8012a26:	4608      	mov	r0, r1
 8012a28:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012a2c:	4770      	bx	lr

08012a2e <__sfputs_r>:
 8012a2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012a30:	4606      	mov	r6, r0
 8012a32:	460f      	mov	r7, r1
 8012a34:	4614      	mov	r4, r2
 8012a36:	18d5      	adds	r5, r2, r3
 8012a38:	42ac      	cmp	r4, r5
 8012a3a:	d101      	bne.n	8012a40 <__sfputs_r+0x12>
 8012a3c:	2000      	movs	r0, #0
 8012a3e:	e007      	b.n	8012a50 <__sfputs_r+0x22>
 8012a40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012a44:	463a      	mov	r2, r7
 8012a46:	4630      	mov	r0, r6
 8012a48:	f7ff ffda 	bl	8012a00 <__sfputc_r>
 8012a4c:	1c43      	adds	r3, r0, #1
 8012a4e:	d1f3      	bne.n	8012a38 <__sfputs_r+0xa>
 8012a50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08012a54 <_vfiprintf_r>:
 8012a54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a58:	460d      	mov	r5, r1
 8012a5a:	b09d      	sub	sp, #116	; 0x74
 8012a5c:	4614      	mov	r4, r2
 8012a5e:	4698      	mov	r8, r3
 8012a60:	4606      	mov	r6, r0
 8012a62:	b118      	cbz	r0, 8012a6c <_vfiprintf_r+0x18>
 8012a64:	6983      	ldr	r3, [r0, #24]
 8012a66:	b90b      	cbnz	r3, 8012a6c <_vfiprintf_r+0x18>
 8012a68:	f000 fb06 	bl	8013078 <__sinit>
 8012a6c:	4b89      	ldr	r3, [pc, #548]	; (8012c94 <_vfiprintf_r+0x240>)
 8012a6e:	429d      	cmp	r5, r3
 8012a70:	d11b      	bne.n	8012aaa <_vfiprintf_r+0x56>
 8012a72:	6875      	ldr	r5, [r6, #4]
 8012a74:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012a76:	07d9      	lsls	r1, r3, #31
 8012a78:	d405      	bmi.n	8012a86 <_vfiprintf_r+0x32>
 8012a7a:	89ab      	ldrh	r3, [r5, #12]
 8012a7c:	059a      	lsls	r2, r3, #22
 8012a7e:	d402      	bmi.n	8012a86 <_vfiprintf_r+0x32>
 8012a80:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012a82:	f000 fb97 	bl	80131b4 <__retarget_lock_acquire_recursive>
 8012a86:	89ab      	ldrh	r3, [r5, #12]
 8012a88:	071b      	lsls	r3, r3, #28
 8012a8a:	d501      	bpl.n	8012a90 <_vfiprintf_r+0x3c>
 8012a8c:	692b      	ldr	r3, [r5, #16]
 8012a8e:	b9eb      	cbnz	r3, 8012acc <_vfiprintf_r+0x78>
 8012a90:	4629      	mov	r1, r5
 8012a92:	4630      	mov	r0, r6
 8012a94:	f000 f960 	bl	8012d58 <__swsetup_r>
 8012a98:	b1c0      	cbz	r0, 8012acc <_vfiprintf_r+0x78>
 8012a9a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012a9c:	07dc      	lsls	r4, r3, #31
 8012a9e:	d50e      	bpl.n	8012abe <_vfiprintf_r+0x6a>
 8012aa0:	f04f 30ff 	mov.w	r0, #4294967295
 8012aa4:	b01d      	add	sp, #116	; 0x74
 8012aa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012aaa:	4b7b      	ldr	r3, [pc, #492]	; (8012c98 <_vfiprintf_r+0x244>)
 8012aac:	429d      	cmp	r5, r3
 8012aae:	d101      	bne.n	8012ab4 <_vfiprintf_r+0x60>
 8012ab0:	68b5      	ldr	r5, [r6, #8]
 8012ab2:	e7df      	b.n	8012a74 <_vfiprintf_r+0x20>
 8012ab4:	4b79      	ldr	r3, [pc, #484]	; (8012c9c <_vfiprintf_r+0x248>)
 8012ab6:	429d      	cmp	r5, r3
 8012ab8:	bf08      	it	eq
 8012aba:	68f5      	ldreq	r5, [r6, #12]
 8012abc:	e7da      	b.n	8012a74 <_vfiprintf_r+0x20>
 8012abe:	89ab      	ldrh	r3, [r5, #12]
 8012ac0:	0598      	lsls	r0, r3, #22
 8012ac2:	d4ed      	bmi.n	8012aa0 <_vfiprintf_r+0x4c>
 8012ac4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012ac6:	f000 fb76 	bl	80131b6 <__retarget_lock_release_recursive>
 8012aca:	e7e9      	b.n	8012aa0 <_vfiprintf_r+0x4c>
 8012acc:	2300      	movs	r3, #0
 8012ace:	9309      	str	r3, [sp, #36]	; 0x24
 8012ad0:	2320      	movs	r3, #32
 8012ad2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012ad6:	f8cd 800c 	str.w	r8, [sp, #12]
 8012ada:	2330      	movs	r3, #48	; 0x30
 8012adc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8012ca0 <_vfiprintf_r+0x24c>
 8012ae0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012ae4:	f04f 0901 	mov.w	r9, #1
 8012ae8:	4623      	mov	r3, r4
 8012aea:	469a      	mov	sl, r3
 8012aec:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012af0:	b10a      	cbz	r2, 8012af6 <_vfiprintf_r+0xa2>
 8012af2:	2a25      	cmp	r2, #37	; 0x25
 8012af4:	d1f9      	bne.n	8012aea <_vfiprintf_r+0x96>
 8012af6:	ebba 0b04 	subs.w	fp, sl, r4
 8012afa:	d00b      	beq.n	8012b14 <_vfiprintf_r+0xc0>
 8012afc:	465b      	mov	r3, fp
 8012afe:	4622      	mov	r2, r4
 8012b00:	4629      	mov	r1, r5
 8012b02:	4630      	mov	r0, r6
 8012b04:	f7ff ff93 	bl	8012a2e <__sfputs_r>
 8012b08:	3001      	adds	r0, #1
 8012b0a:	f000 80aa 	beq.w	8012c62 <_vfiprintf_r+0x20e>
 8012b0e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012b10:	445a      	add	r2, fp
 8012b12:	9209      	str	r2, [sp, #36]	; 0x24
 8012b14:	f89a 3000 	ldrb.w	r3, [sl]
 8012b18:	2b00      	cmp	r3, #0
 8012b1a:	f000 80a2 	beq.w	8012c62 <_vfiprintf_r+0x20e>
 8012b1e:	2300      	movs	r3, #0
 8012b20:	f04f 32ff 	mov.w	r2, #4294967295
 8012b24:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012b28:	f10a 0a01 	add.w	sl, sl, #1
 8012b2c:	9304      	str	r3, [sp, #16]
 8012b2e:	9307      	str	r3, [sp, #28]
 8012b30:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012b34:	931a      	str	r3, [sp, #104]	; 0x68
 8012b36:	4654      	mov	r4, sl
 8012b38:	2205      	movs	r2, #5
 8012b3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012b3e:	4858      	ldr	r0, [pc, #352]	; (8012ca0 <_vfiprintf_r+0x24c>)
 8012b40:	f7ed fb66 	bl	8000210 <memchr>
 8012b44:	9a04      	ldr	r2, [sp, #16]
 8012b46:	b9d8      	cbnz	r0, 8012b80 <_vfiprintf_r+0x12c>
 8012b48:	06d1      	lsls	r1, r2, #27
 8012b4a:	bf44      	itt	mi
 8012b4c:	2320      	movmi	r3, #32
 8012b4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012b52:	0713      	lsls	r3, r2, #28
 8012b54:	bf44      	itt	mi
 8012b56:	232b      	movmi	r3, #43	; 0x2b
 8012b58:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012b5c:	f89a 3000 	ldrb.w	r3, [sl]
 8012b60:	2b2a      	cmp	r3, #42	; 0x2a
 8012b62:	d015      	beq.n	8012b90 <_vfiprintf_r+0x13c>
 8012b64:	9a07      	ldr	r2, [sp, #28]
 8012b66:	4654      	mov	r4, sl
 8012b68:	2000      	movs	r0, #0
 8012b6a:	f04f 0c0a 	mov.w	ip, #10
 8012b6e:	4621      	mov	r1, r4
 8012b70:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012b74:	3b30      	subs	r3, #48	; 0x30
 8012b76:	2b09      	cmp	r3, #9
 8012b78:	d94e      	bls.n	8012c18 <_vfiprintf_r+0x1c4>
 8012b7a:	b1b0      	cbz	r0, 8012baa <_vfiprintf_r+0x156>
 8012b7c:	9207      	str	r2, [sp, #28]
 8012b7e:	e014      	b.n	8012baa <_vfiprintf_r+0x156>
 8012b80:	eba0 0308 	sub.w	r3, r0, r8
 8012b84:	fa09 f303 	lsl.w	r3, r9, r3
 8012b88:	4313      	orrs	r3, r2
 8012b8a:	9304      	str	r3, [sp, #16]
 8012b8c:	46a2      	mov	sl, r4
 8012b8e:	e7d2      	b.n	8012b36 <_vfiprintf_r+0xe2>
 8012b90:	9b03      	ldr	r3, [sp, #12]
 8012b92:	1d19      	adds	r1, r3, #4
 8012b94:	681b      	ldr	r3, [r3, #0]
 8012b96:	9103      	str	r1, [sp, #12]
 8012b98:	2b00      	cmp	r3, #0
 8012b9a:	bfbb      	ittet	lt
 8012b9c:	425b      	neglt	r3, r3
 8012b9e:	f042 0202 	orrlt.w	r2, r2, #2
 8012ba2:	9307      	strge	r3, [sp, #28]
 8012ba4:	9307      	strlt	r3, [sp, #28]
 8012ba6:	bfb8      	it	lt
 8012ba8:	9204      	strlt	r2, [sp, #16]
 8012baa:	7823      	ldrb	r3, [r4, #0]
 8012bac:	2b2e      	cmp	r3, #46	; 0x2e
 8012bae:	d10c      	bne.n	8012bca <_vfiprintf_r+0x176>
 8012bb0:	7863      	ldrb	r3, [r4, #1]
 8012bb2:	2b2a      	cmp	r3, #42	; 0x2a
 8012bb4:	d135      	bne.n	8012c22 <_vfiprintf_r+0x1ce>
 8012bb6:	9b03      	ldr	r3, [sp, #12]
 8012bb8:	1d1a      	adds	r2, r3, #4
 8012bba:	681b      	ldr	r3, [r3, #0]
 8012bbc:	9203      	str	r2, [sp, #12]
 8012bbe:	2b00      	cmp	r3, #0
 8012bc0:	bfb8      	it	lt
 8012bc2:	f04f 33ff 	movlt.w	r3, #4294967295
 8012bc6:	3402      	adds	r4, #2
 8012bc8:	9305      	str	r3, [sp, #20]
 8012bca:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8012cb0 <_vfiprintf_r+0x25c>
 8012bce:	7821      	ldrb	r1, [r4, #0]
 8012bd0:	2203      	movs	r2, #3
 8012bd2:	4650      	mov	r0, sl
 8012bd4:	f7ed fb1c 	bl	8000210 <memchr>
 8012bd8:	b140      	cbz	r0, 8012bec <_vfiprintf_r+0x198>
 8012bda:	2340      	movs	r3, #64	; 0x40
 8012bdc:	eba0 000a 	sub.w	r0, r0, sl
 8012be0:	fa03 f000 	lsl.w	r0, r3, r0
 8012be4:	9b04      	ldr	r3, [sp, #16]
 8012be6:	4303      	orrs	r3, r0
 8012be8:	3401      	adds	r4, #1
 8012bea:	9304      	str	r3, [sp, #16]
 8012bec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012bf0:	482c      	ldr	r0, [pc, #176]	; (8012ca4 <_vfiprintf_r+0x250>)
 8012bf2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012bf6:	2206      	movs	r2, #6
 8012bf8:	f7ed fb0a 	bl	8000210 <memchr>
 8012bfc:	2800      	cmp	r0, #0
 8012bfe:	d03f      	beq.n	8012c80 <_vfiprintf_r+0x22c>
 8012c00:	4b29      	ldr	r3, [pc, #164]	; (8012ca8 <_vfiprintf_r+0x254>)
 8012c02:	bb1b      	cbnz	r3, 8012c4c <_vfiprintf_r+0x1f8>
 8012c04:	9b03      	ldr	r3, [sp, #12]
 8012c06:	3307      	adds	r3, #7
 8012c08:	f023 0307 	bic.w	r3, r3, #7
 8012c0c:	3308      	adds	r3, #8
 8012c0e:	9303      	str	r3, [sp, #12]
 8012c10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012c12:	443b      	add	r3, r7
 8012c14:	9309      	str	r3, [sp, #36]	; 0x24
 8012c16:	e767      	b.n	8012ae8 <_vfiprintf_r+0x94>
 8012c18:	fb0c 3202 	mla	r2, ip, r2, r3
 8012c1c:	460c      	mov	r4, r1
 8012c1e:	2001      	movs	r0, #1
 8012c20:	e7a5      	b.n	8012b6e <_vfiprintf_r+0x11a>
 8012c22:	2300      	movs	r3, #0
 8012c24:	3401      	adds	r4, #1
 8012c26:	9305      	str	r3, [sp, #20]
 8012c28:	4619      	mov	r1, r3
 8012c2a:	f04f 0c0a 	mov.w	ip, #10
 8012c2e:	4620      	mov	r0, r4
 8012c30:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012c34:	3a30      	subs	r2, #48	; 0x30
 8012c36:	2a09      	cmp	r2, #9
 8012c38:	d903      	bls.n	8012c42 <_vfiprintf_r+0x1ee>
 8012c3a:	2b00      	cmp	r3, #0
 8012c3c:	d0c5      	beq.n	8012bca <_vfiprintf_r+0x176>
 8012c3e:	9105      	str	r1, [sp, #20]
 8012c40:	e7c3      	b.n	8012bca <_vfiprintf_r+0x176>
 8012c42:	fb0c 2101 	mla	r1, ip, r1, r2
 8012c46:	4604      	mov	r4, r0
 8012c48:	2301      	movs	r3, #1
 8012c4a:	e7f0      	b.n	8012c2e <_vfiprintf_r+0x1da>
 8012c4c:	ab03      	add	r3, sp, #12
 8012c4e:	9300      	str	r3, [sp, #0]
 8012c50:	462a      	mov	r2, r5
 8012c52:	4b16      	ldr	r3, [pc, #88]	; (8012cac <_vfiprintf_r+0x258>)
 8012c54:	a904      	add	r1, sp, #16
 8012c56:	4630      	mov	r0, r6
 8012c58:	f7fc f892 	bl	800ed80 <_printf_float>
 8012c5c:	4607      	mov	r7, r0
 8012c5e:	1c78      	adds	r0, r7, #1
 8012c60:	d1d6      	bne.n	8012c10 <_vfiprintf_r+0x1bc>
 8012c62:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012c64:	07d9      	lsls	r1, r3, #31
 8012c66:	d405      	bmi.n	8012c74 <_vfiprintf_r+0x220>
 8012c68:	89ab      	ldrh	r3, [r5, #12]
 8012c6a:	059a      	lsls	r2, r3, #22
 8012c6c:	d402      	bmi.n	8012c74 <_vfiprintf_r+0x220>
 8012c6e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012c70:	f000 faa1 	bl	80131b6 <__retarget_lock_release_recursive>
 8012c74:	89ab      	ldrh	r3, [r5, #12]
 8012c76:	065b      	lsls	r3, r3, #25
 8012c78:	f53f af12 	bmi.w	8012aa0 <_vfiprintf_r+0x4c>
 8012c7c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012c7e:	e711      	b.n	8012aa4 <_vfiprintf_r+0x50>
 8012c80:	ab03      	add	r3, sp, #12
 8012c82:	9300      	str	r3, [sp, #0]
 8012c84:	462a      	mov	r2, r5
 8012c86:	4b09      	ldr	r3, [pc, #36]	; (8012cac <_vfiprintf_r+0x258>)
 8012c88:	a904      	add	r1, sp, #16
 8012c8a:	4630      	mov	r0, r6
 8012c8c:	f7fc fb1c 	bl	800f2c8 <_printf_i>
 8012c90:	e7e4      	b.n	8012c5c <_vfiprintf_r+0x208>
 8012c92:	bf00      	nop
 8012c94:	0801403c 	.word	0x0801403c
 8012c98:	0801405c 	.word	0x0801405c
 8012c9c:	0801401c 	.word	0x0801401c
 8012ca0:	08013fcc 	.word	0x08013fcc
 8012ca4:	08013fd6 	.word	0x08013fd6
 8012ca8:	0800ed81 	.word	0x0800ed81
 8012cac:	08012a2f 	.word	0x08012a2f
 8012cb0:	08013fd2 	.word	0x08013fd2

08012cb4 <__swbuf_r>:
 8012cb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012cb6:	460e      	mov	r6, r1
 8012cb8:	4614      	mov	r4, r2
 8012cba:	4605      	mov	r5, r0
 8012cbc:	b118      	cbz	r0, 8012cc6 <__swbuf_r+0x12>
 8012cbe:	6983      	ldr	r3, [r0, #24]
 8012cc0:	b90b      	cbnz	r3, 8012cc6 <__swbuf_r+0x12>
 8012cc2:	f000 f9d9 	bl	8013078 <__sinit>
 8012cc6:	4b21      	ldr	r3, [pc, #132]	; (8012d4c <__swbuf_r+0x98>)
 8012cc8:	429c      	cmp	r4, r3
 8012cca:	d12b      	bne.n	8012d24 <__swbuf_r+0x70>
 8012ccc:	686c      	ldr	r4, [r5, #4]
 8012cce:	69a3      	ldr	r3, [r4, #24]
 8012cd0:	60a3      	str	r3, [r4, #8]
 8012cd2:	89a3      	ldrh	r3, [r4, #12]
 8012cd4:	071a      	lsls	r2, r3, #28
 8012cd6:	d52f      	bpl.n	8012d38 <__swbuf_r+0x84>
 8012cd8:	6923      	ldr	r3, [r4, #16]
 8012cda:	b36b      	cbz	r3, 8012d38 <__swbuf_r+0x84>
 8012cdc:	6923      	ldr	r3, [r4, #16]
 8012cde:	6820      	ldr	r0, [r4, #0]
 8012ce0:	1ac0      	subs	r0, r0, r3
 8012ce2:	6963      	ldr	r3, [r4, #20]
 8012ce4:	b2f6      	uxtb	r6, r6
 8012ce6:	4283      	cmp	r3, r0
 8012ce8:	4637      	mov	r7, r6
 8012cea:	dc04      	bgt.n	8012cf6 <__swbuf_r+0x42>
 8012cec:	4621      	mov	r1, r4
 8012cee:	4628      	mov	r0, r5
 8012cf0:	f000 f92e 	bl	8012f50 <_fflush_r>
 8012cf4:	bb30      	cbnz	r0, 8012d44 <__swbuf_r+0x90>
 8012cf6:	68a3      	ldr	r3, [r4, #8]
 8012cf8:	3b01      	subs	r3, #1
 8012cfa:	60a3      	str	r3, [r4, #8]
 8012cfc:	6823      	ldr	r3, [r4, #0]
 8012cfe:	1c5a      	adds	r2, r3, #1
 8012d00:	6022      	str	r2, [r4, #0]
 8012d02:	701e      	strb	r6, [r3, #0]
 8012d04:	6963      	ldr	r3, [r4, #20]
 8012d06:	3001      	adds	r0, #1
 8012d08:	4283      	cmp	r3, r0
 8012d0a:	d004      	beq.n	8012d16 <__swbuf_r+0x62>
 8012d0c:	89a3      	ldrh	r3, [r4, #12]
 8012d0e:	07db      	lsls	r3, r3, #31
 8012d10:	d506      	bpl.n	8012d20 <__swbuf_r+0x6c>
 8012d12:	2e0a      	cmp	r6, #10
 8012d14:	d104      	bne.n	8012d20 <__swbuf_r+0x6c>
 8012d16:	4621      	mov	r1, r4
 8012d18:	4628      	mov	r0, r5
 8012d1a:	f000 f919 	bl	8012f50 <_fflush_r>
 8012d1e:	b988      	cbnz	r0, 8012d44 <__swbuf_r+0x90>
 8012d20:	4638      	mov	r0, r7
 8012d22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012d24:	4b0a      	ldr	r3, [pc, #40]	; (8012d50 <__swbuf_r+0x9c>)
 8012d26:	429c      	cmp	r4, r3
 8012d28:	d101      	bne.n	8012d2e <__swbuf_r+0x7a>
 8012d2a:	68ac      	ldr	r4, [r5, #8]
 8012d2c:	e7cf      	b.n	8012cce <__swbuf_r+0x1a>
 8012d2e:	4b09      	ldr	r3, [pc, #36]	; (8012d54 <__swbuf_r+0xa0>)
 8012d30:	429c      	cmp	r4, r3
 8012d32:	bf08      	it	eq
 8012d34:	68ec      	ldreq	r4, [r5, #12]
 8012d36:	e7ca      	b.n	8012cce <__swbuf_r+0x1a>
 8012d38:	4621      	mov	r1, r4
 8012d3a:	4628      	mov	r0, r5
 8012d3c:	f000 f80c 	bl	8012d58 <__swsetup_r>
 8012d40:	2800      	cmp	r0, #0
 8012d42:	d0cb      	beq.n	8012cdc <__swbuf_r+0x28>
 8012d44:	f04f 37ff 	mov.w	r7, #4294967295
 8012d48:	e7ea      	b.n	8012d20 <__swbuf_r+0x6c>
 8012d4a:	bf00      	nop
 8012d4c:	0801403c 	.word	0x0801403c
 8012d50:	0801405c 	.word	0x0801405c
 8012d54:	0801401c 	.word	0x0801401c

08012d58 <__swsetup_r>:
 8012d58:	4b32      	ldr	r3, [pc, #200]	; (8012e24 <__swsetup_r+0xcc>)
 8012d5a:	b570      	push	{r4, r5, r6, lr}
 8012d5c:	681d      	ldr	r5, [r3, #0]
 8012d5e:	4606      	mov	r6, r0
 8012d60:	460c      	mov	r4, r1
 8012d62:	b125      	cbz	r5, 8012d6e <__swsetup_r+0x16>
 8012d64:	69ab      	ldr	r3, [r5, #24]
 8012d66:	b913      	cbnz	r3, 8012d6e <__swsetup_r+0x16>
 8012d68:	4628      	mov	r0, r5
 8012d6a:	f000 f985 	bl	8013078 <__sinit>
 8012d6e:	4b2e      	ldr	r3, [pc, #184]	; (8012e28 <__swsetup_r+0xd0>)
 8012d70:	429c      	cmp	r4, r3
 8012d72:	d10f      	bne.n	8012d94 <__swsetup_r+0x3c>
 8012d74:	686c      	ldr	r4, [r5, #4]
 8012d76:	89a3      	ldrh	r3, [r4, #12]
 8012d78:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012d7c:	0719      	lsls	r1, r3, #28
 8012d7e:	d42c      	bmi.n	8012dda <__swsetup_r+0x82>
 8012d80:	06dd      	lsls	r5, r3, #27
 8012d82:	d411      	bmi.n	8012da8 <__swsetup_r+0x50>
 8012d84:	2309      	movs	r3, #9
 8012d86:	6033      	str	r3, [r6, #0]
 8012d88:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8012d8c:	81a3      	strh	r3, [r4, #12]
 8012d8e:	f04f 30ff 	mov.w	r0, #4294967295
 8012d92:	e03e      	b.n	8012e12 <__swsetup_r+0xba>
 8012d94:	4b25      	ldr	r3, [pc, #148]	; (8012e2c <__swsetup_r+0xd4>)
 8012d96:	429c      	cmp	r4, r3
 8012d98:	d101      	bne.n	8012d9e <__swsetup_r+0x46>
 8012d9a:	68ac      	ldr	r4, [r5, #8]
 8012d9c:	e7eb      	b.n	8012d76 <__swsetup_r+0x1e>
 8012d9e:	4b24      	ldr	r3, [pc, #144]	; (8012e30 <__swsetup_r+0xd8>)
 8012da0:	429c      	cmp	r4, r3
 8012da2:	bf08      	it	eq
 8012da4:	68ec      	ldreq	r4, [r5, #12]
 8012da6:	e7e6      	b.n	8012d76 <__swsetup_r+0x1e>
 8012da8:	0758      	lsls	r0, r3, #29
 8012daa:	d512      	bpl.n	8012dd2 <__swsetup_r+0x7a>
 8012dac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012dae:	b141      	cbz	r1, 8012dc2 <__swsetup_r+0x6a>
 8012db0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012db4:	4299      	cmp	r1, r3
 8012db6:	d002      	beq.n	8012dbe <__swsetup_r+0x66>
 8012db8:	4630      	mov	r0, r6
 8012dba:	f7ff fb65 	bl	8012488 <_free_r>
 8012dbe:	2300      	movs	r3, #0
 8012dc0:	6363      	str	r3, [r4, #52]	; 0x34
 8012dc2:	89a3      	ldrh	r3, [r4, #12]
 8012dc4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8012dc8:	81a3      	strh	r3, [r4, #12]
 8012dca:	2300      	movs	r3, #0
 8012dcc:	6063      	str	r3, [r4, #4]
 8012dce:	6923      	ldr	r3, [r4, #16]
 8012dd0:	6023      	str	r3, [r4, #0]
 8012dd2:	89a3      	ldrh	r3, [r4, #12]
 8012dd4:	f043 0308 	orr.w	r3, r3, #8
 8012dd8:	81a3      	strh	r3, [r4, #12]
 8012dda:	6923      	ldr	r3, [r4, #16]
 8012ddc:	b94b      	cbnz	r3, 8012df2 <__swsetup_r+0x9a>
 8012dde:	89a3      	ldrh	r3, [r4, #12]
 8012de0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8012de4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012de8:	d003      	beq.n	8012df2 <__swsetup_r+0x9a>
 8012dea:	4621      	mov	r1, r4
 8012dec:	4630      	mov	r0, r6
 8012dee:	f000 fa07 	bl	8013200 <__smakebuf_r>
 8012df2:	89a0      	ldrh	r0, [r4, #12]
 8012df4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012df8:	f010 0301 	ands.w	r3, r0, #1
 8012dfc:	d00a      	beq.n	8012e14 <__swsetup_r+0xbc>
 8012dfe:	2300      	movs	r3, #0
 8012e00:	60a3      	str	r3, [r4, #8]
 8012e02:	6963      	ldr	r3, [r4, #20]
 8012e04:	425b      	negs	r3, r3
 8012e06:	61a3      	str	r3, [r4, #24]
 8012e08:	6923      	ldr	r3, [r4, #16]
 8012e0a:	b943      	cbnz	r3, 8012e1e <__swsetup_r+0xc6>
 8012e0c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8012e10:	d1ba      	bne.n	8012d88 <__swsetup_r+0x30>
 8012e12:	bd70      	pop	{r4, r5, r6, pc}
 8012e14:	0781      	lsls	r1, r0, #30
 8012e16:	bf58      	it	pl
 8012e18:	6963      	ldrpl	r3, [r4, #20]
 8012e1a:	60a3      	str	r3, [r4, #8]
 8012e1c:	e7f4      	b.n	8012e08 <__swsetup_r+0xb0>
 8012e1e:	2000      	movs	r0, #0
 8012e20:	e7f7      	b.n	8012e12 <__swsetup_r+0xba>
 8012e22:	bf00      	nop
 8012e24:	20000044 	.word	0x20000044
 8012e28:	0801403c 	.word	0x0801403c
 8012e2c:	0801405c 	.word	0x0801405c
 8012e30:	0801401c 	.word	0x0801401c

08012e34 <abort>:
 8012e34:	b508      	push	{r3, lr}
 8012e36:	2006      	movs	r0, #6
 8012e38:	f000 fa52 	bl	80132e0 <raise>
 8012e3c:	2001      	movs	r0, #1
 8012e3e:	f7fb fdbb 	bl	800e9b8 <_exit>
	...

08012e44 <__sflush_r>:
 8012e44:	898a      	ldrh	r2, [r1, #12]
 8012e46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012e4a:	4605      	mov	r5, r0
 8012e4c:	0710      	lsls	r0, r2, #28
 8012e4e:	460c      	mov	r4, r1
 8012e50:	d458      	bmi.n	8012f04 <__sflush_r+0xc0>
 8012e52:	684b      	ldr	r3, [r1, #4]
 8012e54:	2b00      	cmp	r3, #0
 8012e56:	dc05      	bgt.n	8012e64 <__sflush_r+0x20>
 8012e58:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8012e5a:	2b00      	cmp	r3, #0
 8012e5c:	dc02      	bgt.n	8012e64 <__sflush_r+0x20>
 8012e5e:	2000      	movs	r0, #0
 8012e60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012e64:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012e66:	2e00      	cmp	r6, #0
 8012e68:	d0f9      	beq.n	8012e5e <__sflush_r+0x1a>
 8012e6a:	2300      	movs	r3, #0
 8012e6c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8012e70:	682f      	ldr	r7, [r5, #0]
 8012e72:	602b      	str	r3, [r5, #0]
 8012e74:	d032      	beq.n	8012edc <__sflush_r+0x98>
 8012e76:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8012e78:	89a3      	ldrh	r3, [r4, #12]
 8012e7a:	075a      	lsls	r2, r3, #29
 8012e7c:	d505      	bpl.n	8012e8a <__sflush_r+0x46>
 8012e7e:	6863      	ldr	r3, [r4, #4]
 8012e80:	1ac0      	subs	r0, r0, r3
 8012e82:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012e84:	b10b      	cbz	r3, 8012e8a <__sflush_r+0x46>
 8012e86:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012e88:	1ac0      	subs	r0, r0, r3
 8012e8a:	2300      	movs	r3, #0
 8012e8c:	4602      	mov	r2, r0
 8012e8e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012e90:	6a21      	ldr	r1, [r4, #32]
 8012e92:	4628      	mov	r0, r5
 8012e94:	47b0      	blx	r6
 8012e96:	1c43      	adds	r3, r0, #1
 8012e98:	89a3      	ldrh	r3, [r4, #12]
 8012e9a:	d106      	bne.n	8012eaa <__sflush_r+0x66>
 8012e9c:	6829      	ldr	r1, [r5, #0]
 8012e9e:	291d      	cmp	r1, #29
 8012ea0:	d82c      	bhi.n	8012efc <__sflush_r+0xb8>
 8012ea2:	4a2a      	ldr	r2, [pc, #168]	; (8012f4c <__sflush_r+0x108>)
 8012ea4:	40ca      	lsrs	r2, r1
 8012ea6:	07d6      	lsls	r6, r2, #31
 8012ea8:	d528      	bpl.n	8012efc <__sflush_r+0xb8>
 8012eaa:	2200      	movs	r2, #0
 8012eac:	6062      	str	r2, [r4, #4]
 8012eae:	04d9      	lsls	r1, r3, #19
 8012eb0:	6922      	ldr	r2, [r4, #16]
 8012eb2:	6022      	str	r2, [r4, #0]
 8012eb4:	d504      	bpl.n	8012ec0 <__sflush_r+0x7c>
 8012eb6:	1c42      	adds	r2, r0, #1
 8012eb8:	d101      	bne.n	8012ebe <__sflush_r+0x7a>
 8012eba:	682b      	ldr	r3, [r5, #0]
 8012ebc:	b903      	cbnz	r3, 8012ec0 <__sflush_r+0x7c>
 8012ebe:	6560      	str	r0, [r4, #84]	; 0x54
 8012ec0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012ec2:	602f      	str	r7, [r5, #0]
 8012ec4:	2900      	cmp	r1, #0
 8012ec6:	d0ca      	beq.n	8012e5e <__sflush_r+0x1a>
 8012ec8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012ecc:	4299      	cmp	r1, r3
 8012ece:	d002      	beq.n	8012ed6 <__sflush_r+0x92>
 8012ed0:	4628      	mov	r0, r5
 8012ed2:	f7ff fad9 	bl	8012488 <_free_r>
 8012ed6:	2000      	movs	r0, #0
 8012ed8:	6360      	str	r0, [r4, #52]	; 0x34
 8012eda:	e7c1      	b.n	8012e60 <__sflush_r+0x1c>
 8012edc:	6a21      	ldr	r1, [r4, #32]
 8012ede:	2301      	movs	r3, #1
 8012ee0:	4628      	mov	r0, r5
 8012ee2:	47b0      	blx	r6
 8012ee4:	1c41      	adds	r1, r0, #1
 8012ee6:	d1c7      	bne.n	8012e78 <__sflush_r+0x34>
 8012ee8:	682b      	ldr	r3, [r5, #0]
 8012eea:	2b00      	cmp	r3, #0
 8012eec:	d0c4      	beq.n	8012e78 <__sflush_r+0x34>
 8012eee:	2b1d      	cmp	r3, #29
 8012ef0:	d001      	beq.n	8012ef6 <__sflush_r+0xb2>
 8012ef2:	2b16      	cmp	r3, #22
 8012ef4:	d101      	bne.n	8012efa <__sflush_r+0xb6>
 8012ef6:	602f      	str	r7, [r5, #0]
 8012ef8:	e7b1      	b.n	8012e5e <__sflush_r+0x1a>
 8012efa:	89a3      	ldrh	r3, [r4, #12]
 8012efc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012f00:	81a3      	strh	r3, [r4, #12]
 8012f02:	e7ad      	b.n	8012e60 <__sflush_r+0x1c>
 8012f04:	690f      	ldr	r7, [r1, #16]
 8012f06:	2f00      	cmp	r7, #0
 8012f08:	d0a9      	beq.n	8012e5e <__sflush_r+0x1a>
 8012f0a:	0793      	lsls	r3, r2, #30
 8012f0c:	680e      	ldr	r6, [r1, #0]
 8012f0e:	bf08      	it	eq
 8012f10:	694b      	ldreq	r3, [r1, #20]
 8012f12:	600f      	str	r7, [r1, #0]
 8012f14:	bf18      	it	ne
 8012f16:	2300      	movne	r3, #0
 8012f18:	eba6 0807 	sub.w	r8, r6, r7
 8012f1c:	608b      	str	r3, [r1, #8]
 8012f1e:	f1b8 0f00 	cmp.w	r8, #0
 8012f22:	dd9c      	ble.n	8012e5e <__sflush_r+0x1a>
 8012f24:	6a21      	ldr	r1, [r4, #32]
 8012f26:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8012f28:	4643      	mov	r3, r8
 8012f2a:	463a      	mov	r2, r7
 8012f2c:	4628      	mov	r0, r5
 8012f2e:	47b0      	blx	r6
 8012f30:	2800      	cmp	r0, #0
 8012f32:	dc06      	bgt.n	8012f42 <__sflush_r+0xfe>
 8012f34:	89a3      	ldrh	r3, [r4, #12]
 8012f36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012f3a:	81a3      	strh	r3, [r4, #12]
 8012f3c:	f04f 30ff 	mov.w	r0, #4294967295
 8012f40:	e78e      	b.n	8012e60 <__sflush_r+0x1c>
 8012f42:	4407      	add	r7, r0
 8012f44:	eba8 0800 	sub.w	r8, r8, r0
 8012f48:	e7e9      	b.n	8012f1e <__sflush_r+0xda>
 8012f4a:	bf00      	nop
 8012f4c:	20400001 	.word	0x20400001

08012f50 <_fflush_r>:
 8012f50:	b538      	push	{r3, r4, r5, lr}
 8012f52:	690b      	ldr	r3, [r1, #16]
 8012f54:	4605      	mov	r5, r0
 8012f56:	460c      	mov	r4, r1
 8012f58:	b913      	cbnz	r3, 8012f60 <_fflush_r+0x10>
 8012f5a:	2500      	movs	r5, #0
 8012f5c:	4628      	mov	r0, r5
 8012f5e:	bd38      	pop	{r3, r4, r5, pc}
 8012f60:	b118      	cbz	r0, 8012f6a <_fflush_r+0x1a>
 8012f62:	6983      	ldr	r3, [r0, #24]
 8012f64:	b90b      	cbnz	r3, 8012f6a <_fflush_r+0x1a>
 8012f66:	f000 f887 	bl	8013078 <__sinit>
 8012f6a:	4b14      	ldr	r3, [pc, #80]	; (8012fbc <_fflush_r+0x6c>)
 8012f6c:	429c      	cmp	r4, r3
 8012f6e:	d11b      	bne.n	8012fa8 <_fflush_r+0x58>
 8012f70:	686c      	ldr	r4, [r5, #4]
 8012f72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012f76:	2b00      	cmp	r3, #0
 8012f78:	d0ef      	beq.n	8012f5a <_fflush_r+0xa>
 8012f7a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8012f7c:	07d0      	lsls	r0, r2, #31
 8012f7e:	d404      	bmi.n	8012f8a <_fflush_r+0x3a>
 8012f80:	0599      	lsls	r1, r3, #22
 8012f82:	d402      	bmi.n	8012f8a <_fflush_r+0x3a>
 8012f84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012f86:	f000 f915 	bl	80131b4 <__retarget_lock_acquire_recursive>
 8012f8a:	4628      	mov	r0, r5
 8012f8c:	4621      	mov	r1, r4
 8012f8e:	f7ff ff59 	bl	8012e44 <__sflush_r>
 8012f92:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012f94:	07da      	lsls	r2, r3, #31
 8012f96:	4605      	mov	r5, r0
 8012f98:	d4e0      	bmi.n	8012f5c <_fflush_r+0xc>
 8012f9a:	89a3      	ldrh	r3, [r4, #12]
 8012f9c:	059b      	lsls	r3, r3, #22
 8012f9e:	d4dd      	bmi.n	8012f5c <_fflush_r+0xc>
 8012fa0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012fa2:	f000 f908 	bl	80131b6 <__retarget_lock_release_recursive>
 8012fa6:	e7d9      	b.n	8012f5c <_fflush_r+0xc>
 8012fa8:	4b05      	ldr	r3, [pc, #20]	; (8012fc0 <_fflush_r+0x70>)
 8012faa:	429c      	cmp	r4, r3
 8012fac:	d101      	bne.n	8012fb2 <_fflush_r+0x62>
 8012fae:	68ac      	ldr	r4, [r5, #8]
 8012fb0:	e7df      	b.n	8012f72 <_fflush_r+0x22>
 8012fb2:	4b04      	ldr	r3, [pc, #16]	; (8012fc4 <_fflush_r+0x74>)
 8012fb4:	429c      	cmp	r4, r3
 8012fb6:	bf08      	it	eq
 8012fb8:	68ec      	ldreq	r4, [r5, #12]
 8012fba:	e7da      	b.n	8012f72 <_fflush_r+0x22>
 8012fbc:	0801403c 	.word	0x0801403c
 8012fc0:	0801405c 	.word	0x0801405c
 8012fc4:	0801401c 	.word	0x0801401c

08012fc8 <std>:
 8012fc8:	2300      	movs	r3, #0
 8012fca:	b510      	push	{r4, lr}
 8012fcc:	4604      	mov	r4, r0
 8012fce:	e9c0 3300 	strd	r3, r3, [r0]
 8012fd2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012fd6:	6083      	str	r3, [r0, #8]
 8012fd8:	8181      	strh	r1, [r0, #12]
 8012fda:	6643      	str	r3, [r0, #100]	; 0x64
 8012fdc:	81c2      	strh	r2, [r0, #14]
 8012fde:	6183      	str	r3, [r0, #24]
 8012fe0:	4619      	mov	r1, r3
 8012fe2:	2208      	movs	r2, #8
 8012fe4:	305c      	adds	r0, #92	; 0x5c
 8012fe6:	f7fb fe23 	bl	800ec30 <memset>
 8012fea:	4b05      	ldr	r3, [pc, #20]	; (8013000 <std+0x38>)
 8012fec:	6263      	str	r3, [r4, #36]	; 0x24
 8012fee:	4b05      	ldr	r3, [pc, #20]	; (8013004 <std+0x3c>)
 8012ff0:	62a3      	str	r3, [r4, #40]	; 0x28
 8012ff2:	4b05      	ldr	r3, [pc, #20]	; (8013008 <std+0x40>)
 8012ff4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8012ff6:	4b05      	ldr	r3, [pc, #20]	; (801300c <std+0x44>)
 8012ff8:	6224      	str	r4, [r4, #32]
 8012ffa:	6323      	str	r3, [r4, #48]	; 0x30
 8012ffc:	bd10      	pop	{r4, pc}
 8012ffe:	bf00      	nop
 8013000:	08013319 	.word	0x08013319
 8013004:	0801333b 	.word	0x0801333b
 8013008:	08013373 	.word	0x08013373
 801300c:	08013397 	.word	0x08013397

08013010 <_cleanup_r>:
 8013010:	4901      	ldr	r1, [pc, #4]	; (8013018 <_cleanup_r+0x8>)
 8013012:	f000 b8af 	b.w	8013174 <_fwalk_reent>
 8013016:	bf00      	nop
 8013018:	08012f51 	.word	0x08012f51

0801301c <__sfmoreglue>:
 801301c:	b570      	push	{r4, r5, r6, lr}
 801301e:	1e4a      	subs	r2, r1, #1
 8013020:	2568      	movs	r5, #104	; 0x68
 8013022:	4355      	muls	r5, r2
 8013024:	460e      	mov	r6, r1
 8013026:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801302a:	f7ff fa7d 	bl	8012528 <_malloc_r>
 801302e:	4604      	mov	r4, r0
 8013030:	b140      	cbz	r0, 8013044 <__sfmoreglue+0x28>
 8013032:	2100      	movs	r1, #0
 8013034:	e9c0 1600 	strd	r1, r6, [r0]
 8013038:	300c      	adds	r0, #12
 801303a:	60a0      	str	r0, [r4, #8]
 801303c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8013040:	f7fb fdf6 	bl	800ec30 <memset>
 8013044:	4620      	mov	r0, r4
 8013046:	bd70      	pop	{r4, r5, r6, pc}

08013048 <__sfp_lock_acquire>:
 8013048:	4801      	ldr	r0, [pc, #4]	; (8013050 <__sfp_lock_acquire+0x8>)
 801304a:	f000 b8b3 	b.w	80131b4 <__retarget_lock_acquire_recursive>
 801304e:	bf00      	nop
 8013050:	200108c0 	.word	0x200108c0

08013054 <__sfp_lock_release>:
 8013054:	4801      	ldr	r0, [pc, #4]	; (801305c <__sfp_lock_release+0x8>)
 8013056:	f000 b8ae 	b.w	80131b6 <__retarget_lock_release_recursive>
 801305a:	bf00      	nop
 801305c:	200108c0 	.word	0x200108c0

08013060 <__sinit_lock_acquire>:
 8013060:	4801      	ldr	r0, [pc, #4]	; (8013068 <__sinit_lock_acquire+0x8>)
 8013062:	f000 b8a7 	b.w	80131b4 <__retarget_lock_acquire_recursive>
 8013066:	bf00      	nop
 8013068:	200108bb 	.word	0x200108bb

0801306c <__sinit_lock_release>:
 801306c:	4801      	ldr	r0, [pc, #4]	; (8013074 <__sinit_lock_release+0x8>)
 801306e:	f000 b8a2 	b.w	80131b6 <__retarget_lock_release_recursive>
 8013072:	bf00      	nop
 8013074:	200108bb 	.word	0x200108bb

08013078 <__sinit>:
 8013078:	b510      	push	{r4, lr}
 801307a:	4604      	mov	r4, r0
 801307c:	f7ff fff0 	bl	8013060 <__sinit_lock_acquire>
 8013080:	69a3      	ldr	r3, [r4, #24]
 8013082:	b11b      	cbz	r3, 801308c <__sinit+0x14>
 8013084:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013088:	f7ff bff0 	b.w	801306c <__sinit_lock_release>
 801308c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8013090:	6523      	str	r3, [r4, #80]	; 0x50
 8013092:	4b13      	ldr	r3, [pc, #76]	; (80130e0 <__sinit+0x68>)
 8013094:	4a13      	ldr	r2, [pc, #76]	; (80130e4 <__sinit+0x6c>)
 8013096:	681b      	ldr	r3, [r3, #0]
 8013098:	62a2      	str	r2, [r4, #40]	; 0x28
 801309a:	42a3      	cmp	r3, r4
 801309c:	bf04      	itt	eq
 801309e:	2301      	moveq	r3, #1
 80130a0:	61a3      	streq	r3, [r4, #24]
 80130a2:	4620      	mov	r0, r4
 80130a4:	f000 f820 	bl	80130e8 <__sfp>
 80130a8:	6060      	str	r0, [r4, #4]
 80130aa:	4620      	mov	r0, r4
 80130ac:	f000 f81c 	bl	80130e8 <__sfp>
 80130b0:	60a0      	str	r0, [r4, #8]
 80130b2:	4620      	mov	r0, r4
 80130b4:	f000 f818 	bl	80130e8 <__sfp>
 80130b8:	2200      	movs	r2, #0
 80130ba:	60e0      	str	r0, [r4, #12]
 80130bc:	2104      	movs	r1, #4
 80130be:	6860      	ldr	r0, [r4, #4]
 80130c0:	f7ff ff82 	bl	8012fc8 <std>
 80130c4:	68a0      	ldr	r0, [r4, #8]
 80130c6:	2201      	movs	r2, #1
 80130c8:	2109      	movs	r1, #9
 80130ca:	f7ff ff7d 	bl	8012fc8 <std>
 80130ce:	68e0      	ldr	r0, [r4, #12]
 80130d0:	2202      	movs	r2, #2
 80130d2:	2112      	movs	r1, #18
 80130d4:	f7ff ff78 	bl	8012fc8 <std>
 80130d8:	2301      	movs	r3, #1
 80130da:	61a3      	str	r3, [r4, #24]
 80130dc:	e7d2      	b.n	8013084 <__sinit+0xc>
 80130de:	bf00      	nop
 80130e0:	08013bc8 	.word	0x08013bc8
 80130e4:	08013011 	.word	0x08013011

080130e8 <__sfp>:
 80130e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80130ea:	4607      	mov	r7, r0
 80130ec:	f7ff ffac 	bl	8013048 <__sfp_lock_acquire>
 80130f0:	4b1e      	ldr	r3, [pc, #120]	; (801316c <__sfp+0x84>)
 80130f2:	681e      	ldr	r6, [r3, #0]
 80130f4:	69b3      	ldr	r3, [r6, #24]
 80130f6:	b913      	cbnz	r3, 80130fe <__sfp+0x16>
 80130f8:	4630      	mov	r0, r6
 80130fa:	f7ff ffbd 	bl	8013078 <__sinit>
 80130fe:	3648      	adds	r6, #72	; 0x48
 8013100:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8013104:	3b01      	subs	r3, #1
 8013106:	d503      	bpl.n	8013110 <__sfp+0x28>
 8013108:	6833      	ldr	r3, [r6, #0]
 801310a:	b30b      	cbz	r3, 8013150 <__sfp+0x68>
 801310c:	6836      	ldr	r6, [r6, #0]
 801310e:	e7f7      	b.n	8013100 <__sfp+0x18>
 8013110:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8013114:	b9d5      	cbnz	r5, 801314c <__sfp+0x64>
 8013116:	4b16      	ldr	r3, [pc, #88]	; (8013170 <__sfp+0x88>)
 8013118:	60e3      	str	r3, [r4, #12]
 801311a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801311e:	6665      	str	r5, [r4, #100]	; 0x64
 8013120:	f000 f847 	bl	80131b2 <__retarget_lock_init_recursive>
 8013124:	f7ff ff96 	bl	8013054 <__sfp_lock_release>
 8013128:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801312c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8013130:	6025      	str	r5, [r4, #0]
 8013132:	61a5      	str	r5, [r4, #24]
 8013134:	2208      	movs	r2, #8
 8013136:	4629      	mov	r1, r5
 8013138:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801313c:	f7fb fd78 	bl	800ec30 <memset>
 8013140:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8013144:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8013148:	4620      	mov	r0, r4
 801314a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801314c:	3468      	adds	r4, #104	; 0x68
 801314e:	e7d9      	b.n	8013104 <__sfp+0x1c>
 8013150:	2104      	movs	r1, #4
 8013152:	4638      	mov	r0, r7
 8013154:	f7ff ff62 	bl	801301c <__sfmoreglue>
 8013158:	4604      	mov	r4, r0
 801315a:	6030      	str	r0, [r6, #0]
 801315c:	2800      	cmp	r0, #0
 801315e:	d1d5      	bne.n	801310c <__sfp+0x24>
 8013160:	f7ff ff78 	bl	8013054 <__sfp_lock_release>
 8013164:	230c      	movs	r3, #12
 8013166:	603b      	str	r3, [r7, #0]
 8013168:	e7ee      	b.n	8013148 <__sfp+0x60>
 801316a:	bf00      	nop
 801316c:	08013bc8 	.word	0x08013bc8
 8013170:	ffff0001 	.word	0xffff0001

08013174 <_fwalk_reent>:
 8013174:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013178:	4606      	mov	r6, r0
 801317a:	4688      	mov	r8, r1
 801317c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8013180:	2700      	movs	r7, #0
 8013182:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8013186:	f1b9 0901 	subs.w	r9, r9, #1
 801318a:	d505      	bpl.n	8013198 <_fwalk_reent+0x24>
 801318c:	6824      	ldr	r4, [r4, #0]
 801318e:	2c00      	cmp	r4, #0
 8013190:	d1f7      	bne.n	8013182 <_fwalk_reent+0xe>
 8013192:	4638      	mov	r0, r7
 8013194:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013198:	89ab      	ldrh	r3, [r5, #12]
 801319a:	2b01      	cmp	r3, #1
 801319c:	d907      	bls.n	80131ae <_fwalk_reent+0x3a>
 801319e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80131a2:	3301      	adds	r3, #1
 80131a4:	d003      	beq.n	80131ae <_fwalk_reent+0x3a>
 80131a6:	4629      	mov	r1, r5
 80131a8:	4630      	mov	r0, r6
 80131aa:	47c0      	blx	r8
 80131ac:	4307      	orrs	r7, r0
 80131ae:	3568      	adds	r5, #104	; 0x68
 80131b0:	e7e9      	b.n	8013186 <_fwalk_reent+0x12>

080131b2 <__retarget_lock_init_recursive>:
 80131b2:	4770      	bx	lr

080131b4 <__retarget_lock_acquire_recursive>:
 80131b4:	4770      	bx	lr

080131b6 <__retarget_lock_release_recursive>:
 80131b6:	4770      	bx	lr

080131b8 <__swhatbuf_r>:
 80131b8:	b570      	push	{r4, r5, r6, lr}
 80131ba:	460e      	mov	r6, r1
 80131bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80131c0:	2900      	cmp	r1, #0
 80131c2:	b096      	sub	sp, #88	; 0x58
 80131c4:	4614      	mov	r4, r2
 80131c6:	461d      	mov	r5, r3
 80131c8:	da07      	bge.n	80131da <__swhatbuf_r+0x22>
 80131ca:	2300      	movs	r3, #0
 80131cc:	602b      	str	r3, [r5, #0]
 80131ce:	89b3      	ldrh	r3, [r6, #12]
 80131d0:	061a      	lsls	r2, r3, #24
 80131d2:	d410      	bmi.n	80131f6 <__swhatbuf_r+0x3e>
 80131d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80131d8:	e00e      	b.n	80131f8 <__swhatbuf_r+0x40>
 80131da:	466a      	mov	r2, sp
 80131dc:	f000 f902 	bl	80133e4 <_fstat_r>
 80131e0:	2800      	cmp	r0, #0
 80131e2:	dbf2      	blt.n	80131ca <__swhatbuf_r+0x12>
 80131e4:	9a01      	ldr	r2, [sp, #4]
 80131e6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80131ea:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80131ee:	425a      	negs	r2, r3
 80131f0:	415a      	adcs	r2, r3
 80131f2:	602a      	str	r2, [r5, #0]
 80131f4:	e7ee      	b.n	80131d4 <__swhatbuf_r+0x1c>
 80131f6:	2340      	movs	r3, #64	; 0x40
 80131f8:	2000      	movs	r0, #0
 80131fa:	6023      	str	r3, [r4, #0]
 80131fc:	b016      	add	sp, #88	; 0x58
 80131fe:	bd70      	pop	{r4, r5, r6, pc}

08013200 <__smakebuf_r>:
 8013200:	898b      	ldrh	r3, [r1, #12]
 8013202:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013204:	079d      	lsls	r5, r3, #30
 8013206:	4606      	mov	r6, r0
 8013208:	460c      	mov	r4, r1
 801320a:	d507      	bpl.n	801321c <__smakebuf_r+0x1c>
 801320c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8013210:	6023      	str	r3, [r4, #0]
 8013212:	6123      	str	r3, [r4, #16]
 8013214:	2301      	movs	r3, #1
 8013216:	6163      	str	r3, [r4, #20]
 8013218:	b002      	add	sp, #8
 801321a:	bd70      	pop	{r4, r5, r6, pc}
 801321c:	ab01      	add	r3, sp, #4
 801321e:	466a      	mov	r2, sp
 8013220:	f7ff ffca 	bl	80131b8 <__swhatbuf_r>
 8013224:	9900      	ldr	r1, [sp, #0]
 8013226:	4605      	mov	r5, r0
 8013228:	4630      	mov	r0, r6
 801322a:	f7ff f97d 	bl	8012528 <_malloc_r>
 801322e:	b948      	cbnz	r0, 8013244 <__smakebuf_r+0x44>
 8013230:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013234:	059a      	lsls	r2, r3, #22
 8013236:	d4ef      	bmi.n	8013218 <__smakebuf_r+0x18>
 8013238:	f023 0303 	bic.w	r3, r3, #3
 801323c:	f043 0302 	orr.w	r3, r3, #2
 8013240:	81a3      	strh	r3, [r4, #12]
 8013242:	e7e3      	b.n	801320c <__smakebuf_r+0xc>
 8013244:	4b0d      	ldr	r3, [pc, #52]	; (801327c <__smakebuf_r+0x7c>)
 8013246:	62b3      	str	r3, [r6, #40]	; 0x28
 8013248:	89a3      	ldrh	r3, [r4, #12]
 801324a:	6020      	str	r0, [r4, #0]
 801324c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013250:	81a3      	strh	r3, [r4, #12]
 8013252:	9b00      	ldr	r3, [sp, #0]
 8013254:	6163      	str	r3, [r4, #20]
 8013256:	9b01      	ldr	r3, [sp, #4]
 8013258:	6120      	str	r0, [r4, #16]
 801325a:	b15b      	cbz	r3, 8013274 <__smakebuf_r+0x74>
 801325c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013260:	4630      	mov	r0, r6
 8013262:	f000 f8d1 	bl	8013408 <_isatty_r>
 8013266:	b128      	cbz	r0, 8013274 <__smakebuf_r+0x74>
 8013268:	89a3      	ldrh	r3, [r4, #12]
 801326a:	f023 0303 	bic.w	r3, r3, #3
 801326e:	f043 0301 	orr.w	r3, r3, #1
 8013272:	81a3      	strh	r3, [r4, #12]
 8013274:	89a0      	ldrh	r0, [r4, #12]
 8013276:	4305      	orrs	r5, r0
 8013278:	81a5      	strh	r5, [r4, #12]
 801327a:	e7cd      	b.n	8013218 <__smakebuf_r+0x18>
 801327c:	08013011 	.word	0x08013011

08013280 <_malloc_usable_size_r>:
 8013280:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013284:	1f18      	subs	r0, r3, #4
 8013286:	2b00      	cmp	r3, #0
 8013288:	bfbc      	itt	lt
 801328a:	580b      	ldrlt	r3, [r1, r0]
 801328c:	18c0      	addlt	r0, r0, r3
 801328e:	4770      	bx	lr

08013290 <_raise_r>:
 8013290:	291f      	cmp	r1, #31
 8013292:	b538      	push	{r3, r4, r5, lr}
 8013294:	4604      	mov	r4, r0
 8013296:	460d      	mov	r5, r1
 8013298:	d904      	bls.n	80132a4 <_raise_r+0x14>
 801329a:	2316      	movs	r3, #22
 801329c:	6003      	str	r3, [r0, #0]
 801329e:	f04f 30ff 	mov.w	r0, #4294967295
 80132a2:	bd38      	pop	{r3, r4, r5, pc}
 80132a4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80132a6:	b112      	cbz	r2, 80132ae <_raise_r+0x1e>
 80132a8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80132ac:	b94b      	cbnz	r3, 80132c2 <_raise_r+0x32>
 80132ae:	4620      	mov	r0, r4
 80132b0:	f000 f830 	bl	8013314 <_getpid_r>
 80132b4:	462a      	mov	r2, r5
 80132b6:	4601      	mov	r1, r0
 80132b8:	4620      	mov	r0, r4
 80132ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80132be:	f000 b817 	b.w	80132f0 <_kill_r>
 80132c2:	2b01      	cmp	r3, #1
 80132c4:	d00a      	beq.n	80132dc <_raise_r+0x4c>
 80132c6:	1c59      	adds	r1, r3, #1
 80132c8:	d103      	bne.n	80132d2 <_raise_r+0x42>
 80132ca:	2316      	movs	r3, #22
 80132cc:	6003      	str	r3, [r0, #0]
 80132ce:	2001      	movs	r0, #1
 80132d0:	e7e7      	b.n	80132a2 <_raise_r+0x12>
 80132d2:	2400      	movs	r4, #0
 80132d4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80132d8:	4628      	mov	r0, r5
 80132da:	4798      	blx	r3
 80132dc:	2000      	movs	r0, #0
 80132de:	e7e0      	b.n	80132a2 <_raise_r+0x12>

080132e0 <raise>:
 80132e0:	4b02      	ldr	r3, [pc, #8]	; (80132ec <raise+0xc>)
 80132e2:	4601      	mov	r1, r0
 80132e4:	6818      	ldr	r0, [r3, #0]
 80132e6:	f7ff bfd3 	b.w	8013290 <_raise_r>
 80132ea:	bf00      	nop
 80132ec:	20000044 	.word	0x20000044

080132f0 <_kill_r>:
 80132f0:	b538      	push	{r3, r4, r5, lr}
 80132f2:	4d07      	ldr	r5, [pc, #28]	; (8013310 <_kill_r+0x20>)
 80132f4:	2300      	movs	r3, #0
 80132f6:	4604      	mov	r4, r0
 80132f8:	4608      	mov	r0, r1
 80132fa:	4611      	mov	r1, r2
 80132fc:	602b      	str	r3, [r5, #0]
 80132fe:	f7fb fb4b 	bl	800e998 <_kill>
 8013302:	1c43      	adds	r3, r0, #1
 8013304:	d102      	bne.n	801330c <_kill_r+0x1c>
 8013306:	682b      	ldr	r3, [r5, #0]
 8013308:	b103      	cbz	r3, 801330c <_kill_r+0x1c>
 801330a:	6023      	str	r3, [r4, #0]
 801330c:	bd38      	pop	{r3, r4, r5, pc}
 801330e:	bf00      	nop
 8013310:	200108b4 	.word	0x200108b4

08013314 <_getpid_r>:
 8013314:	f7fb bb38 	b.w	800e988 <_getpid>

08013318 <__sread>:
 8013318:	b510      	push	{r4, lr}
 801331a:	460c      	mov	r4, r1
 801331c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013320:	f000 f894 	bl	801344c <_read_r>
 8013324:	2800      	cmp	r0, #0
 8013326:	bfab      	itete	ge
 8013328:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801332a:	89a3      	ldrhlt	r3, [r4, #12]
 801332c:	181b      	addge	r3, r3, r0
 801332e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8013332:	bfac      	ite	ge
 8013334:	6563      	strge	r3, [r4, #84]	; 0x54
 8013336:	81a3      	strhlt	r3, [r4, #12]
 8013338:	bd10      	pop	{r4, pc}

0801333a <__swrite>:
 801333a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801333e:	461f      	mov	r7, r3
 8013340:	898b      	ldrh	r3, [r1, #12]
 8013342:	05db      	lsls	r3, r3, #23
 8013344:	4605      	mov	r5, r0
 8013346:	460c      	mov	r4, r1
 8013348:	4616      	mov	r6, r2
 801334a:	d505      	bpl.n	8013358 <__swrite+0x1e>
 801334c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013350:	2302      	movs	r3, #2
 8013352:	2200      	movs	r2, #0
 8013354:	f000 f868 	bl	8013428 <_lseek_r>
 8013358:	89a3      	ldrh	r3, [r4, #12]
 801335a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801335e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8013362:	81a3      	strh	r3, [r4, #12]
 8013364:	4632      	mov	r2, r6
 8013366:	463b      	mov	r3, r7
 8013368:	4628      	mov	r0, r5
 801336a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801336e:	f000 b817 	b.w	80133a0 <_write_r>

08013372 <__sseek>:
 8013372:	b510      	push	{r4, lr}
 8013374:	460c      	mov	r4, r1
 8013376:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801337a:	f000 f855 	bl	8013428 <_lseek_r>
 801337e:	1c43      	adds	r3, r0, #1
 8013380:	89a3      	ldrh	r3, [r4, #12]
 8013382:	bf15      	itete	ne
 8013384:	6560      	strne	r0, [r4, #84]	; 0x54
 8013386:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801338a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801338e:	81a3      	strheq	r3, [r4, #12]
 8013390:	bf18      	it	ne
 8013392:	81a3      	strhne	r3, [r4, #12]
 8013394:	bd10      	pop	{r4, pc}

08013396 <__sclose>:
 8013396:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801339a:	f000 b813 	b.w	80133c4 <_close_r>
	...

080133a0 <_write_r>:
 80133a0:	b538      	push	{r3, r4, r5, lr}
 80133a2:	4d07      	ldr	r5, [pc, #28]	; (80133c0 <_write_r+0x20>)
 80133a4:	4604      	mov	r4, r0
 80133a6:	4608      	mov	r0, r1
 80133a8:	4611      	mov	r1, r2
 80133aa:	2200      	movs	r2, #0
 80133ac:	602a      	str	r2, [r5, #0]
 80133ae:	461a      	mov	r2, r3
 80133b0:	f7fb fb29 	bl	800ea06 <_write>
 80133b4:	1c43      	adds	r3, r0, #1
 80133b6:	d102      	bne.n	80133be <_write_r+0x1e>
 80133b8:	682b      	ldr	r3, [r5, #0]
 80133ba:	b103      	cbz	r3, 80133be <_write_r+0x1e>
 80133bc:	6023      	str	r3, [r4, #0]
 80133be:	bd38      	pop	{r3, r4, r5, pc}
 80133c0:	200108b4 	.word	0x200108b4

080133c4 <_close_r>:
 80133c4:	b538      	push	{r3, r4, r5, lr}
 80133c6:	4d06      	ldr	r5, [pc, #24]	; (80133e0 <_close_r+0x1c>)
 80133c8:	2300      	movs	r3, #0
 80133ca:	4604      	mov	r4, r0
 80133cc:	4608      	mov	r0, r1
 80133ce:	602b      	str	r3, [r5, #0]
 80133d0:	f7fb fb35 	bl	800ea3e <_close>
 80133d4:	1c43      	adds	r3, r0, #1
 80133d6:	d102      	bne.n	80133de <_close_r+0x1a>
 80133d8:	682b      	ldr	r3, [r5, #0]
 80133da:	b103      	cbz	r3, 80133de <_close_r+0x1a>
 80133dc:	6023      	str	r3, [r4, #0]
 80133de:	bd38      	pop	{r3, r4, r5, pc}
 80133e0:	200108b4 	.word	0x200108b4

080133e4 <_fstat_r>:
 80133e4:	b538      	push	{r3, r4, r5, lr}
 80133e6:	4d07      	ldr	r5, [pc, #28]	; (8013404 <_fstat_r+0x20>)
 80133e8:	2300      	movs	r3, #0
 80133ea:	4604      	mov	r4, r0
 80133ec:	4608      	mov	r0, r1
 80133ee:	4611      	mov	r1, r2
 80133f0:	602b      	str	r3, [r5, #0]
 80133f2:	f7fb fb30 	bl	800ea56 <_fstat>
 80133f6:	1c43      	adds	r3, r0, #1
 80133f8:	d102      	bne.n	8013400 <_fstat_r+0x1c>
 80133fa:	682b      	ldr	r3, [r5, #0]
 80133fc:	b103      	cbz	r3, 8013400 <_fstat_r+0x1c>
 80133fe:	6023      	str	r3, [r4, #0]
 8013400:	bd38      	pop	{r3, r4, r5, pc}
 8013402:	bf00      	nop
 8013404:	200108b4 	.word	0x200108b4

08013408 <_isatty_r>:
 8013408:	b538      	push	{r3, r4, r5, lr}
 801340a:	4d06      	ldr	r5, [pc, #24]	; (8013424 <_isatty_r+0x1c>)
 801340c:	2300      	movs	r3, #0
 801340e:	4604      	mov	r4, r0
 8013410:	4608      	mov	r0, r1
 8013412:	602b      	str	r3, [r5, #0]
 8013414:	f7fb fb2f 	bl	800ea76 <_isatty>
 8013418:	1c43      	adds	r3, r0, #1
 801341a:	d102      	bne.n	8013422 <_isatty_r+0x1a>
 801341c:	682b      	ldr	r3, [r5, #0]
 801341e:	b103      	cbz	r3, 8013422 <_isatty_r+0x1a>
 8013420:	6023      	str	r3, [r4, #0]
 8013422:	bd38      	pop	{r3, r4, r5, pc}
 8013424:	200108b4 	.word	0x200108b4

08013428 <_lseek_r>:
 8013428:	b538      	push	{r3, r4, r5, lr}
 801342a:	4d07      	ldr	r5, [pc, #28]	; (8013448 <_lseek_r+0x20>)
 801342c:	4604      	mov	r4, r0
 801342e:	4608      	mov	r0, r1
 8013430:	4611      	mov	r1, r2
 8013432:	2200      	movs	r2, #0
 8013434:	602a      	str	r2, [r5, #0]
 8013436:	461a      	mov	r2, r3
 8013438:	f7fb fb28 	bl	800ea8c <_lseek>
 801343c:	1c43      	adds	r3, r0, #1
 801343e:	d102      	bne.n	8013446 <_lseek_r+0x1e>
 8013440:	682b      	ldr	r3, [r5, #0]
 8013442:	b103      	cbz	r3, 8013446 <_lseek_r+0x1e>
 8013444:	6023      	str	r3, [r4, #0]
 8013446:	bd38      	pop	{r3, r4, r5, pc}
 8013448:	200108b4 	.word	0x200108b4

0801344c <_read_r>:
 801344c:	b538      	push	{r3, r4, r5, lr}
 801344e:	4d07      	ldr	r5, [pc, #28]	; (801346c <_read_r+0x20>)
 8013450:	4604      	mov	r4, r0
 8013452:	4608      	mov	r0, r1
 8013454:	4611      	mov	r1, r2
 8013456:	2200      	movs	r2, #0
 8013458:	602a      	str	r2, [r5, #0]
 801345a:	461a      	mov	r2, r3
 801345c:	f7fb fab6 	bl	800e9cc <_read>
 8013460:	1c43      	adds	r3, r0, #1
 8013462:	d102      	bne.n	801346a <_read_r+0x1e>
 8013464:	682b      	ldr	r3, [r5, #0]
 8013466:	b103      	cbz	r3, 801346a <_read_r+0x1e>
 8013468:	6023      	str	r3, [r4, #0]
 801346a:	bd38      	pop	{r3, r4, r5, pc}
 801346c:	200108b4 	.word	0x200108b4

08013470 <ceil>:
 8013470:	ec51 0b10 	vmov	r0, r1, d0
 8013474:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013478:	f3c1 570a 	ubfx	r7, r1, #20, #11
 801347c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8013480:	2e13      	cmp	r6, #19
 8013482:	ee10 5a10 	vmov	r5, s0
 8013486:	ee10 8a10 	vmov	r8, s0
 801348a:	460c      	mov	r4, r1
 801348c:	dc30      	bgt.n	80134f0 <ceil+0x80>
 801348e:	2e00      	cmp	r6, #0
 8013490:	da12      	bge.n	80134b8 <ceil+0x48>
 8013492:	a335      	add	r3, pc, #212	; (adr r3, 8013568 <ceil+0xf8>)
 8013494:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013498:	f7ec ff10 	bl	80002bc <__adddf3>
 801349c:	2200      	movs	r2, #0
 801349e:	2300      	movs	r3, #0
 80134a0:	f7ed fb52 	bl	8000b48 <__aeabi_dcmpgt>
 80134a4:	b128      	cbz	r0, 80134b2 <ceil+0x42>
 80134a6:	2c00      	cmp	r4, #0
 80134a8:	db55      	blt.n	8013556 <ceil+0xe6>
 80134aa:	432c      	orrs	r4, r5
 80134ac:	d057      	beq.n	801355e <ceil+0xee>
 80134ae:	4c30      	ldr	r4, [pc, #192]	; (8013570 <ceil+0x100>)
 80134b0:	2500      	movs	r5, #0
 80134b2:	4621      	mov	r1, r4
 80134b4:	4628      	mov	r0, r5
 80134b6:	e025      	b.n	8013504 <ceil+0x94>
 80134b8:	4f2e      	ldr	r7, [pc, #184]	; (8013574 <ceil+0x104>)
 80134ba:	4137      	asrs	r7, r6
 80134bc:	ea01 0307 	and.w	r3, r1, r7
 80134c0:	4303      	orrs	r3, r0
 80134c2:	d01f      	beq.n	8013504 <ceil+0x94>
 80134c4:	a328      	add	r3, pc, #160	; (adr r3, 8013568 <ceil+0xf8>)
 80134c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80134ca:	f7ec fef7 	bl	80002bc <__adddf3>
 80134ce:	2200      	movs	r2, #0
 80134d0:	2300      	movs	r3, #0
 80134d2:	f7ed fb39 	bl	8000b48 <__aeabi_dcmpgt>
 80134d6:	2800      	cmp	r0, #0
 80134d8:	d0eb      	beq.n	80134b2 <ceil+0x42>
 80134da:	2c00      	cmp	r4, #0
 80134dc:	bfc2      	ittt	gt
 80134de:	f44f 1380 	movgt.w	r3, #1048576	; 0x100000
 80134e2:	fa43 f606 	asrgt.w	r6, r3, r6
 80134e6:	19a4      	addgt	r4, r4, r6
 80134e8:	ea24 0407 	bic.w	r4, r4, r7
 80134ec:	2500      	movs	r5, #0
 80134ee:	e7e0      	b.n	80134b2 <ceil+0x42>
 80134f0:	2e33      	cmp	r6, #51	; 0x33
 80134f2:	dd0b      	ble.n	801350c <ceil+0x9c>
 80134f4:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80134f8:	d104      	bne.n	8013504 <ceil+0x94>
 80134fa:	ee10 2a10 	vmov	r2, s0
 80134fe:	460b      	mov	r3, r1
 8013500:	f7ec fedc 	bl	80002bc <__adddf3>
 8013504:	ec41 0b10 	vmov	d0, r0, r1
 8013508:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801350c:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8013510:	f04f 33ff 	mov.w	r3, #4294967295
 8013514:	fa23 f707 	lsr.w	r7, r3, r7
 8013518:	4207      	tst	r7, r0
 801351a:	d0f3      	beq.n	8013504 <ceil+0x94>
 801351c:	a312      	add	r3, pc, #72	; (adr r3, 8013568 <ceil+0xf8>)
 801351e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013522:	f7ec fecb 	bl	80002bc <__adddf3>
 8013526:	2200      	movs	r2, #0
 8013528:	2300      	movs	r3, #0
 801352a:	f7ed fb0d 	bl	8000b48 <__aeabi_dcmpgt>
 801352e:	2800      	cmp	r0, #0
 8013530:	d0bf      	beq.n	80134b2 <ceil+0x42>
 8013532:	2c00      	cmp	r4, #0
 8013534:	dd02      	ble.n	801353c <ceil+0xcc>
 8013536:	2e14      	cmp	r6, #20
 8013538:	d103      	bne.n	8013542 <ceil+0xd2>
 801353a:	3401      	adds	r4, #1
 801353c:	ea25 0507 	bic.w	r5, r5, r7
 8013540:	e7b7      	b.n	80134b2 <ceil+0x42>
 8013542:	2301      	movs	r3, #1
 8013544:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8013548:	fa03 f606 	lsl.w	r6, r3, r6
 801354c:	4435      	add	r5, r6
 801354e:	4545      	cmp	r5, r8
 8013550:	bf38      	it	cc
 8013552:	18e4      	addcc	r4, r4, r3
 8013554:	e7f2      	b.n	801353c <ceil+0xcc>
 8013556:	2500      	movs	r5, #0
 8013558:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 801355c:	e7a9      	b.n	80134b2 <ceil+0x42>
 801355e:	4625      	mov	r5, r4
 8013560:	e7a7      	b.n	80134b2 <ceil+0x42>
 8013562:	bf00      	nop
 8013564:	f3af 8000 	nop.w
 8013568:	8800759c 	.word	0x8800759c
 801356c:	7e37e43c 	.word	0x7e37e43c
 8013570:	3ff00000 	.word	0x3ff00000
 8013574:	000fffff 	.word	0x000fffff

08013578 <_init>:
 8013578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801357a:	bf00      	nop
 801357c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801357e:	bc08      	pop	{r3}
 8013580:	469e      	mov	lr, r3
 8013582:	4770      	bx	lr

08013584 <_fini>:
 8013584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013586:	bf00      	nop
 8013588:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801358a:	bc08      	pop	{r3}
 801358c:	469e      	mov	lr, r3
 801358e:	4770      	bx	lr
